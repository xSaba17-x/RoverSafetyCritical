
master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db04  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e4  0800dca8  0800dca8  0001dca8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e18c  0800e18c  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e18c  0800e18c  0001e18c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e194  0800e194  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e194  0800e194  0001e194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e198  0800e198  0001e198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800e19c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000050d4  200001d8  0800e374  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200052ac  0800e374  000252ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002529e  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000055db  00000000  00000000  000454e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d98  00000000  00000000  0004aac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016ec  00000000  00000000  0004c860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d9e2  00000000  00000000  0004df4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000265c5  00000000  00000000  0006b92e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ab1d0  00000000  00000000  00091ef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008b78  00000000  00000000  0013d0c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00145c3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800dc8c 	.word	0x0800dc8c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800dc8c 	.word	0x0800dc8c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <Ultrasound>:
TaskHandle_t xHandle2 = NULL; ///< Task handle for the Check_Danger task.



void Ultrasound( void *pvParameters )
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
    #if(VERBOSE == 1)
        printf("\r\nBegin Ultrasound at %ld\r\n", pdMS_TO_TICKS(xTaskGetTickCount()));
    #endif


    panda_HCSR04_reset(&ultrasound_left, &ultrasound_middle, &ultrasound_right);
 8000efc:	4a05      	ldr	r2, [pc, #20]	; (8000f14 <Ultrasound+0x20>)
 8000efe:	4906      	ldr	r1, [pc, #24]	; (8000f18 <Ultrasound+0x24>)
 8000f00:	4806      	ldr	r0, [pc, #24]	; (8000f1c <Ultrasound+0x28>)
 8000f02:	f001 fb0d 	bl	8002520 <panda_HCSR04_reset>
    //panda_mpu6050_read(&MPU6050);
    panda_psx_read_gamepad(&psx);
 8000f06:	4806      	ldr	r0, [pc, #24]	; (8000f20 <Ultrasound+0x2c>)
 8000f08:	f001 fd03 	bl	8002912 <panda_psx_read_gamepad>
    #if(VERBOSE == 1)
        printf("Exit Ultrasound at %ld\r\n", pdMS_TO_TICKS(xTaskGetTickCount()));
    #endif


}
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	200003d4 	.word	0x200003d4
 8000f18:	200003b0 	.word	0x200003b0
 8000f1c:	2000038c 	.word	0x2000038c
 8000f20:	20000378 	.word	0x20000378

08000f24 <Check_Danger>:



void Check_Danger( void *pvParameters )
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]

    #if(VERBOSE == 1)
        printf("Begin Check Danger at %ld\r\n", pdMS_TO_TICKS(xTaskGetTickCount()));
    #endif

	Global_Struct_Master[BitVariables] = 0x00;
 8000f2c:	4b28      	ldr	r3, [pc, #160]	; (8000fd0 <Check_Danger+0xac>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	751a      	strb	r2, [r3, #20]

    ultrasound_value_left = panda_HCSR04_get_distance(&ultrasound_left);
 8000f32:	4828      	ldr	r0, [pc, #160]	; (8000fd4 <Check_Danger+0xb0>)
 8000f34:	f001 fb49 	bl	80025ca <panda_HCSR04_get_distance>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	4b26      	ldr	r3, [pc, #152]	; (8000fd8 <Check_Danger+0xb4>)
 8000f3e:	801a      	strh	r2, [r3, #0]
	Global_Struct_Master[DistanceLeft_High] = (uint8_t) ((ultrasound_value_left & 0xFF00) >> 8);
 8000f40:	4b25      	ldr	r3, [pc, #148]	; (8000fd8 <Check_Danger+0xb4>)
 8000f42:	881b      	ldrh	r3, [r3, #0]
 8000f44:	0a1b      	lsrs	r3, r3, #8
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	4b21      	ldr	r3, [pc, #132]	; (8000fd0 <Check_Danger+0xac>)
 8000f4c:	739a      	strb	r2, [r3, #14]
	Global_Struct_Master[DistanceLeft_Low] = (uint8_t) (ultrasound_value_left & 0x00FF);
 8000f4e:	4b22      	ldr	r3, [pc, #136]	; (8000fd8 <Check_Danger+0xb4>)
 8000f50:	881b      	ldrh	r3, [r3, #0]
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	4b1e      	ldr	r3, [pc, #120]	; (8000fd0 <Check_Danger+0xac>)
 8000f56:	73da      	strb	r2, [r3, #15]



    ultrasound_value_middle = panda_HCSR04_get_distance(&ultrasound_middle);
 8000f58:	4820      	ldr	r0, [pc, #128]	; (8000fdc <Check_Danger+0xb8>)
 8000f5a:	f001 fb36 	bl	80025ca <panda_HCSR04_get_distance>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	461a      	mov	r2, r3
 8000f62:	4b1f      	ldr	r3, [pc, #124]	; (8000fe0 <Check_Danger+0xbc>)
 8000f64:	801a      	strh	r2, [r3, #0]
	Global_Struct_Master[DistanceMiddle_High] = (uint8_t) ((ultrasound_value_middle & 0xFF00) >> 8);
 8000f66:	4b1e      	ldr	r3, [pc, #120]	; (8000fe0 <Check_Danger+0xbc>)
 8000f68:	881b      	ldrh	r3, [r3, #0]
 8000f6a:	0a1b      	lsrs	r3, r3, #8
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <Check_Danger+0xac>)
 8000f72:	731a      	strb	r2, [r3, #12]
	Global_Struct_Master[DistanceMiddle_Low] = (uint8_t) (ultrasound_value_middle & 0x00FF);
 8000f74:	4b1a      	ldr	r3, [pc, #104]	; (8000fe0 <Check_Danger+0xbc>)
 8000f76:	881b      	ldrh	r3, [r3, #0]
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <Check_Danger+0xac>)
 8000f7c:	735a      	strb	r2, [r3, #13]


    ultrasound_value_right = panda_HCSR04_get_distance(&ultrasound_right);
 8000f7e:	4819      	ldr	r0, [pc, #100]	; (8000fe4 <Check_Danger+0xc0>)
 8000f80:	f001 fb23 	bl	80025ca <panda_HCSR04_get_distance>
 8000f84:	4603      	mov	r3, r0
 8000f86:	461a      	mov	r2, r3
 8000f88:	4b17      	ldr	r3, [pc, #92]	; (8000fe8 <Check_Danger+0xc4>)
 8000f8a:	801a      	strh	r2, [r3, #0]
	Global_Struct_Master[DistanceRight_High] = (uint8_t) ((ultrasound_value_right & 0xFF00) >> 8);
 8000f8c:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <Check_Danger+0xc4>)
 8000f8e:	881b      	ldrh	r3, [r3, #0]
 8000f90:	0a1b      	lsrs	r3, r3, #8
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	b2da      	uxtb	r2, r3
 8000f96:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <Check_Danger+0xac>)
 8000f98:	741a      	strb	r2, [r3, #16]
	Global_Struct_Master[DistanceRight_Low] = (uint8_t) (ultrasound_value_right & 0x00FF);
 8000f9a:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <Check_Danger+0xc4>)
 8000f9c:	881b      	ldrh	r3, [r3, #0]
 8000f9e:	b2da      	uxtb	r2, r3
 8000fa0:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <Check_Danger+0xac>)
 8000fa2:	745a      	strb	r2, [r3, #17]
        This task creates the aperiodic tasks, based on the control var value.
        This variable was set to 1 in case of critical values detected by the sensors;
        if set to 1, it directly proceeds to execution,
        otherwise, it continues normally with the "standard" control cycle.
    */
	vSchedulerAperiodicJobCreate(Psx, "Psx", NULL, pdMS_TO_TICKS( 3 ) );
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	4910      	ldr	r1, [pc, #64]	; (8000fec <Check_Danger+0xc8>)
 8000faa:	4811      	ldr	r0, [pc, #68]	; (8000ff0 <Check_Danger+0xcc>)
 8000fac:	f002 f888 	bl	80030c0 <vSchedulerAperiodicJobCreate>
	//vSchedulerAperiodicJobCreate(Accelerometer, "Accelerometer", NULL, pdMS_TO_TICKS( 1 ) ); //xSaba17:
	vSchedulerAperiodicJobCreate(Comunication, "Comunication", NULL, pdMS_TO_TICKS( 10 ) );
 8000fb0:	230a      	movs	r3, #10
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	490f      	ldr	r1, [pc, #60]	; (8000ff4 <Check_Danger+0xd0>)
 8000fb6:	4810      	ldr	r0, [pc, #64]	; (8000ff8 <Check_Danger+0xd4>)
 8000fb8:	f002 f882 	bl	80030c0 <vSchedulerAperiodicJobCreate>
	vSchedulerAperiodicJobCreate(Execution, "Execution", NULL, pdMS_TO_TICKS( 7 ) );
 8000fbc:	2307      	movs	r3, #7
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	490e      	ldr	r1, [pc, #56]	; (8000ffc <Check_Danger+0xd8>)
 8000fc2:	480f      	ldr	r0, [pc, #60]	; (8001000 <Check_Danger+0xdc>)
 8000fc4:	f002 f87c 	bl	80030c0 <vSchedulerAperiodicJobCreate>

    #if(VERBOSE == 1)
        printf("Exit Check Danger at %ld\r\n", pdMS_TO_TICKS(xTaskGetTickCount()));
    #endif

}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	200002fc 	.word	0x200002fc
 8000fd4:	2000038c 	.word	0x2000038c
 8000fd8:	200001f8 	.word	0x200001f8
 8000fdc:	200003b0 	.word	0x200003b0
 8000fe0:	200001f6 	.word	0x200001f6
 8000fe4:	200003d4 	.word	0x200003d4
 8000fe8:	200001fa 	.word	0x200001fa
 8000fec:	0800dcb0 	.word	0x0800dcb0
 8000ff0:	08001005 	.word	0x08001005
 8000ff4:	0800dcb4 	.word	0x0800dcb4
 8000ff8:	080012e9 	.word	0x080012e9
 8000ffc:	0800dcc4 	.word	0x0800dcc4
 8001000:	08001329 	.word	0x08001329

08001004 <Psx>:
//}



void Psx( void *pvParameters )
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
    #if(VERBOSE == 1)
        printf("Begin Psx at %ld\r\n", pdMS_TO_TICKS(xTaskGetTickCount()));
    #endif

	if(panda_psx_is_on(&psx) == PSX_OK){
 800100c:	489d      	ldr	r0, [pc, #628]	; (8001284 <Psx+0x280>)
 800100e:	f001 fd09 	bl	8002a24 <panda_psx_is_on>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	f040 8159 	bne.w	80012cc <Psx+0x2c8>
		if(panda_psx_get_command(&psx, TRIANGLE)){
 800101a:	2124      	movs	r1, #36	; 0x24
 800101c:	4899      	ldr	r0, [pc, #612]	; (8001284 <Psx+0x280>)
 800101e:	f001 fcae 	bl	800297e <panda_psx_get_command>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d006      	beq.n	8001036 <Psx+0x32>
			Global_Struct_Master[DriveSpeed] = 128;
 8001028:	4b97      	ldr	r3, [pc, #604]	; (8001288 <Psx+0x284>)
 800102a:	2280      	movs	r2, #128	; 0x80
 800102c:	749a      	strb	r2, [r3, #18]
			Global_Struct_Master[TurnSpeed] = 128;
 800102e:	4b96      	ldr	r3, [pc, #600]	; (8001288 <Psx+0x284>)
 8001030:	2280      	movs	r2, #128	; 0x80
 8001032:	74da      	strb	r2, [r3, #19]
 8001034:	e0e8      	b.n	8001208 <Psx+0x204>
		}else{
			if(panda_psx_is_analog(&psx)==PSX_Analog){
 8001036:	4893      	ldr	r0, [pc, #588]	; (8001284 <Psx+0x280>)
 8001038:	f001 fd06 	bl	8002a48 <panda_psx_is_analog>
 800103c:	4603      	mov	r3, r0
 800103e:	2b01      	cmp	r3, #1
 8001040:	d110      	bne.n	8001064 <Psx+0x60>
				Global_Struct_Master[DriveSpeed] = panda_psx_get_analog_intensity(&psx, LEFT_Y_AXIS);
 8001042:	2108      	movs	r1, #8
 8001044:	488f      	ldr	r0, [pc, #572]	; (8001284 <Psx+0x280>)
 8001046:	f001 fcc1 	bl	80029cc <panda_psx_get_analog_intensity>
 800104a:	4603      	mov	r3, r0
 800104c:	461a      	mov	r2, r3
 800104e:	4b8e      	ldr	r3, [pc, #568]	; (8001288 <Psx+0x284>)
 8001050:	749a      	strb	r2, [r3, #18]
				Global_Struct_Master[TurnSpeed] = panda_psx_get_analog_intensity(&psx, LEFT_X_AXIS);
 8001052:	2107      	movs	r1, #7
 8001054:	488b      	ldr	r0, [pc, #556]	; (8001284 <Psx+0x280>)
 8001056:	f001 fcb9 	bl	80029cc <panda_psx_get_analog_intensity>
 800105a:	4603      	mov	r3, r0
 800105c:	461a      	mov	r2, r3
 800105e:	4b8a      	ldr	r3, [pc, #552]	; (8001288 <Psx+0x284>)
 8001060:	74da      	strb	r2, [r3, #19]
 8001062:	e0d1      	b.n	8001208 <Psx+0x204>
			}else{
				if(degradato == 0){
 8001064:	4b89      	ldr	r3, [pc, #548]	; (800128c <Psx+0x288>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d157      	bne.n	800111c <Psx+0x118>
					if (panda_psx_get_command(&psx, CROSS) && Global_Struct_Master[DriveSpeed] < 254){
 800106c:	2126      	movs	r1, #38	; 0x26
 800106e:	4885      	ldr	r0, [pc, #532]	; (8001284 <Psx+0x280>)
 8001070:	f001 fc85 	bl	800297e <panda_psx_get_command>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d009      	beq.n	800108e <Psx+0x8a>
 800107a:	4b83      	ldr	r3, [pc, #524]	; (8001288 <Psx+0x284>)
 800107c:	7c9b      	ldrb	r3, [r3, #18]
 800107e:	2bfd      	cmp	r3, #253	; 0xfd
 8001080:	d805      	bhi.n	800108e <Psx+0x8a>
						Global_Struct_Master[DriveSpeed] += 2;
 8001082:	4b81      	ldr	r3, [pc, #516]	; (8001288 <Psx+0x284>)
 8001084:	7c9b      	ldrb	r3, [r3, #18]
 8001086:	3302      	adds	r3, #2
 8001088:	b2da      	uxtb	r2, r3
 800108a:	4b7f      	ldr	r3, [pc, #508]	; (8001288 <Psx+0x284>)
 800108c:	749a      	strb	r2, [r3, #18]
					}
					if (panda_psx_get_command(&psx, SQUARE) && Global_Struct_Master[DriveSpeed] > 0 ){
 800108e:	2127      	movs	r1, #39	; 0x27
 8001090:	487c      	ldr	r0, [pc, #496]	; (8001284 <Psx+0x280>)
 8001092:	f001 fc74 	bl	800297e <panda_psx_get_command>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d009      	beq.n	80010b0 <Psx+0xac>
 800109c:	4b7a      	ldr	r3, [pc, #488]	; (8001288 <Psx+0x284>)
 800109e:	7c9b      	ldrb	r3, [r3, #18]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d005      	beq.n	80010b0 <Psx+0xac>
						Global_Struct_Master[DriveSpeed] -= 2;
 80010a4:	4b78      	ldr	r3, [pc, #480]	; (8001288 <Psx+0x284>)
 80010a6:	7c9b      	ldrb	r3, [r3, #18]
 80010a8:	3b02      	subs	r3, #2
 80010aa:	b2da      	uxtb	r2, r3
 80010ac:	4b76      	ldr	r3, [pc, #472]	; (8001288 <Psx+0x284>)
 80010ae:	749a      	strb	r2, [r3, #18]
					}
					if (panda_psx_get_command(&psx, DPAD_LEFT) || panda_psx_get_command(&psx, DPAD_RIGHT)){
 80010b0:	211f      	movs	r1, #31
 80010b2:	4874      	ldr	r0, [pc, #464]	; (8001284 <Psx+0x280>)
 80010b4:	f001 fc63 	bl	800297e <panda_psx_get_command>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d106      	bne.n	80010cc <Psx+0xc8>
 80010be:	211d      	movs	r1, #29
 80010c0:	4870      	ldr	r0, [pc, #448]	; (8001284 <Psx+0x280>)
 80010c2:	f001 fc5c 	bl	800297e <panda_psx_get_command>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d023      	beq.n	8001114 <Psx+0x110>
						if (panda_psx_get_command(&psx, DPAD_LEFT) && Global_Struct_Master[TurnSpeed] > 0){
 80010cc:	211f      	movs	r1, #31
 80010ce:	486d      	ldr	r0, [pc, #436]	; (8001284 <Psx+0x280>)
 80010d0:	f001 fc55 	bl	800297e <panda_psx_get_command>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d009      	beq.n	80010ee <Psx+0xea>
 80010da:	4b6b      	ldr	r3, [pc, #428]	; (8001288 <Psx+0x284>)
 80010dc:	7cdb      	ldrb	r3, [r3, #19]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d005      	beq.n	80010ee <Psx+0xea>
							Global_Struct_Master[TurnSpeed] -= 2;
 80010e2:	4b69      	ldr	r3, [pc, #420]	; (8001288 <Psx+0x284>)
 80010e4:	7cdb      	ldrb	r3, [r3, #19]
 80010e6:	3b02      	subs	r3, #2
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	4b67      	ldr	r3, [pc, #412]	; (8001288 <Psx+0x284>)
 80010ec:	74da      	strb	r2, [r3, #19]
						}
						if (panda_psx_get_command(&psx, DPAD_RIGHT) && Global_Struct_Master[TurnSpeed] < 254){
 80010ee:	211d      	movs	r1, #29
 80010f0:	4864      	ldr	r0, [pc, #400]	; (8001284 <Psx+0x280>)
 80010f2:	f001 fc44 	bl	800297e <panda_psx_get_command>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	f000 8082 	beq.w	8001202 <Psx+0x1fe>
 80010fe:	4b62      	ldr	r3, [pc, #392]	; (8001288 <Psx+0x284>)
 8001100:	7cdb      	ldrb	r3, [r3, #19]
 8001102:	2bfd      	cmp	r3, #253	; 0xfd
 8001104:	d87d      	bhi.n	8001202 <Psx+0x1fe>
							Global_Struct_Master[TurnSpeed] += 2;
 8001106:	4b60      	ldr	r3, [pc, #384]	; (8001288 <Psx+0x284>)
 8001108:	7cdb      	ldrb	r3, [r3, #19]
 800110a:	3302      	adds	r3, #2
 800110c:	b2da      	uxtb	r2, r3
 800110e:	4b5e      	ldr	r3, [pc, #376]	; (8001288 <Psx+0x284>)
 8001110:	74da      	strb	r2, [r3, #19]
						if (panda_psx_get_command(&psx, DPAD_RIGHT) && Global_Struct_Master[TurnSpeed] < 254){
 8001112:	e076      	b.n	8001202 <Psx+0x1fe>
						}
					}else{
						Global_Struct_Master[TurnSpeed] = 128;
 8001114:	4b5c      	ldr	r3, [pc, #368]	; (8001288 <Psx+0x284>)
 8001116:	2280      	movs	r2, #128	; 0x80
 8001118:	74da      	strb	r2, [r3, #19]
 800111a:	e075      	b.n	8001208 <Psx+0x204>
					}
				}else{

					if(Global_Struct_Master[DriveSpeed] >= 191)
 800111c:	4b5a      	ldr	r3, [pc, #360]	; (8001288 <Psx+0x284>)
 800111e:	7c9b      	ldrb	r3, [r3, #18]
 8001120:	2bbe      	cmp	r3, #190	; 0xbe
 8001122:	d902      	bls.n	800112a <Psx+0x126>
						Global_Struct_Master[DriveSpeed] = 191;
 8001124:	4b58      	ldr	r3, [pc, #352]	; (8001288 <Psx+0x284>)
 8001126:	22bf      	movs	r2, #191	; 0xbf
 8001128:	749a      	strb	r2, [r3, #18]
					if(Global_Struct_Master[TurnSpeed] >= 191)
 800112a:	4b57      	ldr	r3, [pc, #348]	; (8001288 <Psx+0x284>)
 800112c:	7cdb      	ldrb	r3, [r3, #19]
 800112e:	2bbe      	cmp	r3, #190	; 0xbe
 8001130:	d902      	bls.n	8001138 <Psx+0x134>
						Global_Struct_Master[TurnSpeed] = 191;
 8001132:	4b55      	ldr	r3, [pc, #340]	; (8001288 <Psx+0x284>)
 8001134:	22bf      	movs	r2, #191	; 0xbf
 8001136:	74da      	strb	r2, [r3, #19]

					if(Global_Struct_Master[DriveSpeed] <= 64)
 8001138:	4b53      	ldr	r3, [pc, #332]	; (8001288 <Psx+0x284>)
 800113a:	7c9b      	ldrb	r3, [r3, #18]
 800113c:	2b40      	cmp	r3, #64	; 0x40
 800113e:	d802      	bhi.n	8001146 <Psx+0x142>
						Global_Struct_Master[DriveSpeed] = 64;
 8001140:	4b51      	ldr	r3, [pc, #324]	; (8001288 <Psx+0x284>)
 8001142:	2240      	movs	r2, #64	; 0x40
 8001144:	749a      	strb	r2, [r3, #18]
					if(Global_Struct_Master[TurnSpeed] <= 64)
 8001146:	4b50      	ldr	r3, [pc, #320]	; (8001288 <Psx+0x284>)
 8001148:	7cdb      	ldrb	r3, [r3, #19]
 800114a:	2b40      	cmp	r3, #64	; 0x40
 800114c:	d802      	bhi.n	8001154 <Psx+0x150>
						Global_Struct_Master[TurnSpeed] = 64;
 800114e:	4b4e      	ldr	r3, [pc, #312]	; (8001288 <Psx+0x284>)
 8001150:	2240      	movs	r2, #64	; 0x40
 8001152:	74da      	strb	r2, [r3, #19]

					if (panda_psx_get_command(&psx, CROSS) && Global_Struct_Master[DriveSpeed] < 191){
 8001154:	2126      	movs	r1, #38	; 0x26
 8001156:	484b      	ldr	r0, [pc, #300]	; (8001284 <Psx+0x280>)
 8001158:	f001 fc11 	bl	800297e <panda_psx_get_command>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d009      	beq.n	8001176 <Psx+0x172>
 8001162:	4b49      	ldr	r3, [pc, #292]	; (8001288 <Psx+0x284>)
 8001164:	7c9b      	ldrb	r3, [r3, #18]
 8001166:	2bbe      	cmp	r3, #190	; 0xbe
 8001168:	d805      	bhi.n	8001176 <Psx+0x172>
						Global_Struct_Master[DriveSpeed] += 2;
 800116a:	4b47      	ldr	r3, [pc, #284]	; (8001288 <Psx+0x284>)
 800116c:	7c9b      	ldrb	r3, [r3, #18]
 800116e:	3302      	adds	r3, #2
 8001170:	b2da      	uxtb	r2, r3
 8001172:	4b45      	ldr	r3, [pc, #276]	; (8001288 <Psx+0x284>)
 8001174:	749a      	strb	r2, [r3, #18]
					}
					if (panda_psx_get_command(&psx, SQUARE) && Global_Struct_Master[DriveSpeed] > 65 ){
 8001176:	2127      	movs	r1, #39	; 0x27
 8001178:	4842      	ldr	r0, [pc, #264]	; (8001284 <Psx+0x280>)
 800117a:	f001 fc00 	bl	800297e <panda_psx_get_command>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d009      	beq.n	8001198 <Psx+0x194>
 8001184:	4b40      	ldr	r3, [pc, #256]	; (8001288 <Psx+0x284>)
 8001186:	7c9b      	ldrb	r3, [r3, #18]
 8001188:	2b41      	cmp	r3, #65	; 0x41
 800118a:	d905      	bls.n	8001198 <Psx+0x194>
						Global_Struct_Master[DriveSpeed] -= 2;
 800118c:	4b3e      	ldr	r3, [pc, #248]	; (8001288 <Psx+0x284>)
 800118e:	7c9b      	ldrb	r3, [r3, #18]
 8001190:	3b02      	subs	r3, #2
 8001192:	b2da      	uxtb	r2, r3
 8001194:	4b3c      	ldr	r3, [pc, #240]	; (8001288 <Psx+0x284>)
 8001196:	749a      	strb	r2, [r3, #18]
					}
					if (panda_psx_get_command(&psx, DPAD_LEFT) || panda_psx_get_command(&psx, DPAD_RIGHT)){
 8001198:	211f      	movs	r1, #31
 800119a:	483a      	ldr	r0, [pc, #232]	; (8001284 <Psx+0x280>)
 800119c:	f001 fbef 	bl	800297e <panda_psx_get_command>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d106      	bne.n	80011b4 <Psx+0x1b0>
 80011a6:	211d      	movs	r1, #29
 80011a8:	4836      	ldr	r0, [pc, #216]	; (8001284 <Psx+0x280>)
 80011aa:	f001 fbe8 	bl	800297e <panda_psx_get_command>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d022      	beq.n	80011fa <Psx+0x1f6>
						if (panda_psx_get_command(&psx, DPAD_LEFT) && Global_Struct_Master[TurnSpeed] > 65){
 80011b4:	211f      	movs	r1, #31
 80011b6:	4833      	ldr	r0, [pc, #204]	; (8001284 <Psx+0x280>)
 80011b8:	f001 fbe1 	bl	800297e <panda_psx_get_command>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d009      	beq.n	80011d6 <Psx+0x1d2>
 80011c2:	4b31      	ldr	r3, [pc, #196]	; (8001288 <Psx+0x284>)
 80011c4:	7cdb      	ldrb	r3, [r3, #19]
 80011c6:	2b41      	cmp	r3, #65	; 0x41
 80011c8:	d905      	bls.n	80011d6 <Psx+0x1d2>
							Global_Struct_Master[TurnSpeed] -= 2;
 80011ca:	4b2f      	ldr	r3, [pc, #188]	; (8001288 <Psx+0x284>)
 80011cc:	7cdb      	ldrb	r3, [r3, #19]
 80011ce:	3b02      	subs	r3, #2
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	4b2d      	ldr	r3, [pc, #180]	; (8001288 <Psx+0x284>)
 80011d4:	74da      	strb	r2, [r3, #19]
						}
						if (panda_psx_get_command(&psx, DPAD_RIGHT) && Global_Struct_Master[TurnSpeed] < 191){
 80011d6:	211d      	movs	r1, #29
 80011d8:	482a      	ldr	r0, [pc, #168]	; (8001284 <Psx+0x280>)
 80011da:	f001 fbd0 	bl	800297e <panda_psx_get_command>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d010      	beq.n	8001206 <Psx+0x202>
 80011e4:	4b28      	ldr	r3, [pc, #160]	; (8001288 <Psx+0x284>)
 80011e6:	7cdb      	ldrb	r3, [r3, #19]
 80011e8:	2bbe      	cmp	r3, #190	; 0xbe
 80011ea:	d80c      	bhi.n	8001206 <Psx+0x202>
							Global_Struct_Master[TurnSpeed] += 2;
 80011ec:	4b26      	ldr	r3, [pc, #152]	; (8001288 <Psx+0x284>)
 80011ee:	7cdb      	ldrb	r3, [r3, #19]
 80011f0:	3302      	adds	r3, #2
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	4b24      	ldr	r3, [pc, #144]	; (8001288 <Psx+0x284>)
 80011f6:	74da      	strb	r2, [r3, #19]
						if (panda_psx_get_command(&psx, DPAD_RIGHT) && Global_Struct_Master[TurnSpeed] < 191){
 80011f8:	e005      	b.n	8001206 <Psx+0x202>
						}
					}else{
						Global_Struct_Master[TurnSpeed] = 128;
 80011fa:	4b23      	ldr	r3, [pc, #140]	; (8001288 <Psx+0x284>)
 80011fc:	2280      	movs	r2, #128	; 0x80
 80011fe:	74da      	strb	r2, [r3, #19]
 8001200:	e002      	b.n	8001208 <Psx+0x204>
						if (panda_psx_get_command(&psx, DPAD_RIGHT) && Global_Struct_Master[TurnSpeed] < 254){
 8001202:	bf00      	nop
 8001204:	e000      	b.n	8001208 <Psx+0x204>
						if (panda_psx_get_command(&psx, DPAD_RIGHT) && Global_Struct_Master[TurnSpeed] < 191){
 8001206:	bf00      	nop
					}
				}
			}
		}
		Global_Struct_Master[BitVariables] = 0;
 8001208:	4b1f      	ldr	r3, [pc, #124]	; (8001288 <Psx+0x284>)
 800120a:	2200      	movs	r2, #0
 800120c:	751a      	strb	r2, [r3, #20]

		if(panda_psx_get_command(&psx, L1)){
 800120e:	2122      	movs	r1, #34	; 0x22
 8001210:	481c      	ldr	r0, [pc, #112]	; (8001284 <Psx+0x280>)
 8001212:	f001 fbb4 	bl	800297e <panda_psx_get_command>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d007      	beq.n	800122c <Psx+0x228>
			Global_Struct_Master[BitVariables] = LED_SX_SET ;
 800121c:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <Psx+0x284>)
 800121e:	7d1b      	ldrb	r3, [r3, #20]
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	b2da      	uxtb	r2, r3
 8001226:	4b18      	ldr	r3, [pc, #96]	; (8001288 <Psx+0x284>)
 8001228:	751a      	strb	r2, [r3, #20]
 800122a:	e006      	b.n	800123a <Psx+0x236>
		}else{
			Global_Struct_Master[BitVariables] = LED_SX_RESET;
 800122c:	4b16      	ldr	r3, [pc, #88]	; (8001288 <Psx+0x284>)
 800122e:	7d1b      	ldrb	r3, [r3, #20]
 8001230:	f023 0301 	bic.w	r3, r3, #1
 8001234:	b2da      	uxtb	r2, r3
 8001236:	4b14      	ldr	r3, [pc, #80]	; (8001288 <Psx+0x284>)
 8001238:	751a      	strb	r2, [r3, #20]
		}
		if(panda_psx_get_command(&psx, R1)){
 800123a:	2123      	movs	r1, #35	; 0x23
 800123c:	4811      	ldr	r0, [pc, #68]	; (8001284 <Psx+0x280>)
 800123e:	f001 fb9e 	bl	800297e <panda_psx_get_command>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d007      	beq.n	8001258 <Psx+0x254>
			Global_Struct_Master[BitVariables] = LED_DX_SET;
 8001248:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <Psx+0x284>)
 800124a:	7d1b      	ldrb	r3, [r3, #20]
 800124c:	f043 0302 	orr.w	r3, r3, #2
 8001250:	b2da      	uxtb	r2, r3
 8001252:	4b0d      	ldr	r3, [pc, #52]	; (8001288 <Psx+0x284>)
 8001254:	751a      	strb	r2, [r3, #20]
 8001256:	e006      	b.n	8001266 <Psx+0x262>
		}else{
			Global_Struct_Master[BitVariables] = LED_DX_RESET;
 8001258:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <Psx+0x284>)
 800125a:	7d1b      	ldrb	r3, [r3, #20]
 800125c:	f023 0302 	bic.w	r3, r3, #2
 8001260:	b2da      	uxtb	r2, r3
 8001262:	4b09      	ldr	r3, [pc, #36]	; (8001288 <Psx+0x284>)
 8001264:	751a      	strb	r2, [r3, #20]
		}
		if(panda_psx_get_command(&psx, L2)){
 8001266:	2120      	movs	r1, #32
 8001268:	4806      	ldr	r0, [pc, #24]	; (8001284 <Psx+0x280>)
 800126a:	f001 fb88 	bl	800297e <panda_psx_get_command>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d00d      	beq.n	8001290 <Psx+0x28c>
			Global_Struct_Master[BitVariables] = LED_BOTH_WHITE_SET;
 8001274:	4b04      	ldr	r3, [pc, #16]	; (8001288 <Psx+0x284>)
 8001276:	7d1b      	ldrb	r3, [r3, #20]
 8001278:	f043 0304 	orr.w	r3, r3, #4
 800127c:	b2da      	uxtb	r2, r3
 800127e:	4b02      	ldr	r3, [pc, #8]	; (8001288 <Psx+0x284>)
 8001280:	751a      	strb	r2, [r3, #20]
 8001282:	e00c      	b.n	800129e <Psx+0x29a>
 8001284:	20000378 	.word	0x20000378
 8001288:	200002fc 	.word	0x200002fc
 800128c:	200001f5 	.word	0x200001f5
		}else{
			Global_Struct_Master[BitVariables] = LED_BOTH_WHITE_RESET;
 8001290:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <Psx+0x2dc>)
 8001292:	7d1b      	ldrb	r3, [r3, #20]
 8001294:	f023 0304 	bic.w	r3, r3, #4
 8001298:	b2da      	uxtb	r2, r3
 800129a:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <Psx+0x2dc>)
 800129c:	751a      	strb	r2, [r3, #20]
		}
		if(panda_psx_get_command(&psx, R2)){
 800129e:	2121      	movs	r1, #33	; 0x21
 80012a0:	4810      	ldr	r0, [pc, #64]	; (80012e4 <Psx+0x2e0>)
 80012a2:	f001 fb6c 	bl	800297e <panda_psx_get_command>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d007      	beq.n	80012bc <Psx+0x2b8>
			Global_Struct_Master[BitVariables] = LED_BOTH_RED_SET;
 80012ac:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <Psx+0x2dc>)
 80012ae:	7d1b      	ldrb	r3, [r3, #20]
 80012b0:	f043 0308 	orr.w	r3, r3, #8
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <Psx+0x2dc>)
 80012b8:	751a      	strb	r2, [r3, #20]

    #if(VERBOSE == 1)
        printf("Exit Psx at %ld\r\n", pdMS_TO_TICKS(xTaskGetTickCount()));
    #endif

}
 80012ba:	e00d      	b.n	80012d8 <Psx+0x2d4>
			Global_Struct_Master[BitVariables] = LED_BOTH_RED_RESET;
 80012bc:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <Psx+0x2dc>)
 80012be:	7d1b      	ldrb	r3, [r3, #20]
 80012c0:	f023 0308 	bic.w	r3, r3, #8
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <Psx+0x2dc>)
 80012c8:	751a      	strb	r2, [r3, #20]
}
 80012ca:	e005      	b.n	80012d8 <Psx+0x2d4>
		Global_Struct_Master[DriveSpeed] = 128;
 80012cc:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <Psx+0x2dc>)
 80012ce:	2280      	movs	r2, #128	; 0x80
 80012d0:	749a      	strb	r2, [r3, #18]
		Global_Struct_Master[TurnSpeed] = 128;
 80012d2:	4b03      	ldr	r3, [pc, #12]	; (80012e0 <Psx+0x2dc>)
 80012d4:	2280      	movs	r2, #128	; 0x80
 80012d6:	74da      	strb	r2, [r3, #19]
}
 80012d8:	bf00      	nop
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	200002fc 	.word	0x200002fc
 80012e4:	20000378 	.word	0x20000378

080012e8 <Comunication>:


void Comunication( void *pvParameters )
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]

    #if(VERBOSE == 1)
		printf("Begin Communication at %ld\r\n", pdMS_TO_TICKS(xTaskGetTickCount()));
    #endif

	if(counter_checksum >= 4 ){
 80012f0:	4b08      	ldr	r3, [pc, #32]	; (8001314 <Comunication+0x2c>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b03      	cmp	r3, #3
 80012f6:	d903      	bls.n	8001300 <Comunication+0x18>
		degradato=1;
 80012f8:	4b07      	ldr	r3, [pc, #28]	; (8001318 <Comunication+0x30>)
 80012fa:	2201      	movs	r2, #1
 80012fc:	701a      	strb	r2, [r3, #0]

    #if(VERBOSE == 1)
        printf("Exit Communication at %ld\r\n", pdMS_TO_TICKS(xTaskGetTickCount()));
    #endif

}
 80012fe:	e005      	b.n	800130c <Comunication+0x24>
		panda_exchange_struct(&hi2c1, Global_Struct_Master, Global_Struct, &counter_checksum);
 8001300:	4b04      	ldr	r3, [pc, #16]	; (8001314 <Comunication+0x2c>)
 8001302:	4a06      	ldr	r2, [pc, #24]	; (800131c <Comunication+0x34>)
 8001304:	4906      	ldr	r1, [pc, #24]	; (8001320 <Comunication+0x38>)
 8001306:	4807      	ldr	r0, [pc, #28]	; (8001324 <Comunication+0x3c>)
 8001308:	f000 fee6 	bl	80020d8 <panda_exchange_struct>
}
 800130c:	bf00      	nop
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	200001f4 	.word	0x200001f4
 8001318:	200001f5 	.word	0x200001f5
 800131c:	20000314 	.word	0x20000314
 8001320:	200002fc 	.word	0x200002fc
 8001324:	20000254 	.word	0x20000254

08001328 <Execution>:


void Execution( void *pvParameters )
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
    #if(VERBOSE == 	1)
        printf("Begin Execution at %ld\r\n", pdMS_TO_TICKS(xTaskGetTickCount()));
    #endif


	if(degradato == 1){
 8001330:	4b99      	ldr	r3, [pc, #612]	; (8001598 <Execution+0x270>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d105      	bne.n	8001344 <Execution+0x1c>
			//Spengo Slave
		HAL_GPIO_WritePin(Turn_Off_Slave_GPIO_Port,Turn_Off_Slave_Pin, GPIO_PIN_SET);
 8001338:	2201      	movs	r2, #1
 800133a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800133e:	4897      	ldr	r0, [pc, #604]	; (800159c <Execution+0x274>)
 8001340:	f003 f9c4 	bl	80046cc <HAL_GPIO_WritePin>
	}

    ultrasound_value_middle = ((uint16_t)Global_Struct_Master[DistanceMiddle_High] << 8) | Global_Struct_Master[DistanceMiddle_Low];
 8001344:	4b96      	ldr	r3, [pc, #600]	; (80015a0 <Execution+0x278>)
 8001346:	7b1b      	ldrb	r3, [r3, #12]
 8001348:	021b      	lsls	r3, r3, #8
 800134a:	b21a      	sxth	r2, r3
 800134c:	4b94      	ldr	r3, [pc, #592]	; (80015a0 <Execution+0x278>)
 800134e:	7b5b      	ldrb	r3, [r3, #13]
 8001350:	b21b      	sxth	r3, r3
 8001352:	4313      	orrs	r3, r2
 8001354:	b21b      	sxth	r3, r3
 8001356:	b29a      	uxth	r2, r3
 8001358:	4b92      	ldr	r3, [pc, #584]	; (80015a4 <Execution+0x27c>)
 800135a:	801a      	strh	r2, [r3, #0]
    ultrasound_value_left = ((uint16_t)Global_Struct_Master[DistanceLeft_High] << 8) | Global_Struct_Master[DistanceLeft_Low];
 800135c:	4b90      	ldr	r3, [pc, #576]	; (80015a0 <Execution+0x278>)
 800135e:	7b9b      	ldrb	r3, [r3, #14]
 8001360:	021b      	lsls	r3, r3, #8
 8001362:	b21a      	sxth	r2, r3
 8001364:	4b8e      	ldr	r3, [pc, #568]	; (80015a0 <Execution+0x278>)
 8001366:	7bdb      	ldrb	r3, [r3, #15]
 8001368:	b21b      	sxth	r3, r3
 800136a:	4313      	orrs	r3, r2
 800136c:	b21b      	sxth	r3, r3
 800136e:	b29a      	uxth	r2, r3
 8001370:	4b8d      	ldr	r3, [pc, #564]	; (80015a8 <Execution+0x280>)
 8001372:	801a      	strh	r2, [r3, #0]
    ultrasound_value_right = ((uint16_t)Global_Struct_Master[DistanceRight_High] << 8) | Global_Struct_Master[DistanceRight_Low];
 8001374:	4b8a      	ldr	r3, [pc, #552]	; (80015a0 <Execution+0x278>)
 8001376:	7c1b      	ldrb	r3, [r3, #16]
 8001378:	021b      	lsls	r3, r3, #8
 800137a:	b21a      	sxth	r2, r3
 800137c:	4b88      	ldr	r3, [pc, #544]	; (80015a0 <Execution+0x278>)
 800137e:	7c5b      	ldrb	r3, [r3, #17]
 8001380:	b21b      	sxth	r3, r3
 8001382:	4313      	orrs	r3, r2
 8001384:	b21b      	sxth	r3, r3
 8001386:	b29a      	uxth	r2, r3
 8001388:	4b88      	ldr	r3, [pc, #544]	; (80015ac <Execution+0x284>)
 800138a:	801a      	strh	r2, [r3, #0]


    if(ultrasound_value_middle < CRITICAL_DISTANCE){
 800138c:	4b85      	ldr	r3, [pc, #532]	; (80015a4 <Execution+0x27c>)
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	2b45      	cmp	r3, #69	; 0x45
 8001392:	d871      	bhi.n	8001478 <Execution+0x150>
    	if(Global_Struct_Master[DriveSpeed] < 128){
 8001394:	4b82      	ldr	r3, [pc, #520]	; (80015a0 <Execution+0x278>)
 8001396:	7c9b      	ldrb	r3, [r3, #18]
 8001398:	b25b      	sxtb	r3, r3
 800139a:	2b00      	cmp	r3, #0
 800139c:	db1c      	blt.n	80013d8 <Execution+0xb0>
    		motor_mixed_drive(&huart1, 128, Global_Struct_Master[DriveSpeed]);
 800139e:	4b80      	ldr	r3, [pc, #512]	; (80015a0 <Execution+0x278>)
 80013a0:	7c9b      	ldrb	r3, [r3, #18]
 80013a2:	461a      	mov	r2, r3
 80013a4:	2180      	movs	r1, #128	; 0x80
 80013a6:	4882      	ldr	r0, [pc, #520]	; (80015b0 <Execution+0x288>)
 80013a8:	f001 f98c 	bl	80026c4 <motor_mixed_drive>
			motor_mixed_drive(&huart1, 129, Global_Struct_Master[DriveSpeed]);
 80013ac:	4b7c      	ldr	r3, [pc, #496]	; (80015a0 <Execution+0x278>)
 80013ae:	7c9b      	ldrb	r3, [r3, #18]
 80013b0:	461a      	mov	r2, r3
 80013b2:	2181      	movs	r1, #129	; 0x81
 80013b4:	487e      	ldr	r0, [pc, #504]	; (80015b0 <Execution+0x288>)
 80013b6:	f001 f985 	bl	80026c4 <motor_mixed_drive>
			motor_mixed_turn(&huart1, 128, Global_Struct_Master[TurnSpeed]);
 80013ba:	4b79      	ldr	r3, [pc, #484]	; (80015a0 <Execution+0x278>)
 80013bc:	7cdb      	ldrb	r3, [r3, #19]
 80013be:	461a      	mov	r2, r3
 80013c0:	2180      	movs	r1, #128	; 0x80
 80013c2:	487b      	ldr	r0, [pc, #492]	; (80015b0 <Execution+0x288>)
 80013c4:	f001 f9b0 	bl	8002728 <motor_mixed_turn>
			motor_mixed_turn(&huart1, 129, Global_Struct_Master[TurnSpeed]);
 80013c8:	4b75      	ldr	r3, [pc, #468]	; (80015a0 <Execution+0x278>)
 80013ca:	7cdb      	ldrb	r3, [r3, #19]
 80013cc:	461a      	mov	r2, r3
 80013ce:	2181      	movs	r1, #129	; 0x81
 80013d0:	4877      	ldr	r0, [pc, #476]	; (80015b0 <Execution+0x288>)
 80013d2:	f001 f9a9 	bl	8002728 <motor_mixed_turn>

    #if(VERBOSE == 1)
        printf("Exit Execution at %ld\r\n", pdMS_TO_TICKS(xTaskGetTickCount()));
    #endif

}
 80013d6:	e18f      	b.n	80016f8 <Execution+0x3d0>
    		if(attempts == 0){
 80013d8:	4b76      	ldr	r3, [pc, #472]	; (80015b4 <Execution+0x28c>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d10d      	bne.n	80013fc <Execution+0xd4>
				motor_mixed_stop(&huart1, 128);
 80013e0:	2180      	movs	r1, #128	; 0x80
 80013e2:	4873      	ldr	r0, [pc, #460]	; (80015b0 <Execution+0x288>)
 80013e4:	f001 f957 	bl	8002696 <motor_mixed_stop>
				motor_mixed_stop(&huart1, 129);
 80013e8:	2181      	movs	r1, #129	; 0x81
 80013ea:	4871      	ldr	r0, [pc, #452]	; (80015b0 <Execution+0x288>)
 80013ec:	f001 f953 	bl	8002696 <motor_mixed_stop>
				Global_Struct_Master[DriveSpeed] = 128;
 80013f0:	4b6b      	ldr	r3, [pc, #428]	; (80015a0 <Execution+0x278>)
 80013f2:	2280      	movs	r2, #128	; 0x80
 80013f4:	749a      	strb	r2, [r3, #18]
				Global_Struct_Master[TurnSpeed] = 128;
 80013f6:	4b6a      	ldr	r3, [pc, #424]	; (80015a0 <Execution+0x278>)
 80013f8:	2280      	movs	r2, #128	; 0x80
 80013fa:	74da      	strb	r2, [r3, #19]
    		if(Global_Struct[EncoderFLSpeed] == 128 && attempts == 0) attempts=10;
 80013fc:	4b6e      	ldr	r3, [pc, #440]	; (80015b8 <Execution+0x290>)
 80013fe:	7d9b      	ldrb	r3, [r3, #22]
 8001400:	2b80      	cmp	r3, #128	; 0x80
 8001402:	d106      	bne.n	8001412 <Execution+0xea>
 8001404:	4b6b      	ldr	r3, [pc, #428]	; (80015b4 <Execution+0x28c>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d102      	bne.n	8001412 <Execution+0xea>
 800140c:	4b69      	ldr	r3, [pc, #420]	; (80015b4 <Execution+0x28c>)
 800140e:	220a      	movs	r2, #10
 8001410:	701a      	strb	r2, [r3, #0]
			if(attempts > 0 ){
 8001412:	4b68      	ldr	r3, [pc, #416]	; (80015b4 <Execution+0x28c>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	f000 816e 	beq.w	80016f8 <Execution+0x3d0>
				attempts--;
 800141c:	4b65      	ldr	r3, [pc, #404]	; (80015b4 <Execution+0x28c>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	3b01      	subs	r3, #1
 8001422:	b2da      	uxtb	r2, r3
 8001424:	4b63      	ldr	r3, [pc, #396]	; (80015b4 <Execution+0x28c>)
 8001426:	701a      	strb	r2, [r3, #0]
				if(ultrasound_value_left < CRITICAL_DISTANCE - 50 && ultrasound_value_right > CRITICAL_DISTANCE - 50){
 8001428:	4b5f      	ldr	r3, [pc, #380]	; (80015a8 <Execution+0x280>)
 800142a:	881b      	ldrh	r3, [r3, #0]
 800142c:	2b13      	cmp	r3, #19
 800142e:	d80e      	bhi.n	800144e <Execution+0x126>
 8001430:	4b5e      	ldr	r3, [pc, #376]	; (80015ac <Execution+0x284>)
 8001432:	881b      	ldrh	r3, [r3, #0]
 8001434:	2b14      	cmp	r3, #20
 8001436:	d90a      	bls.n	800144e <Execution+0x126>
					motor_mixed_turn(&huart1, 128, 160);
 8001438:	22a0      	movs	r2, #160	; 0xa0
 800143a:	2180      	movs	r1, #128	; 0x80
 800143c:	485c      	ldr	r0, [pc, #368]	; (80015b0 <Execution+0x288>)
 800143e:	f001 f973 	bl	8002728 <motor_mixed_turn>
					motor_mixed_turn(&huart1, 129, 160);
 8001442:	22a0      	movs	r2, #160	; 0xa0
 8001444:	2181      	movs	r1, #129	; 0x81
 8001446:	485a      	ldr	r0, [pc, #360]	; (80015b0 <Execution+0x288>)
 8001448:	f001 f96e 	bl	8002728 <motor_mixed_turn>
 800144c:	e154      	b.n	80016f8 <Execution+0x3d0>
				}else if(ultrasound_value_right < CRITICAL_DISTANCE - 40 && ultrasound_value_left > CRITICAL_DISTANCE - 40){
 800144e:	4b57      	ldr	r3, [pc, #348]	; (80015ac <Execution+0x284>)
 8001450:	881b      	ldrh	r3, [r3, #0]
 8001452:	2b1d      	cmp	r3, #29
 8001454:	f200 8150 	bhi.w	80016f8 <Execution+0x3d0>
 8001458:	4b53      	ldr	r3, [pc, #332]	; (80015a8 <Execution+0x280>)
 800145a:	881b      	ldrh	r3, [r3, #0]
 800145c:	2b1e      	cmp	r3, #30
 800145e:	f240 814b 	bls.w	80016f8 <Execution+0x3d0>
					motor_mixed_turn(&huart1, 128, 96);
 8001462:	2260      	movs	r2, #96	; 0x60
 8001464:	2180      	movs	r1, #128	; 0x80
 8001466:	4852      	ldr	r0, [pc, #328]	; (80015b0 <Execution+0x288>)
 8001468:	f001 f95e 	bl	8002728 <motor_mixed_turn>
					motor_mixed_turn(&huart1, 129, 96);
 800146c:	2260      	movs	r2, #96	; 0x60
 800146e:	2181      	movs	r1, #129	; 0x81
 8001470:	484f      	ldr	r0, [pc, #316]	; (80015b0 <Execution+0x288>)
 8001472:	f001 f959 	bl	8002728 <motor_mixed_turn>
}
 8001476:	e13f      	b.n	80016f8 <Execution+0x3d0>
    }else if((ultrasound_value_middle>= CRITICAL_DISTANCE && ultrasound_value_middle<= INTERMEDIATE_DISTANCE) /*|| (ultrasound_value_left>= CRITICAL_DISTANCE && ultrasound_value_left<= INTERMEDIATE_DISTANCE) || (ultrasound_value_right>= CRITICAL_DISTANCE && ultrasound_value_right <= INTERMEDIATE_DISTANCE)*/){
 8001478:	4b4a      	ldr	r3, [pc, #296]	; (80015a4 <Execution+0x27c>)
 800147a:	881b      	ldrh	r3, [r3, #0]
 800147c:	2b45      	cmp	r3, #69	; 0x45
 800147e:	f240 809d 	bls.w	80015bc <Execution+0x294>
 8001482:	4b48      	ldr	r3, [pc, #288]	; (80015a4 <Execution+0x27c>)
 8001484:	881b      	ldrh	r3, [r3, #0]
 8001486:	2bc8      	cmp	r3, #200	; 0xc8
 8001488:	f200 8098 	bhi.w	80015bc <Execution+0x294>
    	if(Global_Struct_Master[DriveSpeed] < 128){
 800148c:	4b44      	ldr	r3, [pc, #272]	; (80015a0 <Execution+0x278>)
 800148e:	7c9b      	ldrb	r3, [r3, #18]
 8001490:	b25b      	sxtb	r3, r3
 8001492:	2b00      	cmp	r3, #0
 8001494:	db1c      	blt.n	80014d0 <Execution+0x1a8>
			motor_mixed_drive(&huart1, 128, Global_Struct_Master[DriveSpeed]);
 8001496:	4b42      	ldr	r3, [pc, #264]	; (80015a0 <Execution+0x278>)
 8001498:	7c9b      	ldrb	r3, [r3, #18]
 800149a:	461a      	mov	r2, r3
 800149c:	2180      	movs	r1, #128	; 0x80
 800149e:	4844      	ldr	r0, [pc, #272]	; (80015b0 <Execution+0x288>)
 80014a0:	f001 f910 	bl	80026c4 <motor_mixed_drive>
			motor_mixed_drive(&huart1, 129, Global_Struct_Master[DriveSpeed]);
 80014a4:	4b3e      	ldr	r3, [pc, #248]	; (80015a0 <Execution+0x278>)
 80014a6:	7c9b      	ldrb	r3, [r3, #18]
 80014a8:	461a      	mov	r2, r3
 80014aa:	2181      	movs	r1, #129	; 0x81
 80014ac:	4840      	ldr	r0, [pc, #256]	; (80015b0 <Execution+0x288>)
 80014ae:	f001 f909 	bl	80026c4 <motor_mixed_drive>
			motor_mixed_turn(&huart1, 128, Global_Struct_Master[TurnSpeed]);
 80014b2:	4b3b      	ldr	r3, [pc, #236]	; (80015a0 <Execution+0x278>)
 80014b4:	7cdb      	ldrb	r3, [r3, #19]
 80014b6:	461a      	mov	r2, r3
 80014b8:	2180      	movs	r1, #128	; 0x80
 80014ba:	483d      	ldr	r0, [pc, #244]	; (80015b0 <Execution+0x288>)
 80014bc:	f001 f934 	bl	8002728 <motor_mixed_turn>
			motor_mixed_turn(&huart1, 129, Global_Struct_Master[TurnSpeed]);
 80014c0:	4b37      	ldr	r3, [pc, #220]	; (80015a0 <Execution+0x278>)
 80014c2:	7cdb      	ldrb	r3, [r3, #19]
 80014c4:	461a      	mov	r2, r3
 80014c6:	2181      	movs	r1, #129	; 0x81
 80014c8:	4839      	ldr	r0, [pc, #228]	; (80015b0 <Execution+0x288>)
 80014ca:	f001 f92d 	bl	8002728 <motor_mixed_turn>
 80014ce:	e029      	b.n	8001524 <Execution+0x1fc>
			stop = Global_Struct[EncoderFLSpeed] - 5;
 80014d0:	4b39      	ldr	r3, [pc, #228]	; (80015b8 <Execution+0x290>)
 80014d2:	7d9b      	ldrb	r3, [r3, #22]
 80014d4:	3b05      	subs	r3, #5
 80014d6:	73fb      	strb	r3, [r7, #15]
			if(stop < 128) stop=128;
 80014d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	db01      	blt.n	80014e4 <Execution+0x1bc>
 80014e0:	2380      	movs	r3, #128	; 0x80
 80014e2:	73fb      	strb	r3, [r7, #15]
    		if(attempts == 0){
 80014e4:	4b33      	ldr	r3, [pc, #204]	; (80015b4 <Execution+0x28c>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d11b      	bne.n	8001524 <Execution+0x1fc>
				motor_mixed_drive(&huart1, 128, stop);
 80014ec:	7bfb      	ldrb	r3, [r7, #15]
 80014ee:	461a      	mov	r2, r3
 80014f0:	2180      	movs	r1, #128	; 0x80
 80014f2:	482f      	ldr	r0, [pc, #188]	; (80015b0 <Execution+0x288>)
 80014f4:	f001 f8e6 	bl	80026c4 <motor_mixed_drive>
				motor_mixed_drive(&huart1, 129, stop);
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
 80014fa:	461a      	mov	r2, r3
 80014fc:	2181      	movs	r1, #129	; 0x81
 80014fe:	482c      	ldr	r0, [pc, #176]	; (80015b0 <Execution+0x288>)
 8001500:	f001 f8e0 	bl	80026c4 <motor_mixed_drive>
				motor_mixed_turn(&huart1, 128, 128);
 8001504:	2280      	movs	r2, #128	; 0x80
 8001506:	2180      	movs	r1, #128	; 0x80
 8001508:	4829      	ldr	r0, [pc, #164]	; (80015b0 <Execution+0x288>)
 800150a:	f001 f90d 	bl	8002728 <motor_mixed_turn>
				motor_mixed_turn(&huart1, 129, 128);
 800150e:	2280      	movs	r2, #128	; 0x80
 8001510:	2181      	movs	r1, #129	; 0x81
 8001512:	4827      	ldr	r0, [pc, #156]	; (80015b0 <Execution+0x288>)
 8001514:	f001 f908 	bl	8002728 <motor_mixed_turn>
				Global_Struct_Master[DriveSpeed] = stop;
 8001518:	4a21      	ldr	r2, [pc, #132]	; (80015a0 <Execution+0x278>)
 800151a:	7bfb      	ldrb	r3, [r7, #15]
 800151c:	7493      	strb	r3, [r2, #18]
				Global_Struct_Master[TurnSpeed] = stop;
 800151e:	4a20      	ldr	r2, [pc, #128]	; (80015a0 <Execution+0x278>)
 8001520:	7bfb      	ldrb	r3, [r7, #15]
 8001522:	74d3      	strb	r3, [r2, #19]
    	if(Global_Struct[EncoderFLSpeed] == 128) attempts=10;
 8001524:	4b24      	ldr	r3, [pc, #144]	; (80015b8 <Execution+0x290>)
 8001526:	7d9b      	ldrb	r3, [r3, #22]
 8001528:	2b80      	cmp	r3, #128	; 0x80
 800152a:	d102      	bne.n	8001532 <Execution+0x20a>
 800152c:	4b21      	ldr	r3, [pc, #132]	; (80015b4 <Execution+0x28c>)
 800152e:	220a      	movs	r2, #10
 8001530:	701a      	strb	r2, [r3, #0]
		if(attempts > 0 ){
 8001532:	4b20      	ldr	r3, [pc, #128]	; (80015b4 <Execution+0x28c>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b00      	cmp	r3, #0
 8001538:	f000 80dd 	beq.w	80016f6 <Execution+0x3ce>
			attempts--;
 800153c:	4b1d      	ldr	r3, [pc, #116]	; (80015b4 <Execution+0x28c>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	3b01      	subs	r3, #1
 8001542:	b2da      	uxtb	r2, r3
 8001544:	4b1b      	ldr	r3, [pc, #108]	; (80015b4 <Execution+0x28c>)
 8001546:	701a      	strb	r2, [r3, #0]
			if(ultrasound_value_left < INTERMEDIATE_DISTANCE - 50 && ultrasound_value_right > INTERMEDIATE_DISTANCE - 50){
 8001548:	4b17      	ldr	r3, [pc, #92]	; (80015a8 <Execution+0x280>)
 800154a:	881b      	ldrh	r3, [r3, #0]
 800154c:	2b95      	cmp	r3, #149	; 0x95
 800154e:	d80e      	bhi.n	800156e <Execution+0x246>
 8001550:	4b16      	ldr	r3, [pc, #88]	; (80015ac <Execution+0x284>)
 8001552:	881b      	ldrh	r3, [r3, #0]
 8001554:	2b96      	cmp	r3, #150	; 0x96
 8001556:	d90a      	bls.n	800156e <Execution+0x246>
				motor_mixed_turn(&huart1, 128, 160);
 8001558:	22a0      	movs	r2, #160	; 0xa0
 800155a:	2180      	movs	r1, #128	; 0x80
 800155c:	4814      	ldr	r0, [pc, #80]	; (80015b0 <Execution+0x288>)
 800155e:	f001 f8e3 	bl	8002728 <motor_mixed_turn>
				motor_mixed_turn(&huart1, 129, 160);
 8001562:	22a0      	movs	r2, #160	; 0xa0
 8001564:	2181      	movs	r1, #129	; 0x81
 8001566:	4812      	ldr	r0, [pc, #72]	; (80015b0 <Execution+0x288>)
 8001568:	f001 f8de 	bl	8002728 <motor_mixed_turn>
		if(attempts > 0 ){
 800156c:	e0c3      	b.n	80016f6 <Execution+0x3ce>
			}else if(ultrasound_value_right < INTERMEDIATE_DISTANCE + 40 && ultrasound_value_left > INTERMEDIATE_DISTANCE + 40 ){
 800156e:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <Execution+0x284>)
 8001570:	881b      	ldrh	r3, [r3, #0]
 8001572:	2bef      	cmp	r3, #239	; 0xef
 8001574:	f200 80bf 	bhi.w	80016f6 <Execution+0x3ce>
 8001578:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <Execution+0x280>)
 800157a:	881b      	ldrh	r3, [r3, #0]
 800157c:	2bf0      	cmp	r3, #240	; 0xf0
 800157e:	f240 80ba 	bls.w	80016f6 <Execution+0x3ce>
				motor_mixed_turn(&huart1, 128, 96);
 8001582:	2260      	movs	r2, #96	; 0x60
 8001584:	2180      	movs	r1, #128	; 0x80
 8001586:	480a      	ldr	r0, [pc, #40]	; (80015b0 <Execution+0x288>)
 8001588:	f001 f8ce 	bl	8002728 <motor_mixed_turn>
				motor_mixed_turn(&huart1, 129, 96);
 800158c:	2260      	movs	r2, #96	; 0x60
 800158e:	2181      	movs	r1, #129	; 0x81
 8001590:	4807      	ldr	r0, [pc, #28]	; (80015b0 <Execution+0x288>)
 8001592:	f001 f8c9 	bl	8002728 <motor_mixed_turn>
		if(attempts > 0 ){
 8001596:	e0ae      	b.n	80016f6 <Execution+0x3ce>
 8001598:	200001f5 	.word	0x200001f5
 800159c:	40020800 	.word	0x40020800
 80015a0:	200002fc 	.word	0x200002fc
 80015a4:	200001f6 	.word	0x200001f6
 80015a8:	200001f8 	.word	0x200001f8
 80015ac:	200001fa 	.word	0x200001fa
 80015b0:	200006e4 	.word	0x200006e4
 80015b4:	200001fc 	.word	0x200001fc
 80015b8:	20000314 	.word	0x20000314
    	attempts=0;
 80015bc:	4b50      	ldr	r3, [pc, #320]	; (8001700 <Execution+0x3d8>)
 80015be:	2200      	movs	r2, #0
 80015c0:	701a      	strb	r2, [r3, #0]
    	if(degradato == 0){
 80015c2:	4b50      	ldr	r3, [pc, #320]	; (8001704 <Execution+0x3dc>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d11c      	bne.n	8001604 <Execution+0x2dc>
			motor_mixed_drive(&huart1, 128, Global_Struct_Master[DriveSpeed]);
 80015ca:	4b4f      	ldr	r3, [pc, #316]	; (8001708 <Execution+0x3e0>)
 80015cc:	7c9b      	ldrb	r3, [r3, #18]
 80015ce:	461a      	mov	r2, r3
 80015d0:	2180      	movs	r1, #128	; 0x80
 80015d2:	484e      	ldr	r0, [pc, #312]	; (800170c <Execution+0x3e4>)
 80015d4:	f001 f876 	bl	80026c4 <motor_mixed_drive>
			motor_mixed_drive(&huart1, 129, Global_Struct_Master[DriveSpeed]);
 80015d8:	4b4b      	ldr	r3, [pc, #300]	; (8001708 <Execution+0x3e0>)
 80015da:	7c9b      	ldrb	r3, [r3, #18]
 80015dc:	461a      	mov	r2, r3
 80015de:	2181      	movs	r1, #129	; 0x81
 80015e0:	484a      	ldr	r0, [pc, #296]	; (800170c <Execution+0x3e4>)
 80015e2:	f001 f86f 	bl	80026c4 <motor_mixed_drive>
			motor_mixed_turn(&huart1, 128, Global_Struct_Master[TurnSpeed]);
 80015e6:	4b48      	ldr	r3, [pc, #288]	; (8001708 <Execution+0x3e0>)
 80015e8:	7cdb      	ldrb	r3, [r3, #19]
 80015ea:	461a      	mov	r2, r3
 80015ec:	2180      	movs	r1, #128	; 0x80
 80015ee:	4847      	ldr	r0, [pc, #284]	; (800170c <Execution+0x3e4>)
 80015f0:	f001 f89a 	bl	8002728 <motor_mixed_turn>
			motor_mixed_turn(&huart1, 129, Global_Struct_Master[TurnSpeed]);
 80015f4:	4b44      	ldr	r3, [pc, #272]	; (8001708 <Execution+0x3e0>)
 80015f6:	7cdb      	ldrb	r3, [r3, #19]
 80015f8:	461a      	mov	r2, r3
 80015fa:	2181      	movs	r1, #129	; 0x81
 80015fc:	4843      	ldr	r0, [pc, #268]	; (800170c <Execution+0x3e4>)
 80015fe:	f001 f893 	bl	8002728 <motor_mixed_turn>
}
 8001602:	e079      	b.n	80016f8 <Execution+0x3d0>
    		if(panda_psx_is_analog(&psx)){
 8001604:	4842      	ldr	r0, [pc, #264]	; (8001710 <Execution+0x3e8>)
 8001606:	f001 fa1f 	bl	8002a48 <panda_psx_is_analog>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d055      	beq.n	80016bc <Execution+0x394>
				if(Global_Struct_Master[DriveSpeed] > 128){
 8001610:	4b3d      	ldr	r3, [pc, #244]	; (8001708 <Execution+0x3e0>)
 8001612:	7c9b      	ldrb	r3, [r3, #18]
 8001614:	2b80      	cmp	r3, #128	; 0x80
 8001616:	d90b      	bls.n	8001630 <Execution+0x308>
					Global_Struct_Master[DriveSpeed] = (Global_Struct_Master[DriveSpeed] - 129) * (192 - 129) / (255 - 129) + 129;
 8001618:	4b3b      	ldr	r3, [pc, #236]	; (8001708 <Execution+0x3e0>)
 800161a:	7c9b      	ldrb	r3, [r3, #18]
 800161c:	3b81      	subs	r3, #129	; 0x81
 800161e:	0fda      	lsrs	r2, r3, #31
 8001620:	4413      	add	r3, r2
 8001622:	105b      	asrs	r3, r3, #1
 8001624:	b2db      	uxtb	r3, r3
 8001626:	3b7f      	subs	r3, #127	; 0x7f
 8001628:	b2da      	uxtb	r2, r3
 800162a:	4b37      	ldr	r3, [pc, #220]	; (8001708 <Execution+0x3e0>)
 800162c:	749a      	strb	r2, [r3, #18]
 800162e:	e01a      	b.n	8001666 <Execution+0x33e>
				}else if(Global_Struct_Master[DriveSpeed] < 128 ){
 8001630:	4b35      	ldr	r3, [pc, #212]	; (8001708 <Execution+0x3e0>)
 8001632:	7c9b      	ldrb	r3, [r3, #18]
 8001634:	b25b      	sxtb	r3, r3
 8001636:	2b00      	cmp	r3, #0
 8001638:	db12      	blt.n	8001660 <Execution+0x338>
					Global_Struct_Master[DriveSpeed] = (Global_Struct_Master[DriveSpeed] - 0) * (127 - 64) / (127 - 0) + 64;
 800163a:	4b33      	ldr	r3, [pc, #204]	; (8001708 <Execution+0x3e0>)
 800163c:	7c9b      	ldrb	r3, [r3, #18]
 800163e:	461a      	mov	r2, r3
 8001640:	4613      	mov	r3, r2
 8001642:	019b      	lsls	r3, r3, #6
 8001644:	1a9b      	subs	r3, r3, r2
 8001646:	4a33      	ldr	r2, [pc, #204]	; (8001714 <Execution+0x3ec>)
 8001648:	fb82 1203 	smull	r1, r2, r2, r3
 800164c:	441a      	add	r2, r3
 800164e:	1192      	asrs	r2, r2, #6
 8001650:	17db      	asrs	r3, r3, #31
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	b2db      	uxtb	r3, r3
 8001656:	3340      	adds	r3, #64	; 0x40
 8001658:	b2da      	uxtb	r2, r3
 800165a:	4b2b      	ldr	r3, [pc, #172]	; (8001708 <Execution+0x3e0>)
 800165c:	749a      	strb	r2, [r3, #18]
 800165e:	e002      	b.n	8001666 <Execution+0x33e>
					Global_Struct_Master[DriveSpeed] = 128;
 8001660:	4b29      	ldr	r3, [pc, #164]	; (8001708 <Execution+0x3e0>)
 8001662:	2280      	movs	r2, #128	; 0x80
 8001664:	749a      	strb	r2, [r3, #18]
				if(Global_Struct_Master[TurnSpeed] > 128){
 8001666:	4b28      	ldr	r3, [pc, #160]	; (8001708 <Execution+0x3e0>)
 8001668:	7cdb      	ldrb	r3, [r3, #19]
 800166a:	2b80      	cmp	r3, #128	; 0x80
 800166c:	d90b      	bls.n	8001686 <Execution+0x35e>
					Global_Struct_Master[TurnSpeed] = (Global_Struct_Master[TurnSpeed] - 129) * (192 - 129) / (255 - 129) + 129;
 800166e:	4b26      	ldr	r3, [pc, #152]	; (8001708 <Execution+0x3e0>)
 8001670:	7cdb      	ldrb	r3, [r3, #19]
 8001672:	3b81      	subs	r3, #129	; 0x81
 8001674:	0fda      	lsrs	r2, r3, #31
 8001676:	4413      	add	r3, r2
 8001678:	105b      	asrs	r3, r3, #1
 800167a:	b2db      	uxtb	r3, r3
 800167c:	3b7f      	subs	r3, #127	; 0x7f
 800167e:	b2da      	uxtb	r2, r3
 8001680:	4b21      	ldr	r3, [pc, #132]	; (8001708 <Execution+0x3e0>)
 8001682:	74da      	strb	r2, [r3, #19]
 8001684:	e01a      	b.n	80016bc <Execution+0x394>
				}else if(Global_Struct_Master[TurnSpeed] < 128 ){
 8001686:	4b20      	ldr	r3, [pc, #128]	; (8001708 <Execution+0x3e0>)
 8001688:	7cdb      	ldrb	r3, [r3, #19]
 800168a:	b25b      	sxtb	r3, r3
 800168c:	2b00      	cmp	r3, #0
 800168e:	db12      	blt.n	80016b6 <Execution+0x38e>
					Global_Struct_Master[TurnSpeed] = (Global_Struct_Master[TurnSpeed] - 0) * (127 - 64) / (127 - 0) + 64;
 8001690:	4b1d      	ldr	r3, [pc, #116]	; (8001708 <Execution+0x3e0>)
 8001692:	7cdb      	ldrb	r3, [r3, #19]
 8001694:	461a      	mov	r2, r3
 8001696:	4613      	mov	r3, r2
 8001698:	019b      	lsls	r3, r3, #6
 800169a:	1a9b      	subs	r3, r3, r2
 800169c:	4a1d      	ldr	r2, [pc, #116]	; (8001714 <Execution+0x3ec>)
 800169e:	fb82 1203 	smull	r1, r2, r2, r3
 80016a2:	441a      	add	r2, r3
 80016a4:	1192      	asrs	r2, r2, #6
 80016a6:	17db      	asrs	r3, r3, #31
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	3340      	adds	r3, #64	; 0x40
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	4b15      	ldr	r3, [pc, #84]	; (8001708 <Execution+0x3e0>)
 80016b2:	74da      	strb	r2, [r3, #19]
 80016b4:	e002      	b.n	80016bc <Execution+0x394>
					Global_Struct_Master[TurnSpeed] = 128;
 80016b6:	4b14      	ldr	r3, [pc, #80]	; (8001708 <Execution+0x3e0>)
 80016b8:	2280      	movs	r2, #128	; 0x80
 80016ba:	74da      	strb	r2, [r3, #19]
    		motor_mixed_drive(&huart1, 128,  Global_Struct_Master[DriveSpeed]);
 80016bc:	4b12      	ldr	r3, [pc, #72]	; (8001708 <Execution+0x3e0>)
 80016be:	7c9b      	ldrb	r3, [r3, #18]
 80016c0:	461a      	mov	r2, r3
 80016c2:	2180      	movs	r1, #128	; 0x80
 80016c4:	4811      	ldr	r0, [pc, #68]	; (800170c <Execution+0x3e4>)
 80016c6:	f000 fffd 	bl	80026c4 <motor_mixed_drive>
			motor_mixed_drive(&huart1, 129,  Global_Struct_Master[DriveSpeed]);
 80016ca:	4b0f      	ldr	r3, [pc, #60]	; (8001708 <Execution+0x3e0>)
 80016cc:	7c9b      	ldrb	r3, [r3, #18]
 80016ce:	461a      	mov	r2, r3
 80016d0:	2181      	movs	r1, #129	; 0x81
 80016d2:	480e      	ldr	r0, [pc, #56]	; (800170c <Execution+0x3e4>)
 80016d4:	f000 fff6 	bl	80026c4 <motor_mixed_drive>
			motor_mixed_turn(&huart1, 128,   Global_Struct_Master[TurnSpeed]);
 80016d8:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <Execution+0x3e0>)
 80016da:	7cdb      	ldrb	r3, [r3, #19]
 80016dc:	461a      	mov	r2, r3
 80016de:	2180      	movs	r1, #128	; 0x80
 80016e0:	480a      	ldr	r0, [pc, #40]	; (800170c <Execution+0x3e4>)
 80016e2:	f001 f821 	bl	8002728 <motor_mixed_turn>
			motor_mixed_turn(&huart1, 129,   Global_Struct_Master[TurnSpeed]);
 80016e6:	4b08      	ldr	r3, [pc, #32]	; (8001708 <Execution+0x3e0>)
 80016e8:	7cdb      	ldrb	r3, [r3, #19]
 80016ea:	461a      	mov	r2, r3
 80016ec:	2181      	movs	r1, #129	; 0x81
 80016ee:	4807      	ldr	r0, [pc, #28]	; (800170c <Execution+0x3e4>)
 80016f0:	f001 f81a 	bl	8002728 <motor_mixed_turn>
}
 80016f4:	e000      	b.n	80016f8 <Execution+0x3d0>
		if(attempts > 0 ){
 80016f6:	bf00      	nop
}
 80016f8:	bf00      	nop
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	200001fc 	.word	0x200001fc
 8001704:	200001f5 	.word	0x200001f5
 8001708:	200002fc 	.word	0x200002fc
 800170c:	200006e4 	.word	0x200006e4
 8001710:	20000378 	.word	0x20000378
 8001714:	81020409 	.word	0x81020409

08001718 <FreeRTOS_Tasks_Init>:





void FreeRTOS_Tasks_Init(){
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af06      	add	r7, sp, #24


	vSchedulerPeriodicTaskCreate(Ultrasound, "Ultrasound", configMINIMAL_STACK_SIZE, NULL, 1, &xHandle1,
 800171e:	2313      	movs	r3, #19
 8001720:	9305      	str	r3, [sp, #20]
 8001722:	2313      	movs	r3, #19
 8001724:	9304      	str	r3, [sp, #16]
 8001726:	232a      	movs	r3, #42	; 0x2a
 8001728:	9303      	str	r3, [sp, #12]
 800172a:	2300      	movs	r3, #0
 800172c:	9302      	str	r3, [sp, #8]
 800172e:	4b12      	ldr	r3, [pc, #72]	; (8001778 <FreeRTOS_Tasks_Init+0x60>)
 8001730:	9301      	str	r3, [sp, #4]
 8001732:	2301      	movs	r3, #1
 8001734:	9300      	str	r3, [sp, #0]
 8001736:	2300      	movs	r3, #0
 8001738:	2280      	movs	r2, #128	; 0x80
 800173a:	4910      	ldr	r1, [pc, #64]	; (800177c <FreeRTOS_Tasks_Init+0x64>)
 800173c:	4810      	ldr	r0, [pc, #64]	; (8001780 <FreeRTOS_Tasks_Init+0x68>)
 800173e:	f001 fa25 	bl	8002b8c <vSchedulerPeriodicTaskCreate>
	             pdMS_TO_TICKS(0),   //phase
	             pdMS_TO_TICKS(42), //period
	             pdMS_TO_TICKS(19),  //WCET
	             pdMS_TO_TICKS(19)); //Deadline
	vSchedulerPeriodicTaskCreate(Check_Danger, "Check_Danger", configMINIMAL_STACK_SIZE, NULL, 4, &xHandle2,
 8001742:	2315      	movs	r3, #21
 8001744:	9305      	str	r3, [sp, #20]
 8001746:	2302      	movs	r3, #2
 8001748:	9304      	str	r3, [sp, #16]
 800174a:	232a      	movs	r3, #42	; 0x2a
 800174c:	9303      	str	r3, [sp, #12]
 800174e:	2313      	movs	r3, #19
 8001750:	9302      	str	r3, [sp, #8]
 8001752:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <FreeRTOS_Tasks_Init+0x6c>)
 8001754:	9301      	str	r3, [sp, #4]
 8001756:	2304      	movs	r3, #4
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	2300      	movs	r3, #0
 800175c:	2280      	movs	r2, #128	; 0x80
 800175e:	490a      	ldr	r1, [pc, #40]	; (8001788 <FreeRTOS_Tasks_Init+0x70>)
 8001760:	480a      	ldr	r0, [pc, #40]	; (800178c <FreeRTOS_Tasks_Init+0x74>)
 8001762:	f001 fa13 	bl	8002b8c <vSchedulerPeriodicTaskCreate>
	             pdMS_TO_TICKS(19),  //phase
	             pdMS_TO_TICKS(42), //period
	             pdMS_TO_TICKS(2),  //WCET
	             pdMS_TO_TICKS(21)); //Deadline
	MutexHandle = osMutexNew(&Mutex_attributes);
 8001766:	480a      	ldr	r0, [pc, #40]	; (8001790 <FreeRTOS_Tasks_Init+0x78>)
 8001768:	f006 fd00 	bl	800816c <osMutexNew>
 800176c:	4603      	mov	r3, r0
 800176e:	4a09      	ldr	r2, [pc, #36]	; (8001794 <FreeRTOS_Tasks_Init+0x7c>)
 8001770:	6013      	str	r3, [r2, #0]

}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20000204 	.word	0x20000204
 800177c:	0800dcd0 	.word	0x0800dcd0
 8001780:	08000ef5 	.word	0x08000ef5
 8001784:	20000208 	.word	0x20000208
 8001788:	0800dcdc 	.word	0x0800dcdc
 800178c:	08000f25 	.word	0x08000f25
 8001790:	0800ddf4 	.word	0x0800ddf4
 8001794:	20000200 	.word	0x20000200

08001798 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800179e:	463b      	mov	r3, r7
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80017aa:	4b21      	ldr	r3, [pc, #132]	; (8001830 <MX_ADC1_Init+0x98>)
 80017ac:	4a21      	ldr	r2, [pc, #132]	; (8001834 <MX_ADC1_Init+0x9c>)
 80017ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80017b0:	4b1f      	ldr	r3, [pc, #124]	; (8001830 <MX_ADC1_Init+0x98>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017b6:	4b1e      	ldr	r3, [pc, #120]	; (8001830 <MX_ADC1_Init+0x98>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80017bc:	4b1c      	ldr	r3, [pc, #112]	; (8001830 <MX_ADC1_Init+0x98>)
 80017be:	2200      	movs	r2, #0
 80017c0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80017c2:	4b1b      	ldr	r3, [pc, #108]	; (8001830 <MX_ADC1_Init+0x98>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017c8:	4b19      	ldr	r3, [pc, #100]	; (8001830 <MX_ADC1_Init+0x98>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017d0:	4b17      	ldr	r3, [pc, #92]	; (8001830 <MX_ADC1_Init+0x98>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017d6:	4b16      	ldr	r3, [pc, #88]	; (8001830 <MX_ADC1_Init+0x98>)
 80017d8:	4a17      	ldr	r2, [pc, #92]	; (8001838 <MX_ADC1_Init+0xa0>)
 80017da:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017dc:	4b14      	ldr	r3, [pc, #80]	; (8001830 <MX_ADC1_Init+0x98>)
 80017de:	2200      	movs	r2, #0
 80017e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80017e2:	4b13      	ldr	r3, [pc, #76]	; (8001830 <MX_ADC1_Init+0x98>)
 80017e4:	2201      	movs	r2, #1
 80017e6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017e8:	4b11      	ldr	r3, [pc, #68]	; (8001830 <MX_ADC1_Init+0x98>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80017f0:	4b0f      	ldr	r3, [pc, #60]	; (8001830 <MX_ADC1_Init+0x98>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017f6:	480e      	ldr	r0, [pc, #56]	; (8001830 <MX_ADC1_Init+0x98>)
 80017f8:	f002 fa88 	bl	8003d0c <HAL_ADC_Init>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001802:	f000 fb23 	bl	8001e4c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001806:	2310      	movs	r3, #16
 8001808:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800180a:	2301      	movs	r3, #1
 800180c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800180e:	2300      	movs	r3, #0
 8001810:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001812:	463b      	mov	r3, r7
 8001814:	4619      	mov	r1, r3
 8001816:	4806      	ldr	r0, [pc, #24]	; (8001830 <MX_ADC1_Init+0x98>)
 8001818:	f002 fabc 	bl	8003d94 <HAL_ADC_ConfigChannel>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001822:	f000 fb13 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001826:	bf00      	nop
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	2000020c 	.word	0x2000020c
 8001834:	40012000 	.word	0x40012000
 8001838:	0f000001 	.word	0x0f000001

0800183c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08a      	sub	sp, #40	; 0x28
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001844:	f107 0314 	add.w	r3, r7, #20
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a17      	ldr	r2, [pc, #92]	; (80018b8 <HAL_ADC_MspInit+0x7c>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d127      	bne.n	80018ae <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	613b      	str	r3, [r7, #16]
 8001862:	4b16      	ldr	r3, [pc, #88]	; (80018bc <HAL_ADC_MspInit+0x80>)
 8001864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001866:	4a15      	ldr	r2, [pc, #84]	; (80018bc <HAL_ADC_MspInit+0x80>)
 8001868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800186c:	6453      	str	r3, [r2, #68]	; 0x44
 800186e:	4b13      	ldr	r3, [pc, #76]	; (80018bc <HAL_ADC_MspInit+0x80>)
 8001870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001876:	613b      	str	r3, [r7, #16]
 8001878:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	4b0f      	ldr	r3, [pc, #60]	; (80018bc <HAL_ADC_MspInit+0x80>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	4a0e      	ldr	r2, [pc, #56]	; (80018bc <HAL_ADC_MspInit+0x80>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	6313      	str	r3, [r2, #48]	; 0x30
 800188a:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <HAL_ADC_MspInit+0x80>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = Battery_Sensor_ADC_Pin;
 8001896:	2301      	movs	r3, #1
 8001898:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800189a:	2303      	movs	r3, #3
 800189c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Battery_Sensor_ADC_GPIO_Port, &GPIO_InitStruct);
 80018a2:	f107 0314 	add.w	r3, r7, #20
 80018a6:	4619      	mov	r1, r3
 80018a8:	4805      	ldr	r0, [pc, #20]	; (80018c0 <HAL_ADC_MspInit+0x84>)
 80018aa:	f002 fd73 	bl	8004394 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80018ae:	bf00      	nop
 80018b0:	3728      	adds	r7, #40	; 0x28
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40012000 	.word	0x40012000
 80018bc:	40023800 	.word	0x40023800
 80018c0:	40020000 	.word	0x40020000

080018c4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	vSchedulerInit();
 80018c8:	f001 fcd4 	bl	8003274 <vSchedulerInit>
	printf("------------Hello From FreeRTOS------------\r\n");
 80018cc:	4804      	ldr	r0, [pc, #16]	; (80018e0 <MX_FREERTOS_Init+0x1c>)
 80018ce:	f00a f9eb 	bl	800bca8 <puts>
	vSchedulerInit();
 80018d2:	f001 fccf 	bl	8003274 <vSchedulerInit>
  /* creation of defaultTask */


  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  FreeRTOS_Tasks_Init();
 80018d6:	f7ff ff1f 	bl	8001718 <FreeRTOS_Tasks_Init>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */

  /* USER CODE END RTOS_EVENTS */

}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	0800dcec 	.word	0x0800dcec

080018e4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b088      	sub	sp, #32
 80018e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ea:	f107 030c 	add.w	r3, r7, #12
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	609a      	str	r2, [r3, #8]
 80018f6:	60da      	str	r2, [r3, #12]
 80018f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	60bb      	str	r3, [r7, #8]
 80018fe:	4b31      	ldr	r3, [pc, #196]	; (80019c4 <MX_GPIO_Init+0xe0>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	4a30      	ldr	r2, [pc, #192]	; (80019c4 <MX_GPIO_Init+0xe0>)
 8001904:	f043 0304 	orr.w	r3, r3, #4
 8001908:	6313      	str	r3, [r2, #48]	; 0x30
 800190a:	4b2e      	ldr	r3, [pc, #184]	; (80019c4 <MX_GPIO_Init+0xe0>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	f003 0304 	and.w	r3, r3, #4
 8001912:	60bb      	str	r3, [r7, #8]
 8001914:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	607b      	str	r3, [r7, #4]
 800191a:	4b2a      	ldr	r3, [pc, #168]	; (80019c4 <MX_GPIO_Init+0xe0>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	4a29      	ldr	r2, [pc, #164]	; (80019c4 <MX_GPIO_Init+0xe0>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	6313      	str	r3, [r2, #48]	; 0x30
 8001926:	4b27      	ldr	r3, [pc, #156]	; (80019c4 <MX_GPIO_Init+0xe0>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	607b      	str	r3, [r7, #4]
 8001930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	603b      	str	r3, [r7, #0]
 8001936:	4b23      	ldr	r3, [pc, #140]	; (80019c4 <MX_GPIO_Init+0xe0>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	4a22      	ldr	r2, [pc, #136]	; (80019c4 <MX_GPIO_Init+0xe0>)
 800193c:	f043 0302 	orr.w	r3, r3, #2
 8001940:	6313      	str	r3, [r2, #48]	; 0x30
 8001942:	4b20      	ldr	r3, [pc, #128]	; (80019c4 <MX_GPIO_Init+0xe0>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	603b      	str	r3, [r7, #0]
 800194c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Sync_Output_Pin|PSX_Att_Pin|Turn_Off_Slave_Pin, GPIO_PIN_RESET);
 800194e:	2200      	movs	r2, #0
 8001950:	f44f 61a1 	mov.w	r1, #1288	; 0x508
 8001954:	481c      	ldr	r0, [pc, #112]	; (80019c8 <MX_GPIO_Init+0xe4>)
 8001956:	f002 feb9 	bl	80046cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Ultrasound_Trigger_GPIO_Port, Ultrasound_Trigger_Pin, GPIO_PIN_RESET);
 800195a:	2200      	movs	r2, #0
 800195c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001960:	481a      	ldr	r0, [pc, #104]	; (80019cc <MX_GPIO_Init+0xe8>)
 8001962:	f002 feb3 	bl	80046cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Sync_Input_Pin;
 8001966:	2304      	movs	r3, #4
 8001968:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800196a:	2300      	movs	r3, #0
 800196c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Sync_Input_GPIO_Port, &GPIO_InitStruct);
 8001972:	f107 030c 	add.w	r3, r7, #12
 8001976:	4619      	mov	r1, r3
 8001978:	4813      	ldr	r0, [pc, #76]	; (80019c8 <MX_GPIO_Init+0xe4>)
 800197a:	f002 fd0b 	bl	8004394 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Sync_Output_Pin|PSX_Att_Pin|Turn_Off_Slave_Pin;
 800197e:	f44f 63a1 	mov.w	r3, #1288	; 0x508
 8001982:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001984:	2301      	movs	r3, #1
 8001986:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198c:	2300      	movs	r3, #0
 800198e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001990:	f107 030c 	add.w	r3, r7, #12
 8001994:	4619      	mov	r1, r3
 8001996:	480c      	ldr	r0, [pc, #48]	; (80019c8 <MX_GPIO_Init+0xe4>)
 8001998:	f002 fcfc 	bl	8004394 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Ultrasound_Trigger_Pin;
 800199c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a2:	2301      	movs	r3, #1
 80019a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019aa:	2300      	movs	r3, #0
 80019ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Ultrasound_Trigger_GPIO_Port, &GPIO_InitStruct);
 80019ae:	f107 030c 	add.w	r3, r7, #12
 80019b2:	4619      	mov	r1, r3
 80019b4:	4805      	ldr	r0, [pc, #20]	; (80019cc <MX_GPIO_Init+0xe8>)
 80019b6:	f002 fced 	bl	8004394 <HAL_GPIO_Init>

}
 80019ba:	bf00      	nop
 80019bc:	3720      	adds	r7, #32
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40023800 	.word	0x40023800
 80019c8:	40020800 	.word	0x40020800
 80019cc:	40020400 	.word	0x40020400

080019d0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019d4:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <MX_I2C1_Init+0x50>)
 80019d6:	4a13      	ldr	r2, [pc, #76]	; (8001a24 <MX_I2C1_Init+0x54>)
 80019d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80019da:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <MX_I2C1_Init+0x50>)
 80019dc:	4a12      	ldr	r2, [pc, #72]	; (8001a28 <MX_I2C1_Init+0x58>)
 80019de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019e0:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <MX_I2C1_Init+0x50>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 2;
 80019e6:	4b0e      	ldr	r3, [pc, #56]	; (8001a20 <MX_I2C1_Init+0x50>)
 80019e8:	2202      	movs	r2, #2
 80019ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019ec:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <MX_I2C1_Init+0x50>)
 80019ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019f4:	4b0a      	ldr	r3, [pc, #40]	; (8001a20 <MX_I2C1_Init+0x50>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019fa:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <MX_I2C1_Init+0x50>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a00:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <MX_I2C1_Init+0x50>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a06:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <MX_I2C1_Init+0x50>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a0c:	4804      	ldr	r0, [pc, #16]	; (8001a20 <MX_I2C1_Init+0x50>)
 8001a0e:	f002 fe91 	bl	8004734 <HAL_I2C_Init>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a18:	f000 fa18 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a1c:	bf00      	nop
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20000254 	.word	0x20000254
 8001a24:	40005400 	.word	0x40005400
 8001a28:	00061a80 	.word	0x00061a80

08001a2c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001a30:	4b12      	ldr	r3, [pc, #72]	; (8001a7c <MX_I2C3_Init+0x50>)
 8001a32:	4a13      	ldr	r2, [pc, #76]	; (8001a80 <MX_I2C3_Init+0x54>)
 8001a34:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8001a36:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <MX_I2C3_Init+0x50>)
 8001a38:	4a12      	ldr	r2, [pc, #72]	; (8001a84 <MX_I2C3_Init+0x58>)
 8001a3a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a3c:	4b0f      	ldr	r3, [pc, #60]	; (8001a7c <MX_I2C3_Init+0x50>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001a42:	4b0e      	ldr	r3, [pc, #56]	; (8001a7c <MX_I2C3_Init+0x50>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a48:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <MX_I2C3_Init+0x50>)
 8001a4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a4e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a50:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <MX_I2C3_Init+0x50>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001a56:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <MX_I2C3_Init+0x50>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a5c:	4b07      	ldr	r3, [pc, #28]	; (8001a7c <MX_I2C3_Init+0x50>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a62:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <MX_I2C3_Init+0x50>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001a68:	4804      	ldr	r0, [pc, #16]	; (8001a7c <MX_I2C3_Init+0x50>)
 8001a6a:	f002 fe63 	bl	8004734 <HAL_I2C_Init>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001a74:	f000 f9ea 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001a78:	bf00      	nop
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	200002a8 	.word	0x200002a8
 8001a80:	40005c00 	.word	0x40005c00
 8001a84:	00061a80 	.word	0x00061a80

08001a88 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b08c      	sub	sp, #48	; 0x30
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a90:	f107 031c 	add.w	r3, r7, #28
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a42      	ldr	r2, [pc, #264]	; (8001bb0 <HAL_I2C_MspInit+0x128>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d12d      	bne.n	8001b06 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61bb      	str	r3, [r7, #24]
 8001aae:	4b41      	ldr	r3, [pc, #260]	; (8001bb4 <HAL_I2C_MspInit+0x12c>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	4a40      	ldr	r2, [pc, #256]	; (8001bb4 <HAL_I2C_MspInit+0x12c>)
 8001ab4:	f043 0302 	orr.w	r3, r3, #2
 8001ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aba:	4b3e      	ldr	r3, [pc, #248]	; (8001bb4 <HAL_I2C_MspInit+0x12c>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	61bb      	str	r3, [r7, #24]
 8001ac4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = Comunication_SDA_Pin|Comunication_SCL_Pin;
 8001ac6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001acc:	2312      	movs	r3, #18
 8001ace:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ad8:	2304      	movs	r3, #4
 8001ada:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001adc:	f107 031c 	add.w	r3, r7, #28
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4835      	ldr	r0, [pc, #212]	; (8001bb8 <HAL_I2C_MspInit+0x130>)
 8001ae4:	f002 fc56 	bl	8004394 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]
 8001aec:	4b31      	ldr	r3, [pc, #196]	; (8001bb4 <HAL_I2C_MspInit+0x12c>)
 8001aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af0:	4a30      	ldr	r2, [pc, #192]	; (8001bb4 <HAL_I2C_MspInit+0x12c>)
 8001af2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001af6:	6413      	str	r3, [r2, #64]	; 0x40
 8001af8:	4b2e      	ldr	r3, [pc, #184]	; (8001bb4 <HAL_I2C_MspInit+0x12c>)
 8001afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001b04:	e050      	b.n	8001ba8 <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a2c      	ldr	r2, [pc, #176]	; (8001bbc <HAL_I2C_MspInit+0x134>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d14b      	bne.n	8001ba8 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b10:	2300      	movs	r3, #0
 8001b12:	613b      	str	r3, [r7, #16]
 8001b14:	4b27      	ldr	r3, [pc, #156]	; (8001bb4 <HAL_I2C_MspInit+0x12c>)
 8001b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b18:	4a26      	ldr	r2, [pc, #152]	; (8001bb4 <HAL_I2C_MspInit+0x12c>)
 8001b1a:	f043 0304 	orr.w	r3, r3, #4
 8001b1e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b20:	4b24      	ldr	r3, [pc, #144]	; (8001bb4 <HAL_I2C_MspInit+0x12c>)
 8001b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b24:	f003 0304 	and.w	r3, r3, #4
 8001b28:	613b      	str	r3, [r7, #16]
 8001b2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	4b20      	ldr	r3, [pc, #128]	; (8001bb4 <HAL_I2C_MspInit+0x12c>)
 8001b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b34:	4a1f      	ldr	r2, [pc, #124]	; (8001bb4 <HAL_I2C_MspInit+0x12c>)
 8001b36:	f043 0301 	orr.w	r3, r3, #1
 8001b3a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3c:	4b1d      	ldr	r3, [pc, #116]	; (8001bb4 <HAL_I2C_MspInit+0x12c>)
 8001b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Accelerometer_SDA_Pin;
 8001b48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b4e:	2312      	movs	r3, #18
 8001b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b56:	2303      	movs	r3, #3
 8001b58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b5a:	2304      	movs	r3, #4
 8001b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Accelerometer_SDA_GPIO_Port, &GPIO_InitStruct);
 8001b5e:	f107 031c 	add.w	r3, r7, #28
 8001b62:	4619      	mov	r1, r3
 8001b64:	4816      	ldr	r0, [pc, #88]	; (8001bc0 <HAL_I2C_MspInit+0x138>)
 8001b66:	f002 fc15 	bl	8004394 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Accelerometer_SCL_Pin;
 8001b6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b70:	2312      	movs	r3, #18
 8001b72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b7c:	2304      	movs	r3, #4
 8001b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Accelerometer_SCL_GPIO_Port, &GPIO_InitStruct);
 8001b80:	f107 031c 	add.w	r3, r7, #28
 8001b84:	4619      	mov	r1, r3
 8001b86:	480f      	ldr	r0, [pc, #60]	; (8001bc4 <HAL_I2C_MspInit+0x13c>)
 8001b88:	f002 fc04 	bl	8004394 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60bb      	str	r3, [r7, #8]
 8001b90:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <HAL_I2C_MspInit+0x12c>)
 8001b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b94:	4a07      	ldr	r2, [pc, #28]	; (8001bb4 <HAL_I2C_MspInit+0x12c>)
 8001b96:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b9a:	6413      	str	r3, [r2, #64]	; 0x40
 8001b9c:	4b05      	ldr	r3, [pc, #20]	; (8001bb4 <HAL_I2C_MspInit+0x12c>)
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ba4:	60bb      	str	r3, [r7, #8]
 8001ba6:	68bb      	ldr	r3, [r7, #8]
}
 8001ba8:	bf00      	nop
 8001baa:	3730      	adds	r7, #48	; 0x30
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40005400 	.word	0x40005400
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	40020400 	.word	0x40020400
 8001bbc:	40005c00 	.word	0x40005c00
 8001bc0:	40020800 	.word	0x40020800
 8001bc4:	40020000 	.word	0x40020000

08001bc8 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001bd0:	1d39      	adds	r1, r7, #4
 8001bd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	4803      	ldr	r0, [pc, #12]	; (8001be8 <__io_putchar+0x20>)
 8001bda:	f005 fec5 	bl	8007968 <HAL_UART_Transmit>
  return ch;
 8001bde:	687b      	ldr	r3, [r7, #4]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20000728 	.word	0x20000728

08001bec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bf2:	f002 f849 	bl	8003c88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bf6:	f000 f879 	bl	8001cec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bfa:	f7ff fe73 	bl	80018e4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001bfe:	f001 fb55 	bl	80032ac <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001c02:	f001 ff45 	bl	8003a90 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001c06:	f001 ff6d 	bl	8003ae4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001c0a:	f001 fd7d 	bl	8003708 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001c0e:	f001 fdd1 	bl	80037b4 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001c12:	f001 fe21 	bl	8003858 <MX_TIM5_Init>
  MX_I2C1_Init();
 8001c16:	f7ff fedb 	bl	80019d0 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001c1a:	f7ff ff07 	bl	8001a2c <MX_I2C3_Init>
  MX_ADC1_Init();
 8001c1e:	f7ff fdbb 	bl	8001798 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 8001c22:	2104      	movs	r1, #4
 8001c24:	4822      	ldr	r0, [pc, #136]	; (8001cb0 <main+0xc4>)
 8001c26:	f005 f897 	bl	8006d58 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8001c2a:	2104      	movs	r1, #4
 8001c2c:	4821      	ldr	r0, [pc, #132]	; (8001cb4 <main+0xc8>)
 8001c2e:	f005 f893 	bl	8006d58 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_2);
 8001c32:	2104      	movs	r1, #4
 8001c34:	4820      	ldr	r0, [pc, #128]	; (8001cb8 <main+0xcc>)
 8001c36:	f005 f88f 	bl	8006d58 <HAL_TIM_IC_Start_IT>

  Global_Struct_Master_Init(Global_Struct_Master);
 8001c3a:	4820      	ldr	r0, [pc, #128]	; (8001cbc <main+0xd0>)
 8001c3c:	f000 f90b 	bl	8001e56 <Global_Struct_Master_Init>
  Global_Struct_Init(Global_Struct);
 8001c40:	481f      	ldr	r0, [pc, #124]	; (8001cc0 <main+0xd4>)
 8001c42:	f000 f965 	bl	8001f10 <Global_Struct_Init>
  HAL_GPIO_WritePin(Turn_Off_Slave_GPIO_Port, Turn_Off_Slave_Pin, GPIO_PIN_RESET);
 8001c46:	2200      	movs	r2, #0
 8001c48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c4c:	481d      	ldr	r0, [pc, #116]	; (8001cc4 <main+0xd8>)
 8001c4e:	f002 fd3d 	bl	80046cc <HAL_GPIO_WritePin>
  panda_psx_init(&psx, &hspi1, PSX_Att_GPIO_Port, PSX_Att_Pin);
 8001c52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c56:	4a1b      	ldr	r2, [pc, #108]	; (8001cc4 <main+0xd8>)
 8001c58:	491b      	ldr	r1, [pc, #108]	; (8001cc8 <main+0xdc>)
 8001c5a:	481c      	ldr	r0, [pc, #112]	; (8001ccc <main+0xe0>)
 8001c5c:	f000 fe3c 	bl	80028d8 <panda_psx_init>
  panda_HCSR04_init(&ultrasound_left, &htim1, Ultrasound_Trigger_GPIO_Port, Ultrasound_Trigger_Pin);
 8001c60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c64:	4a1a      	ldr	r2, [pc, #104]	; (8001cd0 <main+0xe4>)
 8001c66:	4912      	ldr	r1, [pc, #72]	; (8001cb0 <main+0xc4>)
 8001c68:	481a      	ldr	r0, [pc, #104]	; (8001cd4 <main+0xe8>)
 8001c6a:	f000 faf6 	bl	800225a <panda_HCSR04_init>
  panda_HCSR04_init(&ultrasound_middle, &htim2, Ultrasound_Trigger_GPIO_Port, Ultrasound_Trigger_Pin);
 8001c6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c72:	4a17      	ldr	r2, [pc, #92]	; (8001cd0 <main+0xe4>)
 8001c74:	490f      	ldr	r1, [pc, #60]	; (8001cb4 <main+0xc8>)
 8001c76:	4818      	ldr	r0, [pc, #96]	; (8001cd8 <main+0xec>)
 8001c78:	f000 faef 	bl	800225a <panda_HCSR04_init>
  panda_HCSR04_init(&ultrasound_right, &htim5, Ultrasound_Trigger_GPIO_Port, Ultrasound_Trigger_Pin);
 8001c7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c80:	4a13      	ldr	r2, [pc, #76]	; (8001cd0 <main+0xe4>)
 8001c82:	490d      	ldr	r1, [pc, #52]	; (8001cb8 <main+0xcc>)
 8001c84:	4815      	ldr	r0, [pc, #84]	; (8001cdc <main+0xf0>)
 8001c86:	f000 fae8 	bl	800225a <panda_HCSR04_init>
  panda_mpu6050_init(&MPU6050, &hi2c3);
 8001c8a:	4915      	ldr	r1, [pc, #84]	; (8001ce0 <main+0xf4>)
 8001c8c:	4815      	ldr	r0, [pc, #84]	; (8001ce4 <main+0xf8>)
 8001c8e:	f000 fd7d 	bl	800278c <panda_mpu6050_init>
  panda_comunication_init_sync(&hi2c1, Sync_Output_GPIO_Port, Sync_Output_Pin, Sync_Input_GPIO_Port, Sync_Input_Pin);
 8001c92:	2304      	movs	r3, #4
 8001c94:	9300      	str	r3, [sp, #0]
 8001c96:	4b0b      	ldr	r3, [pc, #44]	; (8001cc4 <main+0xd8>)
 8001c98:	2208      	movs	r2, #8
 8001c9a:	490a      	ldr	r1, [pc, #40]	; (8001cc4 <main+0xd8>)
 8001c9c:	4812      	ldr	r0, [pc, #72]	; (8001ce8 <main+0xfc>)
 8001c9e:	f000 f9a9 	bl	8001ff4 <panda_comunication_init_sync>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001ca2:	f006 fa19 	bl	80080d8 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001ca6:	f7ff fe0d 	bl	80018c4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001caa:	f006 fa39 	bl	8008120 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001cae:	e7fe      	b.n	8001cae <main+0xc2>
 8001cb0:	2000060c 	.word	0x2000060c
 8001cb4:	20000654 	.word	0x20000654
 8001cb8:	2000069c 	.word	0x2000069c
 8001cbc:	200002fc 	.word	0x200002fc
 8001cc0:	20000314 	.word	0x20000314
 8001cc4:	40020800 	.word	0x40020800
 8001cc8:	20000568 	.word	0x20000568
 8001ccc:	20000378 	.word	0x20000378
 8001cd0:	40020400 	.word	0x40020400
 8001cd4:	2000038c 	.word	0x2000038c
 8001cd8:	200003b0 	.word	0x200003b0
 8001cdc:	200003d4 	.word	0x200003d4
 8001ce0:	200002a8 	.word	0x200002a8
 8001ce4:	20000330 	.word	0x20000330
 8001ce8:	20000254 	.word	0x20000254

08001cec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b094      	sub	sp, #80	; 0x50
 8001cf0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cf2:	f107 0320 	add.w	r3, r7, #32
 8001cf6:	2230      	movs	r2, #48	; 0x30
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f00a f8b4 	bl	800be68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d00:	f107 030c 	add.w	r3, r7, #12
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d10:	2300      	movs	r3, #0
 8001d12:	60bb      	str	r3, [r7, #8]
 8001d14:	4b29      	ldr	r3, [pc, #164]	; (8001dbc <SystemClock_Config+0xd0>)
 8001d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d18:	4a28      	ldr	r2, [pc, #160]	; (8001dbc <SystemClock_Config+0xd0>)
 8001d1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d1e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d20:	4b26      	ldr	r3, [pc, #152]	; (8001dbc <SystemClock_Config+0xd0>)
 8001d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d28:	60bb      	str	r3, [r7, #8]
 8001d2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	607b      	str	r3, [r7, #4]
 8001d30:	4b23      	ldr	r3, [pc, #140]	; (8001dc0 <SystemClock_Config+0xd4>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d38:	4a21      	ldr	r2, [pc, #132]	; (8001dc0 <SystemClock_Config+0xd4>)
 8001d3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d3e:	6013      	str	r3, [r2, #0]
 8001d40:	4b1f      	ldr	r3, [pc, #124]	; (8001dc0 <SystemClock_Config+0xd4>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d48:	607b      	str	r3, [r7, #4]
 8001d4a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d50:	2301      	movs	r3, #1
 8001d52:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d54:	2310      	movs	r3, #16
 8001d56:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d60:	2308      	movs	r3, #8
 8001d62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001d64:	2354      	movs	r3, #84	; 0x54
 8001d66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d6c:	2304      	movs	r3, #4
 8001d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d70:	f107 0320 	add.w	r3, r7, #32
 8001d74:	4618      	mov	r0, r3
 8001d76:	f003 ff63 	bl	8005c40 <HAL_RCC_OscConfig>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001d80:	f000 f864 	bl	8001e4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d84:	230f      	movs	r3, #15
 8001d86:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001d96:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d9a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d9c:	f107 030c 	add.w	r3, r7, #12
 8001da0:	2102      	movs	r1, #2
 8001da2:	4618      	mov	r0, r3
 8001da4:	f004 f9c4 	bl	8006130 <HAL_RCC_ClockConfig>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001dae:	f000 f84d 	bl	8001e4c <Error_Handler>
  }
}
 8001db2:	bf00      	nop
 8001db4:	3750      	adds	r7, #80	; 0x50
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	40007000 	.word	0x40007000

08001dc4 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
	if (htim->Instance == ultrasound_middle.timer->Instance)  // if the interrupt source is channel1
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <HAL_TIM_IC_CaptureCallback+0x58>)
 8001dd2:	691b      	ldr	r3, [r3, #16]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d104      	bne.n	8001de4 <HAL_TIM_IC_CaptureCallback+0x20>
		panda_HCSR04_callback_evaluations(&ultrasound_middle, TIM_CHANNEL_2);
 8001dda:	2104      	movs	r1, #4
 8001ddc:	480f      	ldr	r0, [pc, #60]	; (8001e1c <HAL_TIM_IC_CaptureCallback+0x58>)
 8001dde:	f000 fa67 	bl	80022b0 <panda_HCSR04_callback_evaluations>
	else if(htim->Instance == ultrasound_left.timer->Instance)
		panda_HCSR04_callback_evaluations(&ultrasound_left, TIM_CHANNEL_2);
	else if(htim->Instance == ultrasound_right.timer->Instance)
		panda_HCSR04_callback_evaluations(&ultrasound_right, TIM_CHANNEL_2);

}
 8001de2:	e016      	b.n	8001e12 <HAL_TIM_IC_CaptureCallback+0x4e>
	else if(htim->Instance == ultrasound_left.timer->Instance)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	4b0d      	ldr	r3, [pc, #52]	; (8001e20 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d104      	bne.n	8001dfc <HAL_TIM_IC_CaptureCallback+0x38>
		panda_HCSR04_callback_evaluations(&ultrasound_left, TIM_CHANNEL_2);
 8001df2:	2104      	movs	r1, #4
 8001df4:	480a      	ldr	r0, [pc, #40]	; (8001e20 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001df6:	f000 fa5b 	bl	80022b0 <panda_HCSR04_callback_evaluations>
}
 8001dfa:	e00a      	b.n	8001e12 <HAL_TIM_IC_CaptureCallback+0x4e>
	else if(htim->Instance == ultrasound_right.timer->Instance)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d103      	bne.n	8001e12 <HAL_TIM_IC_CaptureCallback+0x4e>
		panda_HCSR04_callback_evaluations(&ultrasound_right, TIM_CHANNEL_2);
 8001e0a:	2104      	movs	r1, #4
 8001e0c:	4805      	ldr	r0, [pc, #20]	; (8001e24 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001e0e:	f000 fa4f 	bl	80022b0 <panda_HCSR04_callback_evaluations>
}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	200003b0 	.word	0x200003b0
 8001e20:	2000038c 	.word	0x2000038c
 8001e24:	200003d4 	.word	0x200003d4

08001e28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a04      	ldr	r2, [pc, #16]	; (8001e48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d101      	bne.n	8001e3e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e3a:	f001 ff47 	bl	8003ccc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40014800 	.word	0x40014800

08001e4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e50:	b672      	cpsid	i
}
 8001e52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e54:	e7fe      	b.n	8001e54 <Error_Handler+0x8>

08001e56 <Global_Struct_Master_Init>:
#if (VERBOSE == 1)
	#include "usart.h"
#endif


void Global_Struct_Master_Init(Global_Struct_t* Global_Struct_Master){
 8001e56:	b480      	push	{r7}
 8001e58:	b083      	sub	sp, #12
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
	Global_Struct_Master[AccelerometerX_High] = 0;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	701a      	strb	r2, [r3, #0]
	Global_Struct_Master[AccelerometerX_Low] = 0;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3301      	adds	r3, #1
 8001e68:	2200      	movs	r2, #0
 8001e6a:	701a      	strb	r2, [r3, #0]
	Global_Struct_Master[AccelerometerY_High] = 0;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3302      	adds	r3, #2
 8001e70:	2200      	movs	r2, #0
 8001e72:	701a      	strb	r2, [r3, #0]
	Global_Struct_Master[AccelerometerY_Low] = 0;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3303      	adds	r3, #3
 8001e78:	2200      	movs	r2, #0
 8001e7a:	701a      	strb	r2, [r3, #0]
	Global_Struct_Master[AccelerometerZ_High] = 0;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3304      	adds	r3, #4
 8001e80:	2200      	movs	r2, #0
 8001e82:	701a      	strb	r2, [r3, #0]
	Global_Struct_Master[AccelerometerZ_Low] = 0;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3305      	adds	r3, #5
 8001e88:	2200      	movs	r2, #0
 8001e8a:	701a      	strb	r2, [r3, #0]
	Global_Struct_Master[GyroscopeX_High] = 0;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3306      	adds	r3, #6
 8001e90:	2200      	movs	r2, #0
 8001e92:	701a      	strb	r2, [r3, #0]
	Global_Struct_Master[GyroscopeX_Low] = 0;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3307      	adds	r3, #7
 8001e98:	2200      	movs	r2, #0
 8001e9a:	701a      	strb	r2, [r3, #0]
	Global_Struct_Master[GyroscopeY_High] = 0;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	3308      	adds	r3, #8
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	701a      	strb	r2, [r3, #0]
	Global_Struct_Master[GyroscopeY_Low] = 0;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3309      	adds	r3, #9
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	701a      	strb	r2, [r3, #0]
	Global_Struct_Master[GyroscopeZ_High] = 0;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	330a      	adds	r3, #10
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	701a      	strb	r2, [r3, #0]
	Global_Struct_Master[GyroscopeZ_Low] = 0;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	330b      	adds	r3, #11
 8001eb8:	2200      	movs	r2, #0
 8001eba:	701a      	strb	r2, [r3, #0]
	Global_Struct_Master[DistanceMiddle_High] = 0;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	330c      	adds	r3, #12
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	701a      	strb	r2, [r3, #0]
	Global_Struct_Master[DistanceMiddle_Low] = 127;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	330d      	adds	r3, #13
 8001ec8:	227f      	movs	r2, #127	; 0x7f
 8001eca:	701a      	strb	r2, [r3, #0]
	Global_Struct_Master[DistanceLeft_High] = 0;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	330e      	adds	r3, #14
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	701a      	strb	r2, [r3, #0]
	Global_Struct_Master[DistanceLeft_Low] = 127;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	330f      	adds	r3, #15
 8001ed8:	227f      	movs	r2, #127	; 0x7f
 8001eda:	701a      	strb	r2, [r3, #0]
	Global_Struct_Master[DistanceRight_High] = 0;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3310      	adds	r3, #16
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	701a      	strb	r2, [r3, #0]
	Global_Struct_Master[DistanceRight_Low] = 127;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	3311      	adds	r3, #17
 8001ee8:	227f      	movs	r2, #127	; 0x7f
 8001eea:	701a      	strb	r2, [r3, #0]
	Global_Struct_Master[DriveSpeed] = 128;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3312      	adds	r3, #18
 8001ef0:	2280      	movs	r2, #128	; 0x80
 8001ef2:	701a      	strb	r2, [r3, #0]
	Global_Struct_Master[TurnSpeed] = 128;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3313      	adds	r3, #19
 8001ef8:	2280      	movs	r2, #128	; 0x80
 8001efa:	701a      	strb	r2, [r3, #0]
	Global_Struct_Master[BitVariables] = 0x00;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	3314      	adds	r3, #20
 8001f00:	2200      	movs	r2, #0
 8001f02:	701a      	strb	r2, [r3, #0]
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <Global_Struct_Init>:

void Global_Struct_Init(Global_Struct_t* Global_Struct){
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
	Global_Struct[AccelerometerX_High] = 0;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	701a      	strb	r2, [r3, #0]
	Global_Struct[AccelerometerX_Low] = 0;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	3301      	adds	r3, #1
 8001f22:	2200      	movs	r2, #0
 8001f24:	701a      	strb	r2, [r3, #0]
	Global_Struct[AccelerometerY_High] = 0;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	3302      	adds	r3, #2
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	701a      	strb	r2, [r3, #0]
	Global_Struct[AccelerometerY_Low] = 0;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	3303      	adds	r3, #3
 8001f32:	2200      	movs	r2, #0
 8001f34:	701a      	strb	r2, [r3, #0]
	Global_Struct[AccelerometerZ_High] = 0;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	3304      	adds	r3, #4
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	701a      	strb	r2, [r3, #0]
	Global_Struct[AccelerometerZ_Low] = 0;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	3305      	adds	r3, #5
 8001f42:	2200      	movs	r2, #0
 8001f44:	701a      	strb	r2, [r3, #0]
	Global_Struct[GyroscopeX_High] = 0;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	3306      	adds	r3, #6
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	701a      	strb	r2, [r3, #0]
	Global_Struct[GyroscopeX_Low] = 0;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	3307      	adds	r3, #7
 8001f52:	2200      	movs	r2, #0
 8001f54:	701a      	strb	r2, [r3, #0]
	Global_Struct[GyroscopeY_High] = 0;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	3308      	adds	r3, #8
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	701a      	strb	r2, [r3, #0]
	Global_Struct[GyroscopeY_Low] = 0;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	3309      	adds	r3, #9
 8001f62:	2200      	movs	r2, #0
 8001f64:	701a      	strb	r2, [r3, #0]
	Global_Struct[GyroscopeZ_High] = 0;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	330a      	adds	r3, #10
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	701a      	strb	r2, [r3, #0]
	Global_Struct[GyroscopeZ_Low] = 0;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	330b      	adds	r3, #11
 8001f72:	2200      	movs	r2, #0
 8001f74:	701a      	strb	r2, [r3, #0]
	Global_Struct[DistanceMiddle_High] = 0;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	330c      	adds	r3, #12
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	701a      	strb	r2, [r3, #0]
	Global_Struct[DistanceMiddle_Low] = 127;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	330d      	adds	r3, #13
 8001f82:	227f      	movs	r2, #127	; 0x7f
 8001f84:	701a      	strb	r2, [r3, #0]
	Global_Struct[DistanceLeft_High] = 0;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	330e      	adds	r3, #14
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	701a      	strb	r2, [r3, #0]
	Global_Struct[DistanceLeft_Low] = 127;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	330f      	adds	r3, #15
 8001f92:	227f      	movs	r2, #127	; 0x7f
 8001f94:	701a      	strb	r2, [r3, #0]
	Global_Struct[DistanceRight_High] = 0;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	3310      	adds	r3, #16
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	701a      	strb	r2, [r3, #0]
	Global_Struct[DistanceRight_Low] = 127;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	3311      	adds	r3, #17
 8001fa2:	227f      	movs	r2, #127	; 0x7f
 8001fa4:	701a      	strb	r2, [r3, #0]
	Global_Struct[DriveSpeed] = 128;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	3312      	adds	r3, #18
 8001faa:	2280      	movs	r2, #128	; 0x80
 8001fac:	701a      	strb	r2, [r3, #0]
	Global_Struct[TurnSpeed] = 128;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	3313      	adds	r3, #19
 8001fb2:	2280      	movs	r2, #128	; 0x80
 8001fb4:	701a      	strb	r2, [r3, #0]
	Global_Struct[BitVariables] = 0x00;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	3314      	adds	r3, #20
 8001fba:	2200      	movs	r2, #0
 8001fbc:	701a      	strb	r2, [r3, #0]
	Global_Struct[BatterySensor] = 100;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	3315      	adds	r3, #21
 8001fc2:	2264      	movs	r2, #100	; 0x64
 8001fc4:	701a      	strb	r2, [r3, #0]
	Global_Struct[EncoderFLSpeed] = 0;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	3316      	adds	r3, #22
 8001fca:	2200      	movs	r2, #0
 8001fcc:	701a      	strb	r2, [r3, #0]
	Global_Struct[EncoderFRSpeed] = 0;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	3317      	adds	r3, #23
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	701a      	strb	r2, [r3, #0]
	Global_Struct[EncoderBLSpeed] = 0;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	3318      	adds	r3, #24
 8001fda:	2200      	movs	r2, #0
 8001fdc:	701a      	strb	r2, [r3, #0]
	Global_Struct[EncoderBRSpeed] = 0;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	3319      	adds	r3, #25
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	701a      	strb	r2, [r3, #0]
}
 8001fe6:	bf00      	nop
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
	...

08001ff4 <panda_comunication_init_sync>:

HAL_StatusTypeDef panda_comunication_init_sync(I2C_HandleTypeDef* i2c, GPIO_TypeDef* sync_output_port, uint16_t sync_output_pin, GPIO_TypeDef* sync_input_port, uint16_t sync_input_pin){
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b08c      	sub	sp, #48	; 0x30
 8001ff8:	af02      	add	r7, sp, #8
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	603b      	str	r3, [r7, #0]
 8002000:	4613      	mov	r3, r2
 8002002:	80fb      	strh	r3, [r7, #6]

	HAL_StatusTypeDef res = HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	#if (VERBOSE == 0)
		printf("Sono Master NEW\r\n");
 800200a:	482e      	ldr	r0, [pc, #184]	; (80020c4 <panda_comunication_init_sync+0xd0>)
 800200c:	f009 fe4c 	bl	800bca8 <puts>
	#endif

	HAL_GPIO_WritePin(sync_output_port, sync_output_pin, GPIO_PIN_RESET);
 8002010:	88fb      	ldrh	r3, [r7, #6]
 8002012:	2200      	movs	r2, #0
 8002014:	4619      	mov	r1, r3
 8002016:	68b8      	ldr	r0, [r7, #8]
 8002018:	f002 fb58 	bl	80046cc <HAL_GPIO_WritePin>

	uint8_t RX_Buffer;
	uint8_t Alive_Master[PANDA_STRUCT_MASTER_SIZE] = {ALIVE_MASTER};
 800201c:	230a      	movs	r3, #10
 800201e:	613b      	str	r3, [r7, #16]
 8002020:	f107 0314 	add.w	r3, r7, #20
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	609a      	str	r2, [r3, #8]
 800202c:	60da      	str	r2, [r3, #12]
 800202e:	821a      	strh	r2, [r3, #16]
	Alive_Master[BitVariables] = ALIVE_MASTER;
 8002030:	230a      	movs	r3, #10
 8002032:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	do{
		RX_Buffer=0;
 8002036:	2300      	movs	r3, #0
 8002038:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		do{
			HAL_I2C_Master_Transmit(i2c,(SLAVE_ADDRESS<<1), Alive_Master, PANDA_STRUCT_MASTER_SIZE, HAL_MAX_DELAY);
 800203c:	f107 0210 	add.w	r2, r7, #16
 8002040:	f04f 33ff 	mov.w	r3, #4294967295
 8002044:	9300      	str	r3, [sp, #0]
 8002046:	2316      	movs	r3, #22
 8002048:	21b2      	movs	r1, #178	; 0xb2
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f002 fcb6 	bl	80049bc <HAL_I2C_Master_Transmit>
			#if (VERBOSE == 0)
				printf("Alive Inviato\r\n");
 8002050:	481d      	ldr	r0, [pc, #116]	; (80020c8 <panda_comunication_init_sync+0xd4>)
 8002052:	f009 fe29 	bl	800bca8 <puts>
			#endif
		//Receive Alive Slave
	}while(HAL_I2C_Slave_Receive(i2c ,&RX_Buffer, 1, 50) == HAL_ERROR); //Receiving in Blocking mode
 8002056:	f107 0126 	add.w	r1, r7, #38	; 0x26
 800205a:	2332      	movs	r3, #50	; 0x32
 800205c:	2201      	movs	r2, #1
 800205e:	68f8      	ldr	r0, [r7, #12]
 8002060:	f002 fdaa 	bl	8004bb8 <HAL_I2C_Slave_Receive>
 8002064:	4603      	mov	r3, r0
 8002066:	2b01      	cmp	r3, #1
 8002068:	d0e8      	beq.n	800203c <panda_comunication_init_sync+0x48>



		#if (VERBOSE == 0)
			if(RX_Buffer == ALIVE_SLAVE){
 800206a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800206e:	2b0b      	cmp	r3, #11
 8002070:	d103      	bne.n	800207a <panda_comunication_init_sync+0x86>
				printf("Alive Ricevuto\r\n");
 8002072:	4816      	ldr	r0, [pc, #88]	; (80020cc <panda_comunication_init_sync+0xd8>)
 8002074:	f009 fe18 	bl	800bca8 <puts>
 8002078:	e002      	b.n	8002080 <panda_comunication_init_sync+0x8c>
			}else{
				printf("Alive NON Ricevuto\r\n");
 800207a:	4815      	ldr	r0, [pc, #84]	; (80020d0 <panda_comunication_init_sync+0xdc>)
 800207c:	f009 fe14 	bl	800bca8 <puts>
			}
		#endif

	}while(RX_Buffer != ALIVE_SLAVE);
 8002080:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002084:	2b0b      	cmp	r3, #11
 8002086:	d1d6      	bne.n	8002036 <panda_comunication_init_sync+0x42>

	HAL_GPIO_WritePin(sync_output_port, sync_output_pin, GPIO_PIN_SET);
 8002088:	88fb      	ldrh	r3, [r7, #6]
 800208a:	2201      	movs	r2, #1
 800208c:	4619      	mov	r1, r3
 800208e:	68b8      	ldr	r0, [r7, #8]
 8002090:	f002 fb1c 	bl	80046cc <HAL_GPIO_WritePin>

	while(HAL_GPIO_ReadPin(sync_input_port, sync_input_pin) == GPIO_PIN_RESET);
 8002094:	bf00      	nop
 8002096:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002098:	4619      	mov	r1, r3
 800209a:	6838      	ldr	r0, [r7, #0]
 800209c:	f002 fafe 	bl	800469c <HAL_GPIO_ReadPin>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d0f7      	beq.n	8002096 <panda_comunication_init_sync+0xa2>
	#if (VERBOSE == 0)
		printf("Start Scheduler\r\n");
 80020a6:	480b      	ldr	r0, [pc, #44]	; (80020d4 <panda_comunication_init_sync+0xe0>)
 80020a8:	f009 fdfe 	bl	800bca8 <puts>
	#endif
	HAL_GPIO_WritePin(sync_output_port, sync_output_pin, GPIO_PIN_RESET);
 80020ac:	88fb      	ldrh	r3, [r7, #6]
 80020ae:	2200      	movs	r2, #0
 80020b0:	4619      	mov	r1, r3
 80020b2:	68b8      	ldr	r0, [r7, #8]
 80020b4:	f002 fb0a 	bl	80046cc <HAL_GPIO_WritePin>

	return res;
 80020b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3728      	adds	r7, #40	; 0x28
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	0800dd1c 	.word	0x0800dd1c
 80020c8:	0800dd30 	.word	0x0800dd30
 80020cc:	0800dd40 	.word	0x0800dd40
 80020d0:	0800dd50 	.word	0x0800dd50
 80020d4:	0800dd64 	.word	0x0800dd64

080020d8 <panda_exchange_struct>:




void panda_exchange_struct(I2C_HandleTypeDef* i2c, Global_Struct_t *Global_Struct_Master, Global_Struct_t* Global_Struct, uint8_t *counter_checksum){
 80020d8:	b580      	push	{r7, lr}
 80020da:	b090      	sub	sp, #64	; 0x40
 80020dc:	af02      	add	r7, sp, #8
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
 80020e4:	603b      	str	r3, [r7, #0]



	uint8_t counter = 0;
 80020e6:	2300      	movs	r3, #0
 80020e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	Global_Struct_t Global_Struct_From_Slave[PANDA_STRUCT_GLOBAL_SIZE];
	uint8_t flag = 0;
 80020ec:	2300      	movs	r3, #0
 80020ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	panda_comunication_init_checksum(Global_Struct_Master);
 80020f2:	68b8      	ldr	r0, [r7, #8]
 80020f4:	f000 f868 	bl	80021c8 <panda_comunication_init_checksum>

	while(counter < MAX_NUMBER_OF_ATTEMPTS && (HAL_I2C_Master_Transmit(i2c, (SLAVE_ADDRESS<<1), Global_Struct_Master, PANDA_STRUCT_MASTER_SIZE, HAL_MAX_DELAY) != HAL_OK)){
 80020f8:	e004      	b.n	8002104 <panda_exchange_struct+0x2c>
		counter++;
 80020fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80020fe:	3301      	adds	r3, #1
 8002100:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	while(counter < MAX_NUMBER_OF_ATTEMPTS && (HAL_I2C_Master_Transmit(i2c, (SLAVE_ADDRESS<<1), Global_Struct_Master, PANDA_STRUCT_MASTER_SIZE, HAL_MAX_DELAY) != HAL_OK)){
 8002104:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002108:	2b01      	cmp	r3, #1
 800210a:	d80b      	bhi.n	8002124 <panda_exchange_struct+0x4c>
 800210c:	f04f 33ff 	mov.w	r3, #4294967295
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	2316      	movs	r3, #22
 8002114:	68ba      	ldr	r2, [r7, #8]
 8002116:	21b2      	movs	r1, #178	; 0xb2
 8002118:	68f8      	ldr	r0, [r7, #12]
 800211a:	f002 fc4f 	bl	80049bc <HAL_I2C_Master_Transmit>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d1ea      	bne.n	80020fa <panda_exchange_struct+0x22>
	}

	if( counter >= MAX_NUMBER_OF_ATTEMPTS ){
 8002124:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002128:	2b01      	cmp	r3, #1
 800212a:	d905      	bls.n	8002138 <panda_exchange_struct+0x60>
		*counter_checksum+=2;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	3302      	adds	r3, #2
 8002132:	b2da      	uxtb	r2, r3
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	701a      	strb	r2, [r3, #0]
	}


	if(HAL_I2C_Slave_Receive(i2c, Global_Struct_From_Slave, PANDA_STRUCT_GLOBAL_SIZE, COMUNICATION_DELAY*2) == HAL_OK){
 8002138:	f107 0110 	add.w	r1, r7, #16
 800213c:	2304      	movs	r3, #4
 800213e:	221b      	movs	r2, #27
 8002140:	68f8      	ldr	r0, [r7, #12]
 8002142:	f002 fd39 	bl	8004bb8 <HAL_I2C_Slave_Receive>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d139      	bne.n	80021c0 <panda_exchange_struct+0xe8>
		//CONTROLLO CHECKSUM
		if(Global_Struct_From_Slave[BitVariables] == 255 || panda_comunication_validate_checksum(Global_Struct_From_Slave) != HAL_OK ){
 800214c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002150:	2bff      	cmp	r3, #255	; 0xff
 8002152:	d007      	beq.n	8002164 <panda_exchange_struct+0x8c>
 8002154:	f107 0310 	add.w	r3, r7, #16
 8002158:	4618      	mov	r0, r3
 800215a:	f000 f857 	bl	800220c <panda_comunication_validate_checksum>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d003      	beq.n	800216c <panda_exchange_struct+0x94>
			*counter_checksum++;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	3301      	adds	r3, #1
 8002168:	603b      	str	r3, [r7, #0]
 800216a:	e028      	b.n	80021be <panda_exchange_struct+0xe6>
		}else{
			*counter_checksum=0;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	2200      	movs	r2, #0
 8002170:	701a      	strb	r2, [r3, #0]

			for(int i = 0; i < PANDA_STRUCT_MASTER_SIZE-1; i++){
 8002172:	2300      	movs	r3, #0
 8002174:	633b      	str	r3, [r7, #48]	; 0x30
 8002176:	e00a      	b.n	800218e <panda_exchange_struct+0xb6>
				Global_Struct[i] = Global_Struct_Master[i];
 8002178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800217a:	68ba      	ldr	r2, [r7, #8]
 800217c:	441a      	add	r2, r3
 800217e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002180:	6879      	ldr	r1, [r7, #4]
 8002182:	440b      	add	r3, r1
 8002184:	7812      	ldrb	r2, [r2, #0]
 8002186:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < PANDA_STRUCT_MASTER_SIZE-1; i++){
 8002188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800218a:	3301      	adds	r3, #1
 800218c:	633b      	str	r3, [r7, #48]	; 0x30
 800218e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002190:	2b14      	cmp	r3, #20
 8002192:	ddf1      	ble.n	8002178 <panda_exchange_struct+0xa0>
			}
			for(int i = 0; i < PANDA_STRUCT_SLAVE_SIZE-1; i++){
 8002194:	2300      	movs	r3, #0
 8002196:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002198:	e00e      	b.n	80021b8 <panda_exchange_struct+0xe0>
				Global_Struct[i+PANDA_STRUCT_MASTER_SIZE-1] = Global_Struct_From_Slave[i+PANDA_STRUCT_MASTER_SIZE-1];
 800219a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800219c:	f103 0215 	add.w	r2, r3, #21
 80021a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021a2:	3315      	adds	r3, #21
 80021a4:	6879      	ldr	r1, [r7, #4]
 80021a6:	440b      	add	r3, r1
 80021a8:	3238      	adds	r2, #56	; 0x38
 80021aa:	443a      	add	r2, r7
 80021ac:	f812 2c28 	ldrb.w	r2, [r2, #-40]
 80021b0:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < PANDA_STRUCT_SLAVE_SIZE-1; i++){
 80021b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b4:	3301      	adds	r3, #1
 80021b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ba:	2b04      	cmp	r3, #4
 80021bc:	dded      	ble.n	800219a <panda_exchange_struct+0xc2>

		}
	}else{
	}

	return;
 80021be:	bf00      	nop
 80021c0:	bf00      	nop


}
 80021c2:	3738      	adds	r7, #56	; 0x38
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <panda_comunication_init_checksum>:

void panda_comunication_init_checksum(Global_Struct_t *Global_Struct){
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
	uint16_t checksum = 0;
 80021d0:	2300      	movs	r3, #0
 80021d2:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i< PANDA_STRUCT_MASTER_SIZE-1; i++){
 80021d4:	2300      	movs	r3, #0
 80021d6:	60bb      	str	r3, [r7, #8]
 80021d8:	e00a      	b.n	80021f0 <panda_comunication_init_checksum+0x28>
		checksum += Global_Struct[i];
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	4413      	add	r3, r2
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	89fb      	ldrh	r3, [r7, #14]
 80021e6:	4413      	add	r3, r2
 80021e8:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i< PANDA_STRUCT_MASTER_SIZE-1; i++){
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	3301      	adds	r3, #1
 80021ee:	60bb      	str	r3, [r7, #8]
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	2b14      	cmp	r3, #20
 80021f4:	ddf1      	ble.n	80021da <panda_comunication_init_checksum+0x12>
	}
	Global_Struct[PANDA_STRUCT_MASTER_SIZE-1] = (uint8_t)(checksum % 256);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	3315      	adds	r3, #21
 80021fa:	89fa      	ldrh	r2, [r7, #14]
 80021fc:	b2d2      	uxtb	r2, r2
 80021fe:	701a      	strb	r2, [r3, #0]
}
 8002200:	bf00      	nop
 8002202:	3714      	adds	r7, #20
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <panda_comunication_validate_checksum>:

HAL_StatusTypeDef panda_comunication_validate_checksum(Global_Struct_t *Global_Struct){
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
	uint16_t checksum = 0;
 8002214:	2300      	movs	r3, #0
 8002216:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i< PANDA_STRUCT_GLOBAL_SIZE-1; i++){
 8002218:	2300      	movs	r3, #0
 800221a:	60bb      	str	r3, [r7, #8]
 800221c:	e00a      	b.n	8002234 <panda_comunication_validate_checksum+0x28>
		checksum += Global_Struct[i];
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	4413      	add	r3, r2
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	b29a      	uxth	r2, r3
 8002228:	89fb      	ldrh	r3, [r7, #14]
 800222a:	4413      	add	r3, r2
 800222c:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i< PANDA_STRUCT_GLOBAL_SIZE-1; i++){
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	3301      	adds	r3, #1
 8002232:	60bb      	str	r3, [r7, #8]
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	2b19      	cmp	r3, #25
 8002238:	ddf1      	ble.n	800221e <panda_comunication_validate_checksum+0x12>
	}
	if (Global_Struct[PANDA_STRUCT_GLOBAL_SIZE-1] == (uint8_t)(checksum % 256)) return HAL_OK;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	331a      	adds	r3, #26
 800223e:	781a      	ldrb	r2, [r3, #0]
 8002240:	89fb      	ldrh	r3, [r7, #14]
 8002242:	b2db      	uxtb	r3, r3
 8002244:	429a      	cmp	r2, r3
 8002246:	d101      	bne.n	800224c <panda_comunication_validate_checksum+0x40>
 8002248:	2300      	movs	r3, #0
 800224a:	e000      	b.n	800224e <panda_comunication_validate_checksum+0x42>
	else return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
}
 800224e:	4618      	mov	r0, r3
 8002250:	3714      	adds	r7, #20
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <panda_HCSR04_init>:
#include <stdint.h>
#include <stdio.h>



HCSR04_StatusTypeDef panda_HCSR04_init(HCSR04_t* ultrasound, TIM_HandleTypeDef *timer, GPIO_TypeDef* port_trigger, uint16_t pin_trigger){
 800225a:	b480      	push	{r7}
 800225c:	b087      	sub	sp, #28
 800225e:	af00      	add	r7, sp, #0
 8002260:	60f8      	str	r0, [r7, #12]
 8002262:	60b9      	str	r1, [r7, #8]
 8002264:	607a      	str	r2, [r7, #4]
 8002266:	807b      	strh	r3, [r7, #2]

	int8_t res = HCSR04_ERR;
 8002268:	2301      	movs	r3, #1
 800226a:	75fb      	strb	r3, [r7, #23]

	ultrasound->port_trigger = port_trigger;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	601a      	str	r2, [r3, #0]
	ultrasound->pin_trigger = pin_trigger;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	887a      	ldrh	r2, [r7, #2]
 8002276:	809a      	strh	r2, [r3, #4]
	ultrasound->timer = timer;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	68ba      	ldr	r2, [r7, #8]
 800227c:	611a      	str	r2, [r3, #16]
	ultrasound->IC_Val1 =  0;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2200      	movs	r2, #0
 8002282:	615a      	str	r2, [r3, #20]
	ultrasound->IC_Val2 = 0;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2200      	movs	r2, #0
 8002288:	619a      	str	r2, [r3, #24]
	ultrasound->Difference =0;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2200      	movs	r2, #0
 800228e:	61da      	str	r2, [r3, #28]
	ultrasound->Is_First_Captured = 0;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 2020 	strb.w	r2, [r3, #32]
	ultrasound->Distance = 0;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2200      	movs	r2, #0
 800229c:	845a      	strh	r2, [r3, #34]	; 0x22

	res = HCSR04_OK;
 800229e:	2300      	movs	r3, #0
 80022a0:	75fb      	strb	r3, [r7, #23]

	return res;
 80022a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	371c      	adds	r7, #28
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <panda_HCSR04_callback_evaluations>:





HCSR04_StatusTypeDef panda_HCSR04_callback_evaluations(HCSR04_t* ultrasound, uint32_t Channel){
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]

	uint8_t res = HCSR04_ERR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	73fb      	strb	r3, [r7, #15]

	if (ultrasound->Is_First_Captured==0)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d175      	bne.n	80023b4 <panda_HCSR04_callback_evaluations+0x104>
	{
		ultrasound->IC_Val1 = HAL_TIM_ReadCapturedValue(ultrasound->timer, Channel);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	691b      	ldr	r3, [r3, #16]
 80022cc:	6839      	ldr	r1, [r7, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f005 f800 	bl	80072d4 <HAL_TIM_ReadCapturedValue>
 80022d4:	4602      	mov	r2, r0
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	615a      	str	r2, [r3, #20]
		ultrasound->Is_First_Captured = 1;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2201      	movs	r2, #1
 80022de:	f883 2020 	strb.w	r2, [r3, #32]
		__HAL_TIM_SET_CAPTUREPOLARITY(ultrasound->timer, Channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d10a      	bne.n	80022fe <panda_HCSR04_callback_evaluations+0x4e>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6a1a      	ldr	r2, [r3, #32]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f022 020a 	bic.w	r2, r2, #10
 80022fa:	621a      	str	r2, [r3, #32]
 80022fc:	e025      	b.n	800234a <panda_HCSR04_callback_evaluations+0x9a>
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	2b04      	cmp	r3, #4
 8002302:	d10a      	bne.n	800231a <panda_HCSR04_callback_evaluations+0x6a>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	6912      	ldr	r2, [r2, #16]
 8002310:	6812      	ldr	r2, [r2, #0]
 8002312:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002316:	6213      	str	r3, [r2, #32]
 8002318:	e017      	b.n	800234a <panda_HCSR04_callback_evaluations+0x9a>
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	2b08      	cmp	r3, #8
 800231e:	d10a      	bne.n	8002336 <panda_HCSR04_callback_evaluations+0x86>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6a1b      	ldr	r3, [r3, #32]
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	6912      	ldr	r2, [r2, #16]
 800232c:	6812      	ldr	r2, [r2, #0]
 800232e:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8002332:	6213      	str	r3, [r2, #32]
 8002334:	e009      	b.n	800234a <panda_HCSR04_callback_evaluations+0x9a>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6a1b      	ldr	r3, [r3, #32]
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	6912      	ldr	r2, [r2, #16]
 8002342:	6812      	ldr	r2, [r2, #0]
 8002344:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8002348:	6213      	str	r3, [r2, #32]
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d10a      	bne.n	8002366 <panda_HCSR04_callback_evaluations+0xb6>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6a1a      	ldr	r2, [r3, #32]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f042 0202 	orr.w	r2, r2, #2
 8002362:	621a      	str	r2, [r3, #32]
 8002364:	e0d2      	b.n	800250c <panda_HCSR04_callback_evaluations+0x25c>
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	2b04      	cmp	r3, #4
 800236a:	d10a      	bne.n	8002382 <panda_HCSR04_callback_evaluations+0xd2>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6912      	ldr	r2, [r2, #16]
 8002378:	6812      	ldr	r2, [r2, #0]
 800237a:	f043 0320 	orr.w	r3, r3, #32
 800237e:	6213      	str	r3, [r2, #32]
 8002380:	e0c4      	b.n	800250c <panda_HCSR04_callback_evaluations+0x25c>
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	2b08      	cmp	r3, #8
 8002386:	d10a      	bne.n	800239e <panda_HCSR04_callback_evaluations+0xee>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	6912      	ldr	r2, [r2, #16]
 8002394:	6812      	ldr	r2, [r2, #0]
 8002396:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800239a:	6213      	str	r3, [r2, #32]
 800239c:	e0b6      	b.n	800250c <panda_HCSR04_callback_evaluations+0x25c>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	6912      	ldr	r2, [r2, #16]
 80023aa:	6812      	ldr	r2, [r2, #0]
 80023ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80023b0:	6213      	str	r3, [r2, #32]
 80023b2:	e0ab      	b.n	800250c <panda_HCSR04_callback_evaluations+0x25c>
	}

	else if (ultrasound->Is_First_Captured==1)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	f040 80a6 	bne.w	800250c <panda_HCSR04_callback_evaluations+0x25c>
	{
		ultrasound->IC_Val2 = HAL_TIM_ReadCapturedValue(ultrasound->timer, Channel);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	6839      	ldr	r1, [r7, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f004 ff84 	bl	80072d4 <HAL_TIM_ReadCapturedValue>
 80023cc:	4602      	mov	r2, r0
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	619a      	str	r2, [r3, #24]
		__HAL_TIM_SET_COUNTER(ultrasound->timer, 0);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2200      	movs	r2, #0
 80023da:	625a      	str	r2, [r3, #36]	; 0x24

		if (ultrasound->IC_Val2 > ultrasound->IC_Val1)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	699a      	ldr	r2, [r3, #24]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	695b      	ldr	r3, [r3, #20]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d907      	bls.n	80023f8 <panda_HCSR04_callback_evaluations+0x148>
		{
			ultrasound->Difference = ultrasound->IC_Val2-ultrasound->IC_Val1;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	699a      	ldr	r2, [r3, #24]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	1ad2      	subs	r2, r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	61da      	str	r2, [r3, #28]
 80023f6:	e00f      	b.n	8002418 <panda_HCSR04_callback_evaluations+0x168>
		}

		else if (ultrasound->IC_Val1 > ultrasound->IC_Val2)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	695a      	ldr	r2, [r3, #20]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	429a      	cmp	r2, r3
 8002402:	d909      	bls.n	8002418 <panda_HCSR04_callback_evaluations+0x168>
		{
			ultrasound->Difference = (0xffff - ultrasound->IC_Val1) + ultrasound->IC_Val2;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	699a      	ldr	r2, [r3, #24]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	695b      	ldr	r3, [r3, #20]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8002412:	33ff      	adds	r3, #255	; 0xff
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	61d3      	str	r3, [r2, #28]
		}
		ultrasound->Distance = ultrasound->Difference *0.017;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	69db      	ldr	r3, [r3, #28]
 800241c:	4618      	mov	r0, r3
 800241e:	f7fe f879 	bl	8000514 <__aeabi_ui2d>
 8002422:	a33d      	add	r3, pc, #244	; (adr r3, 8002518 <panda_HCSR04_callback_evaluations+0x268>)
 8002424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002428:	f7fe f8ee 	bl	8000608 <__aeabi_dmul>
 800242c:	4602      	mov	r2, r0
 800242e:	460b      	mov	r3, r1
 8002430:	4610      	mov	r0, r2
 8002432:	4619      	mov	r1, r3
 8002434:	f7fe fbc0 	bl	8000bb8 <__aeabi_d2uiz>
 8002438:	4603      	mov	r3, r0
 800243a:	b29a      	uxth	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	845a      	strh	r2, [r3, #34]	; 0x22

		ultrasound->Is_First_Captured = 0;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 2020 	strb.w	r2, [r3, #32]

		__HAL_TIM_SET_CAPTUREPOLARITY(ultrasound->timer, Channel, TIM_INPUTCHANNELPOLARITY_RISING);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d10a      	bne.n	8002464 <panda_HCSR04_callback_evaluations+0x1b4>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6a1a      	ldr	r2, [r3, #32]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 020a 	bic.w	r2, r2, #10
 8002460:	621a      	str	r2, [r3, #32]
 8002462:	e025      	b.n	80024b0 <panda_HCSR04_callback_evaluations+0x200>
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	2b04      	cmp	r3, #4
 8002468:	d10a      	bne.n	8002480 <panda_HCSR04_callback_evaluations+0x1d0>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	6912      	ldr	r2, [r2, #16]
 8002476:	6812      	ldr	r2, [r2, #0]
 8002478:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800247c:	6213      	str	r3, [r2, #32]
 800247e:	e017      	b.n	80024b0 <panda_HCSR04_callback_evaluations+0x200>
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	2b08      	cmp	r3, #8
 8002484:	d10a      	bne.n	800249c <panda_HCSR04_callback_evaluations+0x1ec>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	6912      	ldr	r2, [r2, #16]
 8002492:	6812      	ldr	r2, [r2, #0]
 8002494:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8002498:	6213      	str	r3, [r2, #32]
 800249a:	e009      	b.n	80024b0 <panda_HCSR04_callback_evaluations+0x200>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	6912      	ldr	r2, [r2, #16]
 80024a8:	6812      	ldr	r2, [r2, #0]
 80024aa:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80024ae:	6213      	str	r3, [r2, #32]
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d108      	bne.n	80024c8 <panda_HCSR04_callback_evaluations+0x218>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6a12      	ldr	r2, [r2, #32]
 80024c4:	621a      	str	r2, [r3, #32]
 80024c6:	e01f      	b.n	8002508 <panda_HCSR04_callback_evaluations+0x258>
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	d108      	bne.n	80024e0 <panda_HCSR04_callback_evaluations+0x230>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	6912      	ldr	r2, [r2, #16]
 80024d8:	6812      	ldr	r2, [r2, #0]
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	6213      	str	r3, [r2, #32]
 80024de:	e013      	b.n	8002508 <panda_HCSR04_callback_evaluations+0x258>
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	2b08      	cmp	r3, #8
 80024e4:	d108      	bne.n	80024f8 <panda_HCSR04_callback_evaluations+0x248>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	6912      	ldr	r2, [r2, #16]
 80024f0:	6812      	ldr	r2, [r2, #0]
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	6213      	str	r3, [r2, #32]
 80024f6:	e007      	b.n	8002508 <panda_HCSR04_callback_evaluations+0x258>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	6912      	ldr	r2, [r2, #16]
 8002502:	6812      	ldr	r2, [r2, #0]
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	6213      	str	r3, [r2, #32]


		res = HCSR04_OK;
 8002508:	2300      	movs	r3, #0
 800250a:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800250c:	7bfb      	ldrb	r3, [r7, #15]
}
 800250e:	4618      	mov	r0, r3
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	b020c49c 	.word	0xb020c49c
 800251c:	3f916872 	.word	0x3f916872

08002520 <panda_HCSR04_reset>:


HCSR04_StatusTypeDef panda_HCSR04_reset(HCSR04_t* ultrasound_left, HCSR04_t* ultrasound_middle, HCSR04_t* ultrasound_right)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
	uint8_t res = HCSR04_ERR;
 800252c:	2301      	movs	r3, #1
 800252e:	74fb      	strb	r3, [r7, #19]

	for(int i = 0; i<4; i++) HAL_GPIO_WritePin(ultrasound_left->port_trigger, ultrasound_left->pin_trigger, GPIO_PIN_SET);
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]
 8002534:	e00a      	b.n	800254c <panda_HCSR04_reset+0x2c>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6818      	ldr	r0, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	889b      	ldrh	r3, [r3, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	4619      	mov	r1, r3
 8002542:	f002 f8c3 	bl	80046cc <HAL_GPIO_WritePin>
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	3301      	adds	r3, #1
 800254a:	617b      	str	r3, [r7, #20]
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	2b03      	cmp	r3, #3
 8002550:	ddf1      	ble.n	8002536 <panda_HCSR04_reset+0x16>

	HAL_GPIO_WritePin(ultrasound_left->port_trigger, ultrasound_left->pin_trigger, GPIO_PIN_RESET);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6818      	ldr	r0, [r3, #0]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	889b      	ldrh	r3, [r3, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	4619      	mov	r1, r3
 800255e:	f002 f8b5 	bl	80046cc <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(ultrasound_left->timer, TIM_IT_CC1);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68da      	ldr	r2, [r3, #12]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f042 0202 	orr.w	r2, r2, #2
 8002574:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COUNTER(ultrasound_left->timer, 0);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2200      	movs	r2, #0
 800257e:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_ENABLE_IT(ultrasound_middle->timer, TIM_IT_CC1);
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68da      	ldr	r2, [r3, #12]
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f042 0202 	orr.w	r2, r2, #2
 8002592:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COUNTER(ultrasound_middle->timer, 0);
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2200      	movs	r2, #0
 800259c:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_ENABLE_IT(ultrasound_right->timer, TIM_IT_CC1);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68da      	ldr	r2, [r3, #12]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f042 0202 	orr.w	r2, r2, #2
 80025b0:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COUNTER(ultrasound_right->timer, 0);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2200      	movs	r2, #0
 80025ba:	625a      	str	r2, [r3, #36]	; 0x24
	res = HCSR04_OK;
 80025bc:	2300      	movs	r3, #0
 80025be:	74fb      	strb	r3, [r7, #19]

	return res;
 80025c0:	7cfb      	ldrb	r3, [r7, #19]
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3718      	adds	r7, #24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <panda_HCSR04_get_distance>:


uint16_t panda_HCSR04_get_distance(HCSR04_t* ultrasound){
 80025ca:	b480      	push	{r7}
 80025cc:	b083      	sub	sp, #12
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
	if(ultrasound->Is_First_Captured == 0 && ultrasound->Distance > 9){
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d106      	bne.n	80025ea <panda_HCSR04_get_distance+0x20>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80025e0:	2b09      	cmp	r3, #9
 80025e2:	d902      	bls.n	80025ea <panda_HCSR04_get_distance+0x20>
		return ultrasound->Distance;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80025e8:	e001      	b.n	80025ee <panda_HCSR04_get_distance+0x24>
	}else{
		return 999;
 80025ea:	f240 33e7 	movw	r3, #999	; 0x3e7
	}
	__HAL_TIM_DISABLE_IT(ultrasound->timer, TIM_IT_CC1);
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <motor_send_command>:
/** @brief Last direction of the motor */
uint8_t last_direction = 0;



void motor_send_command(UART_HandleTypeDef *huart, uint8_t address, uint8_t command, uint8_t speed){
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b084      	sub	sp, #16
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
 8002602:	4608      	mov	r0, r1
 8002604:	4611      	mov	r1, r2
 8002606:	461a      	mov	r2, r3
 8002608:	4603      	mov	r3, r0
 800260a:	70fb      	strb	r3, [r7, #3]
 800260c:	460b      	mov	r3, r1
 800260e:	70bb      	strb	r3, [r7, #2]
 8002610:	4613      	mov	r3, r2
 8002612:	707b      	strb	r3, [r7, #1]
	uint8_t checksum = (address+command+speed) & 127;
 8002614:	78fa      	ldrb	r2, [r7, #3]
 8002616:	78bb      	ldrb	r3, [r7, #2]
 8002618:	4413      	add	r3, r2
 800261a:	b2da      	uxtb	r2, r3
 800261c:	787b      	ldrb	r3, [r7, #1]
 800261e:	4413      	add	r3, r2
 8002620:	b2db      	uxtb	r3, r3
 8002622:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002626:	73fb      	strb	r3, [r7, #15]
	uint8_t data[4] = {address, command, speed, checksum};
 8002628:	78fb      	ldrb	r3, [r7, #3]
 800262a:	723b      	strb	r3, [r7, #8]
 800262c:	78bb      	ldrb	r3, [r7, #2]
 800262e:	727b      	strb	r3, [r7, #9]
 8002630:	787b      	ldrb	r3, [r7, #1]
 8002632:	72bb      	strb	r3, [r7, #10]
 8002634:	7bfb      	ldrb	r3, [r7, #15]
 8002636:	72fb      	strb	r3, [r7, #11]
	HAL_UART_Transmit(huart, data, 4, 10);
 8002638:	f107 0108 	add.w	r1, r7, #8
 800263c:	230a      	movs	r3, #10
 800263e:	2204      	movs	r2, #4
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f005 f991 	bl	8007968 <HAL_UART_Transmit>
}
 8002646:	bf00      	nop
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <motor_mixed_drive_forward>:
void motor_independent_drive_backward(UART_HandleTypeDef *huart, uint8_t address, uint8_t speed, Driver_MotorTypeDef motor){
	motor_send_command(huart, address, motor+1, speed);
}


void motor_mixed_drive_forward(UART_HandleTypeDef *huart, uint8_t address, uint8_t speed){
 800264e:	b580      	push	{r7, lr}
 8002650:	b082      	sub	sp, #8
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
 8002656:	460b      	mov	r3, r1
 8002658:	70fb      	strb	r3, [r7, #3]
 800265a:	4613      	mov	r3, r2
 800265c:	70bb      	strb	r3, [r7, #2]
	motor_send_command(huart, address, 8, speed);
 800265e:	78bb      	ldrb	r3, [r7, #2]
 8002660:	78f9      	ldrb	r1, [r7, #3]
 8002662:	2208      	movs	r2, #8
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f7ff ffc8 	bl	80025fa <motor_send_command>
}
 800266a:	bf00      	nop
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <motor_mixed_turn_right>:
void motor_mixed_drive_backward(UART_HandleTypeDef *huart, uint8_t address, uint8_t speed){
	motor_send_command(huart, address, 9, speed);
}


void motor_mixed_turn_right(UART_HandleTypeDef *huart, uint8_t address, uint8_t speed){
 8002672:	b580      	push	{r7, lr}
 8002674:	b082      	sub	sp, #8
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
 800267a:	460b      	mov	r3, r1
 800267c:	70fb      	strb	r3, [r7, #3]
 800267e:	4613      	mov	r3, r2
 8002680:	70bb      	strb	r3, [r7, #2]
	motor_send_command(huart, address, 10, speed);
 8002682:	78bb      	ldrb	r3, [r7, #2]
 8002684:	78f9      	ldrb	r1, [r7, #3]
 8002686:	220a      	movs	r2, #10
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f7ff ffb6 	bl	80025fa <motor_send_command>
}
 800268e:	bf00      	nop
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <motor_mixed_stop>:
void motor_independent_stop(UART_HandleTypeDef *huart, uint8_t address, Driver_MotorTypeDef motor){
	motor_independent_drive_forward(huart, address, 0, motor);
}


void motor_mixed_stop(UART_HandleTypeDef *huart, uint8_t address){
 8002696:	b580      	push	{r7, lr}
 8002698:	b082      	sub	sp, #8
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
 800269e:	460b      	mov	r3, r1
 80026a0:	70fb      	strb	r3, [r7, #3]
	motor_mixed_drive_forward(huart, address, 0);
 80026a2:	78fb      	ldrb	r3, [r7, #3]
 80026a4:	2200      	movs	r2, #0
 80026a6:	4619      	mov	r1, r3
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f7ff ffd0 	bl	800264e <motor_mixed_drive_forward>
	motor_mixed_turn_right(huart, address, 0);
 80026ae:	78fb      	ldrb	r3, [r7, #3]
 80026b0:	2200      	movs	r2, #0
 80026b2:	4619      	mov	r1, r3
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f7ff ffdc 	bl	8002672 <motor_mixed_turn_right>
}
 80026ba:	bf00      	nop
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
	...

080026c4 <motor_mixed_drive>:


void motor_mixed_drive(UART_HandleTypeDef *huart, uint8_t address, uint8_t speed){
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	460b      	mov	r3, r1
 80026ce:	70fb      	strb	r3, [r7, #3]
 80026d0:	4613      	mov	r3, r2
 80026d2:	70bb      	strb	r3, [r7, #2]

	uint8_t dead_axis = 128;
 80026d4:	2380      	movs	r3, #128	; 0x80
 80026d6:	73fb      	strb	r3, [r7, #15]
	uint8_t direction = speed / (dead_axis);
 80026d8:	78ba      	ldrb	r2, [r7, #2]
 80026da:	7bfb      	ldrb	r3, [r7, #15]
 80026dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e0:	73bb      	strb	r3, [r7, #14]
	if(direction == 0) speed = -(speed-dead_axis)-1;
 80026e2:	7bbb      	ldrb	r3, [r7, #14]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d106      	bne.n	80026f6 <motor_mixed_drive+0x32>
 80026e8:	7bfa      	ldrb	r2, [r7, #15]
 80026ea:	78bb      	ldrb	r3, [r7, #2]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	3b01      	subs	r3, #1
 80026f2:	70bb      	strb	r3, [r7, #2]
 80026f4:	e006      	b.n	8002704 <motor_mixed_drive+0x40>
	else if (direction == 1) speed = speed - dead_axis;
 80026f6:	7bbb      	ldrb	r3, [r7, #14]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d103      	bne.n	8002704 <motor_mixed_drive+0x40>
 80026fc:	78ba      	ldrb	r2, [r7, #2]
 80026fe:	7bfb      	ldrb	r3, [r7, #15]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	70bb      	strb	r3, [r7, #2]

	if (direction != last_direction){
		//motor_independent_stop(huart, address, motor);
	}
	motor_send_command(huart, address, 9 - direction, speed);
 8002704:	7bbb      	ldrb	r3, [r7, #14]
 8002706:	f1c3 0309 	rsb	r3, r3, #9
 800270a:	b2da      	uxtb	r2, r3
 800270c:	78bb      	ldrb	r3, [r7, #2]
 800270e:	78f9      	ldrb	r1, [r7, #3]
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f7ff ff72 	bl	80025fa <motor_send_command>

	last_direction = direction;
 8002716:	4a03      	ldr	r2, [pc, #12]	; (8002724 <motor_mixed_drive+0x60>)
 8002718:	7bbb      	ldrb	r3, [r7, #14]
 800271a:	7013      	strb	r3, [r2, #0]
}
 800271c:	bf00      	nop
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	200003f8 	.word	0x200003f8

08002728 <motor_mixed_turn>:


void motor_mixed_turn(UART_HandleTypeDef *huart, uint8_t address, uint8_t speed){
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	460b      	mov	r3, r1
 8002732:	70fb      	strb	r3, [r7, #3]
 8002734:	4613      	mov	r3, r2
 8002736:	70bb      	strb	r3, [r7, #2]
	uint8_t dead_axis = 128;
 8002738:	2380      	movs	r3, #128	; 0x80
 800273a:	73fb      	strb	r3, [r7, #15]
	uint8_t direction = speed / (dead_axis);
 800273c:	78ba      	ldrb	r2, [r7, #2]
 800273e:	7bfb      	ldrb	r3, [r7, #15]
 8002740:	fbb2 f3f3 	udiv	r3, r2, r3
 8002744:	73bb      	strb	r3, [r7, #14]
	if(direction == 0) speed = -(speed-dead_axis)-1;
 8002746:	7bbb      	ldrb	r3, [r7, #14]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d106      	bne.n	800275a <motor_mixed_turn+0x32>
 800274c:	7bfa      	ldrb	r2, [r7, #15]
 800274e:	78bb      	ldrb	r3, [r7, #2]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	b2db      	uxtb	r3, r3
 8002754:	3b01      	subs	r3, #1
 8002756:	70bb      	strb	r3, [r7, #2]
 8002758:	e006      	b.n	8002768 <motor_mixed_turn+0x40>
	else if (direction == 1) speed = speed - dead_axis;
 800275a:	7bbb      	ldrb	r3, [r7, #14]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d103      	bne.n	8002768 <motor_mixed_turn+0x40>
 8002760:	78ba      	ldrb	r2, [r7, #2]
 8002762:	7bfb      	ldrb	r3, [r7, #15]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	70bb      	strb	r3, [r7, #2]

	if (direction != last_direction){
		//motor_independent_stop(huart, address, motor);
	}
	motor_send_command(huart, address, 11 - direction, speed);
 8002768:	7bbb      	ldrb	r3, [r7, #14]
 800276a:	f1c3 030b 	rsb	r3, r3, #11
 800276e:	b2da      	uxtb	r2, r3
 8002770:	78bb      	ldrb	r3, [r7, #2]
 8002772:	78f9      	ldrb	r1, [r7, #3]
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f7ff ff40 	bl	80025fa <motor_send_command>

	last_direction = direction;
 800277a:	4a03      	ldr	r2, [pc, #12]	; (8002788 <motor_mixed_turn+0x60>)
 800277c:	7bbb      	ldrb	r3, [r7, #14]
 800277e:	7013      	strb	r3, [r2, #0]
}
 8002780:	bf00      	nop
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	200003f8 	.word	0x200003f8

0800278c <panda_mpu6050_init>:



#include "panda_mpu6050.h"

MPU6050_StatusTypeDef panda_mpu6050_init(MPU6050_t *MPU6050, I2C_HandleTypeDef *hi2c){
 800278c:	b580      	push	{r7, lr}
 800278e:	b088      	sub	sp, #32
 8002790:	af04      	add	r7, sp, #16
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]

	MPU6050->hi2c=hi2c;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	601a      	str	r2, [r3, #0]

	MPU6050->Acc_x=0;
 800279c:	6879      	ldr	r1, [r7, #4]
 800279e:	f04f 0200 	mov.w	r2, #0
 80027a2:	f04f 0300 	mov.w	r3, #0
 80027a6:	e9c1 2304 	strd	r2, r3, [r1, #16]
	MPU6050->Acc_y=0;
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	f04f 0200 	mov.w	r2, #0
 80027b0:	f04f 0300 	mov.w	r3, #0
 80027b4:	e9c1 2306 	strd	r2, r3, [r1, #24]
	MPU6050->Acc_z=0;
 80027b8:	6879      	ldr	r1, [r7, #4]
 80027ba:	f04f 0200 	mov.w	r2, #0
 80027be:	f04f 0300 	mov.w	r3, #0
 80027c2:	e9c1 2308 	strd	r2, r3, [r1, #32]

	MPU6050->Gyro_x=0;
 80027c6:	6879      	ldr	r1, [r7, #4]
 80027c8:	f04f 0200 	mov.w	r2, #0
 80027cc:	f04f 0300 	mov.w	r3, #0
 80027d0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	MPU6050->Gyro_y=0;
 80027d4:	6879      	ldr	r1, [r7, #4]
 80027d6:	f04f 0200 	mov.w	r2, #0
 80027da:	f04f 0300 	mov.w	r3, #0
 80027de:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	MPU6050->Gyro_z=0;
 80027e2:	6879      	ldr	r1, [r7, #4]
 80027e4:	f04f 0200 	mov.w	r2, #0
 80027e8:	f04f 0300 	mov.w	r3, #0
 80027ec:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	MPU6050->Acc_X_RAW=0;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	809a      	strh	r2, [r3, #4]
	MPU6050->Acc_Y_RAW=0;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	80da      	strh	r2, [r3, #6]
	MPU6050->Acc_Z_RAW=0;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	811a      	strh	r2, [r3, #8]

	MPU6050->Gyro_X_RAW=0;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	815a      	strh	r2, [r3, #10]
	MPU6050->Gyro_Y_RAW=0;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	819a      	strh	r2, [r3, #12]
	MPU6050->Gyro_Z_RAW=0;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	81da      	strh	r2, [r3, #14]

	MPU6050->Temperature=0;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f04f 0200 	mov.w	r2, #0
 800281a:	641a      	str	r2, [r3, #64]	; 0x40

	uint8_t check,data;

	HAL_I2C_Mem_Read(MPU6050->hi2c, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1 , 1000);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6818      	ldr	r0, [r3, #0]
 8002820:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002824:	9302      	str	r3, [sp, #8]
 8002826:	2301      	movs	r3, #1
 8002828:	9301      	str	r3, [sp, #4]
 800282a:	f107 030f 	add.w	r3, r7, #15
 800282e:	9300      	str	r3, [sp, #0]
 8002830:	2301      	movs	r3, #1
 8002832:	2275      	movs	r2, #117	; 0x75
 8002834:	21d0      	movs	r1, #208	; 0xd0
 8002836:	f002 fbc3 	bl	8004fc0 <HAL_I2C_Mem_Read>
	if (check == 104)
 800283a:	7bfb      	ldrb	r3, [r7, #15]
 800283c:	2b68      	cmp	r3, #104	; 0x68
 800283e:	d145      	bne.n	80028cc <panda_mpu6050_init+0x140>
	{
		data = 0;
 8002840:	2300      	movs	r3, #0
 8002842:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(MPU6050->hi2c,MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1, 1000);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6818      	ldr	r0, [r3, #0]
 8002848:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800284c:	9302      	str	r3, [sp, #8]
 800284e:	2301      	movs	r3, #1
 8002850:	9301      	str	r3, [sp, #4]
 8002852:	f107 030e 	add.w	r3, r7, #14
 8002856:	9300      	str	r3, [sp, #0]
 8002858:	2301      	movs	r3, #1
 800285a:	226b      	movs	r2, #107	; 0x6b
 800285c:	21d0      	movs	r1, #208	; 0xd0
 800285e:	f002 fab5 	bl	8004dcc <HAL_I2C_Mem_Write>
		data = 0x07;
 8002862:	2307      	movs	r3, #7
 8002864:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(MPU6050->hi2c, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, 1000);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6818      	ldr	r0, [r3, #0]
 800286a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800286e:	9302      	str	r3, [sp, #8]
 8002870:	2301      	movs	r3, #1
 8002872:	9301      	str	r3, [sp, #4]
 8002874:	f107 030e 	add.w	r3, r7, #14
 8002878:	9300      	str	r3, [sp, #0]
 800287a:	2301      	movs	r3, #1
 800287c:	2219      	movs	r2, #25
 800287e:	21d0      	movs	r1, #208	; 0xd0
 8002880:	f002 faa4 	bl	8004dcc <HAL_I2C_Mem_Write>
		data = 0x00;
 8002884:	2300      	movs	r3, #0
 8002886:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(MPU6050->hi2c, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, 1000);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6818      	ldr	r0, [r3, #0]
 800288c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002890:	9302      	str	r3, [sp, #8]
 8002892:	2301      	movs	r3, #1
 8002894:	9301      	str	r3, [sp, #4]
 8002896:	f107 030e 	add.w	r3, r7, #14
 800289a:	9300      	str	r3, [sp, #0]
 800289c:	2301      	movs	r3, #1
 800289e:	221c      	movs	r2, #28
 80028a0:	21d0      	movs	r1, #208	; 0xd0
 80028a2:	f002 fa93 	bl	8004dcc <HAL_I2C_Mem_Write>

		data = 0x00;
 80028a6:	2300      	movs	r3, #0
 80028a8:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(MPU6050->hi2c, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, 1000);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6818      	ldr	r0, [r3, #0]
 80028ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028b2:	9302      	str	r3, [sp, #8]
 80028b4:	2301      	movs	r3, #1
 80028b6:	9301      	str	r3, [sp, #4]
 80028b8:	f107 030e 	add.w	r3, r7, #14
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	2301      	movs	r3, #1
 80028c0:	221b      	movs	r2, #27
 80028c2:	21d0      	movs	r1, #208	; 0xd0
 80028c4:	f002 fa82 	bl	8004dcc <HAL_I2C_Mem_Write>

		return MPU6050_OK;
 80028c8:	2300      	movs	r3, #0
 80028ca:	e001      	b.n	80028d0 <panda_mpu6050_init+0x144>
	}

	return MPU6050_ERROR;
 80028cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3710      	adds	r7, #16
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <panda_psx_init>:
  */

#include "panda_psx_controller.h"


PSX_StatusTypeDef panda_psx_init(psx_t* psx, SPI_HandleTypeDef* spi, GPIO_TypeDef* gpio_att_port, uint16_t gpio_att_pin){
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
 80028e4:	807b      	strh	r3, [r7, #2]
	psx->spi = spi;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	68ba      	ldr	r2, [r7, #8]
 80028ea:	601a      	str	r2, [r3, #0]
	psx->gpio_att_port = gpio_att_port;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	605a      	str	r2, [r3, #4]
	psx->gpio_att_pin = gpio_att_pin;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	887a      	ldrh	r2, [r7, #2]
 80028f6:	811a      	strh	r2, [r3, #8]
	HAL_GPIO_WritePin(psx->gpio_att_port, psx->gpio_att_pin, GPIO_PIN_SET);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6858      	ldr	r0, [r3, #4]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	891b      	ldrh	r3, [r3, #8]
 8002900:	2201      	movs	r2, #1
 8002902:	4619      	mov	r1, r3
 8002904:	f001 fee2 	bl	80046cc <HAL_GPIO_WritePin>
	return PSX_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <panda_psx_read_gamepad>:


PSX_StatusTypeDef panda_psx_read_gamepad(psx_t* psx){
 8002912:	b580      	push	{r7, lr}
 8002914:	b08a      	sub	sp, #40	; 0x28
 8002916:	af02      	add	r7, sp, #8
 8002918:	6078      	str	r0, [r7, #4]
	uint8_t TX[21] = {0x01, 0x42};
 800291a:	f244 2301 	movw	r3, #16897	; 0x4201
 800291e:	60bb      	str	r3, [r7, #8]
 8002920:	f107 030c 	add.w	r3, r7, #12
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]
 8002928:	605a      	str	r2, [r3, #4]
 800292a:	609a      	str	r2, [r3, #8]
 800292c:	60da      	str	r2, [r3, #12]
 800292e:	741a      	strb	r2, [r3, #16]
	HAL_GPIO_TogglePin(psx->gpio_att_port, psx->gpio_att_pin);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685a      	ldr	r2, [r3, #4]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	891b      	ldrh	r3, [r3, #8]
 8002938:	4619      	mov	r1, r3
 800293a:	4610      	mov	r0, r2
 800293c:	f001 fedf 	bl	80046fe <HAL_GPIO_TogglePin>
	if ( HAL_SPI_TransmitReceive(psx->spi, TX, psx->RX, 9, 10)!= HAL_OK ) return PSX_ERROR;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6818      	ldr	r0, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f103 020a 	add.w	r2, r3, #10
 800294a:	f107 0108 	add.w	r1, r7, #8
 800294e:	230a      	movs	r3, #10
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	2309      	movs	r3, #9
 8002954:	f003 fe87 	bl	8006666 <HAL_SPI_TransmitReceive>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d002      	beq.n	8002964 <panda_psx_read_gamepad+0x52>
 800295e:	f04f 33ff 	mov.w	r3, #4294967295
 8002962:	e008      	b.n	8002976 <panda_psx_read_gamepad+0x64>
	HAL_GPIO_TogglePin(psx->gpio_att_port, psx->gpio_att_pin);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685a      	ldr	r2, [r3, #4]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	891b      	ldrh	r3, [r3, #8]
 800296c:	4619      	mov	r1, r3
 800296e:	4610      	mov	r0, r2
 8002970:	f001 fec5 	bl	80046fe <HAL_GPIO_TogglePin>
	return PSX_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3720      	adds	r7, #32
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <panda_psx_get_command>:
	}
	HAL_UART_Transmit(&huart2, newline, 2, 10);
}


uint8_t panda_psx_get_command(psx_t* psx, PSX_ButtonsTypeDef button){
 800297e:	b480      	push	{r7}
 8002980:	b087      	sub	sp, #28
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
 8002986:	460b      	mov	r3, r1
 8002988:	70fb      	strb	r3, [r7, #3]
	int byte = button / 8;
 800298a:	78fb      	ldrb	r3, [r7, #3]
 800298c:	08db      	lsrs	r3, r3, #3
 800298e:	b2db      	uxtb	r3, r3
 8002990:	617b      	str	r3, [r7, #20]
	int bit = button % 8;
 8002992:	78fb      	ldrb	r3, [r7, #3]
 8002994:	f003 0307 	and.w	r3, r3, #7
 8002998:	613b      	str	r3, [r7, #16]
	int value = psx->RX[byte];
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	4413      	add	r3, r2
 80029a0:	330a      	adds	r3, #10
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	60fb      	str	r3, [r7, #12]
	unsigned char mask = 1 << bit;
 80029a6:	2201      	movs	r2, #1
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	72fb      	strb	r3, [r7, #11]
	return (value & mask) == 0;
 80029b0:	7afa      	ldrb	r2, [r7, #11]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	4013      	ands	r3, r2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	bf0c      	ite	eq
 80029ba:	2301      	moveq	r3, #1
 80029bc:	2300      	movne	r3, #0
 80029be:	b2db      	uxtb	r3, r3
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	371c      	adds	r7, #28
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <panda_psx_get_analog_intensity>:


uint8_t panda_psx_get_analog_intensity(psx_t* psx, PSX_AnalogTypeDef analog){
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	460b      	mov	r3, r1
 80029d6:	70fb      	strb	r3, [r7, #3]
	if(panda_psx_is_on(psx) == PSX_ERROR) return 128;
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 f823 	bl	8002a24 <panda_psx_is_on>
 80029de:	4603      	mov	r3, r0
 80029e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e4:	d101      	bne.n	80029ea <panda_psx_get_analog_intensity+0x1e>
 80029e6:	2380      	movs	r3, #128	; 0x80
 80029e8:	e018      	b.n	8002a1c <panda_psx_get_analog_intensity+0x50>
	if(panda_psx_is_analog(psx) == PSX_Analog){
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 f82c 	bl	8002a48 <panda_psx_is_analog>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d111      	bne.n	8002a1a <panda_psx_get_analog_intensity+0x4e>
		if(analog == LEFT_Y_AXIS || analog == RIGHT_Y_AXIS){ 	//127
 80029f6:	78fb      	ldrb	r3, [r7, #3]
 80029f8:	2b08      	cmp	r3, #8
 80029fa:	d002      	beq.n	8002a02 <panda_psx_get_analog_intensity+0x36>
 80029fc:	78fb      	ldrb	r3, [r7, #3]
 80029fe:	2b06      	cmp	r3, #6
 8002a00:	d106      	bne.n	8002a10 <panda_psx_get_analog_intensity+0x44>
			return 255 - psx->RX[analog];
 8002a02:	78fb      	ldrb	r3, [r7, #3]
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	4413      	add	r3, r2
 8002a08:	7a9b      	ldrb	r3, [r3, #10]
 8002a0a:	43db      	mvns	r3, r3
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	e005      	b.n	8002a1c <panda_psx_get_analog_intensity+0x50>
		}else{													//128
			return psx->RX[analog];
 8002a10:	78fb      	ldrb	r3, [r7, #3]
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	4413      	add	r3, r2
 8002a16:	7a9b      	ldrb	r3, [r3, #10]
 8002a18:	e000      	b.n	8002a1c <panda_psx_get_analog_intensity+0x50>
		}
	}else{
		return 128;
 8002a1a:	2380      	movs	r3, #128	; 0x80
	}
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3708      	adds	r7, #8
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <panda_psx_is_on>:

PSX_StatusTypeDef panda_psx_is_on(psx_t* psx){
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
	if(psx->RX[2] == 90) return PSX_OK;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	7b1b      	ldrb	r3, [r3, #12]
 8002a30:	2b5a      	cmp	r3, #90	; 0x5a
 8002a32:	d101      	bne.n	8002a38 <panda_psx_is_on+0x14>
 8002a34:	2300      	movs	r3, #0
 8002a36:	e001      	b.n	8002a3c <panda_psx_is_on+0x18>
	else return PSX_ERROR;
 8002a38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <panda_psx_is_analog>:

PSX_Mode panda_psx_is_analog(psx_t* psx){
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
	if(psx->RX[1] == 115) return PSX_Analog;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	7adb      	ldrb	r3, [r3, #11]
 8002a54:	2b73      	cmp	r3, #115	; 0x73
 8002a56:	d101      	bne.n	8002a5c <panda_psx_is_analog+0x14>
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e005      	b.n	8002a68 <panda_psx_is_analog+0x20>
	else if (psx->RX[1] == 65) return PSX_Digital;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	7adb      	ldrb	r3, [r3, #11]
 8002a60:	2b41      	cmp	r3, #65	; 0x41
 8002a62:	d101      	bne.n	8002a68 <panda_psx_is_analog+0x20>
 8002a64:	2300      	movs	r3, #0
 8002a66:	e7ff      	b.n	8002a68 <panda_psx_is_analog+0x20>
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <prvInitTCBArray>:
		return -1;
	}

	/* Initializes xTCBArray. */
	static void prvInitTCBArray( void )
	{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
	UBaseType_t uxIndex;
		for( uxIndex = 0; uxIndex < schedMAX_NUMBER_OF_PERIODIC_TASKS; uxIndex++)
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	607b      	str	r3, [r7, #4]
 8002a7e:	e00b      	b.n	8002a98 <prvInitTCBArray+0x24>
		{
			xTCBArray[ uxIndex ].xInUse = pdFALSE;
 8002a80:	4a0a      	ldr	r2, [pc, #40]	; (8002aac <prvInitTCBArray+0x38>)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2154      	movs	r1, #84	; 0x54
 8002a86:	fb01 f303 	mul.w	r3, r1, r3
 8002a8a:	4413      	add	r3, r2
 8002a8c:	333c      	adds	r3, #60	; 0x3c
 8002a8e:	2200      	movs	r2, #0
 8002a90:	601a      	str	r2, [r3, #0]
		for( uxIndex = 0; uxIndex < schedMAX_NUMBER_OF_PERIODIC_TASKS; uxIndex++)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	3301      	adds	r3, #1
 8002a96:	607b      	str	r3, [r7, #4]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d9f0      	bls.n	8002a80 <prvInitTCBArray+0xc>
		}
	}
 8002a9e:	bf00      	nop
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	20000400 	.word	0x20000400

08002ab0 <prvFindEmptyElementIndexTCB>:

	/* Find index for an empty entry in xTCBArray. Returns -1 if there is no empty entry. */
	static BaseType_t prvFindEmptyElementIndexTCB( void )
	{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
	BaseType_t xIndex;
		for( xIndex = 0; xIndex < schedMAX_NUMBER_OF_PERIODIC_TASKS; xIndex++ )
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	607b      	str	r3, [r7, #4]
 8002aba:	e00e      	b.n	8002ada <prvFindEmptyElementIndexTCB+0x2a>
		{
			if( pdFALSE == xTCBArray[ xIndex ].xInUse )
 8002abc:	4a0c      	ldr	r2, [pc, #48]	; (8002af0 <prvFindEmptyElementIndexTCB+0x40>)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2154      	movs	r1, #84	; 0x54
 8002ac2:	fb01 f303 	mul.w	r3, r1, r3
 8002ac6:	4413      	add	r3, r2
 8002ac8:	333c      	adds	r3, #60	; 0x3c
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d101      	bne.n	8002ad4 <prvFindEmptyElementIndexTCB+0x24>
			{
				return xIndex;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	e007      	b.n	8002ae4 <prvFindEmptyElementIndexTCB+0x34>
		for( xIndex = 0; xIndex < schedMAX_NUMBER_OF_PERIODIC_TASKS; xIndex++ )
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	607b      	str	r3, [r7, #4]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	dded      	ble.n	8002abc <prvFindEmptyElementIndexTCB+0xc>
			}
		}

		return -1;
 8002ae0:	f04f 33ff 	mov.w	r3, #4294967295
	}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	20000400 	.word	0x20000400

08002af4 <prvPeriodicTaskCode>:
#endif /* schedSCHEDULING_POLICY_EDF */

/* The whole function code that is executed by every periodic task.
 * This function wraps the task code specified by the user. */
static void prvPeriodicTaskCode( void *pvParameters )
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
SchedTCB_t *pxThisTask = ( SchedTCB_t * ) pvTaskGetThreadLocalStoragePointer( xTaskGetCurrentTaskHandle(), schedTHREAD_LOCAL_STORAGE_POINTER_INDEX );
 8002afc:	f007 fa84 	bl	800a008 <xTaskGetCurrentTaskHandle>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2100      	movs	r1, #0
 8002b04:	4618      	mov	r0, r3
 8002b06:	f007 f997 	bl	8009e38 <pvTaskGetThreadLocalStoragePointer>
 8002b0a:	60f8      	str	r0, [r7, #12]
	configASSERT( NULL != pxThisTask );
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d10a      	bne.n	8002b28 <prvPeriodicTaskCode+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b16:	f383 8811 	msr	BASEPRI, r3
 8002b1a:	f3bf 8f6f 	isb	sy
 8002b1e:	f3bf 8f4f 	dsb	sy
 8002b22:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002b24:	bf00      	nop
 8002b26:	e7fe      	b.n	8002b26 <prvPeriodicTaskCode+0x32>

	if( 0 != pxThisTask->xReleaseTime )
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d008      	beq.n	8002b42 <prvPeriodicTaskCode+0x4e>
	{
		vTaskDelayUntil( &pxThisTask->xLastWakeTime, pxThisTask->xReleaseTime );
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	4610      	mov	r0, r2
 8002b3e:	f006 fc2f 	bl	80093a0 <vTaskDelayUntil>
	}

	#if( schedUSE_TIMING_ERROR_DETECTION_DEADLINE == 1 )
		pxThisTask->xExecutedOnce = pdTRUE;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2201      	movs	r2, #1
 8002b46:	641a      	str	r2, [r3, #64]	; 0x40
	#endif /* schedUSE_TIMING_ERROR_DETECTION_DEADLINE */
	if( 0 == pxThisTask->xReleaseTime )
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d103      	bne.n	8002b58 <prvPeriodicTaskCode+0x64>
	{
		pxThisTask->xLastWakeTime = xSystemStartTime;
 8002b50:	4b0d      	ldr	r3, [pc, #52]	; (8002b88 <prvPeriodicTaskCode+0x94>)
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	629a      	str	r2, [r3, #40]	; 0x28
			#if( schedEDF_NAIVE == 1 )
				/* Wake up the scheduler task to update priorities of all periodic tasks. */
				prvWakeScheduler();
			#endif /* schedEDF_NAIVE */
		#endif /* schedSCHEDULING_POLICY_EDF */
		pxThisTask->xWorkIsDone = pdFALSE;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	635a      	str	r2, [r3, #52]	; 0x34
		printf( "tickcount %d Task %s Abs deadline %d lastWakeTime %d prio %d Handle %x\r\n", xTaskGetTickCount(), pxThisTask->pcName, pxThisTask->xAbsoluteDeadline, pxThisTask->xLastWakeTime, uxTaskPriorityGet( NULL ), *pxThisTask->pxTaskHandle );
		taskEXIT_CRITICAL();
		*/

		/* Execute the task function specified by the user. */
		pxThisTask->pvTaskCode( pvParameters );
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	4798      	blx	r3

		pxThisTask->xWorkIsDone = pdTRUE;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	635a      	str	r2, [r3, #52]	; 0x34
		taskENTER_CRITICAL();
		printf( "execution time %d Task %s\r\n", pxThisTask->xExecTime, pxThisTask->pcName );
		taskEXIT_CRITICAL();
		*/

		pxThisTask->xExecTime = 0;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	631a      	str	r2, [r3, #48]	; 0x30
				/* Wake up the scheduler task to update priorities of all periodic tasks. */
				prvWakeScheduler();
			#endif /* schedEDF_NAIVE */
		#endif /* schedSCHEDULING_POLICY_EDF */

		vTaskDelayUntil( &pxThisTask->xLastWakeTime, pxThisTask->xPeriod );
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	4610      	mov	r0, r2
 8002b80:	f006 fc0e 	bl	80093a0 <vTaskDelayUntil>
		pxThisTask->xWorkIsDone = pdFALSE;
 8002b84:	e7e8      	b.n	8002b58 <prvPeriodicTaskCode+0x64>
 8002b86:	bf00      	nop
 8002b88:	200003fc 	.word	0x200003fc

08002b8c <vSchedulerPeriodicTaskCreate>:
}

/* Creates a periodic task. */
void vSchedulerPeriodicTaskCreate( TaskFunction_t pvTaskCode, const char *pcName, UBaseType_t uxStackDepth, void *pvParameters, UBaseType_t uxPriority,
		TaskHandle_t *pxCreatedTask, TickType_t xPhaseTick, TickType_t xPeriodTick, TickType_t xMaxExecTimeTick, TickType_t xDeadlineTick )
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b09e      	sub	sp, #120	; 0x78
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
 8002b98:	603b      	str	r3, [r7, #0]
	taskENTER_CRITICAL();
 8002b9a:	f007 ffeb 	bl	800ab74 <vPortEnterCritical>
SchedTCB_t *pxNewTCB;
	#if( schedUSE_TCB_ARRAY == 1 )
		BaseType_t xIndex = prvFindEmptyElementIndexTCB();
 8002b9e:	f7ff ff87 	bl	8002ab0 <prvFindEmptyElementIndexTCB>
 8002ba2:	6778      	str	r0, [r7, #116]	; 0x74
		configASSERT( xTaskCounter < schedMAX_NUMBER_OF_PERIODIC_TASKS );
 8002ba4:	4b37      	ldr	r3, [pc, #220]	; (8002c84 <vSchedulerPeriodicTaskCreate+0xf8>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	dd0a      	ble.n	8002bc2 <vSchedulerPeriodicTaskCreate+0x36>
	__asm volatile
 8002bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb0:	f383 8811 	msr	BASEPRI, r3
 8002bb4:	f3bf 8f6f 	isb	sy
 8002bb8:	f3bf 8f4f 	dsb	sy
 8002bbc:	66fb      	str	r3, [r7, #108]	; 0x6c
}
 8002bbe:	bf00      	nop
 8002bc0:	e7fe      	b.n	8002bc0 <vSchedulerPeriodicTaskCreate+0x34>
		configASSERT( xIndex != -1 );
 8002bc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc8:	d10a      	bne.n	8002be0 <vSchedulerPeriodicTaskCreate+0x54>
	__asm volatile
 8002bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bce:	f383 8811 	msr	BASEPRI, r3
 8002bd2:	f3bf 8f6f 	isb	sy
 8002bd6:	f3bf 8f4f 	dsb	sy
 8002bda:	66bb      	str	r3, [r7, #104]	; 0x68
}
 8002bdc:	bf00      	nop
 8002bde:	e7fe      	b.n	8002bde <vSchedulerPeriodicTaskCreate+0x52>
		pxNewTCB = &xTCBArray[ xIndex ];
 8002be0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002be2:	2254      	movs	r2, #84	; 0x54
 8002be4:	fb02 f303 	mul.w	r3, r2, r3
 8002be8:	4a27      	ldr	r2, [pc, #156]	; (8002c88 <vSchedulerPeriodicTaskCreate+0xfc>)
 8002bea:	4413      	add	r3, r2
 8002bec:	673b      	str	r3, [r7, #112]	; 0x70
		pxNewTCB = pvPortMalloc( sizeof( SchedTCB_t ) );
	#endif /* schedUSE_TCB_ARRAY */


	/* Intialize item. */
	*pxNewTCB = ( SchedTCB_t ) { .pvTaskCode = pvTaskCode, .pcName = pcName, .uxStackDepth = uxStackDepth, .pvParameters = pvParameters,
 8002bee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	2354      	movs	r3, #84	; 0x54
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	f009 f936 	bl	800be68 <memset>
 8002bfc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c04:	68ba      	ldr	r2, [r7, #8]
 8002c06:	605a      	str	r2, [r3, #4]
 8002c08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	609a      	str	r2, [r3, #8]
 8002c0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	60da      	str	r2, [r3, #12]
 8002c14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c16:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002c1a:	611a      	str	r2, [r3, #16]
 8002c1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c1e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002c22:	615a      	str	r2, [r3, #20]
 8002c24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c26:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002c2a:	619a      	str	r2, [r3, #24]
 8002c2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002c32:	61da      	str	r2, [r3, #28]
 8002c34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c36:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002c3a:	625a      	str	r2, [r3, #36]	; 0x24
 8002c3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c3e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002c42:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c46:	2201      	movs	r2, #1
 8002c48:	635a      	str	r2, [r3, #52]	; 0x34
		.uxPriority = uxPriority, .pxTaskHandle = pxCreatedTask, .xReleaseTime = xPhaseTick, .xPeriod = xPeriodTick, .xMaxExecTime = xMaxExecTimeTick,
		.xRelativeDeadline = xDeadlineTick, .xWorkIsDone = pdTRUE, .xExecTime = 0 };
	#if( schedUSE_TCB_ARRAY == 1 )
		pxNewTCB->xInUse = pdTRUE;
 8002c4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	63da      	str	r2, [r3, #60]	; 0x3c
	#endif /* schedUSE_TCB_ARRAY */
	
	#if( schedSCHEDULING_POLICY == schedSCHEDULING_POLICY_RMS || schedSCHEDULING_POLICY == schedSCHEDULING_POLICY_DMS )
		pxNewTCB->xPriorityIsSet = pdFALSE;
 8002c50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c52:	2200      	movs	r2, #0
 8002c54:	639a      	str	r2, [r3, #56]	; 0x38
	#elif( schedSCHEDULING_POLICY == schedSCHEDULING_POLICY_EDF )
		pxNewTCB->xAbsoluteDeadline = pxNewTCB->xRelativeDeadline + pxNewTCB->xReleaseTime + xSystemStartTime;
		pxNewTCB->uxPriority = -1;
	#endif /* schedSCHEDULING_POLICY */
	#if( schedUSE_TIMING_ERROR_DETECTION_DEADLINE == 1 )
		pxNewTCB->xExecutedOnce = pdFALSE;
 8002c56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c58:	2200      	movs	r2, #0
 8002c5a:	641a      	str	r2, [r3, #64]	; 0x40
	#endif /* schedUSE_TIMING_ERROR_DETECTION_DEADLINE */
	#if( schedUSE_TIMING_ERROR_DETECTION_EXECUTION_TIME == 1 )
		pxNewTCB->xSuspended = pdFALSE;
 8002c5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c5e:	2200      	movs	r2, #0
 8002c60:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->xMaxExecTimeExceeded = pdFALSE;
 8002c62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c64:	2200      	movs	r2, #0
 8002c66:	64da      	str	r2, [r3, #76]	; 0x4c
	#endif /* schedUSE_TIMING_ERROR_DETECTION_EXECUTION_TIME */
	#if( schedUSE_POLLING_SERVER == 1)
		pxNewTCB->xIsPeriodicServer = pdFALSE;
 8002c68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	651a      	str	r2, [r3, #80]	; 0x50
	#endif /* schedUSE_POLLING_SERVER */

	#if( schedUSE_TCB_ARRAY == 1 )
		xTaskCounter++;
 8002c6e:	4b05      	ldr	r3, [pc, #20]	; (8002c84 <vSchedulerPeriodicTaskCreate+0xf8>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	3301      	adds	r3, #1
 8002c74:	4a03      	ldr	r2, [pc, #12]	; (8002c84 <vSchedulerPeriodicTaskCreate+0xf8>)
 8002c76:	6013      	str	r3, [r2, #0]
		#if( schedEDF_EFFICIENT == 1 )
			pxNewTCB->uxPriority = schedPRIORITY_NOT_RUNNING;
		#endif /* schedEDF_EFFICIENT */
		prvAddTCBToList( pxNewTCB );
	#endif /* schedUSE_TCB_SORTED_LIST */
	taskEXIT_CRITICAL();
 8002c78:	f007 ffac 	bl	800abd4 <vPortExitCritical>
}
 8002c7c:	bf00      	nop
 8002c7e:	3778      	adds	r7, #120	; 0x78
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	200004fc 	.word	0x200004fc
 8002c88:	20000400 	.word	0x20000400

08002c8c <prvCreateAllTasks>:
	vTaskDelete( xTaskHandle );
}

/* Creates all periodic tasks stored in TCB array, or TCB list. */
static void prvCreateAllTasks( void )
{
 8002c8c:	b590      	push	{r4, r7, lr}
 8002c8e:	b087      	sub	sp, #28
 8002c90:	af02      	add	r7, sp, #8
SchedTCB_t *pxTCB;

	#if( schedUSE_TCB_ARRAY == 1 )
		BaseType_t xIndex;
		for( xIndex = 0; xIndex < xTaskCounter; xIndex++ )
 8002c92:	2300      	movs	r3, #0
 8002c94:	60fb      	str	r3, [r7, #12]
 8002c96:	e03c      	b.n	8002d12 <prvCreateAllTasks+0x86>
		{
			configASSERT( pdTRUE == xTCBArray[ xIndex ].xInUse );
 8002c98:	4a23      	ldr	r2, [pc, #140]	; (8002d28 <prvCreateAllTasks+0x9c>)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2154      	movs	r1, #84	; 0x54
 8002c9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ca2:	4413      	add	r3, r2
 8002ca4:	333c      	adds	r3, #60	; 0x3c
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d00a      	beq.n	8002cc2 <prvCreateAllTasks+0x36>
	__asm volatile
 8002cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb0:	f383 8811 	msr	BASEPRI, r3
 8002cb4:	f3bf 8f6f 	isb	sy
 8002cb8:	f3bf 8f4f 	dsb	sy
 8002cbc:	603b      	str	r3, [r7, #0]
}
 8002cbe:	bf00      	nop
 8002cc0:	e7fe      	b.n	8002cc0 <prvCreateAllTasks+0x34>
			pxTCB = &xTCBArray[ xIndex ];
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2254      	movs	r2, #84	; 0x54
 8002cc6:	fb02 f303 	mul.w	r3, r2, r3
 8002cca:	4a17      	ldr	r2, [pc, #92]	; (8002d28 <prvCreateAllTasks+0x9c>)
 8002ccc:	4413      	add	r3, r2
 8002cce:	60bb      	str	r3, [r7, #8]

			BaseType_t xReturnValue = xTaskCreate( prvPeriodicTaskCode, pxTCB->pcName, pxTCB->uxStackDepth, pxTCB->pvParameters, pxTCB->uxPriority, pxTCB->pxTaskHandle );
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	6859      	ldr	r1, [r3, #4]
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	b298      	uxth	r0, r3
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	68dc      	ldr	r4, [r3, #12]
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	68ba      	ldr	r2, [r7, #8]
 8002ce4:	6952      	ldr	r2, [r2, #20]
 8002ce6:	9201      	str	r2, [sp, #4]
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	4623      	mov	r3, r4
 8002cec:	4602      	mov	r2, r0
 8002cee:	480f      	ldr	r0, [pc, #60]	; (8002d2c <prvCreateAllTasks+0xa0>)
 8002cf0:	f006 f979 	bl	8008fe6 <xTaskCreate>
 8002cf4:	6078      	str	r0, [r7, #4]

			if( pdPASS == xReturnValue )
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d107      	bne.n	8002d0c <prvCreateAllTasks+0x80>
			{
				vTaskSetThreadLocalStoragePointer( *pxTCB->pxTaskHandle, schedTHREAD_LOCAL_STORAGE_POINTER_INDEX, pxTCB );
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68ba      	ldr	r2, [r7, #8]
 8002d04:	2100      	movs	r1, #0
 8002d06:	4618      	mov	r0, r3
 8002d08:	f007 f868 	bl	8009ddc <vTaskSetThreadLocalStoragePointer>
		for( xIndex = 0; xIndex < xTaskCounter; xIndex++ )
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	3301      	adds	r3, #1
 8002d10:	60fb      	str	r3, [r7, #12]
 8002d12:	4b07      	ldr	r3, [pc, #28]	; (8002d30 <prvCreateAllTasks+0xa4>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	dbbd      	blt.n	8002c98 <prvCreateAllTasks+0xc>
			}
			vTaskSetThreadLocalStoragePointer( *pxTCB->pxTaskHandle, schedTHREAD_LOCAL_STORAGE_POINTER_INDEX, pxTCB );
			pxTCBListItem = listGET_NEXT( pxTCBListItem );
		}	
	#endif /* schedUSE_TCB_ARRAY */
}
 8002d1c:	bf00      	nop
 8002d1e:	bf00      	nop
 8002d20:	3714      	adds	r7, #20
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd90      	pop	{r4, r7, pc}
 8002d26:	bf00      	nop
 8002d28:	20000400 	.word	0x20000400
 8002d2c:	08002af5 	.word	0x08002af5
 8002d30:	200004fc 	.word	0x200004fc

08002d34 <prvSetFixedPriorities>:

#if( schedSCHEDULING_POLICY == schedSCHEDULING_POLICY_RMS || schedSCHEDULING_POLICY == schedSCHEDULING_POLICY_DMS )
	/* Initiazes fixed priorities of all periodic tasks with respect to RMS or
	 * DMS policy. */
static void prvSetFixedPriorities( void )
{
 8002d34:	b480      	push	{r7}
 8002d36:	b08b      	sub	sp, #44	; 0x2c
 8002d38:	af00      	add	r7, sp, #0
BaseType_t xIter, xIndex;
TickType_t xShortest, xPreviousShortest=0;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	61bb      	str	r3, [r7, #24]
SchedTCB_t *pxShortestTaskPointer, *pxTCB;

	#if( schedUSE_SCHEDULER_TASK == 1 )
		BaseType_t xHighestPriority = schedSCHEDULER_PRIORITY;
 8002d3e:	2337      	movs	r3, #55	; 0x37
 8002d40:	613b      	str	r3, [r7, #16]
	#else
		BaseType_t xHighestPriority = configMAX_PRIORITIES;
	#endif /* schedUSE_SCHEDULER_TASK */

	for( xIter = 0; xIter < xTaskCounter; xIter++ )
 8002d42:	2300      	movs	r3, #0
 8002d44:	627b      	str	r3, [r7, #36]	; 0x24
 8002d46:	e054      	b.n	8002df2 <prvSetFixedPriorities+0xbe>
	{
		xShortest = portMAX_DELAY;
 8002d48:	f04f 33ff 	mov.w	r3, #4294967295
 8002d4c:	61fb      	str	r3, [r7, #28]

		/* search for shortest period/deadline */
		for( xIndex = 0; xIndex < xTaskCounter; xIndex++ )
 8002d4e:	2300      	movs	r3, #0
 8002d50:	623b      	str	r3, [r7, #32]
 8002d52:	e028      	b.n	8002da6 <prvSetFixedPriorities+0x72>
		{
			pxTCB = &xTCBArray[ xIndex ];
 8002d54:	6a3b      	ldr	r3, [r7, #32]
 8002d56:	2254      	movs	r2, #84	; 0x54
 8002d58:	fb02 f303 	mul.w	r3, r2, r3
 8002d5c:	4a2b      	ldr	r2, [pc, #172]	; (8002e0c <prvSetFixedPriorities+0xd8>)
 8002d5e:	4413      	add	r3, r2
 8002d60:	60fb      	str	r3, [r7, #12]
			configASSERT( pdTRUE == pxTCB->xInUse );
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d00a      	beq.n	8002d80 <prvSetFixedPriorities+0x4c>
	__asm volatile
 8002d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d6e:	f383 8811 	msr	BASEPRI, r3
 8002d72:	f3bf 8f6f 	isb	sy
 8002d76:	f3bf 8f4f 	dsb	sy
 8002d7a:	60bb      	str	r3, [r7, #8]
}
 8002d7c:	bf00      	nop
 8002d7e:	e7fe      	b.n	8002d7e <prvSetFixedPriorities+0x4a>
			if(pdTRUE == pxTCB->xPriorityIsSet)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d00a      	beq.n	8002d9e <prvSetFixedPriorities+0x6a>
			{
				continue;
			}

			#if( schedSCHEDULING_POLICY == schedSCHEDULING_POLICY_RMS )
				if( pxTCB->xPeriod <= xShortest )
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8c:	69fa      	ldr	r2, [r7, #28]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d306      	bcc.n	8002da0 <prvSetFixedPriorities+0x6c>
				{
					xShortest = pxTCB->xPeriod;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d96:	61fb      	str	r3, [r7, #28]
					pxShortestTaskPointer = pxTCB;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	617b      	str	r3, [r7, #20]
 8002d9c:	e000      	b.n	8002da0 <prvSetFixedPriorities+0x6c>
				continue;
 8002d9e:	bf00      	nop
		for( xIndex = 0; xIndex < xTaskCounter; xIndex++ )
 8002da0:	6a3b      	ldr	r3, [r7, #32]
 8002da2:	3301      	adds	r3, #1
 8002da4:	623b      	str	r3, [r7, #32]
 8002da6:	4b1a      	ldr	r3, [pc, #104]	; (8002e10 <prvSetFixedPriorities+0xdc>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	6a3a      	ldr	r2, [r7, #32]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	dbd1      	blt.n	8002d54 <prvSetFixedPriorities+0x20>
					xShortest = pxTCB->xRelativeDeadline;
					pxShortestTaskPointer = pxTCB;
				}
			#endif /* schedSCHEDULING_POLICY */
		}
		configASSERT( -1 <= xHighestPriority );
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db6:	da0a      	bge.n	8002dce <prvSetFixedPriorities+0x9a>
	__asm volatile
 8002db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dbc:	f383 8811 	msr	BASEPRI, r3
 8002dc0:	f3bf 8f6f 	isb	sy
 8002dc4:	f3bf 8f4f 	dsb	sy
 8002dc8:	607b      	str	r3, [r7, #4]
}
 8002dca:	bf00      	nop
 8002dcc:	e7fe      	b.n	8002dcc <prvSetFixedPriorities+0x98>
		if( xPreviousShortest != xShortest )
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d002      	beq.n	8002ddc <prvSetFixedPriorities+0xa8>
		{
			xHighestPriority--;
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	613b      	str	r3, [r7, #16]
		}
		/* set highest priority to task with xShortest period (the highest priority is configMAX_PRIORITIES-1) */
		pxShortestTaskPointer->uxPriority = xHighestPriority;
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	611a      	str	r2, [r3, #16]
		pxShortestTaskPointer->xPriorityIsSet = pdTRUE;
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	2201      	movs	r2, #1
 8002de6:	639a      	str	r2, [r3, #56]	; 0x38

		xPreviousShortest = xShortest;
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	61bb      	str	r3, [r7, #24]
	for( xIter = 0; xIter < xTaskCounter; xIter++ )
 8002dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dee:	3301      	adds	r3, #1
 8002df0:	627b      	str	r3, [r7, #36]	; 0x24
 8002df2:	4b07      	ldr	r3, [pc, #28]	; (8002e10 <prvSetFixedPriorities+0xdc>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	dba5      	blt.n	8002d48 <prvSetFixedPriorities+0x14>
	}
}
 8002dfc:	bf00      	nop
 8002dfe:	bf00      	nop
 8002e00:	372c      	adds	r7, #44	; 0x2c
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	20000400 	.word	0x20000400
 8002e10:	200004fc 	.word	0x200004fc

08002e14 <prvPeriodicTaskRecreate>:

#if( schedUSE_TIMING_ERROR_DETECTION_DEADLINE == 1 )

	/* Recreates a deleted task that still has its information left in the task array (or list). */
	static void prvPeriodicTaskRecreate( SchedTCB_t *pxTCB )
	{
 8002e14:	b590      	push	{r4, r7, lr}
 8002e16:	b087      	sub	sp, #28
 8002e18:	af02      	add	r7, sp, #8
 8002e1a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturnValue = xTaskCreate( prvPeriodicTaskCode, pxTCB->pcName, pxTCB->uxStackDepth, pxTCB->pvParameters, pxTCB->uxPriority, pxTCB->pxTaskHandle );
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6859      	ldr	r1, [r3, #4]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	b298      	uxth	r0, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68dc      	ldr	r4, [r3, #12]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	6952      	ldr	r2, [r2, #20]
 8002e32:	9201      	str	r2, [sp, #4]
 8002e34:	9300      	str	r3, [sp, #0]
 8002e36:	4623      	mov	r3, r4
 8002e38:	4602      	mov	r2, r0
 8002e3a:	480e      	ldr	r0, [pc, #56]	; (8002e74 <prvPeriodicTaskRecreate+0x60>)
 8002e3c:	f006 f8d3 	bl	8008fe6 <xTaskCreate>
 8002e40:	60f8      	str	r0, [r7, #12]
		if( pdPASS == xReturnValue )
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d110      	bne.n	8002e6a <prvPeriodicTaskRecreate+0x56>
		{
			vTaskSetThreadLocalStoragePointer( *pxTCB->pxTaskHandle, schedTHREAD_LOCAL_STORAGE_POINTER_INDEX, ( SchedTCB_t * ) pxTCB );
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	695b      	ldr	r3, [r3, #20]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	2100      	movs	r1, #0
 8002e52:	4618      	mov	r0, r3
 8002e54:	f006 ffc2 	bl	8009ddc <vTaskSetThreadLocalStoragePointer>

			/* This must be set to false so that the task does not miss the deadline immediately when it is created. */
			pxTCB->xExecutedOnce = pdFALSE;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	641a      	str	r2, [r3, #64]	; 0x40
			#if( schedUSE_TIMING_ERROR_DETECTION_EXECUTION_TIME == 1 )
				pxTCB->xSuspended = pdFALSE;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	649a      	str	r2, [r3, #72]	; 0x48
				pxTCB->xMaxExecTimeExceeded = pdFALSE;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	64da      	str	r2, [r3, #76]	; 0x4c
		}
		else
		{
			/* if task creation failed */
		}
	}
 8002e6a:	bf00      	nop
 8002e6c:	3714      	adds	r7, #20
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd90      	pop	{r4, r7, pc}
 8002e72:	bf00      	nop
 8002e74:	08002af5 	.word	0x08002af5

08002e78 <prvDeadlineMissedHook>:

	/* Called when a deadline of a periodic task is missed.
	 * Deletes the periodic task that has missed it's deadline and recreate it.
	 * The periodic task is released during next period. */
	static void prvDeadlineMissedHook( SchedTCB_t *pxTCB, TickType_t xTickCount )
	{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
		printf( "\r\ndeadline missed! %s tick %d\r\n", pxTCB->pcName, xTickCount );
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	683a      	ldr	r2, [r7, #0]
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4812      	ldr	r0, [pc, #72]	; (8002ed4 <prvDeadlineMissedHook+0x5c>)
 8002e8c:	f008 fea6 	bl	800bbdc <iprintf>

		/* Delete the pxTask and recreate it. */
		vTaskDelete( *pxTCB->pxTaskHandle );
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f006 fa10 	bl	80092bc <vTaskDelete>
		pxTCB->xExecTime = 0;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	631a      	str	r2, [r3, #48]	; 0x30
		prvPeriodicTaskRecreate( pxTCB );
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f7ff ffb6 	bl	8002e14 <prvPeriodicTaskRecreate>

		pxTCB->xReleaseTime = pxTCB->xLastWakeTime + pxTCB->xPeriod;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb0:	441a      	add	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	619a      	str	r2, [r3, #24]
		/* Need to reset lastWakeTime for correct release. */
		pxTCB->xLastWakeTime = 0;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	629a      	str	r2, [r3, #40]	; 0x28
		pxTCB->xAbsoluteDeadline = pxTCB->xRelativeDeadline + pxTCB->xReleaseTime;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	69da      	ldr	r2, [r3, #28]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	441a      	add	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	621a      	str	r2, [r3, #32]
		#if( schedEDF_EFFICIENT == 1 )
			listSET_LIST_ITEM_VALUE( &pxTCB->xTCBListItem, pxTCB->xAbsoluteDeadline );
		#endif /* schedEDF_EFFICIENT */
	}
 8002eca:	bf00      	nop
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	0800dd78 	.word	0x0800dd78

08002ed8 <prvCheckDeadline>:

	/* Checks whether given task has missed deadline or not. */
	static void prvCheckDeadline( SchedTCB_t *pxTCB, TickType_t xTickCount )
	{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
		if( ( NULL != pxTCB ) && ( pdFALSE == pxTCB->xWorkIsDone ) && ( pdTRUE == pxTCB->xExecutedOnce ) )
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d018      	beq.n	8002f1a <prvCheckDeadline+0x42>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d114      	bne.n	8002f1a <prvCheckDeadline+0x42>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d110      	bne.n	8002f1a <prvCheckDeadline+0x42>
		{
			/* Need to update absolute deadline if the scheduling policy is not EDF. */
			#if( schedSCHEDULING_POLICY != schedSCHEDULING_POLICY_EDF )
				pxTCB->xAbsoluteDeadline = pxTCB->xLastWakeTime + pxTCB->xRelativeDeadline;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	441a      	add	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	621a      	str	r2, [r3, #32]
			#endif /* schedSCHEDULING_POLICY */

			/* Using ICTOH method proposed by Carlini and Buttazzo, to check whether deadline is missed. */
			if( ( signed ) ( pxTCB->xAbsoluteDeadline - xTickCount ) < 0 )
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a1a      	ldr	r2, [r3, #32]
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	da03      	bge.n	8002f1a <prvCheckDeadline+0x42>
			{
				/* Deadline is missed. */
				prvDeadlineMissedHook( pxTCB, xTickCount );
 8002f12:	6839      	ldr	r1, [r7, #0]
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f7ff ffaf 	bl	8002e78 <prvDeadlineMissedHook>
			}
		}
	}
 8002f1a:	bf00      	nop
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <prvSchedulerCheckTimingError>:

#if( schedUSE_SCHEDULER_TASK == 1 )
	/* Called by the scheduler task. Checks all tasks for any enabled
	 * Timing Error Detection feature. */
	static void prvSchedulerCheckTimingError( TickType_t xTickCount, SchedTCB_t *pxTCB )
	{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b082      	sub	sp, #8
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
 8002f2a:	6039      	str	r1, [r7, #0]
		#if( schedUSE_TCB_ARRAY == 1 )
			if( pdFALSE == pxTCB->xInUse )
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d034      	beq.n	8002f9e <prvSchedulerCheckTimingError+0x7c>
		#endif

		#if( schedUSE_TIMING_ERROR_DETECTION_DEADLINE == 1 )
			#if( schedUSE_POLLING_SERVER == 1 )
				/* If the task is periodic server, do not check deadline. */
				if( pdTRUE == pxTCB->xIsPeriodicServer )
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d00c      	beq.n	8002f56 <prvSchedulerCheckTimingError+0x34>
				{
					/* Since lastWakeTime is updated to next wake time when the task is delayed, tickCount > lastWakeTime implies that
					 * the task has not finished it's job this period. */

					/* Using ICTOH method proposed by Carlini and Buttazzo, to check the condition unaffected by counter overflows. */
					if( ( signed ) ( xTickCount - pxTCB->xLastWakeTime ) > 0 )
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	dd02      	ble.n	8002f4e <prvSchedulerCheckTimingError+0x2c>
					{
						pxTCB->xWorkIsDone = pdFALSE;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	635a      	str	r2, [r3, #52]	; 0x34
					}

					prvCheckDeadline( pxTCB, xTickCount );
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	6838      	ldr	r0, [r7, #0]
 8002f52:	f7ff ffc1 	bl	8002ed8 <prvCheckDeadline>
			#endif /* schedUSE_POLLING_SERVER */
		#endif /* schedUSE_TIMING_ERROR_DETECTION_DEADLINE */
		

		#if( schedUSE_TIMING_ERROR_DETECTION_EXECUTION_TIME == 1 )
			if( pdTRUE == pxTCB->xMaxExecTimeExceeded )
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d108      	bne.n	8002f70 <prvSchedulerCheckTimingError+0x4e>
			{
				pxTCB->xMaxExecTimeExceeded = pdFALSE;
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	2200      	movs	r2, #0
 8002f62:	64da      	str	r2, [r3, #76]	; 0x4c
				vTaskSuspend( *pxTCB->pxTaskHandle );
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	695b      	ldr	r3, [r3, #20]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f006 fa96 	bl	800949c <vTaskSuspend>
			}
			if( pdTRUE == pxTCB->xSuspended )
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d114      	bne.n	8002fa2 <prvSchedulerCheckTimingError+0x80>
			{
				/* Using ICTOH method proposed by Carlini and Buttazzo, to check whether absolute unblock time is reached. */
				if( ( signed ) ( pxTCB->xAbsoluteUnblockTime - xTickCount ) <= 0 )
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	dc0e      	bgt.n	8002fa2 <prvSchedulerCheckTimingError+0x80>
				{
					pxTCB->xSuspended = pdFALSE;
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	2200      	movs	r2, #0
 8002f88:	649a      	str	r2, [r3, #72]	; 0x48
					pxTCB->xLastWakeTime = xTickCount;
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	629a      	str	r2, [r3, #40]	; 0x28
					vTaskResume( *pxTCB->pxTaskHandle );
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f006 fb28 	bl	80095ec <vTaskResume>
				}
			}
		#endif /* schedUSE_TIMING_ERROR_DETECTION_EXECUTION_TIME */

		return;
 8002f9c:	e001      	b.n	8002fa2 <prvSchedulerCheckTimingError+0x80>
				return;
 8002f9e:	bf00      	nop
 8002fa0:	e000      	b.n	8002fa4 <prvSchedulerCheckTimingError+0x82>
		return;
 8002fa2:	bf00      	nop
	}
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
	...

08002fac <prvSchedulerFunction>:

	/* Function code for the scheduler task. */
	static void prvSchedulerFunction( void )
	{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
					}					
				#endif /* schedEDF_EFFICIENT */
			#endif /* schedSCHEDULING_POLICY_EDF */

			#if( schedUSE_TIMING_ERROR_DETECTION_DEADLINE == 1 || schedUSE_TIMING_ERROR_DETECTION_EXECUTION_TIME == 1 )
				TickType_t xTickCount = xTaskGetTickCount();
 8002fb2:	f006 fc95 	bl	80098e0 <xTaskGetTickCount>
 8002fb6:	60b8      	str	r0, [r7, #8]
				SchedTCB_t *pxTCB;

				#if( schedUSE_TCB_ARRAY == 1 )
					BaseType_t xIndex;
					for( xIndex = 0; xIndex < schedMAX_NUMBER_OF_PERIODIC_TASKS; xIndex++ )
 8002fb8:	2300      	movs	r3, #0
 8002fba:	60fb      	str	r3, [r7, #12]
 8002fbc:	e00d      	b.n	8002fda <prvSchedulerFunction+0x2e>
					{
						pxTCB = &xTCBArray[ xIndex ];
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2254      	movs	r2, #84	; 0x54
 8002fc2:	fb02 f303 	mul.w	r3, r2, r3
 8002fc6:	4a09      	ldr	r2, [pc, #36]	; (8002fec <prvSchedulerFunction+0x40>)
 8002fc8:	4413      	add	r3, r2
 8002fca:	607b      	str	r3, [r7, #4]
						prvSchedulerCheckTimingError( xTickCount, pxTCB );
 8002fcc:	6879      	ldr	r1, [r7, #4]
 8002fce:	68b8      	ldr	r0, [r7, #8]
 8002fd0:	f7ff ffa7 	bl	8002f22 <prvSchedulerCheckTimingError>
					for( xIndex = 0; xIndex < schedMAX_NUMBER_OF_PERIODIC_TASKS; xIndex++ )
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	60fb      	str	r3, [r7, #12]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	ddee      	ble.n	8002fbe <prvSchedulerFunction+0x12>
					}
				#endif /* schedUSE_TCB_SORTED_LIST */
			
			#endif /* schedUSE_TIMING_ERROR_DETECTION_DEADLINE || schedUSE_TIMING_ERROR_DETECTION_EXECUTION_TIME */

			ulTaskNotifyTake( pdTRUE, portMAX_DELAY );
 8002fe0:	f04f 31ff 	mov.w	r1, #4294967295
 8002fe4:	2001      	movs	r0, #1
 8002fe6:	f007 f8ab 	bl	800a140 <ulTaskNotifyTake>
		{
 8002fea:	e7e2      	b.n	8002fb2 <prvSchedulerFunction+0x6>
 8002fec:	20000400 	.word	0x20000400

08002ff0 <prvCreateSchedulerTask>:
		}
	}

	/* Creates the scheduler task. */
	static void prvCreateSchedulerTask( void )
	{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af02      	add	r7, sp, #8
		xTaskCreate( (TaskFunction_t) prvSchedulerFunction, "Scheduler", schedSCHEDULER_TASK_STACK_SIZE, NULL, schedSCHEDULER_PRIORITY, &xSchedulerHandle );
 8002ff6:	4b07      	ldr	r3, [pc, #28]	; (8003014 <prvCreateSchedulerTask+0x24>)
 8002ff8:	9301      	str	r3, [sp, #4]
 8002ffa:	2337      	movs	r3, #55	; 0x37
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	2300      	movs	r3, #0
 8003000:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003004:	4904      	ldr	r1, [pc, #16]	; (8003018 <prvCreateSchedulerTask+0x28>)
 8003006:	4805      	ldr	r0, [pc, #20]	; (800301c <prvCreateSchedulerTask+0x2c>)
 8003008:	f005 ffed 	bl	8008fe6 <xTaskCreate>
	}
 800300c:	bf00      	nop
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	20000500 	.word	0x20000500
 8003018:	0800ddcc 	.word	0x0800ddcc
 800301c:	08002fad 	.word	0x08002fad

08003020 <prvGetNextAperiodicJob>:

#if( schedUSE_APERIODIC_JOBS == 1 )
	/* Returns AJCB of first aperiodic job stored in FIFO. Returns NULL if
	 * the FIFO is empty. */
	static AJCB_t *prvGetNextAperiodicJob( void )
	{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
		/* If FIFO is empty. */
		if( 0 == uxAperiodicJobCounter)
 8003026:	4b11      	ldr	r3, [pc, #68]	; (800306c <prvGetNextAperiodicJob+0x4c>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <prvGetNextAperiodicJob+0x12>
		{
			return NULL;
 800302e:	2300      	movs	r3, #0
 8003030:	e015      	b.n	800305e <prvGetNextAperiodicJob+0x3e>
		}

		AJCB_t *pxReturnValue = &xAJCBFifo[ xAJCBFifoHead ];
 8003032:	4b0f      	ldr	r3, [pc, #60]	; (8003070 <prvGetNextAperiodicJob+0x50>)
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	4613      	mov	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	4413      	add	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	4a0d      	ldr	r2, [pc, #52]	; (8003074 <prvGetNextAperiodicJob+0x54>)
 8003040:	4413      	add	r3, r2
 8003042:	607b      	str	r3, [r7, #4]

		/* Move FIFO head to next element in the queue. */
		xAJCBFifoHead++;
 8003044:	4b0a      	ldr	r3, [pc, #40]	; (8003070 <prvGetNextAperiodicJob+0x50>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	3301      	adds	r3, #1
 800304a:	4a09      	ldr	r2, [pc, #36]	; (8003070 <prvGetNextAperiodicJob+0x50>)
 800304c:	6013      	str	r3, [r2, #0]
		if( schedMAX_NUMBER_OF_APERIODIC_JOBS == xAJCBFifoHead )
 800304e:	4b08      	ldr	r3, [pc, #32]	; (8003070 <prvGetNextAperiodicJob+0x50>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2b04      	cmp	r3, #4
 8003054:	d102      	bne.n	800305c <prvGetNextAperiodicJob+0x3c>
		{
			xAJCBFifoHead = 0;
 8003056:	4b06      	ldr	r3, [pc, #24]	; (8003070 <prvGetNextAperiodicJob+0x50>)
 8003058:	2200      	movs	r2, #0
 800305a:	601a      	str	r2, [r3, #0]
				xAbsolutePreviousMaxResponseTime = xTaskGetTickCount() + schedPOLLING_SERVER_PERIOD +
						( pxReturnValue->xMaxExecTime / schedPOLLING_SERVER_MAX_EXECUTION_TIME + 1 ) * schedPOLLING_SERVER_PERIOD;
			}
		#endif /* schedUSE_SPORADIC_JOBS */

		return pxReturnValue;
 800305c:	687b      	ldr	r3, [r7, #4]
	}
 800305e:	4618      	mov	r0, r3
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	2000055c 	.word	0x2000055c
 8003070:	20000554 	.word	0x20000554
 8003074:	20000504 	.word	0x20000504

08003078 <prvFindEmptyElementIndexAJCB>:

	/* Find index for an empty entry in xAJCBArray. Returns -1 if there is
	 * no empty entry. */
	static BaseType_t prvFindEmptyElementIndexAJCB( void )
	{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
		/* If the FIFO is full. */
		if( schedMAX_NUMBER_OF_APERIODIC_JOBS == uxAperiodicJobCounter )
 800307e:	4b0e      	ldr	r3, [pc, #56]	; (80030b8 <prvFindEmptyElementIndexAJCB+0x40>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2b04      	cmp	r3, #4
 8003084:	d102      	bne.n	800308c <prvFindEmptyElementIndexAJCB+0x14>
		{
			return -1;
 8003086:	f04f 33ff 	mov.w	r3, #4294967295
 800308a:	e00f      	b.n	80030ac <prvFindEmptyElementIndexAJCB+0x34>
		}

		BaseType_t xReturnValue = xAJCBFifoTail;
 800308c:	4b0b      	ldr	r3, [pc, #44]	; (80030bc <prvFindEmptyElementIndexAJCB+0x44>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	607b      	str	r3, [r7, #4]

		/* Extend the FIFO tail. */
		xAJCBFifoTail++;
 8003092:	4b0a      	ldr	r3, [pc, #40]	; (80030bc <prvFindEmptyElementIndexAJCB+0x44>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	3301      	adds	r3, #1
 8003098:	4a08      	ldr	r2, [pc, #32]	; (80030bc <prvFindEmptyElementIndexAJCB+0x44>)
 800309a:	6013      	str	r3, [r2, #0]
		if( schedMAX_NUMBER_OF_APERIODIC_JOBS == xAJCBFifoTail )
 800309c:	4b07      	ldr	r3, [pc, #28]	; (80030bc <prvFindEmptyElementIndexAJCB+0x44>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2b04      	cmp	r3, #4
 80030a2:	d102      	bne.n	80030aa <prvFindEmptyElementIndexAJCB+0x32>
		{
			xAJCBFifoTail = 0;
 80030a4:	4b05      	ldr	r3, [pc, #20]	; (80030bc <prvFindEmptyElementIndexAJCB+0x44>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	601a      	str	r2, [r3, #0]
		}

		return xReturnValue;
 80030aa:	687b      	ldr	r3, [r7, #4]
	}
 80030ac:	4618      	mov	r0, r3
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	2000055c 	.word	0x2000055c
 80030bc:	20000558 	.word	0x20000558

080030c0 <vSchedulerAperiodicJobCreate>:

	/* Creates an aperiodic job. */
	void vSchedulerAperiodicJobCreate( TaskFunction_t pvTaskCode, const char *pcName, void *pvParameters, TickType_t xMaxExecTimeTick )
	{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b08c      	sub	sp, #48	; 0x30
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]
 80030cc:	603b      	str	r3, [r7, #0]
		taskENTER_CRITICAL();
 80030ce:	f007 fd51 	bl	800ab74 <vPortEnterCritical>
	BaseType_t xIndex = prvFindEmptyElementIndexAJCB();
 80030d2:	f7ff ffd1 	bl	8003078 <prvFindEmptyElementIndexAJCB>
 80030d6:	62f8      	str	r0, [r7, #44]	; 0x2c
		if( -1 == xIndex)
 80030d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030de:	d102      	bne.n	80030e6 <vSchedulerAperiodicJobCreate+0x26>
		{
			/* The AJCBFifo is full. */
			taskEXIT_CRITICAL();
 80030e0:	f007 fd78 	bl	800abd4 <vPortExitCritical>
 80030e4:	e02c      	b.n	8003140 <vSchedulerAperiodicJobCreate+0x80>
			return;
		}
		configASSERT( uxAperiodicJobCounter < schedMAX_NUMBER_OF_APERIODIC_JOBS );
 80030e6:	4b18      	ldr	r3, [pc, #96]	; (8003148 <vSchedulerAperiodicJobCreate+0x88>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2b03      	cmp	r3, #3
 80030ec:	d90a      	bls.n	8003104 <vSchedulerAperiodicJobCreate+0x44>
	__asm volatile
 80030ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f2:	f383 8811 	msr	BASEPRI, r3
 80030f6:	f3bf 8f6f 	isb	sy
 80030fa:	f3bf 8f4f 	dsb	sy
 80030fe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003100:	bf00      	nop
 8003102:	e7fe      	b.n	8003102 <vSchedulerAperiodicJobCreate+0x42>
		AJCB_t *pxNewAJCB = &xAJCBFifo[ xIndex ];
 8003104:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003106:	4613      	mov	r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	4413      	add	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	4a0f      	ldr	r2, [pc, #60]	; (800314c <vSchedulerAperiodicJobCreate+0x8c>)
 8003110:	4413      	add	r3, r2
 8003112:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Add item to AJCBList. */
		*pxNewAJCB = ( AJCB_t ) { .pvTaskCode = pvTaskCode,
 8003114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	601a      	str	r2, [r3, #0]
 800311a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800311c:	68ba      	ldr	r2, [r7, #8]
 800311e:	605a      	str	r2, [r3, #4]
 8003120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	609a      	str	r2, [r3, #8]
 8003126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	60da      	str	r2, [r3, #12]
 800312c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800312e:	2200      	movs	r2, #0
 8003130:	611a      	str	r2, [r3, #16]
			.pcName = pcName,
			.pvParameters = pvParameters,
			.xMaxExecTime = xMaxExecTimeTick,
			.xExecTime = 0,};
		
		uxAperiodicJobCounter++;
 8003132:	4b05      	ldr	r3, [pc, #20]	; (8003148 <vSchedulerAperiodicJobCreate+0x88>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	3301      	adds	r3, #1
 8003138:	4a03      	ldr	r2, [pc, #12]	; (8003148 <vSchedulerAperiodicJobCreate+0x88>)
 800313a:	6013      	str	r3, [r2, #0]
		taskEXIT_CRITICAL();
 800313c:	f007 fd4a 	bl	800abd4 <vPortExitCritical>
	}
 8003140:	3730      	adds	r7, #48	; 0x30
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	2000055c 	.word	0x2000055c
 800314c:	20000504 	.word	0x20000504

08003150 <prvPollingServerFunction>:
#endif /* schedUSE_SPORADIC_JOBS */

#if( schedUSE_POLLING_SERVER == 1 )
	/* Function code for the Polling Server. */
	static void prvPollingServerFunction( void )
	{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
					continue;
				}
			#endif /* schedUSE_SPORADIC_JOBS */

			#if( schedUSE_APERIODIC_JOBS == 1 )
				pxCurrentAperiodicJob = prvGetNextAperiodicJob();
 8003154:	f7ff ff64 	bl	8003020 <prvGetNextAperiodicJob>
 8003158:	4603      	mov	r3, r0
 800315a:	4a0b      	ldr	r2, [pc, #44]	; (8003188 <prvPollingServerFunction+0x38>)
 800315c:	6013      	str	r3, [r2, #0]
				if( NULL == pxCurrentAperiodicJob )
 800315e:	4b0a      	ldr	r3, [pc, #40]	; (8003188 <prvPollingServerFunction+0x38>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00d      	beq.n	8003182 <prvPollingServerFunction+0x32>
					return;
				}
				else
				{
					/* Run aperiodic job */
					pxCurrentAperiodicJob->pvTaskCode( pxCurrentAperiodicJob->pvParameters );
 8003166:	4b08      	ldr	r3, [pc, #32]	; (8003188 <prvPollingServerFunction+0x38>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a06      	ldr	r2, [pc, #24]	; (8003188 <prvPollingServerFunction+0x38>)
 800316e:	6812      	ldr	r2, [r2, #0]
 8003170:	6892      	ldr	r2, [r2, #8]
 8003172:	4610      	mov	r0, r2
 8003174:	4798      	blx	r3
					uxAperiodicJobCounter--;
 8003176:	4b05      	ldr	r3, [pc, #20]	; (800318c <prvPollingServerFunction+0x3c>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	3b01      	subs	r3, #1
 800317c:	4a03      	ldr	r2, [pc, #12]	; (800318c <prvPollingServerFunction+0x3c>)
 800317e:	6013      	str	r3, [r2, #0]
				pxCurrentAperiodicJob = prvGetNextAperiodicJob();
 8003180:	e7e8      	b.n	8003154 <prvPollingServerFunction+0x4>
					return;
 8003182:	bf00      	nop
						xAbsolutePreviousMaxResponseTime = 0;
					#endif /* schedUSE_SPORADIC_JOBS */
				}
			#endif /* schedUSE_APERIODIC_JOBS */
		}
	}
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	20000564 	.word	0x20000564
 800318c:	2000055c 	.word	0x2000055c

08003190 <prvPollingServerCreate>:

	/* Creates Polling Server as a periodic task. */
	void prvPollingServerCreate( void )
	{
 8003190:	b580      	push	{r7, lr}
 8003192:	b09a      	sub	sp, #104	; 0x68
 8003194:	af00      	add	r7, sp, #0
		taskENTER_CRITICAL();
 8003196:	f007 fced 	bl	800ab74 <vPortEnterCritical>
	SchedTCB_t *pxNewTCB;
		#if( schedUSE_TCB_ARRAY == 1 )
			BaseType_t xIndex = prvFindEmptyElementIndexTCB();
 800319a:	f7ff fc89 	bl	8002ab0 <prvFindEmptyElementIndexTCB>
 800319e:	6678      	str	r0, [r7, #100]	; 0x64
			configASSERT( xTaskCounter < schedMAX_NUMBER_OF_PERIODIC_TASKS );
 80031a0:	4b2f      	ldr	r3, [pc, #188]	; (8003260 <prvPollingServerCreate+0xd0>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	dd0a      	ble.n	80031be <prvPollingServerCreate+0x2e>
	__asm volatile
 80031a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ac:	f383 8811 	msr	BASEPRI, r3
 80031b0:	f3bf 8f6f 	isb	sy
 80031b4:	f3bf 8f4f 	dsb	sy
 80031b8:	65fb      	str	r3, [r7, #92]	; 0x5c
}
 80031ba:	bf00      	nop
 80031bc:	e7fe      	b.n	80031bc <prvPollingServerCreate+0x2c>
			configASSERT( xIndex != -1 );
 80031be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c4:	d10a      	bne.n	80031dc <prvPollingServerCreate+0x4c>
	__asm volatile
 80031c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ca:	f383 8811 	msr	BASEPRI, r3
 80031ce:	f3bf 8f6f 	isb	sy
 80031d2:	f3bf 8f4f 	dsb	sy
 80031d6:	65bb      	str	r3, [r7, #88]	; 0x58
}
 80031d8:	bf00      	nop
 80031da:	e7fe      	b.n	80031da <prvPollingServerCreate+0x4a>
			pxNewTCB = &xTCBArray[ xIndex ];
 80031dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031de:	2254      	movs	r2, #84	; 0x54
 80031e0:	fb02 f303 	mul.w	r3, r2, r3
 80031e4:	4a1f      	ldr	r2, [pc, #124]	; (8003264 <prvPollingServerCreate+0xd4>)
 80031e6:	4413      	add	r3, r2
 80031e8:	663b      	str	r3, [r7, #96]	; 0x60
		#elif( schedUSE_TCB_SORTED_LIST == 1 )
			pxNewTCB = pvPortMalloc( sizeof( SchedTCB_t ) );
		#endif /* schedUSE_TCB_ARRAY */

		/* Initialize item. */
		*pxNewTCB = ( SchedTCB_t ) { .pvTaskCode = (TaskFunction_t) prvPollingServerFunction, .pcName = "PS", .uxStackDepth = schedPOLLING_SERVER_STACK_SIZE, .pvParameters = NULL,
 80031ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031ec:	4618      	mov	r0, r3
 80031ee:	2354      	movs	r3, #84	; 0x54
 80031f0:	461a      	mov	r2, r3
 80031f2:	2100      	movs	r1, #0
 80031f4:	f008 fe38 	bl	800be68 <memset>
 80031f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031fa:	4a1b      	ldr	r2, [pc, #108]	; (8003268 <prvPollingServerCreate+0xd8>)
 80031fc:	601a      	str	r2, [r3, #0]
 80031fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003200:	4a1a      	ldr	r2, [pc, #104]	; (800326c <prvPollingServerCreate+0xdc>)
 8003202:	605a      	str	r2, [r3, #4]
 8003204:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003206:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800320a:	609a      	str	r2, [r3, #8]
 800320c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800320e:	4a18      	ldr	r2, [pc, #96]	; (8003270 <prvPollingServerCreate+0xe0>)
 8003210:	615a      	str	r2, [r3, #20]
 8003212:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003214:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003218:	61da      	str	r2, [r3, #28]
 800321a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800321c:	2215      	movs	r2, #21
 800321e:	625a      	str	r2, [r3, #36]	; 0x24
 8003220:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003222:	2215      	movs	r2, #21
 8003224:	62da      	str	r2, [r3, #44]	; 0x2c
 8003226:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003228:	2201      	movs	r2, #1
 800322a:	635a      	str	r2, [r3, #52]	; 0x34
 800322c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800322e:	2201      	movs	r2, #1
 8003230:	651a      	str	r2, [r3, #80]	; 0x50
			.pxTaskHandle = &xPollingServerHandle, .xReleaseTime = 0, .xPeriod = schedPOLLING_SERVER_PERIOD, .xMaxExecTime = schedPOLLING_SERVER_MAX_EXECUTION_TIME,
			.xRelativeDeadline = schedPOLLING_SERVER_DEADLINE, .xWorkIsDone = pdTRUE, .xExecTime = 0, .xIsPeriodicServer = pdTRUE };
		#if( schedUSE_TCB_ARRAY == 1 )
			pxNewTCB->xInUse = pdTRUE;
 8003232:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003234:	2201      	movs	r2, #1
 8003236:	63da      	str	r2, [r3, #60]	; 0x3c
		#elif( schedUSE_TCB_SORTED_LIST == 1 )
			pxNewTCB->xAbsoluteDeadline = pxNewTCB->xRelativeDeadline + xSystemStartTime;
		#endif /* schedUSE_TCB_SORTED_LIST */

		#if( schedSCHEDULING_POLICY == schedSCHEDULING_POLICY_RMS || schedSCHEDULING_POLICY == schedSCHEDULING_POLICY_DMS )
			pxNewTCB->xPriorityIsSet = pdFALSE;
 8003238:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800323a:	2200      	movs	r2, #0
 800323c:	639a      	str	r2, [r3, #56]	; 0x38
		#if( schedSCHEDULING_POLICY == schedSCHEDULING_POLICY_MANUAL )
			pxNewTCB->uxPriority = schedPOLLING_SERVER_PRIORITY;
			pxNewTCB->xPriorityIsSet = pdTRUE;
		#endif /* schedSCHEDULING_POLICY_MANUAL */
		#if( schedUSE_TIMING_ERROR_DETECTION_EXECUTION_TIME == 1 )
			pxNewTCB->xSuspended = pdFALSE;
 800323e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003240:	2200      	movs	r2, #0
 8003242:	649a      	str	r2, [r3, #72]	; 0x48
			pxNewTCB->xMaxExecTimeExceeded = pdFALSE;
 8003244:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003246:	2200      	movs	r2, #0
 8003248:	64da      	str	r2, [r3, #76]	; 0x4c
		#endif /* schedUSE_TIMING_ERROR_DETECTION_EXECUTION_TIME */
	
		#if( schedUSE_TCB_ARRAY == 1 )
			xTaskCounter++;
 800324a:	4b05      	ldr	r3, [pc, #20]	; (8003260 <prvPollingServerCreate+0xd0>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	3301      	adds	r3, #1
 8003250:	4a03      	ldr	r2, [pc, #12]	; (8003260 <prvPollingServerCreate+0xd0>)
 8003252:	6013      	str	r3, [r2, #0]
			#if( schedEDF_EFFICIENT == 1 )
				pxNewTCB->uxPriority = schedPRIORITY_NOT_RUNNING;
			#endif /* schedEDF_EFFICIENT */
			prvAddTCBToList( pxNewTCB );
		#endif /* schedUSE_TCB_SORTED_LIST */
			taskEXIT_CRITICAL();
 8003254:	f007 fcbe 	bl	800abd4 <vPortExitCritical>
	}
 8003258:	bf00      	nop
 800325a:	3768      	adds	r7, #104	; 0x68
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	200004fc 	.word	0x200004fc
 8003264:	20000400 	.word	0x20000400
 8003268:	08003151 	.word	0x08003151
 800326c:	0800ddd8 	.word	0x0800ddd8
 8003270:	20000560 	.word	0x20000560

08003274 <vSchedulerInit>:
	}
#endif /* schedUSE_SCHEDULER_TASK */

/* This function must be called before any other function call from this module. */
void vSchedulerInit( void )
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
	#if( schedUSE_TCB_ARRAY == 1 )
		prvInitTCBArray();
 8003278:	f7ff fbfc 	bl	8002a74 <prvInitTCBArray>
			pxTCBBlockedList = &xTCBBlockedList;
			pxTCBReadyList = &xTCBReadyList;
			pxTCBOverflowedReadyList = &xTCBOverflowedReadyList;
		#endif /* schedEDF_NAIVE */
	#endif /* schedUSE_TCB_ARRAY */
}
 800327c:	bf00      	nop
 800327e:	bd80      	pop	{r7, pc}

08003280 <vSchedulerStart>:

/* Starts scheduling tasks. All periodic tasks (including polling server) must
 * have been created with API function before calling this function. */
void vSchedulerStart( void )
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
	#if( schedUSE_POLLING_SERVER == 1 )
		prvPollingServerCreate();
 8003284:	f7ff ff84 	bl	8003190 <prvPollingServerCreate>
	#endif /* schedUSE_POLLING_SERVER */

	#if( schedSCHEDULING_POLICY == schedSCHEDULING_POLICY_RMS || schedSCHEDULING_POLICY == schedSCHEDULING_POLICY_DMS )
		prvSetFixedPriorities();
 8003288:	f7ff fd54 	bl	8002d34 <prvSetFixedPriorities>
	#elif( schedSCHEDULING_POLICY == schedSCHEDULING_POLICY_EDF )
		prvInitEDF();
	#endif /* schedSCHEDULING_POLICY */

	#if( schedUSE_SCHEDULER_TASK == 1 )
		prvCreateSchedulerTask();
 800328c:	f7ff feb0 	bl	8002ff0 <prvCreateSchedulerTask>
	#endif /* schedUSE_SCHEDULER_TASK */

	prvCreateAllTasks();
 8003290:	f7ff fcfc 	bl	8002c8c <prvCreateAllTasks>

	xSystemStartTime = xTaskGetTickCount();
 8003294:	f006 fb24 	bl	80098e0 <xTaskGetTickCount>
 8003298:	4603      	mov	r3, r0
 800329a:	4a03      	ldr	r2, [pc, #12]	; (80032a8 <vSchedulerStart+0x28>)
 800329c:	6013      	str	r3, [r2, #0]
	vTaskStartScheduler();
 800329e:	f006 fa03 	bl	80096a8 <vTaskStartScheduler>
}
 80032a2:	bf00      	nop
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	200003fc 	.word	0x200003fc

080032ac <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80032b0:	4b17      	ldr	r3, [pc, #92]	; (8003310 <MX_SPI1_Init+0x64>)
 80032b2:	4a18      	ldr	r2, [pc, #96]	; (8003314 <MX_SPI1_Init+0x68>)
 80032b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80032b6:	4b16      	ldr	r3, [pc, #88]	; (8003310 <MX_SPI1_Init+0x64>)
 80032b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80032bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80032be:	4b14      	ldr	r3, [pc, #80]	; (8003310 <MX_SPI1_Init+0x64>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80032c4:	4b12      	ldr	r3, [pc, #72]	; (8003310 <MX_SPI1_Init+0x64>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80032ca:	4b11      	ldr	r3, [pc, #68]	; (8003310 <MX_SPI1_Init+0x64>)
 80032cc:	2202      	movs	r2, #2
 80032ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80032d0:	4b0f      	ldr	r3, [pc, #60]	; (8003310 <MX_SPI1_Init+0x64>)
 80032d2:	2201      	movs	r2, #1
 80032d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80032d6:	4b0e      	ldr	r3, [pc, #56]	; (8003310 <MX_SPI1_Init+0x64>)
 80032d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80032de:	4b0c      	ldr	r3, [pc, #48]	; (8003310 <MX_SPI1_Init+0x64>)
 80032e0:	2238      	movs	r2, #56	; 0x38
 80032e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80032e4:	4b0a      	ldr	r3, [pc, #40]	; (8003310 <MX_SPI1_Init+0x64>)
 80032e6:	2280      	movs	r2, #128	; 0x80
 80032e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80032ea:	4b09      	ldr	r3, [pc, #36]	; (8003310 <MX_SPI1_Init+0x64>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032f0:	4b07      	ldr	r3, [pc, #28]	; (8003310 <MX_SPI1_Init+0x64>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80032f6:	4b06      	ldr	r3, [pc, #24]	; (8003310 <MX_SPI1_Init+0x64>)
 80032f8:	220a      	movs	r2, #10
 80032fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80032fc:	4804      	ldr	r0, [pc, #16]	; (8003310 <MX_SPI1_Init+0x64>)
 80032fe:	f003 f929 	bl	8006554 <HAL_SPI_Init>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d001      	beq.n	800330c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003308:	f7fe fda0 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800330c:	bf00      	nop
 800330e:	bd80      	pop	{r7, pc}
 8003310:	20000568 	.word	0x20000568
 8003314:	40013000 	.word	0x40013000

08003318 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b08a      	sub	sp, #40	; 0x28
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003320:	f107 0314 	add.w	r3, r7, #20
 8003324:	2200      	movs	r2, #0
 8003326:	601a      	str	r2, [r3, #0]
 8003328:	605a      	str	r2, [r3, #4]
 800332a:	609a      	str	r2, [r3, #8]
 800332c:	60da      	str	r2, [r3, #12]
 800332e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a19      	ldr	r2, [pc, #100]	; (800339c <HAL_SPI_MspInit+0x84>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d12b      	bne.n	8003392 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800333a:	2300      	movs	r3, #0
 800333c:	613b      	str	r3, [r7, #16]
 800333e:	4b18      	ldr	r3, [pc, #96]	; (80033a0 <HAL_SPI_MspInit+0x88>)
 8003340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003342:	4a17      	ldr	r2, [pc, #92]	; (80033a0 <HAL_SPI_MspInit+0x88>)
 8003344:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003348:	6453      	str	r3, [r2, #68]	; 0x44
 800334a:	4b15      	ldr	r3, [pc, #84]	; (80033a0 <HAL_SPI_MspInit+0x88>)
 800334c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003352:	613b      	str	r3, [r7, #16]
 8003354:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003356:	2300      	movs	r3, #0
 8003358:	60fb      	str	r3, [r7, #12]
 800335a:	4b11      	ldr	r3, [pc, #68]	; (80033a0 <HAL_SPI_MspInit+0x88>)
 800335c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335e:	4a10      	ldr	r2, [pc, #64]	; (80033a0 <HAL_SPI_MspInit+0x88>)
 8003360:	f043 0301 	orr.w	r3, r3, #1
 8003364:	6313      	str	r3, [r2, #48]	; 0x30
 8003366:	4b0e      	ldr	r3, [pc, #56]	; (80033a0 <HAL_SPI_MspInit+0x88>)
 8003368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	60fb      	str	r3, [r7, #12]
 8003370:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = PSX_SCK_Pin|PSX_MISO_Pin|PSX_MOSI_Pin;
 8003372:	23e0      	movs	r3, #224	; 0xe0
 8003374:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003376:	2302      	movs	r3, #2
 8003378:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337a:	2300      	movs	r3, #0
 800337c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800337e:	2303      	movs	r3, #3
 8003380:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003382:	2305      	movs	r3, #5
 8003384:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003386:	f107 0314 	add.w	r3, r7, #20
 800338a:	4619      	mov	r1, r3
 800338c:	4805      	ldr	r0, [pc, #20]	; (80033a4 <HAL_SPI_MspInit+0x8c>)
 800338e:	f001 f801 	bl	8004394 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003392:	bf00      	nop
 8003394:	3728      	adds	r7, #40	; 0x28
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	40013000 	.word	0x40013000
 80033a0:	40023800 	.word	0x40023800
 80033a4:	40020000 	.word	0x40020000

080033a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033ae:	2300      	movs	r3, #0
 80033b0:	607b      	str	r3, [r7, #4]
 80033b2:	4b12      	ldr	r3, [pc, #72]	; (80033fc <HAL_MspInit+0x54>)
 80033b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b6:	4a11      	ldr	r2, [pc, #68]	; (80033fc <HAL_MspInit+0x54>)
 80033b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033bc:	6453      	str	r3, [r2, #68]	; 0x44
 80033be:	4b0f      	ldr	r3, [pc, #60]	; (80033fc <HAL_MspInit+0x54>)
 80033c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033c6:	607b      	str	r3, [r7, #4]
 80033c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033ca:	2300      	movs	r3, #0
 80033cc:	603b      	str	r3, [r7, #0]
 80033ce:	4b0b      	ldr	r3, [pc, #44]	; (80033fc <HAL_MspInit+0x54>)
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	4a0a      	ldr	r2, [pc, #40]	; (80033fc <HAL_MspInit+0x54>)
 80033d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033d8:	6413      	str	r3, [r2, #64]	; 0x40
 80033da:	4b08      	ldr	r3, [pc, #32]	; (80033fc <HAL_MspInit+0x54>)
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e2:	603b      	str	r3, [r7, #0]
 80033e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80033e6:	2200      	movs	r2, #0
 80033e8:	210f      	movs	r1, #15
 80033ea:	f06f 0001 	mvn.w	r0, #1
 80033ee:	f000 ffa7 	bl	8004340 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033f2:	bf00      	nop
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	40023800 	.word	0x40023800

08003400 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b08c      	sub	sp, #48	; 0x30
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003408:	2300      	movs	r3, #0
 800340a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800340c:	2300      	movs	r3, #0
 800340e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8003410:	2300      	movs	r3, #0
 8003412:	60bb      	str	r3, [r7, #8]
 8003414:	4b2f      	ldr	r3, [pc, #188]	; (80034d4 <HAL_InitTick+0xd4>)
 8003416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003418:	4a2e      	ldr	r2, [pc, #184]	; (80034d4 <HAL_InitTick+0xd4>)
 800341a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800341e:	6453      	str	r3, [r2, #68]	; 0x44
 8003420:	4b2c      	ldr	r3, [pc, #176]	; (80034d4 <HAL_InitTick+0xd4>)
 8003422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003424:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003428:	60bb      	str	r3, [r7, #8]
 800342a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800342c:	f107 020c 	add.w	r2, r7, #12
 8003430:	f107 0310 	add.w	r3, r7, #16
 8003434:	4611      	mov	r1, r2
 8003436:	4618      	mov	r0, r3
 8003438:	f003 f85a 	bl	80064f0 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800343c:	f003 f844 	bl	80064c8 <HAL_RCC_GetPCLK2Freq>
 8003440:	4603      	mov	r3, r0
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003448:	4a23      	ldr	r2, [pc, #140]	; (80034d8 <HAL_InitTick+0xd8>)
 800344a:	fba2 2303 	umull	r2, r3, r2, r3
 800344e:	0c9b      	lsrs	r3, r3, #18
 8003450:	3b01      	subs	r3, #1
 8003452:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8003454:	4b21      	ldr	r3, [pc, #132]	; (80034dc <HAL_InitTick+0xdc>)
 8003456:	4a22      	ldr	r2, [pc, #136]	; (80034e0 <HAL_InitTick+0xe0>)
 8003458:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 800345a:	4b20      	ldr	r3, [pc, #128]	; (80034dc <HAL_InitTick+0xdc>)
 800345c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003460:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8003462:	4a1e      	ldr	r2, [pc, #120]	; (80034dc <HAL_InitTick+0xdc>)
 8003464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003466:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8003468:	4b1c      	ldr	r3, [pc, #112]	; (80034dc <HAL_InitTick+0xdc>)
 800346a:	2200      	movs	r2, #0
 800346c:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800346e:	4b1b      	ldr	r3, [pc, #108]	; (80034dc <HAL_InitTick+0xdc>)
 8003470:	2200      	movs	r2, #0
 8003472:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003474:	4b19      	ldr	r3, [pc, #100]	; (80034dc <HAL_InitTick+0xdc>)
 8003476:	2200      	movs	r2, #0
 8003478:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 800347a:	4818      	ldr	r0, [pc, #96]	; (80034dc <HAL_InitTick+0xdc>)
 800347c:	f003 fb60 	bl	8006b40 <HAL_TIM_Base_Init>
 8003480:	4603      	mov	r3, r0
 8003482:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8003486:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800348a:	2b00      	cmp	r3, #0
 800348c:	d11b      	bne.n	80034c6 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 800348e:	4813      	ldr	r0, [pc, #76]	; (80034dc <HAL_InitTick+0xdc>)
 8003490:	f003 fbb0 	bl	8006bf4 <HAL_TIM_Base_Start_IT>
 8003494:	4603      	mov	r3, r0
 8003496:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800349a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d111      	bne.n	80034c6 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80034a2:	201a      	movs	r0, #26
 80034a4:	f000 ff68 	bl	8004378 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b0f      	cmp	r3, #15
 80034ac:	d808      	bhi.n	80034c0 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 80034ae:	2200      	movs	r2, #0
 80034b0:	6879      	ldr	r1, [r7, #4]
 80034b2:	201a      	movs	r0, #26
 80034b4:	f000 ff44 	bl	8004340 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80034b8:	4a0a      	ldr	r2, [pc, #40]	; (80034e4 <HAL_InitTick+0xe4>)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6013      	str	r3, [r2, #0]
 80034be:	e002      	b.n	80034c6 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80034c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3730      	adds	r7, #48	; 0x30
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	40023800 	.word	0x40023800
 80034d8:	431bde83 	.word	0x431bde83
 80034dc:	200005c0 	.word	0x200005c0
 80034e0:	40014800 	.word	0x40014800
 80034e4:	20000004 	.word	0x20000004

080034e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034e8:	b480      	push	{r7}
 80034ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80034ec:	e7fe      	b.n	80034ec <NMI_Handler+0x4>

080034ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034ee:	b480      	push	{r7}
 80034f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034f2:	e7fe      	b.n	80034f2 <HardFault_Handler+0x4>

080034f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034f4:	b480      	push	{r7}
 80034f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034f8:	e7fe      	b.n	80034f8 <MemManage_Handler+0x4>

080034fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034fa:	b480      	push	{r7}
 80034fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034fe:	e7fe      	b.n	80034fe <BusFault_Handler+0x4>

08003500 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003504:	e7fe      	b.n	8003504 <UsageFault_Handler+0x4>

08003506 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003506:	b480      	push	{r7}
 8003508:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800350a:	bf00      	nop
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003518:	4803      	ldr	r0, [pc, #12]	; (8003528 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 800351a:	f003 fd37 	bl	8006f8c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 800351e:	4803      	ldr	r0, [pc, #12]	; (800352c <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8003520:	f003 fd34 	bl	8006f8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003524:	bf00      	nop
 8003526:	bd80      	pop	{r7, pc}
 8003528:	2000060c 	.word	0x2000060c
 800352c:	200005c0 	.word	0x200005c0

08003530 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003534:	4802      	ldr	r0, [pc, #8]	; (8003540 <TIM2_IRQHandler+0x10>)
 8003536:	f003 fd29 	bl	8006f8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800353a:	bf00      	nop
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	20000654 	.word	0x20000654

08003544 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003548:	4802      	ldr	r0, [pc, #8]	; (8003554 <TIM5_IRQHandler+0x10>)
 800354a:	f003 fd1f 	bl	8006f8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800354e:	bf00      	nop
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	2000069c 	.word	0x2000069c

08003558 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003558:	b480      	push	{r7}
 800355a:	af00      	add	r7, sp, #0
  return 1;
 800355c:	2301      	movs	r3, #1
}
 800355e:	4618      	mov	r0, r3
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <_kill>:

int _kill(int pid, int sig)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003572:	f008 fd21 	bl	800bfb8 <__errno>
 8003576:	4603      	mov	r3, r0
 8003578:	2216      	movs	r2, #22
 800357a:	601a      	str	r2, [r3, #0]
  return -1;
 800357c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003580:	4618      	mov	r0, r3
 8003582:	3708      	adds	r7, #8
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <_exit>:

void _exit (int status)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003590:	f04f 31ff 	mov.w	r1, #4294967295
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f7ff ffe7 	bl	8003568 <_kill>
  while (1) {}    /* Make sure we hang here */
 800359a:	e7fe      	b.n	800359a <_exit+0x12>

0800359c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035a8:	2300      	movs	r3, #0
 80035aa:	617b      	str	r3, [r7, #20]
 80035ac:	e00a      	b.n	80035c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80035ae:	f3af 8000 	nop.w
 80035b2:	4601      	mov	r1, r0
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	1c5a      	adds	r2, r3, #1
 80035b8:	60ba      	str	r2, [r7, #8]
 80035ba:	b2ca      	uxtb	r2, r1
 80035bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	3301      	adds	r3, #1
 80035c2:	617b      	str	r3, [r7, #20]
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	dbf0      	blt.n	80035ae <_read+0x12>
  }

  return len;
 80035cc:	687b      	ldr	r3, [r7, #4]
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3718      	adds	r7, #24
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b086      	sub	sp, #24
 80035da:	af00      	add	r7, sp, #0
 80035dc:	60f8      	str	r0, [r7, #12]
 80035de:	60b9      	str	r1, [r7, #8]
 80035e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035e2:	2300      	movs	r3, #0
 80035e4:	617b      	str	r3, [r7, #20]
 80035e6:	e009      	b.n	80035fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	1c5a      	adds	r2, r3, #1
 80035ec:	60ba      	str	r2, [r7, #8]
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7fe fae9 	bl	8001bc8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	3301      	adds	r3, #1
 80035fa:	617b      	str	r3, [r7, #20]
 80035fc:	697a      	ldr	r2, [r7, #20]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	429a      	cmp	r2, r3
 8003602:	dbf1      	blt.n	80035e8 <_write+0x12>
  }
  return len;
 8003604:	687b      	ldr	r3, [r7, #4]
}
 8003606:	4618      	mov	r0, r3
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <_close>:

int _close(int file)
{
 800360e:	b480      	push	{r7}
 8003610:	b083      	sub	sp, #12
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003616:	f04f 33ff 	mov.w	r3, #4294967295
}
 800361a:	4618      	mov	r0, r3
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr

08003626 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003626:	b480      	push	{r7}
 8003628:	b083      	sub	sp, #12
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
 800362e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003636:	605a      	str	r2, [r3, #4]
  return 0;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr

08003646 <_isatty>:

int _isatty(int file)
{
 8003646:	b480      	push	{r7}
 8003648:	b083      	sub	sp, #12
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800364e:	2301      	movs	r3, #1
}
 8003650:	4618      	mov	r0, r3
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3714      	adds	r7, #20
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
	...

08003678 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003680:	4a14      	ldr	r2, [pc, #80]	; (80036d4 <_sbrk+0x5c>)
 8003682:	4b15      	ldr	r3, [pc, #84]	; (80036d8 <_sbrk+0x60>)
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800368c:	4b13      	ldr	r3, [pc, #76]	; (80036dc <_sbrk+0x64>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d102      	bne.n	800369a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003694:	4b11      	ldr	r3, [pc, #68]	; (80036dc <_sbrk+0x64>)
 8003696:	4a12      	ldr	r2, [pc, #72]	; (80036e0 <_sbrk+0x68>)
 8003698:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800369a:	4b10      	ldr	r3, [pc, #64]	; (80036dc <_sbrk+0x64>)
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4413      	add	r3, r2
 80036a2:	693a      	ldr	r2, [r7, #16]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d207      	bcs.n	80036b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036a8:	f008 fc86 	bl	800bfb8 <__errno>
 80036ac:	4603      	mov	r3, r0
 80036ae:	220c      	movs	r2, #12
 80036b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036b2:	f04f 33ff 	mov.w	r3, #4294967295
 80036b6:	e009      	b.n	80036cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036b8:	4b08      	ldr	r3, [pc, #32]	; (80036dc <_sbrk+0x64>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036be:	4b07      	ldr	r3, [pc, #28]	; (80036dc <_sbrk+0x64>)
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4413      	add	r3, r2
 80036c6:	4a05      	ldr	r2, [pc, #20]	; (80036dc <_sbrk+0x64>)
 80036c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80036ca:	68fb      	ldr	r3, [r7, #12]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3718      	adds	r7, #24
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	20018000 	.word	0x20018000
 80036d8:	00000400 	.word	0x00000400
 80036dc:	20000608 	.word	0x20000608
 80036e0:	200052b0 	.word	0x200052b0

080036e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80036e8:	4b06      	ldr	r3, [pc, #24]	; (8003704 <SystemInit+0x20>)
 80036ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ee:	4a05      	ldr	r2, [pc, #20]	; (8003704 <SystemInit+0x20>)
 80036f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80036f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036f8:	bf00      	nop
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	e000ed00 	.word	0xe000ed00

08003708 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800370e:	f107 0310 	add.w	r3, r7, #16
 8003712:	2200      	movs	r2, #0
 8003714:	601a      	str	r2, [r3, #0]
 8003716:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003718:	463b      	mov	r3, r7
 800371a:	2200      	movs	r2, #0
 800371c:	601a      	str	r2, [r3, #0]
 800371e:	605a      	str	r2, [r3, #4]
 8003720:	609a      	str	r2, [r3, #8]
 8003722:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003724:	4b21      	ldr	r3, [pc, #132]	; (80037ac <MX_TIM1_Init+0xa4>)
 8003726:	4a22      	ldr	r2, [pc, #136]	; (80037b0 <MX_TIM1_Init+0xa8>)
 8003728:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 42-1;
 800372a:	4b20      	ldr	r3, [pc, #128]	; (80037ac <MX_TIM1_Init+0xa4>)
 800372c:	2229      	movs	r2, #41	; 0x29
 800372e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003730:	4b1e      	ldr	r3, [pc, #120]	; (80037ac <MX_TIM1_Init+0xa4>)
 8003732:	2200      	movs	r2, #0
 8003734:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003736:	4b1d      	ldr	r3, [pc, #116]	; (80037ac <MX_TIM1_Init+0xa4>)
 8003738:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800373c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800373e:	4b1b      	ldr	r3, [pc, #108]	; (80037ac <MX_TIM1_Init+0xa4>)
 8003740:	2200      	movs	r2, #0
 8003742:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003744:	4b19      	ldr	r3, [pc, #100]	; (80037ac <MX_TIM1_Init+0xa4>)
 8003746:	2200      	movs	r2, #0
 8003748:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800374a:	4b18      	ldr	r3, [pc, #96]	; (80037ac <MX_TIM1_Init+0xa4>)
 800374c:	2200      	movs	r2, #0
 800374e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8003750:	4816      	ldr	r0, [pc, #88]	; (80037ac <MX_TIM1_Init+0xa4>)
 8003752:	f003 fab1 	bl	8006cb8 <HAL_TIM_IC_Init>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800375c:	f7fe fb76 	bl	8001e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003760:	2300      	movs	r3, #0
 8003762:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003764:	2300      	movs	r3, #0
 8003766:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003768:	f107 0310 	add.w	r3, r7, #16
 800376c:	4619      	mov	r1, r3
 800376e:	480f      	ldr	r0, [pc, #60]	; (80037ac <MX_TIM1_Init+0xa4>)
 8003770:	f003 ffd6 	bl	8007720 <HAL_TIMEx_MasterConfigSynchronization>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800377a:	f7fe fb67 	bl	8001e4c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800377e:	230a      	movs	r3, #10
 8003780:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003782:	2301      	movs	r3, #1
 8003784:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003786:	2300      	movs	r3, #0
 8003788:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800378a:	2300      	movs	r3, #0
 800378c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800378e:	463b      	mov	r3, r7
 8003790:	2204      	movs	r2, #4
 8003792:	4619      	mov	r1, r3
 8003794:	4805      	ldr	r0, [pc, #20]	; (80037ac <MX_TIM1_Init+0xa4>)
 8003796:	f003 fd01 	bl	800719c <HAL_TIM_IC_ConfigChannel>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80037a0:	f7fe fb54 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80037a4:	bf00      	nop
 80037a6:	3718      	adds	r7, #24
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	2000060c 	.word	0x2000060c
 80037b0:	40010000 	.word	0x40010000

080037b4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037ba:	f107 0310 	add.w	r3, r7, #16
 80037be:	2200      	movs	r2, #0
 80037c0:	601a      	str	r2, [r3, #0]
 80037c2:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80037c4:	463b      	mov	r3, r7
 80037c6:	2200      	movs	r2, #0
 80037c8:	601a      	str	r2, [r3, #0]
 80037ca:	605a      	str	r2, [r3, #4]
 80037cc:	609a      	str	r2, [r3, #8]
 80037ce:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80037d0:	4b20      	ldr	r3, [pc, #128]	; (8003854 <MX_TIM2_Init+0xa0>)
 80037d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80037d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 80037d8:	4b1e      	ldr	r3, [pc, #120]	; (8003854 <MX_TIM2_Init+0xa0>)
 80037da:	2253      	movs	r2, #83	; 0x53
 80037dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037de:	4b1d      	ldr	r3, [pc, #116]	; (8003854 <MX_TIM2_Init+0xa0>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80037e4:	4b1b      	ldr	r3, [pc, #108]	; (8003854 <MX_TIM2_Init+0xa0>)
 80037e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037ec:	4b19      	ldr	r3, [pc, #100]	; (8003854 <MX_TIM2_Init+0xa0>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037f2:	4b18      	ldr	r3, [pc, #96]	; (8003854 <MX_TIM2_Init+0xa0>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80037f8:	4816      	ldr	r0, [pc, #88]	; (8003854 <MX_TIM2_Init+0xa0>)
 80037fa:	f003 fa5d 	bl	8006cb8 <HAL_TIM_IC_Init>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d001      	beq.n	8003808 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003804:	f7fe fb22 	bl	8001e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003808:	2300      	movs	r3, #0
 800380a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800380c:	2300      	movs	r3, #0
 800380e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003810:	f107 0310 	add.w	r3, r7, #16
 8003814:	4619      	mov	r1, r3
 8003816:	480f      	ldr	r0, [pc, #60]	; (8003854 <MX_TIM2_Init+0xa0>)
 8003818:	f003 ff82 	bl	8007720 <HAL_TIMEx_MasterConfigSynchronization>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003822:	f7fe fb13 	bl	8001e4c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003826:	2300      	movs	r3, #0
 8003828:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800382a:	2301      	movs	r3, #1
 800382c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800382e:	2300      	movs	r3, #0
 8003830:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8003832:	2300      	movs	r3, #0
 8003834:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003836:	463b      	mov	r3, r7
 8003838:	2204      	movs	r2, #4
 800383a:	4619      	mov	r1, r3
 800383c:	4805      	ldr	r0, [pc, #20]	; (8003854 <MX_TIM2_Init+0xa0>)
 800383e:	f003 fcad 	bl	800719c <HAL_TIM_IC_ConfigChannel>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d001      	beq.n	800384c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8003848:	f7fe fb00 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800384c:	bf00      	nop
 800384e:	3718      	adds	r7, #24
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	20000654 	.word	0x20000654

08003858 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800385e:	f107 0310 	add.w	r3, r7, #16
 8003862:	2200      	movs	r2, #0
 8003864:	601a      	str	r2, [r3, #0]
 8003866:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003868:	463b      	mov	r3, r7
 800386a:	2200      	movs	r2, #0
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	605a      	str	r2, [r3, #4]
 8003870:	609a      	str	r2, [r3, #8]
 8003872:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003874:	4b20      	ldr	r3, [pc, #128]	; (80038f8 <MX_TIM5_Init+0xa0>)
 8003876:	4a21      	ldr	r2, [pc, #132]	; (80038fc <MX_TIM5_Init+0xa4>)
 8003878:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84-1;
 800387a:	4b1f      	ldr	r3, [pc, #124]	; (80038f8 <MX_TIM5_Init+0xa0>)
 800387c:	2253      	movs	r2, #83	; 0x53
 800387e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003880:	4b1d      	ldr	r3, [pc, #116]	; (80038f8 <MX_TIM5_Init+0xa0>)
 8003882:	2200      	movs	r2, #0
 8003884:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8003886:	4b1c      	ldr	r3, [pc, #112]	; (80038f8 <MX_TIM5_Init+0xa0>)
 8003888:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800388c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800388e:	4b1a      	ldr	r3, [pc, #104]	; (80038f8 <MX_TIM5_Init+0xa0>)
 8003890:	2200      	movs	r2, #0
 8003892:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003894:	4b18      	ldr	r3, [pc, #96]	; (80038f8 <MX_TIM5_Init+0xa0>)
 8003896:	2200      	movs	r2, #0
 8003898:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 800389a:	4817      	ldr	r0, [pc, #92]	; (80038f8 <MX_TIM5_Init+0xa0>)
 800389c:	f003 fa0c 	bl	8006cb8 <HAL_TIM_IC_Init>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80038a6:	f7fe fad1 	bl	8001e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038aa:	2300      	movs	r3, #0
 80038ac:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038ae:	2300      	movs	r3, #0
 80038b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80038b2:	f107 0310 	add.w	r3, r7, #16
 80038b6:	4619      	mov	r1, r3
 80038b8:	480f      	ldr	r0, [pc, #60]	; (80038f8 <MX_TIM5_Init+0xa0>)
 80038ba:	f003 ff31 	bl	8007720 <HAL_TIMEx_MasterConfigSynchronization>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80038c4:	f7fe fac2 	bl	8001e4c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80038c8:	2300      	movs	r3, #0
 80038ca:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80038cc:	2301      	movs	r3, #1
 80038ce:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80038d0:	2300      	movs	r3, #0
 80038d2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80038d4:	2300      	movs	r3, #0
 80038d6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80038d8:	463b      	mov	r3, r7
 80038da:	2204      	movs	r2, #4
 80038dc:	4619      	mov	r1, r3
 80038de:	4806      	ldr	r0, [pc, #24]	; (80038f8 <MX_TIM5_Init+0xa0>)
 80038e0:	f003 fc5c 	bl	800719c <HAL_TIM_IC_ConfigChannel>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 80038ea:	f7fe faaf 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80038ee:	bf00      	nop
 80038f0:	3718      	adds	r7, #24
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	2000069c 	.word	0x2000069c
 80038fc:	40000c00 	.word	0x40000c00

08003900 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b08e      	sub	sp, #56	; 0x38
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003908:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800390c:	2200      	movs	r2, #0
 800390e:	601a      	str	r2, [r3, #0]
 8003910:	605a      	str	r2, [r3, #4]
 8003912:	609a      	str	r2, [r3, #8]
 8003914:	60da      	str	r2, [r3, #12]
 8003916:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a57      	ldr	r2, [pc, #348]	; (8003a7c <HAL_TIM_IC_MspInit+0x17c>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d135      	bne.n	800398e <HAL_TIM_IC_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003922:	2300      	movs	r3, #0
 8003924:	623b      	str	r3, [r7, #32]
 8003926:	4b56      	ldr	r3, [pc, #344]	; (8003a80 <HAL_TIM_IC_MspInit+0x180>)
 8003928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392a:	4a55      	ldr	r2, [pc, #340]	; (8003a80 <HAL_TIM_IC_MspInit+0x180>)
 800392c:	f043 0301 	orr.w	r3, r3, #1
 8003930:	6453      	str	r3, [r2, #68]	; 0x44
 8003932:	4b53      	ldr	r3, [pc, #332]	; (8003a80 <HAL_TIM_IC_MspInit+0x180>)
 8003934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	623b      	str	r3, [r7, #32]
 800393c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800393e:	2300      	movs	r3, #0
 8003940:	61fb      	str	r3, [r7, #28]
 8003942:	4b4f      	ldr	r3, [pc, #316]	; (8003a80 <HAL_TIM_IC_MspInit+0x180>)
 8003944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003946:	4a4e      	ldr	r2, [pc, #312]	; (8003a80 <HAL_TIM_IC_MspInit+0x180>)
 8003948:	f043 0301 	orr.w	r3, r3, #1
 800394c:	6313      	str	r3, [r2, #48]	; 0x30
 800394e:	4b4c      	ldr	r3, [pc, #304]	; (8003a80 <HAL_TIM_IC_MspInit+0x180>)
 8003950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	61fb      	str	r3, [r7, #28]
 8003958:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = UltraSound1_RX_Pin;
 800395a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800395e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003960:	2302      	movs	r3, #2
 8003962:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003964:	2300      	movs	r3, #0
 8003966:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003968:	2300      	movs	r3, #0
 800396a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800396c:	2301      	movs	r3, #1
 800396e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(UltraSound1_RX_GPIO_Port, &GPIO_InitStruct);
 8003970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003974:	4619      	mov	r1, r3
 8003976:	4843      	ldr	r0, [pc, #268]	; (8003a84 <HAL_TIM_IC_MspInit+0x184>)
 8003978:	f000 fd0c 	bl	8004394 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 800397c:	2200      	movs	r2, #0
 800397e:	2105      	movs	r1, #5
 8003980:	201a      	movs	r0, #26
 8003982:	f000 fcdd 	bl	8004340 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003986:	201a      	movs	r0, #26
 8003988:	f000 fcf6 	bl	8004378 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800398c:	e072      	b.n	8003a74 <HAL_TIM_IC_MspInit+0x174>
  else if(tim_icHandle->Instance==TIM2)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003996:	d134      	bne.n	8003a02 <HAL_TIM_IC_MspInit+0x102>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003998:	2300      	movs	r3, #0
 800399a:	61bb      	str	r3, [r7, #24]
 800399c:	4b38      	ldr	r3, [pc, #224]	; (8003a80 <HAL_TIM_IC_MspInit+0x180>)
 800399e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a0:	4a37      	ldr	r2, [pc, #220]	; (8003a80 <HAL_TIM_IC_MspInit+0x180>)
 80039a2:	f043 0301 	orr.w	r3, r3, #1
 80039a6:	6413      	str	r3, [r2, #64]	; 0x40
 80039a8:	4b35      	ldr	r3, [pc, #212]	; (8003a80 <HAL_TIM_IC_MspInit+0x180>)
 80039aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	61bb      	str	r3, [r7, #24]
 80039b2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039b4:	2300      	movs	r3, #0
 80039b6:	617b      	str	r3, [r7, #20]
 80039b8:	4b31      	ldr	r3, [pc, #196]	; (8003a80 <HAL_TIM_IC_MspInit+0x180>)
 80039ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039bc:	4a30      	ldr	r2, [pc, #192]	; (8003a80 <HAL_TIM_IC_MspInit+0x180>)
 80039be:	f043 0302 	orr.w	r3, r3, #2
 80039c2:	6313      	str	r3, [r2, #48]	; 0x30
 80039c4:	4b2e      	ldr	r3, [pc, #184]	; (8003a80 <HAL_TIM_IC_MspInit+0x180>)
 80039c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	617b      	str	r3, [r7, #20]
 80039ce:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = UltraSound2_RX_Pin;
 80039d0:	2308      	movs	r3, #8
 80039d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d4:	2302      	movs	r3, #2
 80039d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d8:	2300      	movs	r3, #0
 80039da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039dc:	2300      	movs	r3, #0
 80039de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80039e0:	2301      	movs	r3, #1
 80039e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(UltraSound2_RX_GPIO_Port, &GPIO_InitStruct);
 80039e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039e8:	4619      	mov	r1, r3
 80039ea:	4827      	ldr	r0, [pc, #156]	; (8003a88 <HAL_TIM_IC_MspInit+0x188>)
 80039ec:	f000 fcd2 	bl	8004394 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80039f0:	2200      	movs	r2, #0
 80039f2:	2105      	movs	r1, #5
 80039f4:	201c      	movs	r0, #28
 80039f6:	f000 fca3 	bl	8004340 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80039fa:	201c      	movs	r0, #28
 80039fc:	f000 fcbc 	bl	8004378 <HAL_NVIC_EnableIRQ>
}
 8003a00:	e038      	b.n	8003a74 <HAL_TIM_IC_MspInit+0x174>
  else if(tim_icHandle->Instance==TIM5)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a21      	ldr	r2, [pc, #132]	; (8003a8c <HAL_TIM_IC_MspInit+0x18c>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d133      	bne.n	8003a74 <HAL_TIM_IC_MspInit+0x174>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	613b      	str	r3, [r7, #16]
 8003a10:	4b1b      	ldr	r3, [pc, #108]	; (8003a80 <HAL_TIM_IC_MspInit+0x180>)
 8003a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a14:	4a1a      	ldr	r2, [pc, #104]	; (8003a80 <HAL_TIM_IC_MspInit+0x180>)
 8003a16:	f043 0308 	orr.w	r3, r3, #8
 8003a1a:	6413      	str	r3, [r2, #64]	; 0x40
 8003a1c:	4b18      	ldr	r3, [pc, #96]	; (8003a80 <HAL_TIM_IC_MspInit+0x180>)
 8003a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a20:	f003 0308 	and.w	r3, r3, #8
 8003a24:	613b      	str	r3, [r7, #16]
 8003a26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a28:	2300      	movs	r3, #0
 8003a2a:	60fb      	str	r3, [r7, #12]
 8003a2c:	4b14      	ldr	r3, [pc, #80]	; (8003a80 <HAL_TIM_IC_MspInit+0x180>)
 8003a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a30:	4a13      	ldr	r2, [pc, #76]	; (8003a80 <HAL_TIM_IC_MspInit+0x180>)
 8003a32:	f043 0301 	orr.w	r3, r3, #1
 8003a36:	6313      	str	r3, [r2, #48]	; 0x30
 8003a38:	4b11      	ldr	r3, [pc, #68]	; (8003a80 <HAL_TIM_IC_MspInit+0x180>)
 8003a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	60fb      	str	r3, [r7, #12]
 8003a42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UltraSound3_RX_Pin;
 8003a44:	2302      	movs	r3, #2
 8003a46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a48:	2302      	movs	r3, #2
 8003a4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a50:	2300      	movs	r3, #0
 8003a52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003a54:	2302      	movs	r3, #2
 8003a56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(UltraSound3_RX_GPIO_Port, &GPIO_InitStruct);
 8003a58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	4809      	ldr	r0, [pc, #36]	; (8003a84 <HAL_TIM_IC_MspInit+0x184>)
 8003a60:	f000 fc98 	bl	8004394 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8003a64:	2200      	movs	r2, #0
 8003a66:	2105      	movs	r1, #5
 8003a68:	2032      	movs	r0, #50	; 0x32
 8003a6a:	f000 fc69 	bl	8004340 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003a6e:	2032      	movs	r0, #50	; 0x32
 8003a70:	f000 fc82 	bl	8004378 <HAL_NVIC_EnableIRQ>
}
 8003a74:	bf00      	nop
 8003a76:	3738      	adds	r7, #56	; 0x38
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	40010000 	.word	0x40010000
 8003a80:	40023800 	.word	0x40023800
 8003a84:	40020000 	.word	0x40020000
 8003a88:	40020400 	.word	0x40020400
 8003a8c:	40000c00 	.word	0x40000c00

08003a90 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003a94:	4b11      	ldr	r3, [pc, #68]	; (8003adc <MX_USART1_UART_Init+0x4c>)
 8003a96:	4a12      	ldr	r2, [pc, #72]	; (8003ae0 <MX_USART1_UART_Init+0x50>)
 8003a98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8003a9a:	4b10      	ldr	r3, [pc, #64]	; (8003adc <MX_USART1_UART_Init+0x4c>)
 8003a9c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8003aa0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003aa2:	4b0e      	ldr	r3, [pc, #56]	; (8003adc <MX_USART1_UART_Init+0x4c>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003aa8:	4b0c      	ldr	r3, [pc, #48]	; (8003adc <MX_USART1_UART_Init+0x4c>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003aae:	4b0b      	ldr	r3, [pc, #44]	; (8003adc <MX_USART1_UART_Init+0x4c>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003ab4:	4b09      	ldr	r3, [pc, #36]	; (8003adc <MX_USART1_UART_Init+0x4c>)
 8003ab6:	220c      	movs	r2, #12
 8003ab8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003aba:	4b08      	ldr	r3, [pc, #32]	; (8003adc <MX_USART1_UART_Init+0x4c>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ac0:	4b06      	ldr	r3, [pc, #24]	; (8003adc <MX_USART1_UART_Init+0x4c>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8003ac6:	4805      	ldr	r0, [pc, #20]	; (8003adc <MX_USART1_UART_Init+0x4c>)
 8003ac8:	f003 fef9 	bl	80078be <HAL_HalfDuplex_Init>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003ad2:	f7fe f9bb 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003ad6:	bf00      	nop
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	200006e4 	.word	0x200006e4
 8003ae0:	40011000 	.word	0x40011000

08003ae4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003ae8:	4b11      	ldr	r3, [pc, #68]	; (8003b30 <MX_USART2_UART_Init+0x4c>)
 8003aea:	4a12      	ldr	r2, [pc, #72]	; (8003b34 <MX_USART2_UART_Init+0x50>)
 8003aec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003aee:	4b10      	ldr	r3, [pc, #64]	; (8003b30 <MX_USART2_UART_Init+0x4c>)
 8003af0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003af4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003af6:	4b0e      	ldr	r3, [pc, #56]	; (8003b30 <MX_USART2_UART_Init+0x4c>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003afc:	4b0c      	ldr	r3, [pc, #48]	; (8003b30 <MX_USART2_UART_Init+0x4c>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003b02:	4b0b      	ldr	r3, [pc, #44]	; (8003b30 <MX_USART2_UART_Init+0x4c>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003b08:	4b09      	ldr	r3, [pc, #36]	; (8003b30 <MX_USART2_UART_Init+0x4c>)
 8003b0a:	220c      	movs	r2, #12
 8003b0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b0e:	4b08      	ldr	r3, [pc, #32]	; (8003b30 <MX_USART2_UART_Init+0x4c>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b14:	4b06      	ldr	r3, [pc, #24]	; (8003b30 <MX_USART2_UART_Init+0x4c>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003b1a:	4805      	ldr	r0, [pc, #20]	; (8003b30 <MX_USART2_UART_Init+0x4c>)
 8003b1c:	f003 fe82 	bl	8007824 <HAL_UART_Init>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003b26:	f7fe f991 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003b2a:	bf00      	nop
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	20000728 	.word	0x20000728
 8003b34:	40004400 	.word	0x40004400

08003b38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b08c      	sub	sp, #48	; 0x30
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b40:	f107 031c 	add.w	r3, r7, #28
 8003b44:	2200      	movs	r2, #0
 8003b46:	601a      	str	r2, [r3, #0]
 8003b48:	605a      	str	r2, [r3, #4]
 8003b4a:	609a      	str	r2, [r3, #8]
 8003b4c:	60da      	str	r2, [r3, #12]
 8003b4e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a32      	ldr	r2, [pc, #200]	; (8003c20 <HAL_UART_MspInit+0xe8>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d12c      	bne.n	8003bb4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	61bb      	str	r3, [r7, #24]
 8003b5e:	4b31      	ldr	r3, [pc, #196]	; (8003c24 <HAL_UART_MspInit+0xec>)
 8003b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b62:	4a30      	ldr	r2, [pc, #192]	; (8003c24 <HAL_UART_MspInit+0xec>)
 8003b64:	f043 0310 	orr.w	r3, r3, #16
 8003b68:	6453      	str	r3, [r2, #68]	; 0x44
 8003b6a:	4b2e      	ldr	r3, [pc, #184]	; (8003c24 <HAL_UART_MspInit+0xec>)
 8003b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6e:	f003 0310 	and.w	r3, r3, #16
 8003b72:	61bb      	str	r3, [r7, #24]
 8003b74:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b76:	2300      	movs	r3, #0
 8003b78:	617b      	str	r3, [r7, #20]
 8003b7a:	4b2a      	ldr	r3, [pc, #168]	; (8003c24 <HAL_UART_MspInit+0xec>)
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7e:	4a29      	ldr	r2, [pc, #164]	; (8003c24 <HAL_UART_MspInit+0xec>)
 8003b80:	f043 0302 	orr.w	r3, r3, #2
 8003b84:	6313      	str	r3, [r2, #48]	; 0x30
 8003b86:	4b27      	ldr	r3, [pc, #156]	; (8003c24 <HAL_UART_MspInit+0xec>)
 8003b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	617b      	str	r3, [r7, #20]
 8003b90:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = MotorDriver_TX_Pin;
 8003b92:	2340      	movs	r3, #64	; 0x40
 8003b94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b96:	2312      	movs	r3, #18
 8003b98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003ba2:	2307      	movs	r3, #7
 8003ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MotorDriver_TX_GPIO_Port, &GPIO_InitStruct);
 8003ba6:	f107 031c 	add.w	r3, r7, #28
 8003baa:	4619      	mov	r1, r3
 8003bac:	481e      	ldr	r0, [pc, #120]	; (8003c28 <HAL_UART_MspInit+0xf0>)
 8003bae:	f000 fbf1 	bl	8004394 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003bb2:	e030      	b.n	8003c16 <HAL_UART_MspInit+0xde>
  else if(uartHandle->Instance==USART2)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a1c      	ldr	r2, [pc, #112]	; (8003c2c <HAL_UART_MspInit+0xf4>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d12b      	bne.n	8003c16 <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	613b      	str	r3, [r7, #16]
 8003bc2:	4b18      	ldr	r3, [pc, #96]	; (8003c24 <HAL_UART_MspInit+0xec>)
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc6:	4a17      	ldr	r2, [pc, #92]	; (8003c24 <HAL_UART_MspInit+0xec>)
 8003bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bcc:	6413      	str	r3, [r2, #64]	; 0x40
 8003bce:	4b15      	ldr	r3, [pc, #84]	; (8003c24 <HAL_UART_MspInit+0xec>)
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd6:	613b      	str	r3, [r7, #16]
 8003bd8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bda:	2300      	movs	r3, #0
 8003bdc:	60fb      	str	r3, [r7, #12]
 8003bde:	4b11      	ldr	r3, [pc, #68]	; (8003c24 <HAL_UART_MspInit+0xec>)
 8003be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be2:	4a10      	ldr	r2, [pc, #64]	; (8003c24 <HAL_UART_MspInit+0xec>)
 8003be4:	f043 0301 	orr.w	r3, r3, #1
 8003be8:	6313      	str	r3, [r2, #48]	; 0x30
 8003bea:	4b0e      	ldr	r3, [pc, #56]	; (8003c24 <HAL_UART_MspInit+0xec>)
 8003bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	60fb      	str	r3, [r7, #12]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003bf6:	230c      	movs	r3, #12
 8003bf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c02:	2303      	movs	r3, #3
 8003c04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003c06:	2307      	movs	r3, #7
 8003c08:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c0a:	f107 031c 	add.w	r3, r7, #28
 8003c0e:	4619      	mov	r1, r3
 8003c10:	4807      	ldr	r0, [pc, #28]	; (8003c30 <HAL_UART_MspInit+0xf8>)
 8003c12:	f000 fbbf 	bl	8004394 <HAL_GPIO_Init>
}
 8003c16:	bf00      	nop
 8003c18:	3730      	adds	r7, #48	; 0x30
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	40011000 	.word	0x40011000
 8003c24:	40023800 	.word	0x40023800
 8003c28:	40020400 	.word	0x40020400
 8003c2c:	40004400 	.word	0x40004400
 8003c30:	40020000 	.word	0x40020000

08003c34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003c34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003c38:	480d      	ldr	r0, [pc, #52]	; (8003c70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003c3a:	490e      	ldr	r1, [pc, #56]	; (8003c74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003c3c:	4a0e      	ldr	r2, [pc, #56]	; (8003c78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003c3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c40:	e002      	b.n	8003c48 <LoopCopyDataInit>

08003c42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c46:	3304      	adds	r3, #4

08003c48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c4c:	d3f9      	bcc.n	8003c42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c4e:	4a0b      	ldr	r2, [pc, #44]	; (8003c7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003c50:	4c0b      	ldr	r4, [pc, #44]	; (8003c80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003c52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c54:	e001      	b.n	8003c5a <LoopFillZerobss>

08003c56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c58:	3204      	adds	r2, #4

08003c5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c5c:	d3fb      	bcc.n	8003c56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003c5e:	f7ff fd41 	bl	80036e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c62:	f008 f9af 	bl	800bfc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c66:	f7fd ffc1 	bl	8001bec <main>
  bx  lr    
 8003c6a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003c6c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003c70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c74:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8003c78:	0800e19c 	.word	0x0800e19c
  ldr r2, =_sbss
 8003c7c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8003c80:	200052ac 	.word	0x200052ac

08003c84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c84:	e7fe      	b.n	8003c84 <ADC_IRQHandler>
	...

08003c88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c8c:	4b0e      	ldr	r3, [pc, #56]	; (8003cc8 <HAL_Init+0x40>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a0d      	ldr	r2, [pc, #52]	; (8003cc8 <HAL_Init+0x40>)
 8003c92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c98:	4b0b      	ldr	r3, [pc, #44]	; (8003cc8 <HAL_Init+0x40>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a0a      	ldr	r2, [pc, #40]	; (8003cc8 <HAL_Init+0x40>)
 8003c9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ca2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ca4:	4b08      	ldr	r3, [pc, #32]	; (8003cc8 <HAL_Init+0x40>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a07      	ldr	r2, [pc, #28]	; (8003cc8 <HAL_Init+0x40>)
 8003caa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003cb0:	2003      	movs	r0, #3
 8003cb2:	f000 fb3a 	bl	800432a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003cb6:	2005      	movs	r0, #5
 8003cb8:	f7ff fba2 	bl	8003400 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003cbc:	f7ff fb74 	bl	80033a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	40023c00 	.word	0x40023c00

08003ccc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003cd0:	4b06      	ldr	r3, [pc, #24]	; (8003cec <HAL_IncTick+0x20>)
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	4b06      	ldr	r3, [pc, #24]	; (8003cf0 <HAL_IncTick+0x24>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4413      	add	r3, r2
 8003cdc:	4a04      	ldr	r2, [pc, #16]	; (8003cf0 <HAL_IncTick+0x24>)
 8003cde:	6013      	str	r3, [r2, #0]
}
 8003ce0:	bf00      	nop
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	20000008 	.word	0x20000008
 8003cf0:	2000076c 	.word	0x2000076c

08003cf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8003cf8:	4b03      	ldr	r3, [pc, #12]	; (8003d08 <HAL_GetTick+0x14>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	2000076c 	.word	0x2000076c

08003d0c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d14:	2300      	movs	r3, #0
 8003d16:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d101      	bne.n	8003d22 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e033      	b.n	8003d8a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d109      	bne.n	8003d3e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f7fd fd86 	bl	800183c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d42:	f003 0310 	and.w	r3, r3, #16
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d118      	bne.n	8003d7c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003d52:	f023 0302 	bic.w	r3, r3, #2
 8003d56:	f043 0202 	orr.w	r2, r3, #2
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f93a 	bl	8003fd8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6e:	f023 0303 	bic.w	r3, r3, #3
 8003d72:	f043 0201 	orr.w	r2, r3, #1
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	641a      	str	r2, [r3, #64]	; 0x40
 8003d7a:	e001      	b.n	8003d80 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
	...

08003d94 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d101      	bne.n	8003db0 <HAL_ADC_ConfigChannel+0x1c>
 8003dac:	2302      	movs	r3, #2
 8003dae:	e105      	b.n	8003fbc <HAL_ADC_ConfigChannel+0x228>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2b09      	cmp	r3, #9
 8003dbe:	d925      	bls.n	8003e0c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	68d9      	ldr	r1, [r3, #12]
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	461a      	mov	r2, r3
 8003dce:	4613      	mov	r3, r2
 8003dd0:	005b      	lsls	r3, r3, #1
 8003dd2:	4413      	add	r3, r2
 8003dd4:	3b1e      	subs	r3, #30
 8003dd6:	2207      	movs	r2, #7
 8003dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ddc:	43da      	mvns	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	400a      	ands	r2, r1
 8003de4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68d9      	ldr	r1, [r3, #12]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	689a      	ldr	r2, [r3, #8]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	4618      	mov	r0, r3
 8003df8:	4603      	mov	r3, r0
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	4403      	add	r3, r0
 8003dfe:	3b1e      	subs	r3, #30
 8003e00:	409a      	lsls	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	430a      	orrs	r2, r1
 8003e08:	60da      	str	r2, [r3, #12]
 8003e0a:	e022      	b.n	8003e52 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6919      	ldr	r1, [r3, #16]
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	461a      	mov	r2, r3
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	4413      	add	r3, r2
 8003e20:	2207      	movs	r2, #7
 8003e22:	fa02 f303 	lsl.w	r3, r2, r3
 8003e26:	43da      	mvns	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	400a      	ands	r2, r1
 8003e2e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	6919      	ldr	r1, [r3, #16]
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	689a      	ldr	r2, [r3, #8]
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	4618      	mov	r0, r3
 8003e42:	4603      	mov	r3, r0
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	4403      	add	r3, r0
 8003e48:	409a      	lsls	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	2b06      	cmp	r3, #6
 8003e58:	d824      	bhi.n	8003ea4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685a      	ldr	r2, [r3, #4]
 8003e64:	4613      	mov	r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	4413      	add	r3, r2
 8003e6a:	3b05      	subs	r3, #5
 8003e6c:	221f      	movs	r2, #31
 8003e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e72:	43da      	mvns	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	400a      	ands	r2, r1
 8003e7a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	4618      	mov	r0, r3
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	685a      	ldr	r2, [r3, #4]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	4413      	add	r3, r2
 8003e94:	3b05      	subs	r3, #5
 8003e96:	fa00 f203 	lsl.w	r2, r0, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	635a      	str	r2, [r3, #52]	; 0x34
 8003ea2:	e04c      	b.n	8003f3e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	2b0c      	cmp	r3, #12
 8003eaa:	d824      	bhi.n	8003ef6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	685a      	ldr	r2, [r3, #4]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	4413      	add	r3, r2
 8003ebc:	3b23      	subs	r3, #35	; 0x23
 8003ebe:	221f      	movs	r2, #31
 8003ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec4:	43da      	mvns	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	400a      	ands	r2, r1
 8003ecc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	4618      	mov	r0, r3
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685a      	ldr	r2, [r3, #4]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	4413      	add	r3, r2
 8003ee6:	3b23      	subs	r3, #35	; 0x23
 8003ee8:	fa00 f203 	lsl.w	r2, r0, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	430a      	orrs	r2, r1
 8003ef2:	631a      	str	r2, [r3, #48]	; 0x30
 8003ef4:	e023      	b.n	8003f3e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	685a      	ldr	r2, [r3, #4]
 8003f00:	4613      	mov	r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	4413      	add	r3, r2
 8003f06:	3b41      	subs	r3, #65	; 0x41
 8003f08:	221f      	movs	r2, #31
 8003f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0e:	43da      	mvns	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	400a      	ands	r2, r1
 8003f16:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	4618      	mov	r0, r3
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	685a      	ldr	r2, [r3, #4]
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	4413      	add	r3, r2
 8003f30:	3b41      	subs	r3, #65	; 0x41
 8003f32:	fa00 f203 	lsl.w	r2, r0, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f3e:	4b22      	ldr	r3, [pc, #136]	; (8003fc8 <HAL_ADC_ConfigChannel+0x234>)
 8003f40:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a21      	ldr	r2, [pc, #132]	; (8003fcc <HAL_ADC_ConfigChannel+0x238>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d109      	bne.n	8003f60 <HAL_ADC_ConfigChannel+0x1cc>
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2b12      	cmp	r3, #18
 8003f52:	d105      	bne.n	8003f60 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a19      	ldr	r2, [pc, #100]	; (8003fcc <HAL_ADC_ConfigChannel+0x238>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d123      	bne.n	8003fb2 <HAL_ADC_ConfigChannel+0x21e>
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2b10      	cmp	r3, #16
 8003f70:	d003      	beq.n	8003f7a <HAL_ADC_ConfigChannel+0x1e6>
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2b11      	cmp	r3, #17
 8003f78:	d11b      	bne.n	8003fb2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2b10      	cmp	r3, #16
 8003f8c:	d111      	bne.n	8003fb2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003f8e:	4b10      	ldr	r3, [pc, #64]	; (8003fd0 <HAL_ADC_ConfigChannel+0x23c>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a10      	ldr	r2, [pc, #64]	; (8003fd4 <HAL_ADC_ConfigChannel+0x240>)
 8003f94:	fba2 2303 	umull	r2, r3, r2, r3
 8003f98:	0c9a      	lsrs	r2, r3, #18
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	4413      	add	r3, r2
 8003fa0:	005b      	lsls	r3, r3, #1
 8003fa2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003fa4:	e002      	b.n	8003fac <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1f9      	bne.n	8003fa6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3714      	adds	r7, #20
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	40012300 	.word	0x40012300
 8003fcc:	40012000 	.word	0x40012000
 8003fd0:	20000000 	.word	0x20000000
 8003fd4:	431bde83 	.word	0x431bde83

08003fd8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003fe0:	4b79      	ldr	r3, [pc, #484]	; (80041c8 <ADC_Init+0x1f0>)
 8003fe2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	685a      	ldr	r2, [r3, #4]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	431a      	orrs	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800400c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	6859      	ldr	r1, [r3, #4]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	021a      	lsls	r2, r3, #8
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	430a      	orrs	r2, r1
 8004020:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	685a      	ldr	r2, [r3, #4]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004030:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	6859      	ldr	r1, [r3, #4]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	430a      	orrs	r2, r1
 8004042:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	689a      	ldr	r2, [r3, #8]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004052:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	6899      	ldr	r1, [r3, #8]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68da      	ldr	r2, [r3, #12]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	430a      	orrs	r2, r1
 8004064:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406a:	4a58      	ldr	r2, [pc, #352]	; (80041cc <ADC_Init+0x1f4>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d022      	beq.n	80040b6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	689a      	ldr	r2, [r3, #8]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800407e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6899      	ldr	r1, [r3, #8]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	430a      	orrs	r2, r1
 8004090:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	689a      	ldr	r2, [r3, #8]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80040a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	6899      	ldr	r1, [r3, #8]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	430a      	orrs	r2, r1
 80040b2:	609a      	str	r2, [r3, #8]
 80040b4:	e00f      	b.n	80040d6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	689a      	ldr	r2, [r3, #8]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80040c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	689a      	ldr	r2, [r3, #8]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80040d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	689a      	ldr	r2, [r3, #8]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f022 0202 	bic.w	r2, r2, #2
 80040e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	6899      	ldr	r1, [r3, #8]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	7e1b      	ldrb	r3, [r3, #24]
 80040f0:	005a      	lsls	r2, r3, #1
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d01b      	beq.n	800413c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	685a      	ldr	r2, [r3, #4]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004112:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	685a      	ldr	r2, [r3, #4]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004122:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	6859      	ldr	r1, [r3, #4]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412e:	3b01      	subs	r3, #1
 8004130:	035a      	lsls	r2, r3, #13
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	430a      	orrs	r2, r1
 8004138:	605a      	str	r2, [r3, #4]
 800413a:	e007      	b.n	800414c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	685a      	ldr	r2, [r3, #4]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800414a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800415a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	69db      	ldr	r3, [r3, #28]
 8004166:	3b01      	subs	r3, #1
 8004168:	051a      	lsls	r2, r3, #20
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	430a      	orrs	r2, r1
 8004170:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	689a      	ldr	r2, [r3, #8]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004180:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	6899      	ldr	r1, [r3, #8]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800418e:	025a      	lsls	r2, r3, #9
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	430a      	orrs	r2, r1
 8004196:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	689a      	ldr	r2, [r3, #8]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	6899      	ldr	r1, [r3, #8]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	029a      	lsls	r2, r3, #10
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	609a      	str	r2, [r3, #8]
}
 80041bc:	bf00      	nop
 80041be:	3714      	adds	r7, #20
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr
 80041c8:	40012300 	.word	0x40012300
 80041cc:	0f000001 	.word	0x0f000001

080041d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b085      	sub	sp, #20
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f003 0307 	and.w	r3, r3, #7
 80041de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041e0:	4b0c      	ldr	r3, [pc, #48]	; (8004214 <__NVIC_SetPriorityGrouping+0x44>)
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041e6:	68ba      	ldr	r2, [r7, #8]
 80041e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80041ec:	4013      	ands	r3, r2
 80041ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80041fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004200:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004202:	4a04      	ldr	r2, [pc, #16]	; (8004214 <__NVIC_SetPriorityGrouping+0x44>)
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	60d3      	str	r3, [r2, #12]
}
 8004208:	bf00      	nop
 800420a:	3714      	adds	r7, #20
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr
 8004214:	e000ed00 	.word	0xe000ed00

08004218 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800421c:	4b04      	ldr	r3, [pc, #16]	; (8004230 <__NVIC_GetPriorityGrouping+0x18>)
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	0a1b      	lsrs	r3, r3, #8
 8004222:	f003 0307 	and.w	r3, r3, #7
}
 8004226:	4618      	mov	r0, r3
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr
 8004230:	e000ed00 	.word	0xe000ed00

08004234 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	4603      	mov	r3, r0
 800423c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800423e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004242:	2b00      	cmp	r3, #0
 8004244:	db0b      	blt.n	800425e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004246:	79fb      	ldrb	r3, [r7, #7]
 8004248:	f003 021f 	and.w	r2, r3, #31
 800424c:	4907      	ldr	r1, [pc, #28]	; (800426c <__NVIC_EnableIRQ+0x38>)
 800424e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004252:	095b      	lsrs	r3, r3, #5
 8004254:	2001      	movs	r0, #1
 8004256:	fa00 f202 	lsl.w	r2, r0, r2
 800425a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800425e:	bf00      	nop
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	e000e100 	.word	0xe000e100

08004270 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	4603      	mov	r3, r0
 8004278:	6039      	str	r1, [r7, #0]
 800427a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800427c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004280:	2b00      	cmp	r3, #0
 8004282:	db0a      	blt.n	800429a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	b2da      	uxtb	r2, r3
 8004288:	490c      	ldr	r1, [pc, #48]	; (80042bc <__NVIC_SetPriority+0x4c>)
 800428a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800428e:	0112      	lsls	r2, r2, #4
 8004290:	b2d2      	uxtb	r2, r2
 8004292:	440b      	add	r3, r1
 8004294:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004298:	e00a      	b.n	80042b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	b2da      	uxtb	r2, r3
 800429e:	4908      	ldr	r1, [pc, #32]	; (80042c0 <__NVIC_SetPriority+0x50>)
 80042a0:	79fb      	ldrb	r3, [r7, #7]
 80042a2:	f003 030f 	and.w	r3, r3, #15
 80042a6:	3b04      	subs	r3, #4
 80042a8:	0112      	lsls	r2, r2, #4
 80042aa:	b2d2      	uxtb	r2, r2
 80042ac:	440b      	add	r3, r1
 80042ae:	761a      	strb	r2, [r3, #24]
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr
 80042bc:	e000e100 	.word	0xe000e100
 80042c0:	e000ed00 	.word	0xe000ed00

080042c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b089      	sub	sp, #36	; 0x24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f003 0307 	and.w	r3, r3, #7
 80042d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	f1c3 0307 	rsb	r3, r3, #7
 80042de:	2b04      	cmp	r3, #4
 80042e0:	bf28      	it	cs
 80042e2:	2304      	movcs	r3, #4
 80042e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	3304      	adds	r3, #4
 80042ea:	2b06      	cmp	r3, #6
 80042ec:	d902      	bls.n	80042f4 <NVIC_EncodePriority+0x30>
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	3b03      	subs	r3, #3
 80042f2:	e000      	b.n	80042f6 <NVIC_EncodePriority+0x32>
 80042f4:	2300      	movs	r3, #0
 80042f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042f8:	f04f 32ff 	mov.w	r2, #4294967295
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004302:	43da      	mvns	r2, r3
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	401a      	ands	r2, r3
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800430c:	f04f 31ff 	mov.w	r1, #4294967295
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	fa01 f303 	lsl.w	r3, r1, r3
 8004316:	43d9      	mvns	r1, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800431c:	4313      	orrs	r3, r2
         );
}
 800431e:	4618      	mov	r0, r3
 8004320:	3724      	adds	r7, #36	; 0x24
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr

0800432a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800432a:	b580      	push	{r7, lr}
 800432c:	b082      	sub	sp, #8
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f7ff ff4c 	bl	80041d0 <__NVIC_SetPriorityGrouping>
}
 8004338:	bf00      	nop
 800433a:	3708      	adds	r7, #8
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af00      	add	r7, sp, #0
 8004346:	4603      	mov	r3, r0
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
 800434c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800434e:	2300      	movs	r3, #0
 8004350:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004352:	f7ff ff61 	bl	8004218 <__NVIC_GetPriorityGrouping>
 8004356:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	68b9      	ldr	r1, [r7, #8]
 800435c:	6978      	ldr	r0, [r7, #20]
 800435e:	f7ff ffb1 	bl	80042c4 <NVIC_EncodePriority>
 8004362:	4602      	mov	r2, r0
 8004364:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004368:	4611      	mov	r1, r2
 800436a:	4618      	mov	r0, r3
 800436c:	f7ff ff80 	bl	8004270 <__NVIC_SetPriority>
}
 8004370:	bf00      	nop
 8004372:	3718      	adds	r7, #24
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	4603      	mov	r3, r0
 8004380:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004386:	4618      	mov	r0, r3
 8004388:	f7ff ff54 	bl	8004234 <__NVIC_EnableIRQ>
}
 800438c:	bf00      	nop
 800438e:	3708      	adds	r7, #8
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004394:	b480      	push	{r7}
 8004396:	b089      	sub	sp, #36	; 0x24
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800439e:	2300      	movs	r3, #0
 80043a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80043a2:	2300      	movs	r3, #0
 80043a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80043a6:	2300      	movs	r3, #0
 80043a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043aa:	2300      	movs	r3, #0
 80043ac:	61fb      	str	r3, [r7, #28]
 80043ae:	e159      	b.n	8004664 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80043b0:	2201      	movs	r2, #1
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	fa02 f303 	lsl.w	r3, r2, r3
 80043b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	4013      	ands	r3, r2
 80043c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	f040 8148 	bne.w	800465e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f003 0303 	and.w	r3, r3, #3
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d005      	beq.n	80043e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d130      	bne.n	8004448 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	005b      	lsls	r3, r3, #1
 80043f0:	2203      	movs	r2, #3
 80043f2:	fa02 f303 	lsl.w	r3, r2, r3
 80043f6:	43db      	mvns	r3, r3
 80043f8:	69ba      	ldr	r2, [r7, #24]
 80043fa:	4013      	ands	r3, r2
 80043fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	68da      	ldr	r2, [r3, #12]
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	fa02 f303 	lsl.w	r3, r2, r3
 800440a:	69ba      	ldr	r2, [r7, #24]
 800440c:	4313      	orrs	r3, r2
 800440e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	69ba      	ldr	r2, [r7, #24]
 8004414:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800441c:	2201      	movs	r2, #1
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	fa02 f303 	lsl.w	r3, r2, r3
 8004424:	43db      	mvns	r3, r3
 8004426:	69ba      	ldr	r2, [r7, #24]
 8004428:	4013      	ands	r3, r2
 800442a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	091b      	lsrs	r3, r3, #4
 8004432:	f003 0201 	and.w	r2, r3, #1
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	fa02 f303 	lsl.w	r3, r2, r3
 800443c:	69ba      	ldr	r2, [r7, #24]
 800443e:	4313      	orrs	r3, r2
 8004440:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f003 0303 	and.w	r3, r3, #3
 8004450:	2b03      	cmp	r3, #3
 8004452:	d017      	beq.n	8004484 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	2203      	movs	r2, #3
 8004460:	fa02 f303 	lsl.w	r3, r2, r3
 8004464:	43db      	mvns	r3, r3
 8004466:	69ba      	ldr	r2, [r7, #24]
 8004468:	4013      	ands	r3, r2
 800446a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	689a      	ldr	r2, [r3, #8]
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	005b      	lsls	r3, r3, #1
 8004474:	fa02 f303 	lsl.w	r3, r2, r3
 8004478:	69ba      	ldr	r2, [r7, #24]
 800447a:	4313      	orrs	r3, r2
 800447c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	69ba      	ldr	r2, [r7, #24]
 8004482:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f003 0303 	and.w	r3, r3, #3
 800448c:	2b02      	cmp	r3, #2
 800448e:	d123      	bne.n	80044d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	08da      	lsrs	r2, r3, #3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	3208      	adds	r2, #8
 8004498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800449c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	f003 0307 	and.w	r3, r3, #7
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	220f      	movs	r2, #15
 80044a8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ac:	43db      	mvns	r3, r3
 80044ae:	69ba      	ldr	r2, [r7, #24]
 80044b0:	4013      	ands	r3, r2
 80044b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	691a      	ldr	r2, [r3, #16]
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	f003 0307 	and.w	r3, r3, #7
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	fa02 f303 	lsl.w	r3, r2, r3
 80044c4:	69ba      	ldr	r2, [r7, #24]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	08da      	lsrs	r2, r3, #3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	3208      	adds	r2, #8
 80044d2:	69b9      	ldr	r1, [r7, #24]
 80044d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	005b      	lsls	r3, r3, #1
 80044e2:	2203      	movs	r2, #3
 80044e4:	fa02 f303 	lsl.w	r3, r2, r3
 80044e8:	43db      	mvns	r3, r3
 80044ea:	69ba      	ldr	r2, [r7, #24]
 80044ec:	4013      	ands	r3, r2
 80044ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f003 0203 	and.w	r2, r3, #3
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	005b      	lsls	r3, r3, #1
 80044fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004500:	69ba      	ldr	r2, [r7, #24]
 8004502:	4313      	orrs	r3, r2
 8004504:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	69ba      	ldr	r2, [r7, #24]
 800450a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004514:	2b00      	cmp	r3, #0
 8004516:	f000 80a2 	beq.w	800465e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800451a:	2300      	movs	r3, #0
 800451c:	60fb      	str	r3, [r7, #12]
 800451e:	4b57      	ldr	r3, [pc, #348]	; (800467c <HAL_GPIO_Init+0x2e8>)
 8004520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004522:	4a56      	ldr	r2, [pc, #344]	; (800467c <HAL_GPIO_Init+0x2e8>)
 8004524:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004528:	6453      	str	r3, [r2, #68]	; 0x44
 800452a:	4b54      	ldr	r3, [pc, #336]	; (800467c <HAL_GPIO_Init+0x2e8>)
 800452c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800452e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004532:	60fb      	str	r3, [r7, #12]
 8004534:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004536:	4a52      	ldr	r2, [pc, #328]	; (8004680 <HAL_GPIO_Init+0x2ec>)
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	089b      	lsrs	r3, r3, #2
 800453c:	3302      	adds	r3, #2
 800453e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004542:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	f003 0303 	and.w	r3, r3, #3
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	220f      	movs	r2, #15
 800454e:	fa02 f303 	lsl.w	r3, r2, r3
 8004552:	43db      	mvns	r3, r3
 8004554:	69ba      	ldr	r2, [r7, #24]
 8004556:	4013      	ands	r3, r2
 8004558:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a49      	ldr	r2, [pc, #292]	; (8004684 <HAL_GPIO_Init+0x2f0>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d019      	beq.n	8004596 <HAL_GPIO_Init+0x202>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a48      	ldr	r2, [pc, #288]	; (8004688 <HAL_GPIO_Init+0x2f4>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d013      	beq.n	8004592 <HAL_GPIO_Init+0x1fe>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a47      	ldr	r2, [pc, #284]	; (800468c <HAL_GPIO_Init+0x2f8>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d00d      	beq.n	800458e <HAL_GPIO_Init+0x1fa>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a46      	ldr	r2, [pc, #280]	; (8004690 <HAL_GPIO_Init+0x2fc>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d007      	beq.n	800458a <HAL_GPIO_Init+0x1f6>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a45      	ldr	r2, [pc, #276]	; (8004694 <HAL_GPIO_Init+0x300>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d101      	bne.n	8004586 <HAL_GPIO_Init+0x1f2>
 8004582:	2304      	movs	r3, #4
 8004584:	e008      	b.n	8004598 <HAL_GPIO_Init+0x204>
 8004586:	2307      	movs	r3, #7
 8004588:	e006      	b.n	8004598 <HAL_GPIO_Init+0x204>
 800458a:	2303      	movs	r3, #3
 800458c:	e004      	b.n	8004598 <HAL_GPIO_Init+0x204>
 800458e:	2302      	movs	r3, #2
 8004590:	e002      	b.n	8004598 <HAL_GPIO_Init+0x204>
 8004592:	2301      	movs	r3, #1
 8004594:	e000      	b.n	8004598 <HAL_GPIO_Init+0x204>
 8004596:	2300      	movs	r3, #0
 8004598:	69fa      	ldr	r2, [r7, #28]
 800459a:	f002 0203 	and.w	r2, r2, #3
 800459e:	0092      	lsls	r2, r2, #2
 80045a0:	4093      	lsls	r3, r2
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80045a8:	4935      	ldr	r1, [pc, #212]	; (8004680 <HAL_GPIO_Init+0x2ec>)
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	089b      	lsrs	r3, r3, #2
 80045ae:	3302      	adds	r3, #2
 80045b0:	69ba      	ldr	r2, [r7, #24]
 80045b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80045b6:	4b38      	ldr	r3, [pc, #224]	; (8004698 <HAL_GPIO_Init+0x304>)
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	43db      	mvns	r3, r3
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	4013      	ands	r3, r2
 80045c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d003      	beq.n	80045da <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80045d2:	69ba      	ldr	r2, [r7, #24]
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80045da:	4a2f      	ldr	r2, [pc, #188]	; (8004698 <HAL_GPIO_Init+0x304>)
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80045e0:	4b2d      	ldr	r3, [pc, #180]	; (8004698 <HAL_GPIO_Init+0x304>)
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	43db      	mvns	r3, r3
 80045ea:	69ba      	ldr	r2, [r7, #24]
 80045ec:	4013      	ands	r3, r2
 80045ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d003      	beq.n	8004604 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	4313      	orrs	r3, r2
 8004602:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004604:	4a24      	ldr	r2, [pc, #144]	; (8004698 <HAL_GPIO_Init+0x304>)
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800460a:	4b23      	ldr	r3, [pc, #140]	; (8004698 <HAL_GPIO_Init+0x304>)
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	43db      	mvns	r3, r3
 8004614:	69ba      	ldr	r2, [r7, #24]
 8004616:	4013      	ands	r3, r2
 8004618:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d003      	beq.n	800462e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004626:	69ba      	ldr	r2, [r7, #24]
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	4313      	orrs	r3, r2
 800462c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800462e:	4a1a      	ldr	r2, [pc, #104]	; (8004698 <HAL_GPIO_Init+0x304>)
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004634:	4b18      	ldr	r3, [pc, #96]	; (8004698 <HAL_GPIO_Init+0x304>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	43db      	mvns	r3, r3
 800463e:	69ba      	ldr	r2, [r7, #24]
 8004640:	4013      	ands	r3, r2
 8004642:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d003      	beq.n	8004658 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004650:	69ba      	ldr	r2, [r7, #24]
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	4313      	orrs	r3, r2
 8004656:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004658:	4a0f      	ldr	r2, [pc, #60]	; (8004698 <HAL_GPIO_Init+0x304>)
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	3301      	adds	r3, #1
 8004662:	61fb      	str	r3, [r7, #28]
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	2b0f      	cmp	r3, #15
 8004668:	f67f aea2 	bls.w	80043b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800466c:	bf00      	nop
 800466e:	bf00      	nop
 8004670:	3724      	adds	r7, #36	; 0x24
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	40023800 	.word	0x40023800
 8004680:	40013800 	.word	0x40013800
 8004684:	40020000 	.word	0x40020000
 8004688:	40020400 	.word	0x40020400
 800468c:	40020800 	.word	0x40020800
 8004690:	40020c00 	.word	0x40020c00
 8004694:	40021000 	.word	0x40021000
 8004698:	40013c00 	.word	0x40013c00

0800469c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	460b      	mov	r3, r1
 80046a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	691a      	ldr	r2, [r3, #16]
 80046ac:	887b      	ldrh	r3, [r7, #2]
 80046ae:	4013      	ands	r3, r2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d002      	beq.n	80046ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80046b4:	2301      	movs	r3, #1
 80046b6:	73fb      	strb	r3, [r7, #15]
 80046b8:	e001      	b.n	80046be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80046ba:	2300      	movs	r3, #0
 80046bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80046be:	7bfb      	ldrb	r3, [r7, #15]
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3714      	adds	r7, #20
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	460b      	mov	r3, r1
 80046d6:	807b      	strh	r3, [r7, #2]
 80046d8:	4613      	mov	r3, r2
 80046da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046dc:	787b      	ldrb	r3, [r7, #1]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d003      	beq.n	80046ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046e2:	887a      	ldrh	r2, [r7, #2]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80046e8:	e003      	b.n	80046f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80046ea:	887b      	ldrh	r3, [r7, #2]
 80046ec:	041a      	lsls	r2, r3, #16
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	619a      	str	r2, [r3, #24]
}
 80046f2:	bf00      	nop
 80046f4:	370c      	adds	r7, #12
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr

080046fe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046fe:	b480      	push	{r7}
 8004700:	b085      	sub	sp, #20
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
 8004706:	460b      	mov	r3, r1
 8004708:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004710:	887a      	ldrh	r2, [r7, #2]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	4013      	ands	r3, r2
 8004716:	041a      	lsls	r2, r3, #16
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	43d9      	mvns	r1, r3
 800471c:	887b      	ldrh	r3, [r7, #2]
 800471e:	400b      	ands	r3, r1
 8004720:	431a      	orrs	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	619a      	str	r2, [r3, #24]
}
 8004726:	bf00      	nop
 8004728:	3714      	adds	r7, #20
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
	...

08004734 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d101      	bne.n	8004746 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e12b      	b.n	800499e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800474c:	b2db      	uxtb	r3, r3
 800474e:	2b00      	cmp	r3, #0
 8004750:	d106      	bne.n	8004760 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f7fd f994 	bl	8001a88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2224      	movs	r2, #36	; 0x24
 8004764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f022 0201 	bic.w	r2, r2, #1
 8004776:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004786:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004796:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004798:	f001 fe82 	bl	80064a0 <HAL_RCC_GetPCLK1Freq>
 800479c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	4a81      	ldr	r2, [pc, #516]	; (80049a8 <HAL_I2C_Init+0x274>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d807      	bhi.n	80047b8 <HAL_I2C_Init+0x84>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	4a80      	ldr	r2, [pc, #512]	; (80049ac <HAL_I2C_Init+0x278>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	bf94      	ite	ls
 80047b0:	2301      	movls	r3, #1
 80047b2:	2300      	movhi	r3, #0
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	e006      	b.n	80047c6 <HAL_I2C_Init+0x92>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	4a7d      	ldr	r2, [pc, #500]	; (80049b0 <HAL_I2C_Init+0x27c>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	bf94      	ite	ls
 80047c0:	2301      	movls	r3, #1
 80047c2:	2300      	movhi	r3, #0
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d001      	beq.n	80047ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e0e7      	b.n	800499e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	4a78      	ldr	r2, [pc, #480]	; (80049b4 <HAL_I2C_Init+0x280>)
 80047d2:	fba2 2303 	umull	r2, r3, r2, r3
 80047d6:	0c9b      	lsrs	r3, r3, #18
 80047d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68ba      	ldr	r2, [r7, #8]
 80047ea:	430a      	orrs	r2, r1
 80047ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	6a1b      	ldr	r3, [r3, #32]
 80047f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	4a6a      	ldr	r2, [pc, #424]	; (80049a8 <HAL_I2C_Init+0x274>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d802      	bhi.n	8004808 <HAL_I2C_Init+0xd4>
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	3301      	adds	r3, #1
 8004806:	e009      	b.n	800481c <HAL_I2C_Init+0xe8>
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800480e:	fb02 f303 	mul.w	r3, r2, r3
 8004812:	4a69      	ldr	r2, [pc, #420]	; (80049b8 <HAL_I2C_Init+0x284>)
 8004814:	fba2 2303 	umull	r2, r3, r2, r3
 8004818:	099b      	lsrs	r3, r3, #6
 800481a:	3301      	adds	r3, #1
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	6812      	ldr	r2, [r2, #0]
 8004820:	430b      	orrs	r3, r1
 8004822:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	69db      	ldr	r3, [r3, #28]
 800482a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800482e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	495c      	ldr	r1, [pc, #368]	; (80049a8 <HAL_I2C_Init+0x274>)
 8004838:	428b      	cmp	r3, r1
 800483a:	d819      	bhi.n	8004870 <HAL_I2C_Init+0x13c>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	1e59      	subs	r1, r3, #1
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	005b      	lsls	r3, r3, #1
 8004846:	fbb1 f3f3 	udiv	r3, r1, r3
 800484a:	1c59      	adds	r1, r3, #1
 800484c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004850:	400b      	ands	r3, r1
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00a      	beq.n	800486c <HAL_I2C_Init+0x138>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	1e59      	subs	r1, r3, #1
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	005b      	lsls	r3, r3, #1
 8004860:	fbb1 f3f3 	udiv	r3, r1, r3
 8004864:	3301      	adds	r3, #1
 8004866:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800486a:	e051      	b.n	8004910 <HAL_I2C_Init+0x1dc>
 800486c:	2304      	movs	r3, #4
 800486e:	e04f      	b.n	8004910 <HAL_I2C_Init+0x1dc>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d111      	bne.n	800489c <HAL_I2C_Init+0x168>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	1e58      	subs	r0, r3, #1
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6859      	ldr	r1, [r3, #4]
 8004880:	460b      	mov	r3, r1
 8004882:	005b      	lsls	r3, r3, #1
 8004884:	440b      	add	r3, r1
 8004886:	fbb0 f3f3 	udiv	r3, r0, r3
 800488a:	3301      	adds	r3, #1
 800488c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004890:	2b00      	cmp	r3, #0
 8004892:	bf0c      	ite	eq
 8004894:	2301      	moveq	r3, #1
 8004896:	2300      	movne	r3, #0
 8004898:	b2db      	uxtb	r3, r3
 800489a:	e012      	b.n	80048c2 <HAL_I2C_Init+0x18e>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	1e58      	subs	r0, r3, #1
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6859      	ldr	r1, [r3, #4]
 80048a4:	460b      	mov	r3, r1
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	440b      	add	r3, r1
 80048aa:	0099      	lsls	r1, r3, #2
 80048ac:	440b      	add	r3, r1
 80048ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80048b2:	3301      	adds	r3, #1
 80048b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	bf0c      	ite	eq
 80048bc:	2301      	moveq	r3, #1
 80048be:	2300      	movne	r3, #0
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d001      	beq.n	80048ca <HAL_I2C_Init+0x196>
 80048c6:	2301      	movs	r3, #1
 80048c8:	e022      	b.n	8004910 <HAL_I2C_Init+0x1dc>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d10e      	bne.n	80048f0 <HAL_I2C_Init+0x1bc>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	1e58      	subs	r0, r3, #1
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6859      	ldr	r1, [r3, #4]
 80048da:	460b      	mov	r3, r1
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	440b      	add	r3, r1
 80048e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80048e4:	3301      	adds	r3, #1
 80048e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048ee:	e00f      	b.n	8004910 <HAL_I2C_Init+0x1dc>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	1e58      	subs	r0, r3, #1
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6859      	ldr	r1, [r3, #4]
 80048f8:	460b      	mov	r3, r1
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	440b      	add	r3, r1
 80048fe:	0099      	lsls	r1, r3, #2
 8004900:	440b      	add	r3, r1
 8004902:	fbb0 f3f3 	udiv	r3, r0, r3
 8004906:	3301      	adds	r3, #1
 8004908:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800490c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004910:	6879      	ldr	r1, [r7, #4]
 8004912:	6809      	ldr	r1, [r1, #0]
 8004914:	4313      	orrs	r3, r2
 8004916:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	69da      	ldr	r2, [r3, #28]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	431a      	orrs	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	430a      	orrs	r2, r1
 8004932:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800493e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	6911      	ldr	r1, [r2, #16]
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	68d2      	ldr	r2, [r2, #12]
 800494a:	4311      	orrs	r1, r2
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	6812      	ldr	r2, [r2, #0]
 8004950:	430b      	orrs	r3, r1
 8004952:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	695a      	ldr	r2, [r3, #20]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	431a      	orrs	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	430a      	orrs	r2, r1
 800496e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f042 0201 	orr.w	r2, r2, #1
 800497e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2220      	movs	r2, #32
 800498a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	000186a0 	.word	0x000186a0
 80049ac:	001e847f 	.word	0x001e847f
 80049b0:	003d08ff 	.word	0x003d08ff
 80049b4:	431bde83 	.word	0x431bde83
 80049b8:	10624dd3 	.word	0x10624dd3

080049bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b088      	sub	sp, #32
 80049c0:	af02      	add	r7, sp, #8
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	607a      	str	r2, [r7, #4]
 80049c6:	461a      	mov	r2, r3
 80049c8:	460b      	mov	r3, r1
 80049ca:	817b      	strh	r3, [r7, #10]
 80049cc:	4613      	mov	r3, r2
 80049ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80049d0:	f7ff f990 	bl	8003cf4 <HAL_GetTick>
 80049d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b20      	cmp	r3, #32
 80049e0:	f040 80e0 	bne.w	8004ba4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	9300      	str	r3, [sp, #0]
 80049e8:	2319      	movs	r3, #25
 80049ea:	2201      	movs	r2, #1
 80049ec:	4970      	ldr	r1, [pc, #448]	; (8004bb0 <HAL_I2C_Master_Transmit+0x1f4>)
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f000 ff0c 	bl	800580c <I2C_WaitOnFlagUntilTimeout>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d001      	beq.n	80049fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80049fa:	2302      	movs	r3, #2
 80049fc:	e0d3      	b.n	8004ba6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d101      	bne.n	8004a0c <HAL_I2C_Master_Transmit+0x50>
 8004a08:	2302      	movs	r3, #2
 8004a0a:	e0cc      	b.n	8004ba6 <HAL_I2C_Master_Transmit+0x1ea>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d007      	beq.n	8004a32 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f042 0201 	orr.w	r2, r2, #1
 8004a30:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a40:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2221      	movs	r2, #33	; 0x21
 8004a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2210      	movs	r2, #16
 8004a4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	893a      	ldrh	r2, [r7, #8]
 8004a62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	4a50      	ldr	r2, [pc, #320]	; (8004bb4 <HAL_I2C_Master_Transmit+0x1f8>)
 8004a72:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004a74:	8979      	ldrh	r1, [r7, #10]
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	6a3a      	ldr	r2, [r7, #32]
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f000 fcc6 	bl	800540c <I2C_MasterRequestWrite>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e08d      	b.n	8004ba6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	613b      	str	r3, [r7, #16]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	695b      	ldr	r3, [r3, #20]
 8004a94:	613b      	str	r3, [r7, #16]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	613b      	str	r3, [r7, #16]
 8004a9e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004aa0:	e066      	b.n	8004b70 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004aa2:	697a      	ldr	r2, [r7, #20]
 8004aa4:	6a39      	ldr	r1, [r7, #32]
 8004aa6:	68f8      	ldr	r0, [r7, #12]
 8004aa8:	f000 ff86 	bl	80059b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00d      	beq.n	8004ace <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab6:	2b04      	cmp	r3, #4
 8004ab8:	d107      	bne.n	8004aca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ac8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e06b      	b.n	8004ba6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad2:	781a      	ldrb	r2, [r3, #0]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ade:	1c5a      	adds	r2, r3, #1
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	3b01      	subs	r3, #1
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004af6:	3b01      	subs	r3, #1
 8004af8:	b29a      	uxth	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	695b      	ldr	r3, [r3, #20]
 8004b04:	f003 0304 	and.w	r3, r3, #4
 8004b08:	2b04      	cmp	r3, #4
 8004b0a:	d11b      	bne.n	8004b44 <HAL_I2C_Master_Transmit+0x188>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d017      	beq.n	8004b44 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b18:	781a      	ldrb	r2, [r3, #0]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b24:	1c5a      	adds	r2, r3, #1
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	3b01      	subs	r3, #1
 8004b32:	b29a      	uxth	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b44:	697a      	ldr	r2, [r7, #20]
 8004b46:	6a39      	ldr	r1, [r7, #32]
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f000 ff76 	bl	8005a3a <I2C_WaitOnBTFFlagUntilTimeout>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00d      	beq.n	8004b70 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b58:	2b04      	cmp	r3, #4
 8004b5a:	d107      	bne.n	8004b6c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b6a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e01a      	b.n	8004ba6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d194      	bne.n	8004aa2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2220      	movs	r2, #32
 8004b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	e000      	b.n	8004ba6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004ba4:	2302      	movs	r3, #2
  }
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3718      	adds	r7, #24
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	00100002 	.word	0x00100002
 8004bb4:	ffff0000 	.word	0xffff0000

08004bb8 <HAL_I2C_Slave_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b08a      	sub	sp, #40	; 0x28
 8004bbc:	af02      	add	r7, sp, #8
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	603b      	str	r3, [r7, #0]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004bc8:	f7ff f894 	bl	8003cf4 <HAL_GetTick>
 8004bcc:	61f8      	str	r0, [r7, #28]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2b20      	cmp	r3, #32
 8004bd8:	f040 80ee 	bne.w	8004db8 <HAL_I2C_Slave_Receive+0x200>
  {
    if ((pData == NULL) || (Size == (uint16_t)0))
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d002      	beq.n	8004be8 <HAL_I2C_Slave_Receive+0x30>
 8004be2:	88fb      	ldrh	r3, [r7, #6]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d101      	bne.n	8004bec <HAL_I2C_Slave_Receive+0x34>
    {
      return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e0e6      	b.n	8004dba <HAL_I2C_Slave_Receive+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d101      	bne.n	8004bfa <HAL_I2C_Slave_Receive+0x42>
 8004bf6:	2302      	movs	r3, #2
 8004bf8:	e0df      	b.n	8004dba <HAL_I2C_Slave_Receive+0x202>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0301 	and.w	r3, r3, #1
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d007      	beq.n	8004c20 <HAL_I2C_Slave_Receive+0x68>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f042 0201 	orr.w	r2, r2, #1
 8004c1e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c2e:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2222      	movs	r2, #34	; 0x22
 8004c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2220      	movs	r2, #32
 8004c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2200      	movs	r2, #0
 8004c44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	68ba      	ldr	r2, [r7, #8]
 8004c4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	88fa      	ldrh	r2, [r7, #6]
 8004c50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c56:	b29a      	uxth	r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	4a59      	ldr	r2, [pc, #356]	; (8004dc4 <HAL_I2C_Slave_Receive+0x20c>)
 8004c60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c70:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	9300      	str	r3, [sp, #0]
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	4953      	ldr	r1, [pc, #332]	; (8004dc8 <HAL_I2C_Slave_Receive+0x210>)
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f000 fdc5 	bl	800580c <I2C_WaitOnFlagUntilTimeout>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d001      	beq.n	8004c8c <HAL_I2C_Slave_Receive+0xd4>
    {
      return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e096      	b.n	8004dba <HAL_I2C_Slave_Receive+0x202>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	61bb      	str	r3, [r7, #24]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	61bb      	str	r3, [r7, #24]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	699b      	ldr	r3, [r3, #24]
 8004c9e:	61bb      	str	r3, [r7, #24]
 8004ca0:	69bb      	ldr	r3, [r7, #24]

    while (hi2c->XferSize > 0U)
 8004ca2:	e04e      	b.n	8004d42 <HAL_I2C_Slave_Receive+0x18a>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ca4:	69fa      	ldr	r2, [r7, #28]
 8004ca6:	6839      	ldr	r1, [r7, #0]
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	f000 ff44 	bl	8005b36 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d009      	beq.n	8004cc8 <HAL_I2C_Slave_Receive+0x110>
      {
        /* Disable Address Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cc2:	601a      	str	r2, [r3, #0]

        return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e078      	b.n	8004dba <HAL_I2C_Slave_Receive+0x202>
      }

      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	691a      	ldr	r2, [r3, #16]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd2:	b2d2      	uxtb	r2, r2
 8004cd4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cda:	1c5a      	adds	r2, r3, #1
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	695b      	ldr	r3, [r3, #20]
 8004d00:	f003 0304 	and.w	r3, r3, #4
 8004d04:	2b04      	cmp	r3, #4
 8004d06:	d11c      	bne.n	8004d42 <HAL_I2C_Slave_Receive+0x18a>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d018      	beq.n	8004d42 <HAL_I2C_Slave_Receive+0x18a>
      {
        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	691a      	ldr	r2, [r3, #16]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1a:	b2d2      	uxtb	r2, r2
 8004d1c:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d22:	1c5a      	adds	r2, r3, #1
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1ac      	bne.n	8004ca4 <HAL_I2C_Slave_Receive+0xec>
      }
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d4a:	69fa      	ldr	r2, [r7, #28]
 8004d4c:	6839      	ldr	r1, [r7, #0]
 8004d4e:	68f8      	ldr	r0, [r7, #12]
 8004d50:	f000 feb4 	bl	8005abc <I2C_WaitOnSTOPFlagUntilTimeout>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d009      	beq.n	8004d6e <HAL_I2C_Slave_Receive+0x1b6>
    {
      /* Disable Address Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d68:	601a      	str	r2, [r3, #0]

      return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e025      	b.n	8004dba <HAL_I2C_Slave_Receive+0x202>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004d6e:	2300      	movs	r3, #0
 8004d70:	617b      	str	r3, [r7, #20]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	695b      	ldr	r3, [r3, #20]
 8004d78:	617b      	str	r3, [r7, #20]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f042 0201 	orr.w	r2, r2, #1
 8004d88:	601a      	str	r2, [r3, #0]
 8004d8a:	697b      	ldr	r3, [r7, #20]

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2220      	movs	r2, #32
 8004da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004db4:	2300      	movs	r3, #0
 8004db6:	e000      	b.n	8004dba <HAL_I2C_Slave_Receive+0x202>
  }
  else
  {
    return HAL_BUSY;
 8004db8:	2302      	movs	r3, #2
  }
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3720      	adds	r7, #32
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	ffff0000 	.word	0xffff0000
 8004dc8:	00010002 	.word	0x00010002

08004dcc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b088      	sub	sp, #32
 8004dd0:	af02      	add	r7, sp, #8
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	4608      	mov	r0, r1
 8004dd6:	4611      	mov	r1, r2
 8004dd8:	461a      	mov	r2, r3
 8004dda:	4603      	mov	r3, r0
 8004ddc:	817b      	strh	r3, [r7, #10]
 8004dde:	460b      	mov	r3, r1
 8004de0:	813b      	strh	r3, [r7, #8]
 8004de2:	4613      	mov	r3, r2
 8004de4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004de6:	f7fe ff85 	bl	8003cf4 <HAL_GetTick>
 8004dea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	2b20      	cmp	r3, #32
 8004df6:	f040 80d9 	bne.w	8004fac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	9300      	str	r3, [sp, #0]
 8004dfe:	2319      	movs	r3, #25
 8004e00:	2201      	movs	r2, #1
 8004e02:	496d      	ldr	r1, [pc, #436]	; (8004fb8 <HAL_I2C_Mem_Write+0x1ec>)
 8004e04:	68f8      	ldr	r0, [r7, #12]
 8004e06:	f000 fd01 	bl	800580c <I2C_WaitOnFlagUntilTimeout>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d001      	beq.n	8004e14 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004e10:	2302      	movs	r3, #2
 8004e12:	e0cc      	b.n	8004fae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d101      	bne.n	8004e22 <HAL_I2C_Mem_Write+0x56>
 8004e1e:	2302      	movs	r3, #2
 8004e20:	e0c5      	b.n	8004fae <HAL_I2C_Mem_Write+0x1e2>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2201      	movs	r2, #1
 8004e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0301 	and.w	r3, r3, #1
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d007      	beq.n	8004e48 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f042 0201 	orr.w	r2, r2, #1
 8004e46:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e56:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2221      	movs	r2, #33	; 0x21
 8004e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2240      	movs	r2, #64	; 0x40
 8004e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6a3a      	ldr	r2, [r7, #32]
 8004e72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004e78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	4a4d      	ldr	r2, [pc, #308]	; (8004fbc <HAL_I2C_Mem_Write+0x1f0>)
 8004e88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e8a:	88f8      	ldrh	r0, [r7, #6]
 8004e8c:	893a      	ldrh	r2, [r7, #8]
 8004e8e:	8979      	ldrh	r1, [r7, #10]
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	9301      	str	r3, [sp, #4]
 8004e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e96:	9300      	str	r3, [sp, #0]
 8004e98:	4603      	mov	r3, r0
 8004e9a:	68f8      	ldr	r0, [r7, #12]
 8004e9c:	f000 fb38 	bl	8005510 <I2C_RequestMemoryWrite>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d052      	beq.n	8004f4c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e081      	b.n	8004fae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004eae:	68f8      	ldr	r0, [r7, #12]
 8004eb0:	f000 fd82 	bl	80059b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00d      	beq.n	8004ed6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebe:	2b04      	cmp	r3, #4
 8004ec0:	d107      	bne.n	8004ed2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ed0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e06b      	b.n	8004fae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eda:	781a      	ldrb	r2, [r3, #0]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee6:	1c5a      	adds	r2, r3, #1
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	3b01      	subs	r3, #1
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	f003 0304 	and.w	r3, r3, #4
 8004f10:	2b04      	cmp	r3, #4
 8004f12:	d11b      	bne.n	8004f4c <HAL_I2C_Mem_Write+0x180>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d017      	beq.n	8004f4c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f20:	781a      	ldrb	r2, [r3, #0]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2c:	1c5a      	adds	r2, r3, #1
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f36:	3b01      	subs	r3, #1
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	3b01      	subs	r3, #1
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d1aa      	bne.n	8004eaa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f54:	697a      	ldr	r2, [r7, #20]
 8004f56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f000 fd6e 	bl	8005a3a <I2C_WaitOnBTFFlagUntilTimeout>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d00d      	beq.n	8004f80 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f68:	2b04      	cmp	r3, #4
 8004f6a:	d107      	bne.n	8004f7c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f7a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e016      	b.n	8004fae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2220      	movs	r2, #32
 8004f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	e000      	b.n	8004fae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004fac:	2302      	movs	r3, #2
  }
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3718      	adds	r7, #24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	00100002 	.word	0x00100002
 8004fbc:	ffff0000 	.word	0xffff0000

08004fc0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b08c      	sub	sp, #48	; 0x30
 8004fc4:	af02      	add	r7, sp, #8
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	4608      	mov	r0, r1
 8004fca:	4611      	mov	r1, r2
 8004fcc:	461a      	mov	r2, r3
 8004fce:	4603      	mov	r3, r0
 8004fd0:	817b      	strh	r3, [r7, #10]
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	813b      	strh	r3, [r7, #8]
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004fda:	f7fe fe8b 	bl	8003cf4 <HAL_GetTick>
 8004fde:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	2b20      	cmp	r3, #32
 8004fea:	f040 8208 	bne.w	80053fe <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff0:	9300      	str	r3, [sp, #0]
 8004ff2:	2319      	movs	r3, #25
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	497b      	ldr	r1, [pc, #492]	; (80051e4 <HAL_I2C_Mem_Read+0x224>)
 8004ff8:	68f8      	ldr	r0, [r7, #12]
 8004ffa:	f000 fc07 	bl	800580c <I2C_WaitOnFlagUntilTimeout>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d001      	beq.n	8005008 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005004:	2302      	movs	r3, #2
 8005006:	e1fb      	b.n	8005400 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800500e:	2b01      	cmp	r3, #1
 8005010:	d101      	bne.n	8005016 <HAL_I2C_Mem_Read+0x56>
 8005012:	2302      	movs	r3, #2
 8005014:	e1f4      	b.n	8005400 <HAL_I2C_Mem_Read+0x440>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2201      	movs	r2, #1
 800501a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0301 	and.w	r3, r3, #1
 8005028:	2b01      	cmp	r3, #1
 800502a:	d007      	beq.n	800503c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f042 0201 	orr.w	r2, r2, #1
 800503a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800504a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2222      	movs	r2, #34	; 0x22
 8005050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2240      	movs	r2, #64	; 0x40
 8005058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2200      	movs	r2, #0
 8005060:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005066:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800506c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005072:	b29a      	uxth	r2, r3
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	4a5b      	ldr	r2, [pc, #364]	; (80051e8 <HAL_I2C_Mem_Read+0x228>)
 800507c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800507e:	88f8      	ldrh	r0, [r7, #6]
 8005080:	893a      	ldrh	r2, [r7, #8]
 8005082:	8979      	ldrh	r1, [r7, #10]
 8005084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005086:	9301      	str	r3, [sp, #4]
 8005088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800508a:	9300      	str	r3, [sp, #0]
 800508c:	4603      	mov	r3, r0
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	f000 fad4 	bl	800563c <I2C_RequestMemoryRead>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d001      	beq.n	800509e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e1b0      	b.n	8005400 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d113      	bne.n	80050ce <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050a6:	2300      	movs	r3, #0
 80050a8:	623b      	str	r3, [r7, #32]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	695b      	ldr	r3, [r3, #20]
 80050b0:	623b      	str	r3, [r7, #32]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	623b      	str	r3, [r7, #32]
 80050ba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050ca:	601a      	str	r2, [r3, #0]
 80050cc:	e184      	b.n	80053d8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d11b      	bne.n	800510e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050e6:	2300      	movs	r3, #0
 80050e8:	61fb      	str	r3, [r7, #28]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	695b      	ldr	r3, [r3, #20]
 80050f0:	61fb      	str	r3, [r7, #28]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	699b      	ldr	r3, [r3, #24]
 80050f8:	61fb      	str	r3, [r7, #28]
 80050fa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800510a:	601a      	str	r2, [r3, #0]
 800510c:	e164      	b.n	80053d8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005112:	2b02      	cmp	r3, #2
 8005114:	d11b      	bne.n	800514e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005124:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005134:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005136:	2300      	movs	r3, #0
 8005138:	61bb      	str	r3, [r7, #24]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	695b      	ldr	r3, [r3, #20]
 8005140:	61bb      	str	r3, [r7, #24]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	699b      	ldr	r3, [r3, #24]
 8005148:	61bb      	str	r3, [r7, #24]
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	e144      	b.n	80053d8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800514e:	2300      	movs	r3, #0
 8005150:	617b      	str	r3, [r7, #20]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	695b      	ldr	r3, [r3, #20]
 8005158:	617b      	str	r3, [r7, #20]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	699b      	ldr	r3, [r3, #24]
 8005160:	617b      	str	r3, [r7, #20]
 8005162:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005164:	e138      	b.n	80053d8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800516a:	2b03      	cmp	r3, #3
 800516c:	f200 80f1 	bhi.w	8005352 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005174:	2b01      	cmp	r3, #1
 8005176:	d123      	bne.n	80051c0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800517a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	f000 fcda 	bl	8005b36 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d001      	beq.n	800518c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e139      	b.n	8005400 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	691a      	ldr	r2, [r3, #16]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005196:	b2d2      	uxtb	r2, r2
 8005198:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519e:	1c5a      	adds	r2, r3, #1
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051a8:	3b01      	subs	r3, #1
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	3b01      	subs	r3, #1
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051be:	e10b      	b.n	80053d8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d14e      	bne.n	8005266 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ca:	9300      	str	r3, [sp, #0]
 80051cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ce:	2200      	movs	r2, #0
 80051d0:	4906      	ldr	r1, [pc, #24]	; (80051ec <HAL_I2C_Mem_Read+0x22c>)
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	f000 fb1a 	bl	800580c <I2C_WaitOnFlagUntilTimeout>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d008      	beq.n	80051f0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e10e      	b.n	8005400 <HAL_I2C_Mem_Read+0x440>
 80051e2:	bf00      	nop
 80051e4:	00100002 	.word	0x00100002
 80051e8:	ffff0000 	.word	0xffff0000
 80051ec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	691a      	ldr	r2, [r3, #16]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520a:	b2d2      	uxtb	r2, r2
 800520c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005212:	1c5a      	adds	r2, r3, #1
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800521c:	3b01      	subs	r3, #1
 800521e:	b29a      	uxth	r2, r3
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005228:	b29b      	uxth	r3, r3
 800522a:	3b01      	subs	r3, #1
 800522c:	b29a      	uxth	r2, r3
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	691a      	ldr	r2, [r3, #16]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523c:	b2d2      	uxtb	r2, r2
 800523e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005244:	1c5a      	adds	r2, r3, #1
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800524e:	3b01      	subs	r3, #1
 8005250:	b29a      	uxth	r2, r3
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800525a:	b29b      	uxth	r3, r3
 800525c:	3b01      	subs	r3, #1
 800525e:	b29a      	uxth	r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005264:	e0b8      	b.n	80053d8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005268:	9300      	str	r3, [sp, #0]
 800526a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800526c:	2200      	movs	r2, #0
 800526e:	4966      	ldr	r1, [pc, #408]	; (8005408 <HAL_I2C_Mem_Read+0x448>)
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f000 facb 	bl	800580c <I2C_WaitOnFlagUntilTimeout>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d001      	beq.n	8005280 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e0bf      	b.n	8005400 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800528e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	691a      	ldr	r2, [r3, #16]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529a:	b2d2      	uxtb	r2, r2
 800529c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a2:	1c5a      	adds	r2, r3, #1
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ac:	3b01      	subs	r3, #1
 80052ae:	b29a      	uxth	r2, r3
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	3b01      	subs	r3, #1
 80052bc:	b29a      	uxth	r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c4:	9300      	str	r3, [sp, #0]
 80052c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c8:	2200      	movs	r2, #0
 80052ca:	494f      	ldr	r1, [pc, #316]	; (8005408 <HAL_I2C_Mem_Read+0x448>)
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f000 fa9d 	bl	800580c <I2C_WaitOnFlagUntilTimeout>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d001      	beq.n	80052dc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e091      	b.n	8005400 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	691a      	ldr	r2, [r3, #16]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f6:	b2d2      	uxtb	r2, r2
 80052f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fe:	1c5a      	adds	r2, r3, #1
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005308:	3b01      	subs	r3, #1
 800530a:	b29a      	uxth	r2, r3
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005314:	b29b      	uxth	r3, r3
 8005316:	3b01      	subs	r3, #1
 8005318:	b29a      	uxth	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	691a      	ldr	r2, [r3, #16]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005328:	b2d2      	uxtb	r2, r2
 800532a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005330:	1c5a      	adds	r2, r3, #1
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800533a:	3b01      	subs	r3, #1
 800533c:	b29a      	uxth	r2, r3
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005346:	b29b      	uxth	r3, r3
 8005348:	3b01      	subs	r3, #1
 800534a:	b29a      	uxth	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005350:	e042      	b.n	80053d8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005354:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f000 fbed 	bl	8005b36 <I2C_WaitOnRXNEFlagUntilTimeout>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d001      	beq.n	8005366 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e04c      	b.n	8005400 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	691a      	ldr	r2, [r3, #16]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005370:	b2d2      	uxtb	r2, r2
 8005372:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005378:	1c5a      	adds	r2, r3, #1
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005382:	3b01      	subs	r3, #1
 8005384:	b29a      	uxth	r2, r3
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800538e:	b29b      	uxth	r3, r3
 8005390:	3b01      	subs	r3, #1
 8005392:	b29a      	uxth	r2, r3
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	695b      	ldr	r3, [r3, #20]
 800539e:	f003 0304 	and.w	r3, r3, #4
 80053a2:	2b04      	cmp	r3, #4
 80053a4:	d118      	bne.n	80053d8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	691a      	ldr	r2, [r3, #16]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b0:	b2d2      	uxtb	r2, r2
 80053b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b8:	1c5a      	adds	r2, r3, #1
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053c2:	3b01      	subs	r3, #1
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	3b01      	subs	r3, #1
 80053d2:	b29a      	uxth	r2, r3
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053dc:	2b00      	cmp	r3, #0
 80053de:	f47f aec2 	bne.w	8005166 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2220      	movs	r2, #32
 80053e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80053fa:	2300      	movs	r3, #0
 80053fc:	e000      	b.n	8005400 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80053fe:	2302      	movs	r3, #2
  }
}
 8005400:	4618      	mov	r0, r3
 8005402:	3728      	adds	r7, #40	; 0x28
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	00010004 	.word	0x00010004

0800540c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b088      	sub	sp, #32
 8005410:	af02      	add	r7, sp, #8
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	607a      	str	r2, [r7, #4]
 8005416:	603b      	str	r3, [r7, #0]
 8005418:	460b      	mov	r3, r1
 800541a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005420:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	2b08      	cmp	r3, #8
 8005426:	d006      	beq.n	8005436 <I2C_MasterRequestWrite+0x2a>
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	2b01      	cmp	r3, #1
 800542c:	d003      	beq.n	8005436 <I2C_MasterRequestWrite+0x2a>
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005434:	d108      	bne.n	8005448 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005444:	601a      	str	r2, [r3, #0]
 8005446:	e00b      	b.n	8005460 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800544c:	2b12      	cmp	r3, #18
 800544e:	d107      	bne.n	8005460 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800545e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	9300      	str	r3, [sp, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800546c:	68f8      	ldr	r0, [r7, #12]
 800546e:	f000 f9cd 	bl	800580c <I2C_WaitOnFlagUntilTimeout>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00d      	beq.n	8005494 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005482:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005486:	d103      	bne.n	8005490 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800548e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005490:	2303      	movs	r3, #3
 8005492:	e035      	b.n	8005500 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800549c:	d108      	bne.n	80054b0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800549e:	897b      	ldrh	r3, [r7, #10]
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	461a      	mov	r2, r3
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80054ac:	611a      	str	r2, [r3, #16]
 80054ae:	e01b      	b.n	80054e8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80054b0:	897b      	ldrh	r3, [r7, #10]
 80054b2:	11db      	asrs	r3, r3, #7
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	f003 0306 	and.w	r3, r3, #6
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	f063 030f 	orn	r3, r3, #15
 80054c0:	b2da      	uxtb	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	490e      	ldr	r1, [pc, #56]	; (8005508 <I2C_MasterRequestWrite+0xfc>)
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f000 f9f3 	bl	80058ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d001      	beq.n	80054de <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e010      	b.n	8005500 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80054de:	897b      	ldrh	r3, [r7, #10]
 80054e0:	b2da      	uxtb	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	4907      	ldr	r1, [pc, #28]	; (800550c <I2C_MasterRequestWrite+0x100>)
 80054ee:	68f8      	ldr	r0, [r7, #12]
 80054f0:	f000 f9e3 	bl	80058ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d001      	beq.n	80054fe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e000      	b.n	8005500 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3718      	adds	r7, #24
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	00010008 	.word	0x00010008
 800550c:	00010002 	.word	0x00010002

08005510 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b088      	sub	sp, #32
 8005514:	af02      	add	r7, sp, #8
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	4608      	mov	r0, r1
 800551a:	4611      	mov	r1, r2
 800551c:	461a      	mov	r2, r3
 800551e:	4603      	mov	r3, r0
 8005520:	817b      	strh	r3, [r7, #10]
 8005522:	460b      	mov	r3, r1
 8005524:	813b      	strh	r3, [r7, #8]
 8005526:	4613      	mov	r3, r2
 8005528:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005538:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800553a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553c:	9300      	str	r3, [sp, #0]
 800553e:	6a3b      	ldr	r3, [r7, #32]
 8005540:	2200      	movs	r2, #0
 8005542:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f000 f960 	bl	800580c <I2C_WaitOnFlagUntilTimeout>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00d      	beq.n	800556e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800555c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005560:	d103      	bne.n	800556a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005568:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e05f      	b.n	800562e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800556e:	897b      	ldrh	r3, [r7, #10]
 8005570:	b2db      	uxtb	r3, r3
 8005572:	461a      	mov	r2, r3
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800557c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800557e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005580:	6a3a      	ldr	r2, [r7, #32]
 8005582:	492d      	ldr	r1, [pc, #180]	; (8005638 <I2C_RequestMemoryWrite+0x128>)
 8005584:	68f8      	ldr	r0, [r7, #12]
 8005586:	f000 f998 	bl	80058ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d001      	beq.n	8005594 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e04c      	b.n	800562e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005594:	2300      	movs	r3, #0
 8005596:	617b      	str	r3, [r7, #20]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	695b      	ldr	r3, [r3, #20]
 800559e:	617b      	str	r3, [r7, #20]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	617b      	str	r3, [r7, #20]
 80055a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055ac:	6a39      	ldr	r1, [r7, #32]
 80055ae:	68f8      	ldr	r0, [r7, #12]
 80055b0:	f000 fa02 	bl	80059b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00d      	beq.n	80055d6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055be:	2b04      	cmp	r3, #4
 80055c0:	d107      	bne.n	80055d2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e02b      	b.n	800562e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80055d6:	88fb      	ldrh	r3, [r7, #6]
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d105      	bne.n	80055e8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80055dc:	893b      	ldrh	r3, [r7, #8]
 80055de:	b2da      	uxtb	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	611a      	str	r2, [r3, #16]
 80055e6:	e021      	b.n	800562c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80055e8:	893b      	ldrh	r3, [r7, #8]
 80055ea:	0a1b      	lsrs	r3, r3, #8
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	b2da      	uxtb	r2, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055f8:	6a39      	ldr	r1, [r7, #32]
 80055fa:	68f8      	ldr	r0, [r7, #12]
 80055fc:	f000 f9dc 	bl	80059b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00d      	beq.n	8005622 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560a:	2b04      	cmp	r3, #4
 800560c:	d107      	bne.n	800561e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800561c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e005      	b.n	800562e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005622:	893b      	ldrh	r3, [r7, #8]
 8005624:	b2da      	uxtb	r2, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3718      	adds	r7, #24
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	00010002 	.word	0x00010002

0800563c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b088      	sub	sp, #32
 8005640:	af02      	add	r7, sp, #8
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	4608      	mov	r0, r1
 8005646:	4611      	mov	r1, r2
 8005648:	461a      	mov	r2, r3
 800564a:	4603      	mov	r3, r0
 800564c:	817b      	strh	r3, [r7, #10]
 800564e:	460b      	mov	r3, r1
 8005650:	813b      	strh	r3, [r7, #8]
 8005652:	4613      	mov	r3, r2
 8005654:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005664:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005674:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005678:	9300      	str	r3, [sp, #0]
 800567a:	6a3b      	ldr	r3, [r7, #32]
 800567c:	2200      	movs	r2, #0
 800567e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	f000 f8c2 	bl	800580c <I2C_WaitOnFlagUntilTimeout>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00d      	beq.n	80056aa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005698:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800569c:	d103      	bne.n	80056a6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e0aa      	b.n	8005800 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80056aa:	897b      	ldrh	r3, [r7, #10]
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	461a      	mov	r2, r3
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80056b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056bc:	6a3a      	ldr	r2, [r7, #32]
 80056be:	4952      	ldr	r1, [pc, #328]	; (8005808 <I2C_RequestMemoryRead+0x1cc>)
 80056c0:	68f8      	ldr	r0, [r7, #12]
 80056c2:	f000 f8fa 	bl	80058ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d001      	beq.n	80056d0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e097      	b.n	8005800 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056d0:	2300      	movs	r3, #0
 80056d2:	617b      	str	r3, [r7, #20]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	695b      	ldr	r3, [r3, #20]
 80056da:	617b      	str	r3, [r7, #20]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	699b      	ldr	r3, [r3, #24]
 80056e2:	617b      	str	r3, [r7, #20]
 80056e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056e8:	6a39      	ldr	r1, [r7, #32]
 80056ea:	68f8      	ldr	r0, [r7, #12]
 80056ec:	f000 f964 	bl	80059b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00d      	beq.n	8005712 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fa:	2b04      	cmp	r3, #4
 80056fc:	d107      	bne.n	800570e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800570c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e076      	b.n	8005800 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005712:	88fb      	ldrh	r3, [r7, #6]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d105      	bne.n	8005724 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005718:	893b      	ldrh	r3, [r7, #8]
 800571a:	b2da      	uxtb	r2, r3
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	611a      	str	r2, [r3, #16]
 8005722:	e021      	b.n	8005768 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005724:	893b      	ldrh	r3, [r7, #8]
 8005726:	0a1b      	lsrs	r3, r3, #8
 8005728:	b29b      	uxth	r3, r3
 800572a:	b2da      	uxtb	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005734:	6a39      	ldr	r1, [r7, #32]
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	f000 f93e 	bl	80059b8 <I2C_WaitOnTXEFlagUntilTimeout>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00d      	beq.n	800575e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005746:	2b04      	cmp	r3, #4
 8005748:	d107      	bne.n	800575a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005758:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e050      	b.n	8005800 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800575e:	893b      	ldrh	r3, [r7, #8]
 8005760:	b2da      	uxtb	r2, r3
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800576a:	6a39      	ldr	r1, [r7, #32]
 800576c:	68f8      	ldr	r0, [r7, #12]
 800576e:	f000 f923 	bl	80059b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00d      	beq.n	8005794 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577c:	2b04      	cmp	r3, #4
 800577e:	d107      	bne.n	8005790 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800578e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e035      	b.n	8005800 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057a2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a6:	9300      	str	r3, [sp, #0]
 80057a8:	6a3b      	ldr	r3, [r7, #32]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80057b0:	68f8      	ldr	r0, [r7, #12]
 80057b2:	f000 f82b 	bl	800580c <I2C_WaitOnFlagUntilTimeout>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00d      	beq.n	80057d8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057ca:	d103      	bne.n	80057d4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80057d4:	2303      	movs	r3, #3
 80057d6:	e013      	b.n	8005800 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80057d8:	897b      	ldrh	r3, [r7, #10]
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	f043 0301 	orr.w	r3, r3, #1
 80057e0:	b2da      	uxtb	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80057e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ea:	6a3a      	ldr	r2, [r7, #32]
 80057ec:	4906      	ldr	r1, [pc, #24]	; (8005808 <I2C_RequestMemoryRead+0x1cc>)
 80057ee:	68f8      	ldr	r0, [r7, #12]
 80057f0:	f000 f863 	bl	80058ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d001      	beq.n	80057fe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e000      	b.n	8005800 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	4618      	mov	r0, r3
 8005802:	3718      	adds	r7, #24
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	00010002 	.word	0x00010002

0800580c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	603b      	str	r3, [r7, #0]
 8005818:	4613      	mov	r3, r2
 800581a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800581c:	e025      	b.n	800586a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005824:	d021      	beq.n	800586a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005826:	f7fe fa65 	bl	8003cf4 <HAL_GetTick>
 800582a:	4602      	mov	r2, r0
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	683a      	ldr	r2, [r7, #0]
 8005832:	429a      	cmp	r2, r3
 8005834:	d302      	bcc.n	800583c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d116      	bne.n	800586a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2200      	movs	r2, #0
 8005840:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2220      	movs	r2, #32
 8005846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2200      	movs	r2, #0
 800584e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005856:	f043 0220 	orr.w	r2, r3, #32
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e023      	b.n	80058b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	0c1b      	lsrs	r3, r3, #16
 800586e:	b2db      	uxtb	r3, r3
 8005870:	2b01      	cmp	r3, #1
 8005872:	d10d      	bne.n	8005890 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	695b      	ldr	r3, [r3, #20]
 800587a:	43da      	mvns	r2, r3
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	4013      	ands	r3, r2
 8005880:	b29b      	uxth	r3, r3
 8005882:	2b00      	cmp	r3, #0
 8005884:	bf0c      	ite	eq
 8005886:	2301      	moveq	r3, #1
 8005888:	2300      	movne	r3, #0
 800588a:	b2db      	uxtb	r3, r3
 800588c:	461a      	mov	r2, r3
 800588e:	e00c      	b.n	80058aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	43da      	mvns	r2, r3
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	4013      	ands	r3, r2
 800589c:	b29b      	uxth	r3, r3
 800589e:	2b00      	cmp	r3, #0
 80058a0:	bf0c      	ite	eq
 80058a2:	2301      	moveq	r3, #1
 80058a4:	2300      	movne	r3, #0
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	461a      	mov	r2, r3
 80058aa:	79fb      	ldrb	r3, [r7, #7]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d0b6      	beq.n	800581e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3710      	adds	r7, #16
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}

080058ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80058ba:	b580      	push	{r7, lr}
 80058bc:	b084      	sub	sp, #16
 80058be:	af00      	add	r7, sp, #0
 80058c0:	60f8      	str	r0, [r7, #12]
 80058c2:	60b9      	str	r1, [r7, #8]
 80058c4:	607a      	str	r2, [r7, #4]
 80058c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80058c8:	e051      	b.n	800596e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	695b      	ldr	r3, [r3, #20]
 80058d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058d8:	d123      	bne.n	8005922 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80058f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2200      	movs	r2, #0
 80058f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2220      	movs	r2, #32
 80058fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2200      	movs	r2, #0
 8005906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590e:	f043 0204 	orr.w	r2, r3, #4
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2200      	movs	r2, #0
 800591a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e046      	b.n	80059b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005928:	d021      	beq.n	800596e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800592a:	f7fe f9e3 	bl	8003cf4 <HAL_GetTick>
 800592e:	4602      	mov	r2, r0
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	429a      	cmp	r2, r3
 8005938:	d302      	bcc.n	8005940 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d116      	bne.n	800596e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2220      	movs	r2, #32
 800594a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595a:	f043 0220 	orr.w	r2, r3, #32
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e020      	b.n	80059b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	0c1b      	lsrs	r3, r3, #16
 8005972:	b2db      	uxtb	r3, r3
 8005974:	2b01      	cmp	r3, #1
 8005976:	d10c      	bne.n	8005992 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	695b      	ldr	r3, [r3, #20]
 800597e:	43da      	mvns	r2, r3
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	4013      	ands	r3, r2
 8005984:	b29b      	uxth	r3, r3
 8005986:	2b00      	cmp	r3, #0
 8005988:	bf14      	ite	ne
 800598a:	2301      	movne	r3, #1
 800598c:	2300      	moveq	r3, #0
 800598e:	b2db      	uxtb	r3, r3
 8005990:	e00b      	b.n	80059aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	699b      	ldr	r3, [r3, #24]
 8005998:	43da      	mvns	r2, r3
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	4013      	ands	r3, r2
 800599e:	b29b      	uxth	r3, r3
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	bf14      	ite	ne
 80059a4:	2301      	movne	r3, #1
 80059a6:	2300      	moveq	r3, #0
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d18d      	bne.n	80058ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3710      	adds	r7, #16
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80059c4:	e02d      	b.n	8005a22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80059c6:	68f8      	ldr	r0, [r7, #12]
 80059c8:	f000 f90b 	bl	8005be2 <I2C_IsAcknowledgeFailed>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d001      	beq.n	80059d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e02d      	b.n	8005a32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059dc:	d021      	beq.n	8005a22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059de:	f7fe f989 	bl	8003cf4 <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	68ba      	ldr	r2, [r7, #8]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d302      	bcc.n	80059f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d116      	bne.n	8005a22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2220      	movs	r2, #32
 80059fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0e:	f043 0220 	orr.w	r2, r3, #32
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e007      	b.n	8005a32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	695b      	ldr	r3, [r3, #20]
 8005a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a2c:	2b80      	cmp	r3, #128	; 0x80
 8005a2e:	d1ca      	bne.n	80059c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3710      	adds	r7, #16
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}

08005a3a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a3a:	b580      	push	{r7, lr}
 8005a3c:	b084      	sub	sp, #16
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	60f8      	str	r0, [r7, #12]
 8005a42:	60b9      	str	r1, [r7, #8]
 8005a44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a46:	e02d      	b.n	8005aa4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a48:	68f8      	ldr	r0, [r7, #12]
 8005a4a:	f000 f8ca 	bl	8005be2 <I2C_IsAcknowledgeFailed>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d001      	beq.n	8005a58 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e02d      	b.n	8005ab4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a5e:	d021      	beq.n	8005aa4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a60:	f7fe f948 	bl	8003cf4 <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	68ba      	ldr	r2, [r7, #8]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d302      	bcc.n	8005a76 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d116      	bne.n	8005aa4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2220      	movs	r2, #32
 8005a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a90:	f043 0220 	orr.w	r2, r3, #32
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e007      	b.n	8005ab4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	f003 0304 	and.w	r3, r3, #4
 8005aae:	2b04      	cmp	r3, #4
 8005ab0:	d1ca      	bne.n	8005a48 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3710      	adds	r7, #16
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ac8:	e029      	b.n	8005b1e <I2C_WaitOnSTOPFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005aca:	68f8      	ldr	r0, [r7, #12]
 8005acc:	f000 f889 	bl	8005be2 <I2C_IsAcknowledgeFailed>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d001      	beq.n	8005ada <I2C_WaitOnSTOPFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e029      	b.n	8005b2e <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ada:	f7fe f90b 	bl	8003cf4 <HAL_GetTick>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	68ba      	ldr	r2, [r7, #8]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d302      	bcc.n	8005af0 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d116      	bne.n	8005b1e <I2C_WaitOnSTOPFlagUntilTimeout+0x62>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2200      	movs	r2, #0
 8005af4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2220      	movs	r2, #32
 8005afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0a:	f043 0220 	orr.w	r2, r3, #32
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e007      	b.n	8005b2e <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	695b      	ldr	r3, [r3, #20]
 8005b24:	f003 0310 	and.w	r3, r3, #16
 8005b28:	2b10      	cmp	r3, #16
 8005b2a:	d1ce      	bne.n	8005aca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3710      	adds	r7, #16
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}

08005b36 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b36:	b580      	push	{r7, lr}
 8005b38:	b084      	sub	sp, #16
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	60f8      	str	r0, [r7, #12]
 8005b3e:	60b9      	str	r1, [r7, #8]
 8005b40:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b42:	e042      	b.n	8005bca <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	695b      	ldr	r3, [r3, #20]
 8005b4a:	f003 0310 	and.w	r3, r3, #16
 8005b4e:	2b10      	cmp	r3, #16
 8005b50:	d119      	bne.n	8005b86 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f06f 0210 	mvn.w	r2, #16
 8005b5a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2220      	movs	r2, #32
 8005b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e029      	b.n	8005bda <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b86:	f7fe f8b5 	bl	8003cf4 <HAL_GetTick>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	68ba      	ldr	r2, [r7, #8]
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d302      	bcc.n	8005b9c <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d116      	bne.n	8005bca <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2220      	movs	r2, #32
 8005ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb6:	f043 0220 	orr.w	r2, r3, #32
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e007      	b.n	8005bda <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	695b      	ldr	r3, [r3, #20]
 8005bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd4:	2b40      	cmp	r3, #64	; 0x40
 8005bd6:	d1b5      	bne.n	8005b44 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3710      	adds	r7, #16
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}

08005be2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005be2:	b480      	push	{r7}
 8005be4:	b083      	sub	sp, #12
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	695b      	ldr	r3, [r3, #20]
 8005bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bf8:	d11b      	bne.n	8005c32 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c02:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2220      	movs	r2, #32
 8005c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1e:	f043 0204 	orr.w	r2, r3, #4
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e000      	b.n	8005c34 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005c32:	2300      	movs	r3, #0
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b086      	sub	sp, #24
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d101      	bne.n	8005c52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e267      	b.n	8006122 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0301 	and.w	r3, r3, #1
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d075      	beq.n	8005d4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005c5e:	4b88      	ldr	r3, [pc, #544]	; (8005e80 <HAL_RCC_OscConfig+0x240>)
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	f003 030c 	and.w	r3, r3, #12
 8005c66:	2b04      	cmp	r3, #4
 8005c68:	d00c      	beq.n	8005c84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c6a:	4b85      	ldr	r3, [pc, #532]	; (8005e80 <HAL_RCC_OscConfig+0x240>)
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005c72:	2b08      	cmp	r3, #8
 8005c74:	d112      	bne.n	8005c9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c76:	4b82      	ldr	r3, [pc, #520]	; (8005e80 <HAL_RCC_OscConfig+0x240>)
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c82:	d10b      	bne.n	8005c9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c84:	4b7e      	ldr	r3, [pc, #504]	; (8005e80 <HAL_RCC_OscConfig+0x240>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d05b      	beq.n	8005d48 <HAL_RCC_OscConfig+0x108>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d157      	bne.n	8005d48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e242      	b.n	8006122 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ca4:	d106      	bne.n	8005cb4 <HAL_RCC_OscConfig+0x74>
 8005ca6:	4b76      	ldr	r3, [pc, #472]	; (8005e80 <HAL_RCC_OscConfig+0x240>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a75      	ldr	r2, [pc, #468]	; (8005e80 <HAL_RCC_OscConfig+0x240>)
 8005cac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cb0:	6013      	str	r3, [r2, #0]
 8005cb2:	e01d      	b.n	8005cf0 <HAL_RCC_OscConfig+0xb0>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cbc:	d10c      	bne.n	8005cd8 <HAL_RCC_OscConfig+0x98>
 8005cbe:	4b70      	ldr	r3, [pc, #448]	; (8005e80 <HAL_RCC_OscConfig+0x240>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a6f      	ldr	r2, [pc, #444]	; (8005e80 <HAL_RCC_OscConfig+0x240>)
 8005cc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cc8:	6013      	str	r3, [r2, #0]
 8005cca:	4b6d      	ldr	r3, [pc, #436]	; (8005e80 <HAL_RCC_OscConfig+0x240>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a6c      	ldr	r2, [pc, #432]	; (8005e80 <HAL_RCC_OscConfig+0x240>)
 8005cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cd4:	6013      	str	r3, [r2, #0]
 8005cd6:	e00b      	b.n	8005cf0 <HAL_RCC_OscConfig+0xb0>
 8005cd8:	4b69      	ldr	r3, [pc, #420]	; (8005e80 <HAL_RCC_OscConfig+0x240>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a68      	ldr	r2, [pc, #416]	; (8005e80 <HAL_RCC_OscConfig+0x240>)
 8005cde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ce2:	6013      	str	r3, [r2, #0]
 8005ce4:	4b66      	ldr	r3, [pc, #408]	; (8005e80 <HAL_RCC_OscConfig+0x240>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a65      	ldr	r2, [pc, #404]	; (8005e80 <HAL_RCC_OscConfig+0x240>)
 8005cea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d013      	beq.n	8005d20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cf8:	f7fd fffc 	bl	8003cf4 <HAL_GetTick>
 8005cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cfe:	e008      	b.n	8005d12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d00:	f7fd fff8 	bl	8003cf4 <HAL_GetTick>
 8005d04:	4602      	mov	r2, r0
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	2b64      	cmp	r3, #100	; 0x64
 8005d0c:	d901      	bls.n	8005d12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e207      	b.n	8006122 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d12:	4b5b      	ldr	r3, [pc, #364]	; (8005e80 <HAL_RCC_OscConfig+0x240>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d0f0      	beq.n	8005d00 <HAL_RCC_OscConfig+0xc0>
 8005d1e:	e014      	b.n	8005d4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d20:	f7fd ffe8 	bl	8003cf4 <HAL_GetTick>
 8005d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d26:	e008      	b.n	8005d3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d28:	f7fd ffe4 	bl	8003cf4 <HAL_GetTick>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	2b64      	cmp	r3, #100	; 0x64
 8005d34:	d901      	bls.n	8005d3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	e1f3      	b.n	8006122 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d3a:	4b51      	ldr	r3, [pc, #324]	; (8005e80 <HAL_RCC_OscConfig+0x240>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d1f0      	bne.n	8005d28 <HAL_RCC_OscConfig+0xe8>
 8005d46:	e000      	b.n	8005d4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 0302 	and.w	r3, r3, #2
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d063      	beq.n	8005e1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005d56:	4b4a      	ldr	r3, [pc, #296]	; (8005e80 <HAL_RCC_OscConfig+0x240>)
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	f003 030c 	and.w	r3, r3, #12
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00b      	beq.n	8005d7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d62:	4b47      	ldr	r3, [pc, #284]	; (8005e80 <HAL_RCC_OscConfig+0x240>)
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005d6a:	2b08      	cmp	r3, #8
 8005d6c:	d11c      	bne.n	8005da8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d6e:	4b44      	ldr	r3, [pc, #272]	; (8005e80 <HAL_RCC_OscConfig+0x240>)
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d116      	bne.n	8005da8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d7a:	4b41      	ldr	r3, [pc, #260]	; (8005e80 <HAL_RCC_OscConfig+0x240>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 0302 	and.w	r3, r3, #2
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d005      	beq.n	8005d92 <HAL_RCC_OscConfig+0x152>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d001      	beq.n	8005d92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e1c7      	b.n	8006122 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d92:	4b3b      	ldr	r3, [pc, #236]	; (8005e80 <HAL_RCC_OscConfig+0x240>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	00db      	lsls	r3, r3, #3
 8005da0:	4937      	ldr	r1, [pc, #220]	; (8005e80 <HAL_RCC_OscConfig+0x240>)
 8005da2:	4313      	orrs	r3, r2
 8005da4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005da6:	e03a      	b.n	8005e1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d020      	beq.n	8005df2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005db0:	4b34      	ldr	r3, [pc, #208]	; (8005e84 <HAL_RCC_OscConfig+0x244>)
 8005db2:	2201      	movs	r2, #1
 8005db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005db6:	f7fd ff9d 	bl	8003cf4 <HAL_GetTick>
 8005dba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dbc:	e008      	b.n	8005dd0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005dbe:	f7fd ff99 	bl	8003cf4 <HAL_GetTick>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	d901      	bls.n	8005dd0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	e1a8      	b.n	8006122 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dd0:	4b2b      	ldr	r3, [pc, #172]	; (8005e80 <HAL_RCC_OscConfig+0x240>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 0302 	and.w	r3, r3, #2
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d0f0      	beq.n	8005dbe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ddc:	4b28      	ldr	r3, [pc, #160]	; (8005e80 <HAL_RCC_OscConfig+0x240>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	00db      	lsls	r3, r3, #3
 8005dea:	4925      	ldr	r1, [pc, #148]	; (8005e80 <HAL_RCC_OscConfig+0x240>)
 8005dec:	4313      	orrs	r3, r2
 8005dee:	600b      	str	r3, [r1, #0]
 8005df0:	e015      	b.n	8005e1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005df2:	4b24      	ldr	r3, [pc, #144]	; (8005e84 <HAL_RCC_OscConfig+0x244>)
 8005df4:	2200      	movs	r2, #0
 8005df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005df8:	f7fd ff7c 	bl	8003cf4 <HAL_GetTick>
 8005dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005dfe:	e008      	b.n	8005e12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e00:	f7fd ff78 	bl	8003cf4 <HAL_GetTick>
 8005e04:	4602      	mov	r2, r0
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	d901      	bls.n	8005e12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	e187      	b.n	8006122 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e12:	4b1b      	ldr	r3, [pc, #108]	; (8005e80 <HAL_RCC_OscConfig+0x240>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 0302 	and.w	r3, r3, #2
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d1f0      	bne.n	8005e00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 0308 	and.w	r3, r3, #8
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d036      	beq.n	8005e98 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	695b      	ldr	r3, [r3, #20]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d016      	beq.n	8005e60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e32:	4b15      	ldr	r3, [pc, #84]	; (8005e88 <HAL_RCC_OscConfig+0x248>)
 8005e34:	2201      	movs	r2, #1
 8005e36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e38:	f7fd ff5c 	bl	8003cf4 <HAL_GetTick>
 8005e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e3e:	e008      	b.n	8005e52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e40:	f7fd ff58 	bl	8003cf4 <HAL_GetTick>
 8005e44:	4602      	mov	r2, r0
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	2b02      	cmp	r3, #2
 8005e4c:	d901      	bls.n	8005e52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	e167      	b.n	8006122 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e52:	4b0b      	ldr	r3, [pc, #44]	; (8005e80 <HAL_RCC_OscConfig+0x240>)
 8005e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e56:	f003 0302 	and.w	r3, r3, #2
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d0f0      	beq.n	8005e40 <HAL_RCC_OscConfig+0x200>
 8005e5e:	e01b      	b.n	8005e98 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e60:	4b09      	ldr	r3, [pc, #36]	; (8005e88 <HAL_RCC_OscConfig+0x248>)
 8005e62:	2200      	movs	r2, #0
 8005e64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e66:	f7fd ff45 	bl	8003cf4 <HAL_GetTick>
 8005e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e6c:	e00e      	b.n	8005e8c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e6e:	f7fd ff41 	bl	8003cf4 <HAL_GetTick>
 8005e72:	4602      	mov	r2, r0
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	2b02      	cmp	r3, #2
 8005e7a:	d907      	bls.n	8005e8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	e150      	b.n	8006122 <HAL_RCC_OscConfig+0x4e2>
 8005e80:	40023800 	.word	0x40023800
 8005e84:	42470000 	.word	0x42470000
 8005e88:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e8c:	4b88      	ldr	r3, [pc, #544]	; (80060b0 <HAL_RCC_OscConfig+0x470>)
 8005e8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e90:	f003 0302 	and.w	r3, r3, #2
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d1ea      	bne.n	8005e6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 0304 	and.w	r3, r3, #4
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	f000 8097 	beq.w	8005fd4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005eaa:	4b81      	ldr	r3, [pc, #516]	; (80060b0 <HAL_RCC_OscConfig+0x470>)
 8005eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d10f      	bne.n	8005ed6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	60bb      	str	r3, [r7, #8]
 8005eba:	4b7d      	ldr	r3, [pc, #500]	; (80060b0 <HAL_RCC_OscConfig+0x470>)
 8005ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebe:	4a7c      	ldr	r2, [pc, #496]	; (80060b0 <HAL_RCC_OscConfig+0x470>)
 8005ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8005ec6:	4b7a      	ldr	r3, [pc, #488]	; (80060b0 <HAL_RCC_OscConfig+0x470>)
 8005ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ece:	60bb      	str	r3, [r7, #8]
 8005ed0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ed6:	4b77      	ldr	r3, [pc, #476]	; (80060b4 <HAL_RCC_OscConfig+0x474>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d118      	bne.n	8005f14 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ee2:	4b74      	ldr	r3, [pc, #464]	; (80060b4 <HAL_RCC_OscConfig+0x474>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a73      	ldr	r2, [pc, #460]	; (80060b4 <HAL_RCC_OscConfig+0x474>)
 8005ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005eee:	f7fd ff01 	bl	8003cf4 <HAL_GetTick>
 8005ef2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ef4:	e008      	b.n	8005f08 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ef6:	f7fd fefd 	bl	8003cf4 <HAL_GetTick>
 8005efa:	4602      	mov	r2, r0
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	1ad3      	subs	r3, r2, r3
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	d901      	bls.n	8005f08 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005f04:	2303      	movs	r3, #3
 8005f06:	e10c      	b.n	8006122 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f08:	4b6a      	ldr	r3, [pc, #424]	; (80060b4 <HAL_RCC_OscConfig+0x474>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d0f0      	beq.n	8005ef6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d106      	bne.n	8005f2a <HAL_RCC_OscConfig+0x2ea>
 8005f1c:	4b64      	ldr	r3, [pc, #400]	; (80060b0 <HAL_RCC_OscConfig+0x470>)
 8005f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f20:	4a63      	ldr	r2, [pc, #396]	; (80060b0 <HAL_RCC_OscConfig+0x470>)
 8005f22:	f043 0301 	orr.w	r3, r3, #1
 8005f26:	6713      	str	r3, [r2, #112]	; 0x70
 8005f28:	e01c      	b.n	8005f64 <HAL_RCC_OscConfig+0x324>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	2b05      	cmp	r3, #5
 8005f30:	d10c      	bne.n	8005f4c <HAL_RCC_OscConfig+0x30c>
 8005f32:	4b5f      	ldr	r3, [pc, #380]	; (80060b0 <HAL_RCC_OscConfig+0x470>)
 8005f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f36:	4a5e      	ldr	r2, [pc, #376]	; (80060b0 <HAL_RCC_OscConfig+0x470>)
 8005f38:	f043 0304 	orr.w	r3, r3, #4
 8005f3c:	6713      	str	r3, [r2, #112]	; 0x70
 8005f3e:	4b5c      	ldr	r3, [pc, #368]	; (80060b0 <HAL_RCC_OscConfig+0x470>)
 8005f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f42:	4a5b      	ldr	r2, [pc, #364]	; (80060b0 <HAL_RCC_OscConfig+0x470>)
 8005f44:	f043 0301 	orr.w	r3, r3, #1
 8005f48:	6713      	str	r3, [r2, #112]	; 0x70
 8005f4a:	e00b      	b.n	8005f64 <HAL_RCC_OscConfig+0x324>
 8005f4c:	4b58      	ldr	r3, [pc, #352]	; (80060b0 <HAL_RCC_OscConfig+0x470>)
 8005f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f50:	4a57      	ldr	r2, [pc, #348]	; (80060b0 <HAL_RCC_OscConfig+0x470>)
 8005f52:	f023 0301 	bic.w	r3, r3, #1
 8005f56:	6713      	str	r3, [r2, #112]	; 0x70
 8005f58:	4b55      	ldr	r3, [pc, #340]	; (80060b0 <HAL_RCC_OscConfig+0x470>)
 8005f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f5c:	4a54      	ldr	r2, [pc, #336]	; (80060b0 <HAL_RCC_OscConfig+0x470>)
 8005f5e:	f023 0304 	bic.w	r3, r3, #4
 8005f62:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d015      	beq.n	8005f98 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f6c:	f7fd fec2 	bl	8003cf4 <HAL_GetTick>
 8005f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f72:	e00a      	b.n	8005f8a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f74:	f7fd febe 	bl	8003cf4 <HAL_GetTick>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d901      	bls.n	8005f8a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e0cb      	b.n	8006122 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f8a:	4b49      	ldr	r3, [pc, #292]	; (80060b0 <HAL_RCC_OscConfig+0x470>)
 8005f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f8e:	f003 0302 	and.w	r3, r3, #2
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d0ee      	beq.n	8005f74 <HAL_RCC_OscConfig+0x334>
 8005f96:	e014      	b.n	8005fc2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f98:	f7fd feac 	bl	8003cf4 <HAL_GetTick>
 8005f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f9e:	e00a      	b.n	8005fb6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fa0:	f7fd fea8 	bl	8003cf4 <HAL_GetTick>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d901      	bls.n	8005fb6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e0b5      	b.n	8006122 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fb6:	4b3e      	ldr	r3, [pc, #248]	; (80060b0 <HAL_RCC_OscConfig+0x470>)
 8005fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fba:	f003 0302 	and.w	r3, r3, #2
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1ee      	bne.n	8005fa0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005fc2:	7dfb      	ldrb	r3, [r7, #23]
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d105      	bne.n	8005fd4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fc8:	4b39      	ldr	r3, [pc, #228]	; (80060b0 <HAL_RCC_OscConfig+0x470>)
 8005fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fcc:	4a38      	ldr	r2, [pc, #224]	; (80060b0 <HAL_RCC_OscConfig+0x470>)
 8005fce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fd2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	699b      	ldr	r3, [r3, #24]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	f000 80a1 	beq.w	8006120 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005fde:	4b34      	ldr	r3, [pc, #208]	; (80060b0 <HAL_RCC_OscConfig+0x470>)
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	f003 030c 	and.w	r3, r3, #12
 8005fe6:	2b08      	cmp	r3, #8
 8005fe8:	d05c      	beq.n	80060a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	699b      	ldr	r3, [r3, #24]
 8005fee:	2b02      	cmp	r3, #2
 8005ff0:	d141      	bne.n	8006076 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ff2:	4b31      	ldr	r3, [pc, #196]	; (80060b8 <HAL_RCC_OscConfig+0x478>)
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ff8:	f7fd fe7c 	bl	8003cf4 <HAL_GetTick>
 8005ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ffe:	e008      	b.n	8006012 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006000:	f7fd fe78 	bl	8003cf4 <HAL_GetTick>
 8006004:	4602      	mov	r2, r0
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	2b02      	cmp	r3, #2
 800600c:	d901      	bls.n	8006012 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	e087      	b.n	8006122 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006012:	4b27      	ldr	r3, [pc, #156]	; (80060b0 <HAL_RCC_OscConfig+0x470>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1f0      	bne.n	8006000 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	69da      	ldr	r2, [r3, #28]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a1b      	ldr	r3, [r3, #32]
 8006026:	431a      	orrs	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602c:	019b      	lsls	r3, r3, #6
 800602e:	431a      	orrs	r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006034:	085b      	lsrs	r3, r3, #1
 8006036:	3b01      	subs	r3, #1
 8006038:	041b      	lsls	r3, r3, #16
 800603a:	431a      	orrs	r2, r3
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006040:	061b      	lsls	r3, r3, #24
 8006042:	491b      	ldr	r1, [pc, #108]	; (80060b0 <HAL_RCC_OscConfig+0x470>)
 8006044:	4313      	orrs	r3, r2
 8006046:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006048:	4b1b      	ldr	r3, [pc, #108]	; (80060b8 <HAL_RCC_OscConfig+0x478>)
 800604a:	2201      	movs	r2, #1
 800604c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800604e:	f7fd fe51 	bl	8003cf4 <HAL_GetTick>
 8006052:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006054:	e008      	b.n	8006068 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006056:	f7fd fe4d 	bl	8003cf4 <HAL_GetTick>
 800605a:	4602      	mov	r2, r0
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	1ad3      	subs	r3, r2, r3
 8006060:	2b02      	cmp	r3, #2
 8006062:	d901      	bls.n	8006068 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006064:	2303      	movs	r3, #3
 8006066:	e05c      	b.n	8006122 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006068:	4b11      	ldr	r3, [pc, #68]	; (80060b0 <HAL_RCC_OscConfig+0x470>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006070:	2b00      	cmp	r3, #0
 8006072:	d0f0      	beq.n	8006056 <HAL_RCC_OscConfig+0x416>
 8006074:	e054      	b.n	8006120 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006076:	4b10      	ldr	r3, [pc, #64]	; (80060b8 <HAL_RCC_OscConfig+0x478>)
 8006078:	2200      	movs	r2, #0
 800607a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800607c:	f7fd fe3a 	bl	8003cf4 <HAL_GetTick>
 8006080:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006082:	e008      	b.n	8006096 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006084:	f7fd fe36 	bl	8003cf4 <HAL_GetTick>
 8006088:	4602      	mov	r2, r0
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	1ad3      	subs	r3, r2, r3
 800608e:	2b02      	cmp	r3, #2
 8006090:	d901      	bls.n	8006096 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006092:	2303      	movs	r3, #3
 8006094:	e045      	b.n	8006122 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006096:	4b06      	ldr	r3, [pc, #24]	; (80060b0 <HAL_RCC_OscConfig+0x470>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d1f0      	bne.n	8006084 <HAL_RCC_OscConfig+0x444>
 80060a2:	e03d      	b.n	8006120 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	699b      	ldr	r3, [r3, #24]
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d107      	bne.n	80060bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	e038      	b.n	8006122 <HAL_RCC_OscConfig+0x4e2>
 80060b0:	40023800 	.word	0x40023800
 80060b4:	40007000 	.word	0x40007000
 80060b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80060bc:	4b1b      	ldr	r3, [pc, #108]	; (800612c <HAL_RCC_OscConfig+0x4ec>)
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	699b      	ldr	r3, [r3, #24]
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d028      	beq.n	800611c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d121      	bne.n	800611c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d11a      	bne.n	800611c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80060ec:	4013      	ands	r3, r2
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80060f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d111      	bne.n	800611c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006102:	085b      	lsrs	r3, r3, #1
 8006104:	3b01      	subs	r3, #1
 8006106:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006108:	429a      	cmp	r2, r3
 800610a:	d107      	bne.n	800611c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006116:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006118:	429a      	cmp	r2, r3
 800611a:	d001      	beq.n	8006120 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	e000      	b.n	8006122 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3718      	adds	r7, #24
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	40023800 	.word	0x40023800

08006130 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d101      	bne.n	8006144 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e0cc      	b.n	80062de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006144:	4b68      	ldr	r3, [pc, #416]	; (80062e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f003 0307 	and.w	r3, r3, #7
 800614c:	683a      	ldr	r2, [r7, #0]
 800614e:	429a      	cmp	r2, r3
 8006150:	d90c      	bls.n	800616c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006152:	4b65      	ldr	r3, [pc, #404]	; (80062e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006154:	683a      	ldr	r2, [r7, #0]
 8006156:	b2d2      	uxtb	r2, r2
 8006158:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800615a:	4b63      	ldr	r3, [pc, #396]	; (80062e8 <HAL_RCC_ClockConfig+0x1b8>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 0307 	and.w	r3, r3, #7
 8006162:	683a      	ldr	r2, [r7, #0]
 8006164:	429a      	cmp	r2, r3
 8006166:	d001      	beq.n	800616c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	e0b8      	b.n	80062de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 0302 	and.w	r3, r3, #2
 8006174:	2b00      	cmp	r3, #0
 8006176:	d020      	beq.n	80061ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 0304 	and.w	r3, r3, #4
 8006180:	2b00      	cmp	r3, #0
 8006182:	d005      	beq.n	8006190 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006184:	4b59      	ldr	r3, [pc, #356]	; (80062ec <HAL_RCC_ClockConfig+0x1bc>)
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	4a58      	ldr	r2, [pc, #352]	; (80062ec <HAL_RCC_ClockConfig+0x1bc>)
 800618a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800618e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 0308 	and.w	r3, r3, #8
 8006198:	2b00      	cmp	r3, #0
 800619a:	d005      	beq.n	80061a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800619c:	4b53      	ldr	r3, [pc, #332]	; (80062ec <HAL_RCC_ClockConfig+0x1bc>)
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	4a52      	ldr	r2, [pc, #328]	; (80062ec <HAL_RCC_ClockConfig+0x1bc>)
 80061a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80061a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061a8:	4b50      	ldr	r3, [pc, #320]	; (80062ec <HAL_RCC_ClockConfig+0x1bc>)
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	494d      	ldr	r1, [pc, #308]	; (80062ec <HAL_RCC_ClockConfig+0x1bc>)
 80061b6:	4313      	orrs	r3, r2
 80061b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 0301 	and.w	r3, r3, #1
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d044      	beq.n	8006250 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d107      	bne.n	80061de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061ce:	4b47      	ldr	r3, [pc, #284]	; (80062ec <HAL_RCC_ClockConfig+0x1bc>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d119      	bne.n	800620e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e07f      	b.n	80062de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	d003      	beq.n	80061ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80061ea:	2b03      	cmp	r3, #3
 80061ec:	d107      	bne.n	80061fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061ee:	4b3f      	ldr	r3, [pc, #252]	; (80062ec <HAL_RCC_ClockConfig+0x1bc>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d109      	bne.n	800620e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e06f      	b.n	80062de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061fe:	4b3b      	ldr	r3, [pc, #236]	; (80062ec <HAL_RCC_ClockConfig+0x1bc>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 0302 	and.w	r3, r3, #2
 8006206:	2b00      	cmp	r3, #0
 8006208:	d101      	bne.n	800620e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e067      	b.n	80062de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800620e:	4b37      	ldr	r3, [pc, #220]	; (80062ec <HAL_RCC_ClockConfig+0x1bc>)
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	f023 0203 	bic.w	r2, r3, #3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	4934      	ldr	r1, [pc, #208]	; (80062ec <HAL_RCC_ClockConfig+0x1bc>)
 800621c:	4313      	orrs	r3, r2
 800621e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006220:	f7fd fd68 	bl	8003cf4 <HAL_GetTick>
 8006224:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006226:	e00a      	b.n	800623e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006228:	f7fd fd64 	bl	8003cf4 <HAL_GetTick>
 800622c:	4602      	mov	r2, r0
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	f241 3288 	movw	r2, #5000	; 0x1388
 8006236:	4293      	cmp	r3, r2
 8006238:	d901      	bls.n	800623e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	e04f      	b.n	80062de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800623e:	4b2b      	ldr	r3, [pc, #172]	; (80062ec <HAL_RCC_ClockConfig+0x1bc>)
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	f003 020c 	and.w	r2, r3, #12
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	429a      	cmp	r2, r3
 800624e:	d1eb      	bne.n	8006228 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006250:	4b25      	ldr	r3, [pc, #148]	; (80062e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 0307 	and.w	r3, r3, #7
 8006258:	683a      	ldr	r2, [r7, #0]
 800625a:	429a      	cmp	r2, r3
 800625c:	d20c      	bcs.n	8006278 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800625e:	4b22      	ldr	r3, [pc, #136]	; (80062e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006260:	683a      	ldr	r2, [r7, #0]
 8006262:	b2d2      	uxtb	r2, r2
 8006264:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006266:	4b20      	ldr	r3, [pc, #128]	; (80062e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f003 0307 	and.w	r3, r3, #7
 800626e:	683a      	ldr	r2, [r7, #0]
 8006270:	429a      	cmp	r2, r3
 8006272:	d001      	beq.n	8006278 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e032      	b.n	80062de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 0304 	and.w	r3, r3, #4
 8006280:	2b00      	cmp	r3, #0
 8006282:	d008      	beq.n	8006296 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006284:	4b19      	ldr	r3, [pc, #100]	; (80062ec <HAL_RCC_ClockConfig+0x1bc>)
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	4916      	ldr	r1, [pc, #88]	; (80062ec <HAL_RCC_ClockConfig+0x1bc>)
 8006292:	4313      	orrs	r3, r2
 8006294:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 0308 	and.w	r3, r3, #8
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d009      	beq.n	80062b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062a2:	4b12      	ldr	r3, [pc, #72]	; (80062ec <HAL_RCC_ClockConfig+0x1bc>)
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	00db      	lsls	r3, r3, #3
 80062b0:	490e      	ldr	r1, [pc, #56]	; (80062ec <HAL_RCC_ClockConfig+0x1bc>)
 80062b2:	4313      	orrs	r3, r2
 80062b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80062b6:	f000 f821 	bl	80062fc <HAL_RCC_GetSysClockFreq>
 80062ba:	4602      	mov	r2, r0
 80062bc:	4b0b      	ldr	r3, [pc, #44]	; (80062ec <HAL_RCC_ClockConfig+0x1bc>)
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	091b      	lsrs	r3, r3, #4
 80062c2:	f003 030f 	and.w	r3, r3, #15
 80062c6:	490a      	ldr	r1, [pc, #40]	; (80062f0 <HAL_RCC_ClockConfig+0x1c0>)
 80062c8:	5ccb      	ldrb	r3, [r1, r3]
 80062ca:	fa22 f303 	lsr.w	r3, r2, r3
 80062ce:	4a09      	ldr	r2, [pc, #36]	; (80062f4 <HAL_RCC_ClockConfig+0x1c4>)
 80062d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80062d2:	4b09      	ldr	r3, [pc, #36]	; (80062f8 <HAL_RCC_ClockConfig+0x1c8>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4618      	mov	r0, r3
 80062d8:	f7fd f892 	bl	8003400 <HAL_InitTick>

  return HAL_OK;
 80062dc:	2300      	movs	r3, #0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3710      	adds	r7, #16
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	40023c00 	.word	0x40023c00
 80062ec:	40023800 	.word	0x40023800
 80062f0:	0800de04 	.word	0x0800de04
 80062f4:	20000000 	.word	0x20000000
 80062f8:	20000004 	.word	0x20000004

080062fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006300:	b090      	sub	sp, #64	; 0x40
 8006302:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006304:	2300      	movs	r3, #0
 8006306:	637b      	str	r3, [r7, #52]	; 0x34
 8006308:	2300      	movs	r3, #0
 800630a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800630c:	2300      	movs	r3, #0
 800630e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006310:	2300      	movs	r3, #0
 8006312:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006314:	4b59      	ldr	r3, [pc, #356]	; (800647c <HAL_RCC_GetSysClockFreq+0x180>)
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	f003 030c 	and.w	r3, r3, #12
 800631c:	2b08      	cmp	r3, #8
 800631e:	d00d      	beq.n	800633c <HAL_RCC_GetSysClockFreq+0x40>
 8006320:	2b08      	cmp	r3, #8
 8006322:	f200 80a1 	bhi.w	8006468 <HAL_RCC_GetSysClockFreq+0x16c>
 8006326:	2b00      	cmp	r3, #0
 8006328:	d002      	beq.n	8006330 <HAL_RCC_GetSysClockFreq+0x34>
 800632a:	2b04      	cmp	r3, #4
 800632c:	d003      	beq.n	8006336 <HAL_RCC_GetSysClockFreq+0x3a>
 800632e:	e09b      	b.n	8006468 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006330:	4b53      	ldr	r3, [pc, #332]	; (8006480 <HAL_RCC_GetSysClockFreq+0x184>)
 8006332:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006334:	e09b      	b.n	800646e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006336:	4b53      	ldr	r3, [pc, #332]	; (8006484 <HAL_RCC_GetSysClockFreq+0x188>)
 8006338:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800633a:	e098      	b.n	800646e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800633c:	4b4f      	ldr	r3, [pc, #316]	; (800647c <HAL_RCC_GetSysClockFreq+0x180>)
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006344:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006346:	4b4d      	ldr	r3, [pc, #308]	; (800647c <HAL_RCC_GetSysClockFreq+0x180>)
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800634e:	2b00      	cmp	r3, #0
 8006350:	d028      	beq.n	80063a4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006352:	4b4a      	ldr	r3, [pc, #296]	; (800647c <HAL_RCC_GetSysClockFreq+0x180>)
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	099b      	lsrs	r3, r3, #6
 8006358:	2200      	movs	r2, #0
 800635a:	623b      	str	r3, [r7, #32]
 800635c:	627a      	str	r2, [r7, #36]	; 0x24
 800635e:	6a3b      	ldr	r3, [r7, #32]
 8006360:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006364:	2100      	movs	r1, #0
 8006366:	4b47      	ldr	r3, [pc, #284]	; (8006484 <HAL_RCC_GetSysClockFreq+0x188>)
 8006368:	fb03 f201 	mul.w	r2, r3, r1
 800636c:	2300      	movs	r3, #0
 800636e:	fb00 f303 	mul.w	r3, r0, r3
 8006372:	4413      	add	r3, r2
 8006374:	4a43      	ldr	r2, [pc, #268]	; (8006484 <HAL_RCC_GetSysClockFreq+0x188>)
 8006376:	fba0 1202 	umull	r1, r2, r0, r2
 800637a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800637c:	460a      	mov	r2, r1
 800637e:	62ba      	str	r2, [r7, #40]	; 0x28
 8006380:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006382:	4413      	add	r3, r2
 8006384:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006388:	2200      	movs	r2, #0
 800638a:	61bb      	str	r3, [r7, #24]
 800638c:	61fa      	str	r2, [r7, #28]
 800638e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006392:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006396:	f7fa fc2f 	bl	8000bf8 <__aeabi_uldivmod>
 800639a:	4602      	mov	r2, r0
 800639c:	460b      	mov	r3, r1
 800639e:	4613      	mov	r3, r2
 80063a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063a2:	e053      	b.n	800644c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063a4:	4b35      	ldr	r3, [pc, #212]	; (800647c <HAL_RCC_GetSysClockFreq+0x180>)
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	099b      	lsrs	r3, r3, #6
 80063aa:	2200      	movs	r2, #0
 80063ac:	613b      	str	r3, [r7, #16]
 80063ae:	617a      	str	r2, [r7, #20]
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80063b6:	f04f 0b00 	mov.w	fp, #0
 80063ba:	4652      	mov	r2, sl
 80063bc:	465b      	mov	r3, fp
 80063be:	f04f 0000 	mov.w	r0, #0
 80063c2:	f04f 0100 	mov.w	r1, #0
 80063c6:	0159      	lsls	r1, r3, #5
 80063c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80063cc:	0150      	lsls	r0, r2, #5
 80063ce:	4602      	mov	r2, r0
 80063d0:	460b      	mov	r3, r1
 80063d2:	ebb2 080a 	subs.w	r8, r2, sl
 80063d6:	eb63 090b 	sbc.w	r9, r3, fp
 80063da:	f04f 0200 	mov.w	r2, #0
 80063de:	f04f 0300 	mov.w	r3, #0
 80063e2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80063e6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80063ea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80063ee:	ebb2 0408 	subs.w	r4, r2, r8
 80063f2:	eb63 0509 	sbc.w	r5, r3, r9
 80063f6:	f04f 0200 	mov.w	r2, #0
 80063fa:	f04f 0300 	mov.w	r3, #0
 80063fe:	00eb      	lsls	r3, r5, #3
 8006400:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006404:	00e2      	lsls	r2, r4, #3
 8006406:	4614      	mov	r4, r2
 8006408:	461d      	mov	r5, r3
 800640a:	eb14 030a 	adds.w	r3, r4, sl
 800640e:	603b      	str	r3, [r7, #0]
 8006410:	eb45 030b 	adc.w	r3, r5, fp
 8006414:	607b      	str	r3, [r7, #4]
 8006416:	f04f 0200 	mov.w	r2, #0
 800641a:	f04f 0300 	mov.w	r3, #0
 800641e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006422:	4629      	mov	r1, r5
 8006424:	028b      	lsls	r3, r1, #10
 8006426:	4621      	mov	r1, r4
 8006428:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800642c:	4621      	mov	r1, r4
 800642e:	028a      	lsls	r2, r1, #10
 8006430:	4610      	mov	r0, r2
 8006432:	4619      	mov	r1, r3
 8006434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006436:	2200      	movs	r2, #0
 8006438:	60bb      	str	r3, [r7, #8]
 800643a:	60fa      	str	r2, [r7, #12]
 800643c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006440:	f7fa fbda 	bl	8000bf8 <__aeabi_uldivmod>
 8006444:	4602      	mov	r2, r0
 8006446:	460b      	mov	r3, r1
 8006448:	4613      	mov	r3, r2
 800644a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800644c:	4b0b      	ldr	r3, [pc, #44]	; (800647c <HAL_RCC_GetSysClockFreq+0x180>)
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	0c1b      	lsrs	r3, r3, #16
 8006452:	f003 0303 	and.w	r3, r3, #3
 8006456:	3301      	adds	r3, #1
 8006458:	005b      	lsls	r3, r3, #1
 800645a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800645c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800645e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006460:	fbb2 f3f3 	udiv	r3, r2, r3
 8006464:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006466:	e002      	b.n	800646e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006468:	4b05      	ldr	r3, [pc, #20]	; (8006480 <HAL_RCC_GetSysClockFreq+0x184>)
 800646a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800646c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800646e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006470:	4618      	mov	r0, r3
 8006472:	3740      	adds	r7, #64	; 0x40
 8006474:	46bd      	mov	sp, r7
 8006476:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800647a:	bf00      	nop
 800647c:	40023800 	.word	0x40023800
 8006480:	00f42400 	.word	0x00f42400
 8006484:	017d7840 	.word	0x017d7840

08006488 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006488:	b480      	push	{r7}
 800648a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800648c:	4b03      	ldr	r3, [pc, #12]	; (800649c <HAL_RCC_GetHCLKFreq+0x14>)
 800648e:	681b      	ldr	r3, [r3, #0]
}
 8006490:	4618      	mov	r0, r3
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr
 800649a:	bf00      	nop
 800649c:	20000000 	.word	0x20000000

080064a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80064a4:	f7ff fff0 	bl	8006488 <HAL_RCC_GetHCLKFreq>
 80064a8:	4602      	mov	r2, r0
 80064aa:	4b05      	ldr	r3, [pc, #20]	; (80064c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	0a9b      	lsrs	r3, r3, #10
 80064b0:	f003 0307 	and.w	r3, r3, #7
 80064b4:	4903      	ldr	r1, [pc, #12]	; (80064c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80064b6:	5ccb      	ldrb	r3, [r1, r3]
 80064b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064bc:	4618      	mov	r0, r3
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	40023800 	.word	0x40023800
 80064c4:	0800de14 	.word	0x0800de14

080064c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80064cc:	f7ff ffdc 	bl	8006488 <HAL_RCC_GetHCLKFreq>
 80064d0:	4602      	mov	r2, r0
 80064d2:	4b05      	ldr	r3, [pc, #20]	; (80064e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	0b5b      	lsrs	r3, r3, #13
 80064d8:	f003 0307 	and.w	r3, r3, #7
 80064dc:	4903      	ldr	r1, [pc, #12]	; (80064ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80064de:	5ccb      	ldrb	r3, [r1, r3]
 80064e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	bd80      	pop	{r7, pc}
 80064e8:	40023800 	.word	0x40023800
 80064ec:	0800de14 	.word	0x0800de14

080064f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	220f      	movs	r2, #15
 80064fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006500:	4b12      	ldr	r3, [pc, #72]	; (800654c <HAL_RCC_GetClockConfig+0x5c>)
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	f003 0203 	and.w	r2, r3, #3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800650c:	4b0f      	ldr	r3, [pc, #60]	; (800654c <HAL_RCC_GetClockConfig+0x5c>)
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006518:	4b0c      	ldr	r3, [pc, #48]	; (800654c <HAL_RCC_GetClockConfig+0x5c>)
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006524:	4b09      	ldr	r3, [pc, #36]	; (800654c <HAL_RCC_GetClockConfig+0x5c>)
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	08db      	lsrs	r3, r3, #3
 800652a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006532:	4b07      	ldr	r3, [pc, #28]	; (8006550 <HAL_RCC_GetClockConfig+0x60>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f003 0207 	and.w	r2, r3, #7
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	601a      	str	r2, [r3, #0]
}
 800653e:	bf00      	nop
 8006540:	370c      	adds	r7, #12
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	40023800 	.word	0x40023800
 8006550:	40023c00 	.word	0x40023c00

08006554 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b082      	sub	sp, #8
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d101      	bne.n	8006566 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	e07b      	b.n	800665e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656a:	2b00      	cmp	r3, #0
 800656c:	d108      	bne.n	8006580 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006576:	d009      	beq.n	800658c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	61da      	str	r2, [r3, #28]
 800657e:	e005      	b.n	800658c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006598:	b2db      	uxtb	r3, r3
 800659a:	2b00      	cmp	r3, #0
 800659c:	d106      	bne.n	80065ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f7fc feb6 	bl	8003318 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2202      	movs	r2, #2
 80065b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80065d4:	431a      	orrs	r2, r3
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065de:	431a      	orrs	r2, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	f003 0302 	and.w	r3, r3, #2
 80065e8:	431a      	orrs	r2, r3
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	695b      	ldr	r3, [r3, #20]
 80065ee:	f003 0301 	and.w	r3, r3, #1
 80065f2:	431a      	orrs	r2, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	699b      	ldr	r3, [r3, #24]
 80065f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065fc:	431a      	orrs	r2, r3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	69db      	ldr	r3, [r3, #28]
 8006602:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006606:	431a      	orrs	r2, r3
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6a1b      	ldr	r3, [r3, #32]
 800660c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006610:	ea42 0103 	orr.w	r1, r2, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006618:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	430a      	orrs	r2, r1
 8006622:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	699b      	ldr	r3, [r3, #24]
 8006628:	0c1b      	lsrs	r3, r3, #16
 800662a:	f003 0104 	and.w	r1, r3, #4
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006632:	f003 0210 	and.w	r2, r3, #16
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	430a      	orrs	r2, r1
 800663c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	69da      	ldr	r2, [r3, #28]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800664c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	3708      	adds	r7, #8
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}

08006666 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006666:	b580      	push	{r7, lr}
 8006668:	b08c      	sub	sp, #48	; 0x30
 800666a:	af00      	add	r7, sp, #0
 800666c:	60f8      	str	r0, [r7, #12]
 800666e:	60b9      	str	r1, [r7, #8]
 8006670:	607a      	str	r2, [r7, #4]
 8006672:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006674:	2301      	movs	r3, #1
 8006676:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006678:	2300      	movs	r3, #0
 800667a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006684:	2b01      	cmp	r3, #1
 8006686:	d101      	bne.n	800668c <HAL_SPI_TransmitReceive+0x26>
 8006688:	2302      	movs	r3, #2
 800668a:	e18a      	b.n	80069a2 <HAL_SPI_TransmitReceive+0x33c>
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006694:	f7fd fb2e 	bl	8003cf4 <HAL_GetTick>
 8006698:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80066a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80066aa:	887b      	ldrh	r3, [r7, #2]
 80066ac:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80066ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d00f      	beq.n	80066d6 <HAL_SPI_TransmitReceive+0x70>
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066bc:	d107      	bne.n	80066ce <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d103      	bne.n	80066ce <HAL_SPI_TransmitReceive+0x68>
 80066c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80066ca:	2b04      	cmp	r3, #4
 80066cc:	d003      	beq.n	80066d6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80066ce:	2302      	movs	r3, #2
 80066d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80066d4:	e15b      	b.n	800698e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d005      	beq.n	80066e8 <HAL_SPI_TransmitReceive+0x82>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d002      	beq.n	80066e8 <HAL_SPI_TransmitReceive+0x82>
 80066e2:	887b      	ldrh	r3, [r7, #2]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d103      	bne.n	80066f0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80066ee:	e14e      	b.n	800698e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	2b04      	cmp	r3, #4
 80066fa:	d003      	beq.n	8006704 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2205      	movs	r2, #5
 8006700:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2200      	movs	r2, #0
 8006708:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	887a      	ldrh	r2, [r7, #2]
 8006714:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	887a      	ldrh	r2, [r7, #2]
 800671a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	68ba      	ldr	r2, [r7, #8]
 8006720:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	887a      	ldrh	r2, [r7, #2]
 8006726:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	887a      	ldrh	r2, [r7, #2]
 800672c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2200      	movs	r2, #0
 8006732:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2200      	movs	r2, #0
 8006738:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006744:	2b40      	cmp	r3, #64	; 0x40
 8006746:	d007      	beq.n	8006758 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006756:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006760:	d178      	bne.n	8006854 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d002      	beq.n	8006770 <HAL_SPI_TransmitReceive+0x10a>
 800676a:	8b7b      	ldrh	r3, [r7, #26]
 800676c:	2b01      	cmp	r3, #1
 800676e:	d166      	bne.n	800683e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006774:	881a      	ldrh	r2, [r3, #0]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006780:	1c9a      	adds	r2, r3, #2
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800678a:	b29b      	uxth	r3, r3
 800678c:	3b01      	subs	r3, #1
 800678e:	b29a      	uxth	r2, r3
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006794:	e053      	b.n	800683e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	f003 0302 	and.w	r3, r3, #2
 80067a0:	2b02      	cmp	r3, #2
 80067a2:	d11b      	bne.n	80067dc <HAL_SPI_TransmitReceive+0x176>
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d016      	beq.n	80067dc <HAL_SPI_TransmitReceive+0x176>
 80067ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d113      	bne.n	80067dc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067b8:	881a      	ldrh	r2, [r3, #0]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c4:	1c9a      	adds	r2, r3, #2
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	3b01      	subs	r3, #1
 80067d2:	b29a      	uxth	r2, r3
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80067d8:	2300      	movs	r3, #0
 80067da:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	f003 0301 	and.w	r3, r3, #1
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d119      	bne.n	800681e <HAL_SPI_TransmitReceive+0x1b8>
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d014      	beq.n	800681e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68da      	ldr	r2, [r3, #12]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067fe:	b292      	uxth	r2, r2
 8006800:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006806:	1c9a      	adds	r2, r3, #2
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006810:	b29b      	uxth	r3, r3
 8006812:	3b01      	subs	r3, #1
 8006814:	b29a      	uxth	r2, r3
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800681a:	2301      	movs	r3, #1
 800681c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800681e:	f7fd fa69 	bl	8003cf4 <HAL_GetTick>
 8006822:	4602      	mov	r2, r0
 8006824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006826:	1ad3      	subs	r3, r2, r3
 8006828:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800682a:	429a      	cmp	r2, r3
 800682c:	d807      	bhi.n	800683e <HAL_SPI_TransmitReceive+0x1d8>
 800682e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006834:	d003      	beq.n	800683e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006836:	2303      	movs	r3, #3
 8006838:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800683c:	e0a7      	b.n	800698e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006842:	b29b      	uxth	r3, r3
 8006844:	2b00      	cmp	r3, #0
 8006846:	d1a6      	bne.n	8006796 <HAL_SPI_TransmitReceive+0x130>
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800684c:	b29b      	uxth	r3, r3
 800684e:	2b00      	cmp	r3, #0
 8006850:	d1a1      	bne.n	8006796 <HAL_SPI_TransmitReceive+0x130>
 8006852:	e07c      	b.n	800694e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d002      	beq.n	8006862 <HAL_SPI_TransmitReceive+0x1fc>
 800685c:	8b7b      	ldrh	r3, [r7, #26]
 800685e:	2b01      	cmp	r3, #1
 8006860:	d16b      	bne.n	800693a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	330c      	adds	r3, #12
 800686c:	7812      	ldrb	r2, [r2, #0]
 800686e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006874:	1c5a      	adds	r2, r3, #1
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800687e:	b29b      	uxth	r3, r3
 8006880:	3b01      	subs	r3, #1
 8006882:	b29a      	uxth	r2, r3
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006888:	e057      	b.n	800693a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	f003 0302 	and.w	r3, r3, #2
 8006894:	2b02      	cmp	r3, #2
 8006896:	d11c      	bne.n	80068d2 <HAL_SPI_TransmitReceive+0x26c>
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800689c:	b29b      	uxth	r3, r3
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d017      	beq.n	80068d2 <HAL_SPI_TransmitReceive+0x26c>
 80068a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d114      	bne.n	80068d2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	330c      	adds	r3, #12
 80068b2:	7812      	ldrb	r2, [r2, #0]
 80068b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ba:	1c5a      	adds	r2, r3, #1
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	3b01      	subs	r3, #1
 80068c8:	b29a      	uxth	r2, r3
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80068ce:	2300      	movs	r3, #0
 80068d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	f003 0301 	and.w	r3, r3, #1
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d119      	bne.n	8006914 <HAL_SPI_TransmitReceive+0x2ae>
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d014      	beq.n	8006914 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	68da      	ldr	r2, [r3, #12]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f4:	b2d2      	uxtb	r2, r2
 80068f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068fc:	1c5a      	adds	r2, r3, #1
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006906:	b29b      	uxth	r3, r3
 8006908:	3b01      	subs	r3, #1
 800690a:	b29a      	uxth	r2, r3
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006910:	2301      	movs	r3, #1
 8006912:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006914:	f7fd f9ee 	bl	8003cf4 <HAL_GetTick>
 8006918:	4602      	mov	r2, r0
 800691a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691c:	1ad3      	subs	r3, r2, r3
 800691e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006920:	429a      	cmp	r2, r3
 8006922:	d803      	bhi.n	800692c <HAL_SPI_TransmitReceive+0x2c6>
 8006924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800692a:	d102      	bne.n	8006932 <HAL_SPI_TransmitReceive+0x2cc>
 800692c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800692e:	2b00      	cmp	r3, #0
 8006930:	d103      	bne.n	800693a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006938:	e029      	b.n	800698e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800693e:	b29b      	uxth	r3, r3
 8006940:	2b00      	cmp	r3, #0
 8006942:	d1a2      	bne.n	800688a <HAL_SPI_TransmitReceive+0x224>
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006948:	b29b      	uxth	r3, r3
 800694a:	2b00      	cmp	r3, #0
 800694c:	d19d      	bne.n	800688a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800694e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006950:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006952:	68f8      	ldr	r0, [r7, #12]
 8006954:	f000 f8b2 	bl	8006abc <SPI_EndRxTxTransaction>
 8006958:	4603      	mov	r3, r0
 800695a:	2b00      	cmp	r3, #0
 800695c:	d006      	beq.n	800696c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2220      	movs	r2, #32
 8006968:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800696a:	e010      	b.n	800698e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d10b      	bne.n	800698c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006974:	2300      	movs	r3, #0
 8006976:	617b      	str	r3, [r7, #20]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	617b      	str	r3, [r7, #20]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	617b      	str	r3, [r7, #20]
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	e000      	b.n	800698e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800698c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2201      	movs	r2, #1
 8006992:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2200      	movs	r2, #0
 800699a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800699e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3730      	adds	r7, #48	; 0x30
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
	...

080069ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b088      	sub	sp, #32
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	60b9      	str	r1, [r7, #8]
 80069b6:	603b      	str	r3, [r7, #0]
 80069b8:	4613      	mov	r3, r2
 80069ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80069bc:	f7fd f99a 	bl	8003cf4 <HAL_GetTick>
 80069c0:	4602      	mov	r2, r0
 80069c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c4:	1a9b      	subs	r3, r3, r2
 80069c6:	683a      	ldr	r2, [r7, #0]
 80069c8:	4413      	add	r3, r2
 80069ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80069cc:	f7fd f992 	bl	8003cf4 <HAL_GetTick>
 80069d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80069d2:	4b39      	ldr	r3, [pc, #228]	; (8006ab8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	015b      	lsls	r3, r3, #5
 80069d8:	0d1b      	lsrs	r3, r3, #20
 80069da:	69fa      	ldr	r2, [r7, #28]
 80069dc:	fb02 f303 	mul.w	r3, r2, r3
 80069e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069e2:	e054      	b.n	8006a8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ea:	d050      	beq.n	8006a8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80069ec:	f7fd f982 	bl	8003cf4 <HAL_GetTick>
 80069f0:	4602      	mov	r2, r0
 80069f2:	69bb      	ldr	r3, [r7, #24]
 80069f4:	1ad3      	subs	r3, r2, r3
 80069f6:	69fa      	ldr	r2, [r7, #28]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d902      	bls.n	8006a02 <SPI_WaitFlagStateUntilTimeout+0x56>
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d13d      	bne.n	8006a7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	685a      	ldr	r2, [r3, #4]
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006a10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a1a:	d111      	bne.n	8006a40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a24:	d004      	beq.n	8006a30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a2e:	d107      	bne.n	8006a40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a48:	d10f      	bne.n	8006a6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a58:	601a      	str	r2, [r3, #0]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	e017      	b.n	8006aae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d101      	bne.n	8006a88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006a84:	2300      	movs	r3, #0
 8006a86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	689a      	ldr	r2, [r3, #8]
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	4013      	ands	r3, r2
 8006a98:	68ba      	ldr	r2, [r7, #8]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	bf0c      	ite	eq
 8006a9e:	2301      	moveq	r3, #1
 8006aa0:	2300      	movne	r3, #0
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	79fb      	ldrb	r3, [r7, #7]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d19b      	bne.n	80069e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006aac:	2300      	movs	r3, #0
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3720      	adds	r7, #32
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	20000000 	.word	0x20000000

08006abc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b088      	sub	sp, #32
 8006ac0:	af02      	add	r7, sp, #8
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006ac8:	4b1b      	ldr	r3, [pc, #108]	; (8006b38 <SPI_EndRxTxTransaction+0x7c>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a1b      	ldr	r2, [pc, #108]	; (8006b3c <SPI_EndRxTxTransaction+0x80>)
 8006ace:	fba2 2303 	umull	r2, r3, r2, r3
 8006ad2:	0d5b      	lsrs	r3, r3, #21
 8006ad4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006ad8:	fb02 f303 	mul.w	r3, r2, r3
 8006adc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ae6:	d112      	bne.n	8006b0e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	9300      	str	r3, [sp, #0]
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	2200      	movs	r2, #0
 8006af0:	2180      	movs	r1, #128	; 0x80
 8006af2:	68f8      	ldr	r0, [r7, #12]
 8006af4:	f7ff ff5a 	bl	80069ac <SPI_WaitFlagStateUntilTimeout>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d016      	beq.n	8006b2c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b02:	f043 0220 	orr.w	r2, r3, #32
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	e00f      	b.n	8006b2e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d00a      	beq.n	8006b2a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	3b01      	subs	r3, #1
 8006b18:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b24:	2b80      	cmp	r3, #128	; 0x80
 8006b26:	d0f2      	beq.n	8006b0e <SPI_EndRxTxTransaction+0x52>
 8006b28:	e000      	b.n	8006b2c <SPI_EndRxTxTransaction+0x70>
        break;
 8006b2a:	bf00      	nop
  }

  return HAL_OK;
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3718      	adds	r7, #24
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	bf00      	nop
 8006b38:	20000000 	.word	0x20000000
 8006b3c:	165e9f81 	.word	0x165e9f81

08006b40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b082      	sub	sp, #8
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d101      	bne.n	8006b52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e041      	b.n	8006bd6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d106      	bne.n	8006b6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 f839 	bl	8006bde <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2202      	movs	r2, #2
 8006b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	3304      	adds	r3, #4
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	4610      	mov	r0, r2
 8006b80:	f000 fc0a 	bl	8007398 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bd4:	2300      	movs	r3, #0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3708      	adds	r7, #8
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}

08006bde <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006bde:	b480      	push	{r7}
 8006be0:	b083      	sub	sp, #12
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006be6:	bf00      	nop
 8006be8:	370c      	adds	r7, #12
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr
	...

08006bf4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b085      	sub	sp, #20
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d001      	beq.n	8006c0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e044      	b.n	8006c96 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2202      	movs	r2, #2
 8006c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	68da      	ldr	r2, [r3, #12]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f042 0201 	orr.w	r2, r2, #1
 8006c22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a1e      	ldr	r2, [pc, #120]	; (8006ca4 <HAL_TIM_Base_Start_IT+0xb0>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d018      	beq.n	8006c60 <HAL_TIM_Base_Start_IT+0x6c>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c36:	d013      	beq.n	8006c60 <HAL_TIM_Base_Start_IT+0x6c>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a1a      	ldr	r2, [pc, #104]	; (8006ca8 <HAL_TIM_Base_Start_IT+0xb4>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d00e      	beq.n	8006c60 <HAL_TIM_Base_Start_IT+0x6c>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a19      	ldr	r2, [pc, #100]	; (8006cac <HAL_TIM_Base_Start_IT+0xb8>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d009      	beq.n	8006c60 <HAL_TIM_Base_Start_IT+0x6c>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a17      	ldr	r2, [pc, #92]	; (8006cb0 <HAL_TIM_Base_Start_IT+0xbc>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d004      	beq.n	8006c60 <HAL_TIM_Base_Start_IT+0x6c>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a16      	ldr	r2, [pc, #88]	; (8006cb4 <HAL_TIM_Base_Start_IT+0xc0>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d111      	bne.n	8006c84 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	f003 0307 	and.w	r3, r3, #7
 8006c6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2b06      	cmp	r3, #6
 8006c70:	d010      	beq.n	8006c94 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f042 0201 	orr.w	r2, r2, #1
 8006c80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c82:	e007      	b.n	8006c94 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f042 0201 	orr.w	r2, r2, #1
 8006c92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c94:	2300      	movs	r3, #0
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3714      	adds	r7, #20
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr
 8006ca2:	bf00      	nop
 8006ca4:	40010000 	.word	0x40010000
 8006ca8:	40000400 	.word	0x40000400
 8006cac:	40000800 	.word	0x40000800
 8006cb0:	40000c00 	.word	0x40000c00
 8006cb4:	40014000 	.word	0x40014000

08006cb8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d101      	bne.n	8006cca <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e041      	b.n	8006d4e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d106      	bne.n	8006ce4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f7fc fe0e 	bl	8003900 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2202      	movs	r2, #2
 8006ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	3304      	adds	r3, #4
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	4610      	mov	r0, r2
 8006cf8:	f000 fb4e 	bl	8007398 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2201      	movs	r2, #1
 8006d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2201      	movs	r2, #1
 8006d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2201      	movs	r2, #1
 8006d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3708      	adds	r7, #8
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
	...

08006d58 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b084      	sub	sp, #16
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d62:	2300      	movs	r3, #0
 8006d64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d104      	bne.n	8006d76 <HAL_TIM_IC_Start_IT+0x1e>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	e013      	b.n	8006d9e <HAL_TIM_IC_Start_IT+0x46>
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	2b04      	cmp	r3, #4
 8006d7a:	d104      	bne.n	8006d86 <HAL_TIM_IC_Start_IT+0x2e>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	e00b      	b.n	8006d9e <HAL_TIM_IC_Start_IT+0x46>
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	2b08      	cmp	r3, #8
 8006d8a:	d104      	bne.n	8006d96 <HAL_TIM_IC_Start_IT+0x3e>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	e003      	b.n	8006d9e <HAL_TIM_IC_Start_IT+0x46>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d104      	bne.n	8006db0 <HAL_TIM_IC_Start_IT+0x58>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	e013      	b.n	8006dd8 <HAL_TIM_IC_Start_IT+0x80>
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	2b04      	cmp	r3, #4
 8006db4:	d104      	bne.n	8006dc0 <HAL_TIM_IC_Start_IT+0x68>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	e00b      	b.n	8006dd8 <HAL_TIM_IC_Start_IT+0x80>
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	2b08      	cmp	r3, #8
 8006dc4:	d104      	bne.n	8006dd0 <HAL_TIM_IC_Start_IT+0x78>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	e003      	b.n	8006dd8 <HAL_TIM_IC_Start_IT+0x80>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006dda:	7bbb      	ldrb	r3, [r7, #14]
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d102      	bne.n	8006de6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006de0:	7b7b      	ldrb	r3, [r7, #13]
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d001      	beq.n	8006dea <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	e0c2      	b.n	8006f70 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d104      	bne.n	8006dfa <HAL_TIM_IC_Start_IT+0xa2>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2202      	movs	r2, #2
 8006df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006df8:	e013      	b.n	8006e22 <HAL_TIM_IC_Start_IT+0xca>
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	2b04      	cmp	r3, #4
 8006dfe:	d104      	bne.n	8006e0a <HAL_TIM_IC_Start_IT+0xb2>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2202      	movs	r2, #2
 8006e04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e08:	e00b      	b.n	8006e22 <HAL_TIM_IC_Start_IT+0xca>
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	2b08      	cmp	r3, #8
 8006e0e:	d104      	bne.n	8006e1a <HAL_TIM_IC_Start_IT+0xc2>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2202      	movs	r2, #2
 8006e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e18:	e003      	b.n	8006e22 <HAL_TIM_IC_Start_IT+0xca>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2202      	movs	r2, #2
 8006e1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d104      	bne.n	8006e32 <HAL_TIM_IC_Start_IT+0xda>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2202      	movs	r2, #2
 8006e2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e30:	e013      	b.n	8006e5a <HAL_TIM_IC_Start_IT+0x102>
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	2b04      	cmp	r3, #4
 8006e36:	d104      	bne.n	8006e42 <HAL_TIM_IC_Start_IT+0xea>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2202      	movs	r2, #2
 8006e3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e40:	e00b      	b.n	8006e5a <HAL_TIM_IC_Start_IT+0x102>
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	2b08      	cmp	r3, #8
 8006e46:	d104      	bne.n	8006e52 <HAL_TIM_IC_Start_IT+0xfa>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2202      	movs	r2, #2
 8006e4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e50:	e003      	b.n	8006e5a <HAL_TIM_IC_Start_IT+0x102>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2202      	movs	r2, #2
 8006e56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	2b0c      	cmp	r3, #12
 8006e5e:	d841      	bhi.n	8006ee4 <HAL_TIM_IC_Start_IT+0x18c>
 8006e60:	a201      	add	r2, pc, #4	; (adr r2, 8006e68 <HAL_TIM_IC_Start_IT+0x110>)
 8006e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e66:	bf00      	nop
 8006e68:	08006e9d 	.word	0x08006e9d
 8006e6c:	08006ee5 	.word	0x08006ee5
 8006e70:	08006ee5 	.word	0x08006ee5
 8006e74:	08006ee5 	.word	0x08006ee5
 8006e78:	08006eaf 	.word	0x08006eaf
 8006e7c:	08006ee5 	.word	0x08006ee5
 8006e80:	08006ee5 	.word	0x08006ee5
 8006e84:	08006ee5 	.word	0x08006ee5
 8006e88:	08006ec1 	.word	0x08006ec1
 8006e8c:	08006ee5 	.word	0x08006ee5
 8006e90:	08006ee5 	.word	0x08006ee5
 8006e94:	08006ee5 	.word	0x08006ee5
 8006e98:	08006ed3 	.word	0x08006ed3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	68da      	ldr	r2, [r3, #12]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f042 0202 	orr.w	r2, r2, #2
 8006eaa:	60da      	str	r2, [r3, #12]
      break;
 8006eac:	e01d      	b.n	8006eea <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	68da      	ldr	r2, [r3, #12]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f042 0204 	orr.w	r2, r2, #4
 8006ebc:	60da      	str	r2, [r3, #12]
      break;
 8006ebe:	e014      	b.n	8006eea <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	68da      	ldr	r2, [r3, #12]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f042 0208 	orr.w	r2, r2, #8
 8006ece:	60da      	str	r2, [r3, #12]
      break;
 8006ed0:	e00b      	b.n	8006eea <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	68da      	ldr	r2, [r3, #12]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f042 0210 	orr.w	r2, r2, #16
 8006ee0:	60da      	str	r2, [r3, #12]
      break;
 8006ee2:	e002      	b.n	8006eea <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	73fb      	strb	r3, [r7, #15]
      break;
 8006ee8:	bf00      	nop
  }

  if (status == HAL_OK)
 8006eea:	7bfb      	ldrb	r3, [r7, #15]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d13e      	bne.n	8006f6e <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	6839      	ldr	r1, [r7, #0]
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f000 fbeb 	bl	80076d4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a1d      	ldr	r2, [pc, #116]	; (8006f78 <HAL_TIM_IC_Start_IT+0x220>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d018      	beq.n	8006f3a <HAL_TIM_IC_Start_IT+0x1e2>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f10:	d013      	beq.n	8006f3a <HAL_TIM_IC_Start_IT+0x1e2>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a19      	ldr	r2, [pc, #100]	; (8006f7c <HAL_TIM_IC_Start_IT+0x224>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d00e      	beq.n	8006f3a <HAL_TIM_IC_Start_IT+0x1e2>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a17      	ldr	r2, [pc, #92]	; (8006f80 <HAL_TIM_IC_Start_IT+0x228>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d009      	beq.n	8006f3a <HAL_TIM_IC_Start_IT+0x1e2>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a16      	ldr	r2, [pc, #88]	; (8006f84 <HAL_TIM_IC_Start_IT+0x22c>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d004      	beq.n	8006f3a <HAL_TIM_IC_Start_IT+0x1e2>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a14      	ldr	r2, [pc, #80]	; (8006f88 <HAL_TIM_IC_Start_IT+0x230>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d111      	bne.n	8006f5e <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	f003 0307 	and.w	r3, r3, #7
 8006f44:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	2b06      	cmp	r3, #6
 8006f4a:	d010      	beq.n	8006f6e <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f042 0201 	orr.w	r2, r2, #1
 8006f5a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f5c:	e007      	b.n	8006f6e <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f042 0201 	orr.w	r2, r2, #1
 8006f6c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3710      	adds	r7, #16
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	40010000 	.word	0x40010000
 8006f7c:	40000400 	.word	0x40000400
 8006f80:	40000800 	.word	0x40000800
 8006f84:	40000c00 	.word	0x40000c00
 8006f88:	40014000 	.word	0x40014000

08006f8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	f003 0302 	and.w	r3, r3, #2
 8006f9e:	2b02      	cmp	r3, #2
 8006fa0:	d122      	bne.n	8006fe8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	f003 0302 	and.w	r3, r3, #2
 8006fac:	2b02      	cmp	r3, #2
 8006fae:	d11b      	bne.n	8006fe8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f06f 0202 	mvn.w	r2, #2
 8006fb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	699b      	ldr	r3, [r3, #24]
 8006fc6:	f003 0303 	and.w	r3, r3, #3
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d003      	beq.n	8006fd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f7fa fef8 	bl	8001dc4 <HAL_TIM_IC_CaptureCallback>
 8006fd4:	e005      	b.n	8006fe2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 f9c0 	bl	800735c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 f9c7 	bl	8007370 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	f003 0304 	and.w	r3, r3, #4
 8006ff2:	2b04      	cmp	r3, #4
 8006ff4:	d122      	bne.n	800703c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	f003 0304 	and.w	r3, r3, #4
 8007000:	2b04      	cmp	r3, #4
 8007002:	d11b      	bne.n	800703c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f06f 0204 	mvn.w	r2, #4
 800700c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2202      	movs	r2, #2
 8007012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	699b      	ldr	r3, [r3, #24]
 800701a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800701e:	2b00      	cmp	r3, #0
 8007020:	d003      	beq.n	800702a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f7fa fece 	bl	8001dc4 <HAL_TIM_IC_CaptureCallback>
 8007028:	e005      	b.n	8007036 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 f996 	bl	800735c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 f99d 	bl	8007370 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	691b      	ldr	r3, [r3, #16]
 8007042:	f003 0308 	and.w	r3, r3, #8
 8007046:	2b08      	cmp	r3, #8
 8007048:	d122      	bne.n	8007090 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	f003 0308 	and.w	r3, r3, #8
 8007054:	2b08      	cmp	r3, #8
 8007056:	d11b      	bne.n	8007090 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f06f 0208 	mvn.w	r2, #8
 8007060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2204      	movs	r2, #4
 8007066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	69db      	ldr	r3, [r3, #28]
 800706e:	f003 0303 	and.w	r3, r3, #3
 8007072:	2b00      	cmp	r3, #0
 8007074:	d003      	beq.n	800707e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f7fa fea4 	bl	8001dc4 <HAL_TIM_IC_CaptureCallback>
 800707c:	e005      	b.n	800708a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 f96c 	bl	800735c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 f973 	bl	8007370 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	691b      	ldr	r3, [r3, #16]
 8007096:	f003 0310 	and.w	r3, r3, #16
 800709a:	2b10      	cmp	r3, #16
 800709c:	d122      	bne.n	80070e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	f003 0310 	and.w	r3, r3, #16
 80070a8:	2b10      	cmp	r3, #16
 80070aa:	d11b      	bne.n	80070e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f06f 0210 	mvn.w	r2, #16
 80070b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2208      	movs	r2, #8
 80070ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	69db      	ldr	r3, [r3, #28]
 80070c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d003      	beq.n	80070d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f7fa fe7a 	bl	8001dc4 <HAL_TIM_IC_CaptureCallback>
 80070d0:	e005      	b.n	80070de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 f942 	bl	800735c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 f949 	bl	8007370 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	f003 0301 	and.w	r3, r3, #1
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d10e      	bne.n	8007110 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	f003 0301 	and.w	r3, r3, #1
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d107      	bne.n	8007110 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f06f 0201 	mvn.w	r2, #1
 8007108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f7fa fe8c 	bl	8001e28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800711a:	2b80      	cmp	r3, #128	; 0x80
 800711c:	d10e      	bne.n	800713c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007128:	2b80      	cmp	r3, #128	; 0x80
 800712a:	d107      	bne.n	800713c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 fb6a 	bl	8007810 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007146:	2b40      	cmp	r3, #64	; 0x40
 8007148:	d10e      	bne.n	8007168 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007154:	2b40      	cmp	r3, #64	; 0x40
 8007156:	d107      	bne.n	8007168 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 f90e 	bl	8007384 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	f003 0320 	and.w	r3, r3, #32
 8007172:	2b20      	cmp	r3, #32
 8007174:	d10e      	bne.n	8007194 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	f003 0320 	and.w	r3, r3, #32
 8007180:	2b20      	cmp	r3, #32
 8007182:	d107      	bne.n	8007194 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f06f 0220 	mvn.w	r2, #32
 800718c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 fb34 	bl	80077fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007194:	bf00      	nop
 8007196:	3708      	adds	r7, #8
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b086      	sub	sp, #24
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	60b9      	str	r1, [r7, #8]
 80071a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071a8:	2300      	movs	r3, #0
 80071aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d101      	bne.n	80071ba <HAL_TIM_IC_ConfigChannel+0x1e>
 80071b6:	2302      	movs	r3, #2
 80071b8:	e088      	b.n	80072cc <HAL_TIM_IC_ConfigChannel+0x130>
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2201      	movs	r2, #1
 80071be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d11b      	bne.n	8007200 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6818      	ldr	r0, [r3, #0]
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	6819      	ldr	r1, [r3, #0]
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	685a      	ldr	r2, [r3, #4]
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	68db      	ldr	r3, [r3, #12]
 80071d8:	f000 f95e 	bl	8007498 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	699a      	ldr	r2, [r3, #24]
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f022 020c 	bic.w	r2, r2, #12
 80071ea:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	6999      	ldr	r1, [r3, #24]
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	689a      	ldr	r2, [r3, #8]
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	430a      	orrs	r2, r1
 80071fc:	619a      	str	r2, [r3, #24]
 80071fe:	e060      	b.n	80072c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2b04      	cmp	r3, #4
 8007204:	d11c      	bne.n	8007240 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	6818      	ldr	r0, [r3, #0]
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	6819      	ldr	r1, [r3, #0]
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	685a      	ldr	r2, [r3, #4]
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	68db      	ldr	r3, [r3, #12]
 8007216:	f000 f9a7 	bl	8007568 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	699a      	ldr	r2, [r3, #24]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007228:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	6999      	ldr	r1, [r3, #24]
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	021a      	lsls	r2, r3, #8
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	430a      	orrs	r2, r1
 800723c:	619a      	str	r2, [r3, #24]
 800723e:	e040      	b.n	80072c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2b08      	cmp	r3, #8
 8007244:	d11b      	bne.n	800727e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	6818      	ldr	r0, [r3, #0]
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	6819      	ldr	r1, [r3, #0]
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	685a      	ldr	r2, [r3, #4]
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	f000 f9c4 	bl	80075e2 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	69da      	ldr	r2, [r3, #28]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f022 020c 	bic.w	r2, r2, #12
 8007268:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	69d9      	ldr	r1, [r3, #28]
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	689a      	ldr	r2, [r3, #8]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	430a      	orrs	r2, r1
 800727a:	61da      	str	r2, [r3, #28]
 800727c:	e021      	b.n	80072c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2b0c      	cmp	r3, #12
 8007282:	d11c      	bne.n	80072be <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	6818      	ldr	r0, [r3, #0]
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	6819      	ldr	r1, [r3, #0]
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	685a      	ldr	r2, [r3, #4]
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	f000 f9e1 	bl	800765a <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	69da      	ldr	r2, [r3, #28]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80072a6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	69d9      	ldr	r1, [r3, #28]
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	021a      	lsls	r2, r3, #8
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	430a      	orrs	r2, r1
 80072ba:	61da      	str	r2, [r3, #28]
 80072bc:	e001      	b.n	80072c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2200      	movs	r2, #0
 80072c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80072ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3718      	adds	r7, #24
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b085      	sub	sp, #20
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80072de:	2300      	movs	r3, #0
 80072e0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	2b0c      	cmp	r3, #12
 80072e6:	d831      	bhi.n	800734c <HAL_TIM_ReadCapturedValue+0x78>
 80072e8:	a201      	add	r2, pc, #4	; (adr r2, 80072f0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80072ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ee:	bf00      	nop
 80072f0:	08007325 	.word	0x08007325
 80072f4:	0800734d 	.word	0x0800734d
 80072f8:	0800734d 	.word	0x0800734d
 80072fc:	0800734d 	.word	0x0800734d
 8007300:	0800732f 	.word	0x0800732f
 8007304:	0800734d 	.word	0x0800734d
 8007308:	0800734d 	.word	0x0800734d
 800730c:	0800734d 	.word	0x0800734d
 8007310:	08007339 	.word	0x08007339
 8007314:	0800734d 	.word	0x0800734d
 8007318:	0800734d 	.word	0x0800734d
 800731c:	0800734d 	.word	0x0800734d
 8007320:	08007343 	.word	0x08007343
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800732a:	60fb      	str	r3, [r7, #12]

      break;
 800732c:	e00f      	b.n	800734e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007334:	60fb      	str	r3, [r7, #12]

      break;
 8007336:	e00a      	b.n	800734e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800733e:	60fb      	str	r3, [r7, #12]

      break;
 8007340:	e005      	b.n	800734e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007348:	60fb      	str	r3, [r7, #12]

      break;
 800734a:	e000      	b.n	800734e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800734c:	bf00      	nop
  }

  return tmpreg;
 800734e:	68fb      	ldr	r3, [r7, #12]
}
 8007350:	4618      	mov	r0, r3
 8007352:	3714      	adds	r7, #20
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr

0800735c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007364:	bf00      	nop
 8007366:	370c      	adds	r7, #12
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007378:	bf00      	nop
 800737a:	370c      	adds	r7, #12
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800738c:	bf00      	nop
 800738e:	370c      	adds	r7, #12
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007398:	b480      	push	{r7}
 800739a:	b085      	sub	sp, #20
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	4a34      	ldr	r2, [pc, #208]	; (800747c <TIM_Base_SetConfig+0xe4>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d00f      	beq.n	80073d0 <TIM_Base_SetConfig+0x38>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073b6:	d00b      	beq.n	80073d0 <TIM_Base_SetConfig+0x38>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	4a31      	ldr	r2, [pc, #196]	; (8007480 <TIM_Base_SetConfig+0xe8>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d007      	beq.n	80073d0 <TIM_Base_SetConfig+0x38>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	4a30      	ldr	r2, [pc, #192]	; (8007484 <TIM_Base_SetConfig+0xec>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d003      	beq.n	80073d0 <TIM_Base_SetConfig+0x38>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	4a2f      	ldr	r2, [pc, #188]	; (8007488 <TIM_Base_SetConfig+0xf0>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d108      	bne.n	80073e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	68fa      	ldr	r2, [r7, #12]
 80073de:	4313      	orrs	r3, r2
 80073e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	4a25      	ldr	r2, [pc, #148]	; (800747c <TIM_Base_SetConfig+0xe4>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d01b      	beq.n	8007422 <TIM_Base_SetConfig+0x8a>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073f0:	d017      	beq.n	8007422 <TIM_Base_SetConfig+0x8a>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	4a22      	ldr	r2, [pc, #136]	; (8007480 <TIM_Base_SetConfig+0xe8>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d013      	beq.n	8007422 <TIM_Base_SetConfig+0x8a>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4a21      	ldr	r2, [pc, #132]	; (8007484 <TIM_Base_SetConfig+0xec>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d00f      	beq.n	8007422 <TIM_Base_SetConfig+0x8a>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4a20      	ldr	r2, [pc, #128]	; (8007488 <TIM_Base_SetConfig+0xf0>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d00b      	beq.n	8007422 <TIM_Base_SetConfig+0x8a>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4a1f      	ldr	r2, [pc, #124]	; (800748c <TIM_Base_SetConfig+0xf4>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d007      	beq.n	8007422 <TIM_Base_SetConfig+0x8a>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4a1e      	ldr	r2, [pc, #120]	; (8007490 <TIM_Base_SetConfig+0xf8>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d003      	beq.n	8007422 <TIM_Base_SetConfig+0x8a>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a1d      	ldr	r2, [pc, #116]	; (8007494 <TIM_Base_SetConfig+0xfc>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d108      	bne.n	8007434 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007428:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	68db      	ldr	r3, [r3, #12]
 800742e:	68fa      	ldr	r2, [r7, #12]
 8007430:	4313      	orrs	r3, r2
 8007432:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	695b      	ldr	r3, [r3, #20]
 800743e:	4313      	orrs	r3, r2
 8007440:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	68fa      	ldr	r2, [r7, #12]
 8007446:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	689a      	ldr	r2, [r3, #8]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	4a08      	ldr	r2, [pc, #32]	; (800747c <TIM_Base_SetConfig+0xe4>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d103      	bne.n	8007468 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	691a      	ldr	r2, [r3, #16]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2201      	movs	r2, #1
 800746c:	615a      	str	r2, [r3, #20]
}
 800746e:	bf00      	nop
 8007470:	3714      	adds	r7, #20
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr
 800747a:	bf00      	nop
 800747c:	40010000 	.word	0x40010000
 8007480:	40000400 	.word	0x40000400
 8007484:	40000800 	.word	0x40000800
 8007488:	40000c00 	.word	0x40000c00
 800748c:	40014000 	.word	0x40014000
 8007490:	40014400 	.word	0x40014400
 8007494:	40014800 	.word	0x40014800

08007498 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007498:	b480      	push	{r7}
 800749a:	b087      	sub	sp, #28
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	607a      	str	r2, [r7, #4]
 80074a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	6a1b      	ldr	r3, [r3, #32]
 80074aa:	f023 0201 	bic.w	r2, r3, #1
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	699b      	ldr	r3, [r3, #24]
 80074b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	6a1b      	ldr	r3, [r3, #32]
 80074bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	4a24      	ldr	r2, [pc, #144]	; (8007554 <TIM_TI1_SetConfig+0xbc>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d013      	beq.n	80074ee <TIM_TI1_SetConfig+0x56>
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074cc:	d00f      	beq.n	80074ee <TIM_TI1_SetConfig+0x56>
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	4a21      	ldr	r2, [pc, #132]	; (8007558 <TIM_TI1_SetConfig+0xc0>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d00b      	beq.n	80074ee <TIM_TI1_SetConfig+0x56>
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	4a20      	ldr	r2, [pc, #128]	; (800755c <TIM_TI1_SetConfig+0xc4>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d007      	beq.n	80074ee <TIM_TI1_SetConfig+0x56>
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	4a1f      	ldr	r2, [pc, #124]	; (8007560 <TIM_TI1_SetConfig+0xc8>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d003      	beq.n	80074ee <TIM_TI1_SetConfig+0x56>
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	4a1e      	ldr	r2, [pc, #120]	; (8007564 <TIM_TI1_SetConfig+0xcc>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d101      	bne.n	80074f2 <TIM_TI1_SetConfig+0x5a>
 80074ee:	2301      	movs	r3, #1
 80074f0:	e000      	b.n	80074f4 <TIM_TI1_SetConfig+0x5c>
 80074f2:	2300      	movs	r3, #0
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d008      	beq.n	800750a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	f023 0303 	bic.w	r3, r3, #3
 80074fe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007500:	697a      	ldr	r2, [r7, #20]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	4313      	orrs	r3, r2
 8007506:	617b      	str	r3, [r7, #20]
 8007508:	e003      	b.n	8007512 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	f043 0301 	orr.w	r3, r3, #1
 8007510:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007518:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	011b      	lsls	r3, r3, #4
 800751e:	b2db      	uxtb	r3, r3
 8007520:	697a      	ldr	r2, [r7, #20]
 8007522:	4313      	orrs	r3, r2
 8007524:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	f023 030a 	bic.w	r3, r3, #10
 800752c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	f003 030a 	and.w	r3, r3, #10
 8007534:	693a      	ldr	r2, [r7, #16]
 8007536:	4313      	orrs	r3, r2
 8007538:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	697a      	ldr	r2, [r7, #20]
 800753e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	693a      	ldr	r2, [r7, #16]
 8007544:	621a      	str	r2, [r3, #32]
}
 8007546:	bf00      	nop
 8007548:	371c      	adds	r7, #28
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr
 8007552:	bf00      	nop
 8007554:	40010000 	.word	0x40010000
 8007558:	40000400 	.word	0x40000400
 800755c:	40000800 	.word	0x40000800
 8007560:	40000c00 	.word	0x40000c00
 8007564:	40014000 	.word	0x40014000

08007568 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007568:	b480      	push	{r7}
 800756a:	b087      	sub	sp, #28
 800756c:	af00      	add	r7, sp, #0
 800756e:	60f8      	str	r0, [r7, #12]
 8007570:	60b9      	str	r1, [r7, #8]
 8007572:	607a      	str	r2, [r7, #4]
 8007574:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6a1b      	ldr	r3, [r3, #32]
 800757a:	f023 0210 	bic.w	r2, r3, #16
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	699b      	ldr	r3, [r3, #24]
 8007586:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	6a1b      	ldr	r3, [r3, #32]
 800758c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007594:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	021b      	lsls	r3, r3, #8
 800759a:	697a      	ldr	r2, [r7, #20]
 800759c:	4313      	orrs	r3, r2
 800759e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80075a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	031b      	lsls	r3, r3, #12
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	697a      	ldr	r2, [r7, #20]
 80075b0:	4313      	orrs	r3, r2
 80075b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80075ba:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	011b      	lsls	r3, r3, #4
 80075c0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80075c4:	693a      	ldr	r2, [r7, #16]
 80075c6:	4313      	orrs	r3, r2
 80075c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	697a      	ldr	r2, [r7, #20]
 80075ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	693a      	ldr	r2, [r7, #16]
 80075d4:	621a      	str	r2, [r3, #32]
}
 80075d6:	bf00      	nop
 80075d8:	371c      	adds	r7, #28
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr

080075e2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80075e2:	b480      	push	{r7}
 80075e4:	b087      	sub	sp, #28
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	60f8      	str	r0, [r7, #12]
 80075ea:	60b9      	str	r1, [r7, #8]
 80075ec:	607a      	str	r2, [r7, #4]
 80075ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	6a1b      	ldr	r3, [r3, #32]
 80075f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	69db      	ldr	r3, [r3, #28]
 8007600:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	6a1b      	ldr	r3, [r3, #32]
 8007606:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	f023 0303 	bic.w	r3, r3, #3
 800760e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007610:	697a      	ldr	r2, [r7, #20]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	4313      	orrs	r3, r2
 8007616:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800761e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	011b      	lsls	r3, r3, #4
 8007624:	b2db      	uxtb	r3, r3
 8007626:	697a      	ldr	r2, [r7, #20]
 8007628:	4313      	orrs	r3, r2
 800762a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007632:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	021b      	lsls	r3, r3, #8
 8007638:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800763c:	693a      	ldr	r2, [r7, #16]
 800763e:	4313      	orrs	r3, r2
 8007640:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	697a      	ldr	r2, [r7, #20]
 8007646:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	693a      	ldr	r2, [r7, #16]
 800764c:	621a      	str	r2, [r3, #32]
}
 800764e:	bf00      	nop
 8007650:	371c      	adds	r7, #28
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr

0800765a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800765a:	b480      	push	{r7}
 800765c:	b087      	sub	sp, #28
 800765e:	af00      	add	r7, sp, #0
 8007660:	60f8      	str	r0, [r7, #12]
 8007662:	60b9      	str	r1, [r7, #8]
 8007664:	607a      	str	r2, [r7, #4]
 8007666:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6a1b      	ldr	r3, [r3, #32]
 800766c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	69db      	ldr	r3, [r3, #28]
 8007678:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	6a1b      	ldr	r3, [r3, #32]
 800767e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007686:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	021b      	lsls	r3, r3, #8
 800768c:	697a      	ldr	r2, [r7, #20]
 800768e:	4313      	orrs	r3, r2
 8007690:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007698:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	031b      	lsls	r3, r3, #12
 800769e:	b29b      	uxth	r3, r3
 80076a0:	697a      	ldr	r2, [r7, #20]
 80076a2:	4313      	orrs	r3, r2
 80076a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80076ac:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	031b      	lsls	r3, r3, #12
 80076b2:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80076b6:	693a      	ldr	r2, [r7, #16]
 80076b8:	4313      	orrs	r3, r2
 80076ba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	697a      	ldr	r2, [r7, #20]
 80076c0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	693a      	ldr	r2, [r7, #16]
 80076c6:	621a      	str	r2, [r3, #32]
}
 80076c8:	bf00      	nop
 80076ca:	371c      	adds	r7, #28
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr

080076d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b087      	sub	sp, #28
 80076d8:	af00      	add	r7, sp, #0
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	60b9      	str	r1, [r7, #8]
 80076de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	f003 031f 	and.w	r3, r3, #31
 80076e6:	2201      	movs	r2, #1
 80076e8:	fa02 f303 	lsl.w	r3, r2, r3
 80076ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	6a1a      	ldr	r2, [r3, #32]
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	43db      	mvns	r3, r3
 80076f6:	401a      	ands	r2, r3
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6a1a      	ldr	r2, [r3, #32]
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	f003 031f 	and.w	r3, r3, #31
 8007706:	6879      	ldr	r1, [r7, #4]
 8007708:	fa01 f303 	lsl.w	r3, r1, r3
 800770c:	431a      	orrs	r2, r3
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	621a      	str	r2, [r3, #32]
}
 8007712:	bf00      	nop
 8007714:	371c      	adds	r7, #28
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr
	...

08007720 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007720:	b480      	push	{r7}
 8007722:	b085      	sub	sp, #20
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007730:	2b01      	cmp	r3, #1
 8007732:	d101      	bne.n	8007738 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007734:	2302      	movs	r3, #2
 8007736:	e050      	b.n	80077da <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2201      	movs	r2, #1
 800773c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2202      	movs	r2, #2
 8007744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800775e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	68fa      	ldr	r2, [r7, #12]
 8007766:	4313      	orrs	r3, r2
 8007768:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	68fa      	ldr	r2, [r7, #12]
 8007770:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a1c      	ldr	r2, [pc, #112]	; (80077e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d018      	beq.n	80077ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007784:	d013      	beq.n	80077ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a18      	ldr	r2, [pc, #96]	; (80077ec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d00e      	beq.n	80077ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a16      	ldr	r2, [pc, #88]	; (80077f0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d009      	beq.n	80077ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a15      	ldr	r2, [pc, #84]	; (80077f4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d004      	beq.n	80077ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a13      	ldr	r2, [pc, #76]	; (80077f8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d10c      	bne.n	80077c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	68ba      	ldr	r2, [r7, #8]
 80077bc:	4313      	orrs	r3, r2
 80077be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	68ba      	ldr	r2, [r7, #8]
 80077c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2201      	movs	r2, #1
 80077cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3714      	adds	r7, #20
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop
 80077e8:	40010000 	.word	0x40010000
 80077ec:	40000400 	.word	0x40000400
 80077f0:	40000800 	.word	0x40000800
 80077f4:	40000c00 	.word	0x40000c00
 80077f8:	40014000 	.word	0x40014000

080077fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b083      	sub	sp, #12
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007804:	bf00      	nop
 8007806:	370c      	adds	r7, #12
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr

08007810 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007810:	b480      	push	{r7}
 8007812:	b083      	sub	sp, #12
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007818:	bf00      	nop
 800781a:	370c      	adds	r7, #12
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr

08007824 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b082      	sub	sp, #8
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d101      	bne.n	8007836 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	e03f      	b.n	80078b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800783c:	b2db      	uxtb	r3, r3
 800783e:	2b00      	cmp	r3, #0
 8007840:	d106      	bne.n	8007850 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f7fc f974 	bl	8003b38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2224      	movs	r2, #36	; 0x24
 8007854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	68da      	ldr	r2, [r3, #12]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007866:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 f97d 	bl	8007b68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	691a      	ldr	r2, [r3, #16]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800787c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	695a      	ldr	r2, [r3, #20]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800788c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	68da      	ldr	r2, [r3, #12]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800789c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2220      	movs	r2, #32
 80078a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2220      	movs	r2, #32
 80078b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80078b4:	2300      	movs	r3, #0
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3708      	adds	r7, #8
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}

080078be <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80078be:	b580      	push	{r7, lr}
 80078c0:	b082      	sub	sp, #8
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d101      	bne.n	80078d0 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80078cc:	2301      	movs	r3, #1
 80078ce:	e047      	b.n	8007960 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d106      	bne.n	80078ea <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f7fc f927 	bl	8003b38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2224      	movs	r2, #36	; 0x24
 80078ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	68da      	ldr	r2, [r3, #12]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007900:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 f930 	bl	8007b68 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	691a      	ldr	r2, [r3, #16]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007916:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	695a      	ldr	r2, [r3, #20]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8007926:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	695a      	ldr	r2, [r3, #20]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f042 0208 	orr.w	r2, r2, #8
 8007936:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	68da      	ldr	r2, [r3, #12]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007946:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2200      	movs	r2, #0
 800794c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2220      	movs	r2, #32
 8007952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2220      	movs	r2, #32
 800795a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800795e:	2300      	movs	r3, #0
}
 8007960:	4618      	mov	r0, r3
 8007962:	3708      	adds	r7, #8
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b08a      	sub	sp, #40	; 0x28
 800796c:	af02      	add	r7, sp, #8
 800796e:	60f8      	str	r0, [r7, #12]
 8007970:	60b9      	str	r1, [r7, #8]
 8007972:	603b      	str	r3, [r7, #0]
 8007974:	4613      	mov	r3, r2
 8007976:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007978:	2300      	movs	r3, #0
 800797a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007982:	b2db      	uxtb	r3, r3
 8007984:	2b20      	cmp	r3, #32
 8007986:	d17c      	bne.n	8007a82 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d002      	beq.n	8007994 <HAL_UART_Transmit+0x2c>
 800798e:	88fb      	ldrh	r3, [r7, #6]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d101      	bne.n	8007998 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007994:	2301      	movs	r3, #1
 8007996:	e075      	b.n	8007a84 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d101      	bne.n	80079a6 <HAL_UART_Transmit+0x3e>
 80079a2:	2302      	movs	r3, #2
 80079a4:	e06e      	b.n	8007a84 <HAL_UART_Transmit+0x11c>
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2201      	movs	r2, #1
 80079aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2200      	movs	r2, #0
 80079b2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2221      	movs	r2, #33	; 0x21
 80079b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80079bc:	f7fc f99a 	bl	8003cf4 <HAL_GetTick>
 80079c0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	88fa      	ldrh	r2, [r7, #6]
 80079c6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	88fa      	ldrh	r2, [r7, #6]
 80079cc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079d6:	d108      	bne.n	80079ea <HAL_UART_Transmit+0x82>
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	691b      	ldr	r3, [r3, #16]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d104      	bne.n	80079ea <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80079e0:	2300      	movs	r3, #0
 80079e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	61bb      	str	r3, [r7, #24]
 80079e8:	e003      	b.n	80079f2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80079ee:	2300      	movs	r3, #0
 80079f0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2200      	movs	r2, #0
 80079f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80079fa:	e02a      	b.n	8007a52 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	9300      	str	r3, [sp, #0]
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	2200      	movs	r2, #0
 8007a04:	2180      	movs	r1, #128	; 0x80
 8007a06:	68f8      	ldr	r0, [r7, #12]
 8007a08:	f000 f840 	bl	8007a8c <UART_WaitOnFlagUntilTimeout>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d001      	beq.n	8007a16 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007a12:	2303      	movs	r3, #3
 8007a14:	e036      	b.n	8007a84 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d10b      	bne.n	8007a34 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007a1c:	69bb      	ldr	r3, [r7, #24]
 8007a1e:	881b      	ldrh	r3, [r3, #0]
 8007a20:	461a      	mov	r2, r3
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a2a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007a2c:	69bb      	ldr	r3, [r7, #24]
 8007a2e:	3302      	adds	r3, #2
 8007a30:	61bb      	str	r3, [r7, #24]
 8007a32:	e007      	b.n	8007a44 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	781a      	ldrb	r2, [r3, #0]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007a3e:	69fb      	ldr	r3, [r7, #28]
 8007a40:	3301      	adds	r3, #1
 8007a42:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	3b01      	subs	r3, #1
 8007a4c:	b29a      	uxth	r2, r3
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d1cf      	bne.n	80079fc <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	9300      	str	r3, [sp, #0]
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	2200      	movs	r2, #0
 8007a64:	2140      	movs	r1, #64	; 0x40
 8007a66:	68f8      	ldr	r0, [r7, #12]
 8007a68:	f000 f810 	bl	8007a8c <UART_WaitOnFlagUntilTimeout>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d001      	beq.n	8007a76 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007a72:	2303      	movs	r3, #3
 8007a74:	e006      	b.n	8007a84 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2220      	movs	r2, #32
 8007a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	e000      	b.n	8007a84 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007a82:	2302      	movs	r3, #2
  }
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3720      	adds	r7, #32
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b090      	sub	sp, #64	; 0x40
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	60b9      	str	r1, [r7, #8]
 8007a96:	603b      	str	r3, [r7, #0]
 8007a98:	4613      	mov	r3, r2
 8007a9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a9c:	e050      	b.n	8007b40 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aa4:	d04c      	beq.n	8007b40 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007aa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d007      	beq.n	8007abc <UART_WaitOnFlagUntilTimeout+0x30>
 8007aac:	f7fc f922 	bl	8003cf4 <HAL_GetTick>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	1ad3      	subs	r3, r2, r3
 8007ab6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d241      	bcs.n	8007b40 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	330c      	adds	r3, #12
 8007ac2:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac6:	e853 3f00 	ldrex	r3, [r3]
 8007aca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ace:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	330c      	adds	r3, #12
 8007ada:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007adc:	637a      	str	r2, [r7, #52]	; 0x34
 8007ade:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007ae2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ae4:	e841 2300 	strex	r3, r2, [r1]
 8007ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d1e5      	bne.n	8007abc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	3314      	adds	r3, #20
 8007af6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	e853 3f00 	ldrex	r3, [r3]
 8007afe:	613b      	str	r3, [r7, #16]
   return(result);
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	f023 0301 	bic.w	r3, r3, #1
 8007b06:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	3314      	adds	r3, #20
 8007b0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b10:	623a      	str	r2, [r7, #32]
 8007b12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b14:	69f9      	ldr	r1, [r7, #28]
 8007b16:	6a3a      	ldr	r2, [r7, #32]
 8007b18:	e841 2300 	strex	r3, r2, [r1]
 8007b1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b1e:	69bb      	ldr	r3, [r7, #24]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d1e5      	bne.n	8007af0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2220      	movs	r2, #32
 8007b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2220      	movs	r2, #32
 8007b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2200      	movs	r2, #0
 8007b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007b3c:	2303      	movs	r3, #3
 8007b3e:	e00f      	b.n	8007b60 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	4013      	ands	r3, r2
 8007b4a:	68ba      	ldr	r2, [r7, #8]
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	bf0c      	ite	eq
 8007b50:	2301      	moveq	r3, #1
 8007b52:	2300      	movne	r3, #0
 8007b54:	b2db      	uxtb	r3, r3
 8007b56:	461a      	mov	r2, r3
 8007b58:	79fb      	ldrb	r3, [r7, #7]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d09f      	beq.n	8007a9e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007b5e:	2300      	movs	r3, #0
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3740      	adds	r7, #64	; 0x40
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b6c:	b0c0      	sub	sp, #256	; 0x100
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	691b      	ldr	r3, [r3, #16]
 8007b7c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b84:	68d9      	ldr	r1, [r3, #12]
 8007b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	ea40 0301 	orr.w	r3, r0, r1
 8007b90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b96:	689a      	ldr	r2, [r3, #8]
 8007b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b9c:	691b      	ldr	r3, [r3, #16]
 8007b9e:	431a      	orrs	r2, r3
 8007ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ba4:	695b      	ldr	r3, [r3, #20]
 8007ba6:	431a      	orrs	r2, r3
 8007ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bac:	69db      	ldr	r3, [r3, #28]
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007bc0:	f021 010c 	bic.w	r1, r1, #12
 8007bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007bce:	430b      	orrs	r3, r1
 8007bd0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	695b      	ldr	r3, [r3, #20]
 8007bda:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007be2:	6999      	ldr	r1, [r3, #24]
 8007be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	ea40 0301 	orr.w	r3, r0, r1
 8007bee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bf4:	681a      	ldr	r2, [r3, #0]
 8007bf6:	4b8f      	ldr	r3, [pc, #572]	; (8007e34 <UART_SetConfig+0x2cc>)
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d005      	beq.n	8007c08 <UART_SetConfig+0xa0>
 8007bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	4b8d      	ldr	r3, [pc, #564]	; (8007e38 <UART_SetConfig+0x2d0>)
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d104      	bne.n	8007c12 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007c08:	f7fe fc5e 	bl	80064c8 <HAL_RCC_GetPCLK2Freq>
 8007c0c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007c10:	e003      	b.n	8007c1a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007c12:	f7fe fc45 	bl	80064a0 <HAL_RCC_GetPCLK1Freq>
 8007c16:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c1e:	69db      	ldr	r3, [r3, #28]
 8007c20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c24:	f040 810c 	bne.w	8007e40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007c28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007c32:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007c36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007c3a:	4622      	mov	r2, r4
 8007c3c:	462b      	mov	r3, r5
 8007c3e:	1891      	adds	r1, r2, r2
 8007c40:	65b9      	str	r1, [r7, #88]	; 0x58
 8007c42:	415b      	adcs	r3, r3
 8007c44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007c4a:	4621      	mov	r1, r4
 8007c4c:	eb12 0801 	adds.w	r8, r2, r1
 8007c50:	4629      	mov	r1, r5
 8007c52:	eb43 0901 	adc.w	r9, r3, r1
 8007c56:	f04f 0200 	mov.w	r2, #0
 8007c5a:	f04f 0300 	mov.w	r3, #0
 8007c5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007c62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007c66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007c6a:	4690      	mov	r8, r2
 8007c6c:	4699      	mov	r9, r3
 8007c6e:	4623      	mov	r3, r4
 8007c70:	eb18 0303 	adds.w	r3, r8, r3
 8007c74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007c78:	462b      	mov	r3, r5
 8007c7a:	eb49 0303 	adc.w	r3, r9, r3
 8007c7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007c8e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007c92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007c96:	460b      	mov	r3, r1
 8007c98:	18db      	adds	r3, r3, r3
 8007c9a:	653b      	str	r3, [r7, #80]	; 0x50
 8007c9c:	4613      	mov	r3, r2
 8007c9e:	eb42 0303 	adc.w	r3, r2, r3
 8007ca2:	657b      	str	r3, [r7, #84]	; 0x54
 8007ca4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007ca8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007cac:	f7f8 ffa4 	bl	8000bf8 <__aeabi_uldivmod>
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	4b61      	ldr	r3, [pc, #388]	; (8007e3c <UART_SetConfig+0x2d4>)
 8007cb6:	fba3 2302 	umull	r2, r3, r3, r2
 8007cba:	095b      	lsrs	r3, r3, #5
 8007cbc:	011c      	lsls	r4, r3, #4
 8007cbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007cc8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007ccc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007cd0:	4642      	mov	r2, r8
 8007cd2:	464b      	mov	r3, r9
 8007cd4:	1891      	adds	r1, r2, r2
 8007cd6:	64b9      	str	r1, [r7, #72]	; 0x48
 8007cd8:	415b      	adcs	r3, r3
 8007cda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007cdc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007ce0:	4641      	mov	r1, r8
 8007ce2:	eb12 0a01 	adds.w	sl, r2, r1
 8007ce6:	4649      	mov	r1, r9
 8007ce8:	eb43 0b01 	adc.w	fp, r3, r1
 8007cec:	f04f 0200 	mov.w	r2, #0
 8007cf0:	f04f 0300 	mov.w	r3, #0
 8007cf4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007cf8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007cfc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d00:	4692      	mov	sl, r2
 8007d02:	469b      	mov	fp, r3
 8007d04:	4643      	mov	r3, r8
 8007d06:	eb1a 0303 	adds.w	r3, sl, r3
 8007d0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007d0e:	464b      	mov	r3, r9
 8007d10:	eb4b 0303 	adc.w	r3, fp, r3
 8007d14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007d24:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007d28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	18db      	adds	r3, r3, r3
 8007d30:	643b      	str	r3, [r7, #64]	; 0x40
 8007d32:	4613      	mov	r3, r2
 8007d34:	eb42 0303 	adc.w	r3, r2, r3
 8007d38:	647b      	str	r3, [r7, #68]	; 0x44
 8007d3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007d3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007d42:	f7f8 ff59 	bl	8000bf8 <__aeabi_uldivmod>
 8007d46:	4602      	mov	r2, r0
 8007d48:	460b      	mov	r3, r1
 8007d4a:	4611      	mov	r1, r2
 8007d4c:	4b3b      	ldr	r3, [pc, #236]	; (8007e3c <UART_SetConfig+0x2d4>)
 8007d4e:	fba3 2301 	umull	r2, r3, r3, r1
 8007d52:	095b      	lsrs	r3, r3, #5
 8007d54:	2264      	movs	r2, #100	; 0x64
 8007d56:	fb02 f303 	mul.w	r3, r2, r3
 8007d5a:	1acb      	subs	r3, r1, r3
 8007d5c:	00db      	lsls	r3, r3, #3
 8007d5e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007d62:	4b36      	ldr	r3, [pc, #216]	; (8007e3c <UART_SetConfig+0x2d4>)
 8007d64:	fba3 2302 	umull	r2, r3, r3, r2
 8007d68:	095b      	lsrs	r3, r3, #5
 8007d6a:	005b      	lsls	r3, r3, #1
 8007d6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007d70:	441c      	add	r4, r3
 8007d72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d76:	2200      	movs	r2, #0
 8007d78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d7c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007d80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007d84:	4642      	mov	r2, r8
 8007d86:	464b      	mov	r3, r9
 8007d88:	1891      	adds	r1, r2, r2
 8007d8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8007d8c:	415b      	adcs	r3, r3
 8007d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007d94:	4641      	mov	r1, r8
 8007d96:	1851      	adds	r1, r2, r1
 8007d98:	6339      	str	r1, [r7, #48]	; 0x30
 8007d9a:	4649      	mov	r1, r9
 8007d9c:	414b      	adcs	r3, r1
 8007d9e:	637b      	str	r3, [r7, #52]	; 0x34
 8007da0:	f04f 0200 	mov.w	r2, #0
 8007da4:	f04f 0300 	mov.w	r3, #0
 8007da8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007dac:	4659      	mov	r1, fp
 8007dae:	00cb      	lsls	r3, r1, #3
 8007db0:	4651      	mov	r1, sl
 8007db2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007db6:	4651      	mov	r1, sl
 8007db8:	00ca      	lsls	r2, r1, #3
 8007dba:	4610      	mov	r0, r2
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	4642      	mov	r2, r8
 8007dc2:	189b      	adds	r3, r3, r2
 8007dc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007dc8:	464b      	mov	r3, r9
 8007dca:	460a      	mov	r2, r1
 8007dcc:	eb42 0303 	adc.w	r3, r2, r3
 8007dd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007de0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007de4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007de8:	460b      	mov	r3, r1
 8007dea:	18db      	adds	r3, r3, r3
 8007dec:	62bb      	str	r3, [r7, #40]	; 0x28
 8007dee:	4613      	mov	r3, r2
 8007df0:	eb42 0303 	adc.w	r3, r2, r3
 8007df4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007df6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007dfa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007dfe:	f7f8 fefb 	bl	8000bf8 <__aeabi_uldivmod>
 8007e02:	4602      	mov	r2, r0
 8007e04:	460b      	mov	r3, r1
 8007e06:	4b0d      	ldr	r3, [pc, #52]	; (8007e3c <UART_SetConfig+0x2d4>)
 8007e08:	fba3 1302 	umull	r1, r3, r3, r2
 8007e0c:	095b      	lsrs	r3, r3, #5
 8007e0e:	2164      	movs	r1, #100	; 0x64
 8007e10:	fb01 f303 	mul.w	r3, r1, r3
 8007e14:	1ad3      	subs	r3, r2, r3
 8007e16:	00db      	lsls	r3, r3, #3
 8007e18:	3332      	adds	r3, #50	; 0x32
 8007e1a:	4a08      	ldr	r2, [pc, #32]	; (8007e3c <UART_SetConfig+0x2d4>)
 8007e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8007e20:	095b      	lsrs	r3, r3, #5
 8007e22:	f003 0207 	and.w	r2, r3, #7
 8007e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4422      	add	r2, r4
 8007e2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007e30:	e106      	b.n	8008040 <UART_SetConfig+0x4d8>
 8007e32:	bf00      	nop
 8007e34:	40011000 	.word	0x40011000
 8007e38:	40011400 	.word	0x40011400
 8007e3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007e40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e44:	2200      	movs	r2, #0
 8007e46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007e4a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007e4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007e52:	4642      	mov	r2, r8
 8007e54:	464b      	mov	r3, r9
 8007e56:	1891      	adds	r1, r2, r2
 8007e58:	6239      	str	r1, [r7, #32]
 8007e5a:	415b      	adcs	r3, r3
 8007e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8007e5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007e62:	4641      	mov	r1, r8
 8007e64:	1854      	adds	r4, r2, r1
 8007e66:	4649      	mov	r1, r9
 8007e68:	eb43 0501 	adc.w	r5, r3, r1
 8007e6c:	f04f 0200 	mov.w	r2, #0
 8007e70:	f04f 0300 	mov.w	r3, #0
 8007e74:	00eb      	lsls	r3, r5, #3
 8007e76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007e7a:	00e2      	lsls	r2, r4, #3
 8007e7c:	4614      	mov	r4, r2
 8007e7e:	461d      	mov	r5, r3
 8007e80:	4643      	mov	r3, r8
 8007e82:	18e3      	adds	r3, r4, r3
 8007e84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007e88:	464b      	mov	r3, r9
 8007e8a:	eb45 0303 	adc.w	r3, r5, r3
 8007e8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007e9e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007ea2:	f04f 0200 	mov.w	r2, #0
 8007ea6:	f04f 0300 	mov.w	r3, #0
 8007eaa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007eae:	4629      	mov	r1, r5
 8007eb0:	008b      	lsls	r3, r1, #2
 8007eb2:	4621      	mov	r1, r4
 8007eb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007eb8:	4621      	mov	r1, r4
 8007eba:	008a      	lsls	r2, r1, #2
 8007ebc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007ec0:	f7f8 fe9a 	bl	8000bf8 <__aeabi_uldivmod>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	460b      	mov	r3, r1
 8007ec8:	4b60      	ldr	r3, [pc, #384]	; (800804c <UART_SetConfig+0x4e4>)
 8007eca:	fba3 2302 	umull	r2, r3, r3, r2
 8007ece:	095b      	lsrs	r3, r3, #5
 8007ed0:	011c      	lsls	r4, r3, #4
 8007ed2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007edc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007ee0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007ee4:	4642      	mov	r2, r8
 8007ee6:	464b      	mov	r3, r9
 8007ee8:	1891      	adds	r1, r2, r2
 8007eea:	61b9      	str	r1, [r7, #24]
 8007eec:	415b      	adcs	r3, r3
 8007eee:	61fb      	str	r3, [r7, #28]
 8007ef0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ef4:	4641      	mov	r1, r8
 8007ef6:	1851      	adds	r1, r2, r1
 8007ef8:	6139      	str	r1, [r7, #16]
 8007efa:	4649      	mov	r1, r9
 8007efc:	414b      	adcs	r3, r1
 8007efe:	617b      	str	r3, [r7, #20]
 8007f00:	f04f 0200 	mov.w	r2, #0
 8007f04:	f04f 0300 	mov.w	r3, #0
 8007f08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007f0c:	4659      	mov	r1, fp
 8007f0e:	00cb      	lsls	r3, r1, #3
 8007f10:	4651      	mov	r1, sl
 8007f12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f16:	4651      	mov	r1, sl
 8007f18:	00ca      	lsls	r2, r1, #3
 8007f1a:	4610      	mov	r0, r2
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	4603      	mov	r3, r0
 8007f20:	4642      	mov	r2, r8
 8007f22:	189b      	adds	r3, r3, r2
 8007f24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007f28:	464b      	mov	r3, r9
 8007f2a:	460a      	mov	r2, r1
 8007f2c:	eb42 0303 	adc.w	r3, r2, r3
 8007f30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8007f3e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007f40:	f04f 0200 	mov.w	r2, #0
 8007f44:	f04f 0300 	mov.w	r3, #0
 8007f48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007f4c:	4649      	mov	r1, r9
 8007f4e:	008b      	lsls	r3, r1, #2
 8007f50:	4641      	mov	r1, r8
 8007f52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f56:	4641      	mov	r1, r8
 8007f58:	008a      	lsls	r2, r1, #2
 8007f5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007f5e:	f7f8 fe4b 	bl	8000bf8 <__aeabi_uldivmod>
 8007f62:	4602      	mov	r2, r0
 8007f64:	460b      	mov	r3, r1
 8007f66:	4611      	mov	r1, r2
 8007f68:	4b38      	ldr	r3, [pc, #224]	; (800804c <UART_SetConfig+0x4e4>)
 8007f6a:	fba3 2301 	umull	r2, r3, r3, r1
 8007f6e:	095b      	lsrs	r3, r3, #5
 8007f70:	2264      	movs	r2, #100	; 0x64
 8007f72:	fb02 f303 	mul.w	r3, r2, r3
 8007f76:	1acb      	subs	r3, r1, r3
 8007f78:	011b      	lsls	r3, r3, #4
 8007f7a:	3332      	adds	r3, #50	; 0x32
 8007f7c:	4a33      	ldr	r2, [pc, #204]	; (800804c <UART_SetConfig+0x4e4>)
 8007f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8007f82:	095b      	lsrs	r3, r3, #5
 8007f84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f88:	441c      	add	r4, r3
 8007f8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f8e:	2200      	movs	r2, #0
 8007f90:	673b      	str	r3, [r7, #112]	; 0x70
 8007f92:	677a      	str	r2, [r7, #116]	; 0x74
 8007f94:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007f98:	4642      	mov	r2, r8
 8007f9a:	464b      	mov	r3, r9
 8007f9c:	1891      	adds	r1, r2, r2
 8007f9e:	60b9      	str	r1, [r7, #8]
 8007fa0:	415b      	adcs	r3, r3
 8007fa2:	60fb      	str	r3, [r7, #12]
 8007fa4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007fa8:	4641      	mov	r1, r8
 8007faa:	1851      	adds	r1, r2, r1
 8007fac:	6039      	str	r1, [r7, #0]
 8007fae:	4649      	mov	r1, r9
 8007fb0:	414b      	adcs	r3, r1
 8007fb2:	607b      	str	r3, [r7, #4]
 8007fb4:	f04f 0200 	mov.w	r2, #0
 8007fb8:	f04f 0300 	mov.w	r3, #0
 8007fbc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007fc0:	4659      	mov	r1, fp
 8007fc2:	00cb      	lsls	r3, r1, #3
 8007fc4:	4651      	mov	r1, sl
 8007fc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007fca:	4651      	mov	r1, sl
 8007fcc:	00ca      	lsls	r2, r1, #3
 8007fce:	4610      	mov	r0, r2
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	4642      	mov	r2, r8
 8007fd6:	189b      	adds	r3, r3, r2
 8007fd8:	66bb      	str	r3, [r7, #104]	; 0x68
 8007fda:	464b      	mov	r3, r9
 8007fdc:	460a      	mov	r2, r1
 8007fde:	eb42 0303 	adc.w	r3, r2, r3
 8007fe2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	663b      	str	r3, [r7, #96]	; 0x60
 8007fee:	667a      	str	r2, [r7, #100]	; 0x64
 8007ff0:	f04f 0200 	mov.w	r2, #0
 8007ff4:	f04f 0300 	mov.w	r3, #0
 8007ff8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007ffc:	4649      	mov	r1, r9
 8007ffe:	008b      	lsls	r3, r1, #2
 8008000:	4641      	mov	r1, r8
 8008002:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008006:	4641      	mov	r1, r8
 8008008:	008a      	lsls	r2, r1, #2
 800800a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800800e:	f7f8 fdf3 	bl	8000bf8 <__aeabi_uldivmod>
 8008012:	4602      	mov	r2, r0
 8008014:	460b      	mov	r3, r1
 8008016:	4b0d      	ldr	r3, [pc, #52]	; (800804c <UART_SetConfig+0x4e4>)
 8008018:	fba3 1302 	umull	r1, r3, r3, r2
 800801c:	095b      	lsrs	r3, r3, #5
 800801e:	2164      	movs	r1, #100	; 0x64
 8008020:	fb01 f303 	mul.w	r3, r1, r3
 8008024:	1ad3      	subs	r3, r2, r3
 8008026:	011b      	lsls	r3, r3, #4
 8008028:	3332      	adds	r3, #50	; 0x32
 800802a:	4a08      	ldr	r2, [pc, #32]	; (800804c <UART_SetConfig+0x4e4>)
 800802c:	fba2 2303 	umull	r2, r3, r2, r3
 8008030:	095b      	lsrs	r3, r3, #5
 8008032:	f003 020f 	and.w	r2, r3, #15
 8008036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4422      	add	r2, r4
 800803e:	609a      	str	r2, [r3, #8]
}
 8008040:	bf00      	nop
 8008042:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008046:	46bd      	mov	sp, r7
 8008048:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800804c:	51eb851f 	.word	0x51eb851f

08008050 <__NVIC_SetPriority>:
{
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
 8008056:	4603      	mov	r3, r0
 8008058:	6039      	str	r1, [r7, #0]
 800805a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800805c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008060:	2b00      	cmp	r3, #0
 8008062:	db0a      	blt.n	800807a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	b2da      	uxtb	r2, r3
 8008068:	490c      	ldr	r1, [pc, #48]	; (800809c <__NVIC_SetPriority+0x4c>)
 800806a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800806e:	0112      	lsls	r2, r2, #4
 8008070:	b2d2      	uxtb	r2, r2
 8008072:	440b      	add	r3, r1
 8008074:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008078:	e00a      	b.n	8008090 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	b2da      	uxtb	r2, r3
 800807e:	4908      	ldr	r1, [pc, #32]	; (80080a0 <__NVIC_SetPriority+0x50>)
 8008080:	79fb      	ldrb	r3, [r7, #7]
 8008082:	f003 030f 	and.w	r3, r3, #15
 8008086:	3b04      	subs	r3, #4
 8008088:	0112      	lsls	r2, r2, #4
 800808a:	b2d2      	uxtb	r2, r2
 800808c:	440b      	add	r3, r1
 800808e:	761a      	strb	r2, [r3, #24]
}
 8008090:	bf00      	nop
 8008092:	370c      	adds	r7, #12
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr
 800809c:	e000e100 	.word	0xe000e100
 80080a0:	e000ed00 	.word	0xe000ed00

080080a4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80080a4:	b580      	push	{r7, lr}
 80080a6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80080a8:	4b05      	ldr	r3, [pc, #20]	; (80080c0 <SysTick_Handler+0x1c>)
 80080aa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80080ac:	f001 ffbc 	bl	800a028 <xTaskGetSchedulerState>
 80080b0:	4603      	mov	r3, r0
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d001      	beq.n	80080ba <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80080b6:	f002 fdef 	bl	800ac98 <xPortSysTickHandler>
  }
}
 80080ba:	bf00      	nop
 80080bc:	bd80      	pop	{r7, pc}
 80080be:	bf00      	nop
 80080c0:	e000e010 	.word	0xe000e010

080080c4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80080c4:	b580      	push	{r7, lr}
 80080c6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80080c8:	2100      	movs	r1, #0
 80080ca:	f06f 0004 	mvn.w	r0, #4
 80080ce:	f7ff ffbf 	bl	8008050 <__NVIC_SetPriority>
#endif
}
 80080d2:	bf00      	nop
 80080d4:	bd80      	pop	{r7, pc}
	...

080080d8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80080d8:	b480      	push	{r7}
 80080da:	b083      	sub	sp, #12
 80080dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080de:	f3ef 8305 	mrs	r3, IPSR
 80080e2:	603b      	str	r3, [r7, #0]
  return(result);
 80080e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d003      	beq.n	80080f2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80080ea:	f06f 0305 	mvn.w	r3, #5
 80080ee:	607b      	str	r3, [r7, #4]
 80080f0:	e00c      	b.n	800810c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80080f2:	4b0a      	ldr	r3, [pc, #40]	; (800811c <osKernelInitialize+0x44>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d105      	bne.n	8008106 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80080fa:	4b08      	ldr	r3, [pc, #32]	; (800811c <osKernelInitialize+0x44>)
 80080fc:	2201      	movs	r2, #1
 80080fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008100:	2300      	movs	r3, #0
 8008102:	607b      	str	r3, [r7, #4]
 8008104:	e002      	b.n	800810c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008106:	f04f 33ff 	mov.w	r3, #4294967295
 800810a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800810c:	687b      	ldr	r3, [r7, #4]
}
 800810e:	4618      	mov	r0, r3
 8008110:	370c      	adds	r7, #12
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr
 800811a:	bf00      	nop
 800811c:	20000770 	.word	0x20000770

08008120 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008120:	b580      	push	{r7, lr}
 8008122:	b082      	sub	sp, #8
 8008124:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008126:	f3ef 8305 	mrs	r3, IPSR
 800812a:	603b      	str	r3, [r7, #0]
  return(result);
 800812c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800812e:	2b00      	cmp	r3, #0
 8008130:	d003      	beq.n	800813a <osKernelStart+0x1a>
    stat = osErrorISR;
 8008132:	f06f 0305 	mvn.w	r3, #5
 8008136:	607b      	str	r3, [r7, #4]
 8008138:	e010      	b.n	800815c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800813a:	4b0b      	ldr	r3, [pc, #44]	; (8008168 <osKernelStart+0x48>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	2b01      	cmp	r3, #1
 8008140:	d109      	bne.n	8008156 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008142:	f7ff ffbf 	bl	80080c4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008146:	4b08      	ldr	r3, [pc, #32]	; (8008168 <osKernelStart+0x48>)
 8008148:	2202      	movs	r2, #2
 800814a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      //vTaskStartScheduler();
      vSchedulerStart();
 800814c:	f7fb f898 	bl	8003280 <vSchedulerStart>
      stat = osOK;
 8008150:	2300      	movs	r3, #0
 8008152:	607b      	str	r3, [r7, #4]
 8008154:	e002      	b.n	800815c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008156:	f04f 33ff 	mov.w	r3, #4294967295
 800815a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800815c:	687b      	ldr	r3, [r7, #4]
}
 800815e:	4618      	mov	r0, r3
 8008160:	3708      	adds	r7, #8
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
 8008166:	bf00      	nop
 8008168:	20000770 	.word	0x20000770

0800816c <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800816c:	b580      	push	{r7, lr}
 800816e:	b088      	sub	sp, #32
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8008174:	2300      	movs	r3, #0
 8008176:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008178:	f3ef 8305 	mrs	r3, IPSR
 800817c:	60bb      	str	r3, [r7, #8]
  return(result);
 800817e:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8008180:	2b00      	cmp	r3, #0
 8008182:	d174      	bne.n	800826e <osMutexNew+0x102>
    if (attr != NULL) {
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d003      	beq.n	8008192 <osMutexNew+0x26>
      type = attr->attr_bits;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	61bb      	str	r3, [r7, #24]
 8008190:	e001      	b.n	8008196 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8008192:	2300      	movs	r3, #0
 8008194:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8008196:	69bb      	ldr	r3, [r7, #24]
 8008198:	f003 0301 	and.w	r3, r3, #1
 800819c:	2b00      	cmp	r3, #0
 800819e:	d002      	beq.n	80081a6 <osMutexNew+0x3a>
      rmtx = 1U;
 80081a0:	2301      	movs	r3, #1
 80081a2:	617b      	str	r3, [r7, #20]
 80081a4:	e001      	b.n	80081aa <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80081a6:	2300      	movs	r3, #0
 80081a8:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80081aa:	69bb      	ldr	r3, [r7, #24]
 80081ac:	f003 0308 	and.w	r3, r3, #8
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d15c      	bne.n	800826e <osMutexNew+0x102>
      mem = -1;
 80081b4:	f04f 33ff 	mov.w	r3, #4294967295
 80081b8:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d015      	beq.n	80081ec <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d006      	beq.n	80081d6 <osMutexNew+0x6a>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	68db      	ldr	r3, [r3, #12]
 80081cc:	2b4f      	cmp	r3, #79	; 0x4f
 80081ce:	d902      	bls.n	80081d6 <osMutexNew+0x6a>
          mem = 1;
 80081d0:	2301      	movs	r3, #1
 80081d2:	613b      	str	r3, [r7, #16]
 80081d4:	e00c      	b.n	80081f0 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	689b      	ldr	r3, [r3, #8]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d108      	bne.n	80081f0 <osMutexNew+0x84>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	68db      	ldr	r3, [r3, #12]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d104      	bne.n	80081f0 <osMutexNew+0x84>
            mem = 0;
 80081e6:	2300      	movs	r3, #0
 80081e8:	613b      	str	r3, [r7, #16]
 80081ea:	e001      	b.n	80081f0 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80081ec:	2300      	movs	r3, #0
 80081ee:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	2b01      	cmp	r3, #1
 80081f4:	d112      	bne.n	800821c <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d007      	beq.n	800820c <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	4619      	mov	r1, r3
 8008202:	2004      	movs	r0, #4
 8008204:	f000 fa8f 	bl	8008726 <xQueueCreateMutexStatic>
 8008208:	61f8      	str	r0, [r7, #28]
 800820a:	e016      	b.n	800823a <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	4619      	mov	r1, r3
 8008212:	2001      	movs	r0, #1
 8008214:	f000 fa87 	bl	8008726 <xQueueCreateMutexStatic>
 8008218:	61f8      	str	r0, [r7, #28]
 800821a:	e00e      	b.n	800823a <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d10b      	bne.n	800823a <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d004      	beq.n	8008232 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8008228:	2004      	movs	r0, #4
 800822a:	f000 fa64 	bl	80086f6 <xQueueCreateMutex>
 800822e:	61f8      	str	r0, [r7, #28]
 8008230:	e003      	b.n	800823a <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8008232:	2001      	movs	r0, #1
 8008234:	f000 fa5f 	bl	80086f6 <xQueueCreateMutex>
 8008238:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800823a:	69fb      	ldr	r3, [r7, #28]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d00c      	beq.n	800825a <osMutexNew+0xee>
        if (attr != NULL) {
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d003      	beq.n	800824e <osMutexNew+0xe2>
          name = attr->name;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	60fb      	str	r3, [r7, #12]
 800824c:	e001      	b.n	8008252 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800824e:	2300      	movs	r3, #0
 8008250:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8008252:	68f9      	ldr	r1, [r7, #12]
 8008254:	69f8      	ldr	r0, [r7, #28]
 8008256:	f000 fe0b 	bl	8008e70 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800825a:	69fb      	ldr	r3, [r7, #28]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d006      	beq.n	800826e <osMutexNew+0x102>
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d003      	beq.n	800826e <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008266:	69fb      	ldr	r3, [r7, #28]
 8008268:	f043 0301 	orr.w	r3, r3, #1
 800826c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800826e:	69fb      	ldr	r3, [r7, #28]
}
 8008270:	4618      	mov	r0, r3
 8008272:	3720      	adds	r7, #32
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008278:	b480      	push	{r7}
 800827a:	b085      	sub	sp, #20
 800827c:	af00      	add	r7, sp, #0
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	60b9      	str	r1, [r7, #8]
 8008282:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	4a07      	ldr	r2, [pc, #28]	; (80082a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8008288:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	4a06      	ldr	r2, [pc, #24]	; (80082a8 <vApplicationGetIdleTaskMemory+0x30>)
 800828e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2280      	movs	r2, #128	; 0x80
 8008294:	601a      	str	r2, [r3, #0]
}
 8008296:	bf00      	nop
 8008298:	3714      	adds	r7, #20
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr
 80082a2:	bf00      	nop
 80082a4:	20000774 	.word	0x20000774
 80082a8:	20000820 	.word	0x20000820

080082ac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80082ac:	b480      	push	{r7}
 80082ae:	b085      	sub	sp, #20
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	60b9      	str	r1, [r7, #8]
 80082b6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	4a07      	ldr	r2, [pc, #28]	; (80082d8 <vApplicationGetTimerTaskMemory+0x2c>)
 80082bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	4a06      	ldr	r2, [pc, #24]	; (80082dc <vApplicationGetTimerTaskMemory+0x30>)
 80082c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80082ca:	601a      	str	r2, [r3, #0]
}
 80082cc:	bf00      	nop
 80082ce:	3714      	adds	r7, #20
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr
 80082d8:	20000a20 	.word	0x20000a20
 80082dc:	20000acc 	.word	0x20000acc

080082e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80082e0:	b480      	push	{r7}
 80082e2:	b083      	sub	sp, #12
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f103 0208 	add.w	r2, r3, #8
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f04f 32ff 	mov.w	r2, #4294967295
 80082f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f103 0208 	add.w	r2, r3, #8
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f103 0208 	add.w	r2, r3, #8
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2200      	movs	r2, #0
 8008312:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008314:	bf00      	nop
 8008316:	370c      	adds	r7, #12
 8008318:	46bd      	mov	sp, r7
 800831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831e:	4770      	bx	lr

08008320 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008320:	b480      	push	{r7}
 8008322:	b083      	sub	sp, #12
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2200      	movs	r2, #0
 800832c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800832e:	bf00      	nop
 8008330:	370c      	adds	r7, #12
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr

0800833a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800833a:	b480      	push	{r7}
 800833c:	b085      	sub	sp, #20
 800833e:	af00      	add	r7, sp, #0
 8008340:	6078      	str	r0, [r7, #4]
 8008342:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	68fa      	ldr	r2, [r7, #12]
 800834e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	689a      	ldr	r2, [r3, #8]
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	689b      	ldr	r3, [r3, #8]
 800835c:	683a      	ldr	r2, [r7, #0]
 800835e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	683a      	ldr	r2, [r7, #0]
 8008364:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	1c5a      	adds	r2, r3, #1
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	601a      	str	r2, [r3, #0]
}
 8008376:	bf00      	nop
 8008378:	3714      	adds	r7, #20
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr

08008382 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008382:	b480      	push	{r7}
 8008384:	b085      	sub	sp, #20
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]
 800838a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008398:	d103      	bne.n	80083a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	691b      	ldr	r3, [r3, #16]
 800839e:	60fb      	str	r3, [r7, #12]
 80083a0:	e00c      	b.n	80083bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	3308      	adds	r3, #8
 80083a6:	60fb      	str	r3, [r7, #12]
 80083a8:	e002      	b.n	80083b0 <vListInsert+0x2e>
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	60fb      	str	r3, [r7, #12]
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	68ba      	ldr	r2, [r7, #8]
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d2f6      	bcs.n	80083aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	685a      	ldr	r2, [r3, #4]
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	683a      	ldr	r2, [r7, #0]
 80083ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	68fa      	ldr	r2, [r7, #12]
 80083d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	683a      	ldr	r2, [r7, #0]
 80083d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	687a      	ldr	r2, [r7, #4]
 80083dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	1c5a      	adds	r2, r3, #1
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	601a      	str	r2, [r3, #0]
}
 80083e8:	bf00      	nop
 80083ea:	3714      	adds	r7, #20
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr

080083f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80083f4:	b480      	push	{r7}
 80083f6:	b085      	sub	sp, #20
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	691b      	ldr	r3, [r3, #16]
 8008400:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	6892      	ldr	r2, [r2, #8]
 800840a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	687a      	ldr	r2, [r7, #4]
 8008412:	6852      	ldr	r2, [r2, #4]
 8008414:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	429a      	cmp	r2, r3
 800841e:	d103      	bne.n	8008428 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	689a      	ldr	r2, [r3, #8]
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2200      	movs	r2, #0
 800842c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	1e5a      	subs	r2, r3, #1
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
}
 800843c:	4618      	mov	r0, r3
 800843e:	3714      	adds	r7, #20
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b084      	sub	sp, #16
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d10a      	bne.n	8008472 <xQueueGenericReset+0x2a>
	__asm volatile
 800845c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008460:	f383 8811 	msr	BASEPRI, r3
 8008464:	f3bf 8f6f 	isb	sy
 8008468:	f3bf 8f4f 	dsb	sy
 800846c:	60bb      	str	r3, [r7, #8]
}
 800846e:	bf00      	nop
 8008470:	e7fe      	b.n	8008470 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008472:	f002 fb7f 	bl	800ab74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800847e:	68f9      	ldr	r1, [r7, #12]
 8008480:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008482:	fb01 f303 	mul.w	r3, r1, r3
 8008486:	441a      	add	r2, r3
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2200      	movs	r2, #0
 8008490:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084a2:	3b01      	subs	r3, #1
 80084a4:	68f9      	ldr	r1, [r7, #12]
 80084a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80084a8:	fb01 f303 	mul.w	r3, r1, r3
 80084ac:	441a      	add	r2, r3
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	22ff      	movs	r2, #255	; 0xff
 80084b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	22ff      	movs	r2, #255	; 0xff
 80084be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d114      	bne.n	80084f2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	691b      	ldr	r3, [r3, #16]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d01a      	beq.n	8008506 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	3310      	adds	r3, #16
 80084d4:	4618      	mov	r0, r3
 80084d6:	f001 fb81 	bl	8009bdc <xTaskRemoveFromEventList>
 80084da:	4603      	mov	r3, r0
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d012      	beq.n	8008506 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80084e0:	4b0c      	ldr	r3, [pc, #48]	; (8008514 <xQueueGenericReset+0xcc>)
 80084e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084e6:	601a      	str	r2, [r3, #0]
 80084e8:	f3bf 8f4f 	dsb	sy
 80084ec:	f3bf 8f6f 	isb	sy
 80084f0:	e009      	b.n	8008506 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	3310      	adds	r3, #16
 80084f6:	4618      	mov	r0, r3
 80084f8:	f7ff fef2 	bl	80082e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	3324      	adds	r3, #36	; 0x24
 8008500:	4618      	mov	r0, r3
 8008502:	f7ff feed 	bl	80082e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008506:	f002 fb65 	bl	800abd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800850a:	2301      	movs	r3, #1
}
 800850c:	4618      	mov	r0, r3
 800850e:	3710      	adds	r7, #16
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}
 8008514:	e000ed04 	.word	0xe000ed04

08008518 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008518:	b580      	push	{r7, lr}
 800851a:	b08e      	sub	sp, #56	; 0x38
 800851c:	af02      	add	r7, sp, #8
 800851e:	60f8      	str	r0, [r7, #12]
 8008520:	60b9      	str	r1, [r7, #8]
 8008522:	607a      	str	r2, [r7, #4]
 8008524:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d10a      	bne.n	8008542 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800852c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008530:	f383 8811 	msr	BASEPRI, r3
 8008534:	f3bf 8f6f 	isb	sy
 8008538:	f3bf 8f4f 	dsb	sy
 800853c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800853e:	bf00      	nop
 8008540:	e7fe      	b.n	8008540 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d10a      	bne.n	800855e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800854c:	f383 8811 	msr	BASEPRI, r3
 8008550:	f3bf 8f6f 	isb	sy
 8008554:	f3bf 8f4f 	dsb	sy
 8008558:	627b      	str	r3, [r7, #36]	; 0x24
}
 800855a:	bf00      	nop
 800855c:	e7fe      	b.n	800855c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d002      	beq.n	800856a <xQueueGenericCreateStatic+0x52>
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d001      	beq.n	800856e <xQueueGenericCreateStatic+0x56>
 800856a:	2301      	movs	r3, #1
 800856c:	e000      	b.n	8008570 <xQueueGenericCreateStatic+0x58>
 800856e:	2300      	movs	r3, #0
 8008570:	2b00      	cmp	r3, #0
 8008572:	d10a      	bne.n	800858a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008578:	f383 8811 	msr	BASEPRI, r3
 800857c:	f3bf 8f6f 	isb	sy
 8008580:	f3bf 8f4f 	dsb	sy
 8008584:	623b      	str	r3, [r7, #32]
}
 8008586:	bf00      	nop
 8008588:	e7fe      	b.n	8008588 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d102      	bne.n	8008596 <xQueueGenericCreateStatic+0x7e>
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d101      	bne.n	800859a <xQueueGenericCreateStatic+0x82>
 8008596:	2301      	movs	r3, #1
 8008598:	e000      	b.n	800859c <xQueueGenericCreateStatic+0x84>
 800859a:	2300      	movs	r3, #0
 800859c:	2b00      	cmp	r3, #0
 800859e:	d10a      	bne.n	80085b6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80085a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a4:	f383 8811 	msr	BASEPRI, r3
 80085a8:	f3bf 8f6f 	isb	sy
 80085ac:	f3bf 8f4f 	dsb	sy
 80085b0:	61fb      	str	r3, [r7, #28]
}
 80085b2:	bf00      	nop
 80085b4:	e7fe      	b.n	80085b4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80085b6:	2350      	movs	r3, #80	; 0x50
 80085b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	2b50      	cmp	r3, #80	; 0x50
 80085be:	d00a      	beq.n	80085d6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80085c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c4:	f383 8811 	msr	BASEPRI, r3
 80085c8:	f3bf 8f6f 	isb	sy
 80085cc:	f3bf 8f4f 	dsb	sy
 80085d0:	61bb      	str	r3, [r7, #24]
}
 80085d2:	bf00      	nop
 80085d4:	e7fe      	b.n	80085d4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80085d6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80085dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d00d      	beq.n	80085fe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80085e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085e4:	2201      	movs	r2, #1
 80085e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80085ea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80085ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085f0:	9300      	str	r3, [sp, #0]
 80085f2:	4613      	mov	r3, r2
 80085f4:	687a      	ldr	r2, [r7, #4]
 80085f6:	68b9      	ldr	r1, [r7, #8]
 80085f8:	68f8      	ldr	r0, [r7, #12]
 80085fa:	f000 f83f 	bl	800867c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80085fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008600:	4618      	mov	r0, r3
 8008602:	3730      	adds	r7, #48	; 0x30
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008608:	b580      	push	{r7, lr}
 800860a:	b08a      	sub	sp, #40	; 0x28
 800860c:	af02      	add	r7, sp, #8
 800860e:	60f8      	str	r0, [r7, #12]
 8008610:	60b9      	str	r1, [r7, #8]
 8008612:	4613      	mov	r3, r2
 8008614:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d10a      	bne.n	8008632 <xQueueGenericCreate+0x2a>
	__asm volatile
 800861c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008620:	f383 8811 	msr	BASEPRI, r3
 8008624:	f3bf 8f6f 	isb	sy
 8008628:	f3bf 8f4f 	dsb	sy
 800862c:	613b      	str	r3, [r7, #16]
}
 800862e:	bf00      	nop
 8008630:	e7fe      	b.n	8008630 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	68ba      	ldr	r2, [r7, #8]
 8008636:	fb02 f303 	mul.w	r3, r2, r3
 800863a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800863c:	69fb      	ldr	r3, [r7, #28]
 800863e:	3350      	adds	r3, #80	; 0x50
 8008640:	4618      	mov	r0, r3
 8008642:	f002 fbb9 	bl	800adb8 <pvPortMalloc>
 8008646:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008648:	69bb      	ldr	r3, [r7, #24]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d011      	beq.n	8008672 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800864e:	69bb      	ldr	r3, [r7, #24]
 8008650:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	3350      	adds	r3, #80	; 0x50
 8008656:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008658:	69bb      	ldr	r3, [r7, #24]
 800865a:	2200      	movs	r2, #0
 800865c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008660:	79fa      	ldrb	r2, [r7, #7]
 8008662:	69bb      	ldr	r3, [r7, #24]
 8008664:	9300      	str	r3, [sp, #0]
 8008666:	4613      	mov	r3, r2
 8008668:	697a      	ldr	r2, [r7, #20]
 800866a:	68b9      	ldr	r1, [r7, #8]
 800866c:	68f8      	ldr	r0, [r7, #12]
 800866e:	f000 f805 	bl	800867c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008672:	69bb      	ldr	r3, [r7, #24]
	}
 8008674:	4618      	mov	r0, r3
 8008676:	3720      	adds	r7, #32
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b084      	sub	sp, #16
 8008680:	af00      	add	r7, sp, #0
 8008682:	60f8      	str	r0, [r7, #12]
 8008684:	60b9      	str	r1, [r7, #8]
 8008686:	607a      	str	r2, [r7, #4]
 8008688:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d103      	bne.n	8008698 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008690:	69bb      	ldr	r3, [r7, #24]
 8008692:	69ba      	ldr	r2, [r7, #24]
 8008694:	601a      	str	r2, [r3, #0]
 8008696:	e002      	b.n	800869e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008698:	69bb      	ldr	r3, [r7, #24]
 800869a:	687a      	ldr	r2, [r7, #4]
 800869c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800869e:	69bb      	ldr	r3, [r7, #24]
 80086a0:	68fa      	ldr	r2, [r7, #12]
 80086a2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80086a4:	69bb      	ldr	r3, [r7, #24]
 80086a6:	68ba      	ldr	r2, [r7, #8]
 80086a8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80086aa:	2101      	movs	r1, #1
 80086ac:	69b8      	ldr	r0, [r7, #24]
 80086ae:	f7ff fecb 	bl	8008448 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80086b2:	69bb      	ldr	r3, [r7, #24]
 80086b4:	78fa      	ldrb	r2, [r7, #3]
 80086b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80086ba:	bf00      	nop
 80086bc:	3710      	adds	r7, #16
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}

080086c2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80086c2:	b580      	push	{r7, lr}
 80086c4:	b082      	sub	sp, #8
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d00e      	beq.n	80086ee <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2200      	movs	r2, #0
 80086d4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2200      	movs	r2, #0
 80086da:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2200      	movs	r2, #0
 80086e0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80086e2:	2300      	movs	r3, #0
 80086e4:	2200      	movs	r2, #0
 80086e6:	2100      	movs	r1, #0
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f000 f837 	bl	800875c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80086ee:	bf00      	nop
 80086f0:	3708      	adds	r7, #8
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}

080086f6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80086f6:	b580      	push	{r7, lr}
 80086f8:	b086      	sub	sp, #24
 80086fa:	af00      	add	r7, sp, #0
 80086fc:	4603      	mov	r3, r0
 80086fe:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008700:	2301      	movs	r3, #1
 8008702:	617b      	str	r3, [r7, #20]
 8008704:	2300      	movs	r3, #0
 8008706:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008708:	79fb      	ldrb	r3, [r7, #7]
 800870a:	461a      	mov	r2, r3
 800870c:	6939      	ldr	r1, [r7, #16]
 800870e:	6978      	ldr	r0, [r7, #20]
 8008710:	f7ff ff7a 	bl	8008608 <xQueueGenericCreate>
 8008714:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008716:	68f8      	ldr	r0, [r7, #12]
 8008718:	f7ff ffd3 	bl	80086c2 <prvInitialiseMutex>

		return xNewQueue;
 800871c:	68fb      	ldr	r3, [r7, #12]
	}
 800871e:	4618      	mov	r0, r3
 8008720:	3718      	adds	r7, #24
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}

08008726 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008726:	b580      	push	{r7, lr}
 8008728:	b088      	sub	sp, #32
 800872a:	af02      	add	r7, sp, #8
 800872c:	4603      	mov	r3, r0
 800872e:	6039      	str	r1, [r7, #0]
 8008730:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008732:	2301      	movs	r3, #1
 8008734:	617b      	str	r3, [r7, #20]
 8008736:	2300      	movs	r3, #0
 8008738:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800873a:	79fb      	ldrb	r3, [r7, #7]
 800873c:	9300      	str	r3, [sp, #0]
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	2200      	movs	r2, #0
 8008742:	6939      	ldr	r1, [r7, #16]
 8008744:	6978      	ldr	r0, [r7, #20]
 8008746:	f7ff fee7 	bl	8008518 <xQueueGenericCreateStatic>
 800874a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800874c:	68f8      	ldr	r0, [r7, #12]
 800874e:	f7ff ffb8 	bl	80086c2 <prvInitialiseMutex>

		return xNewQueue;
 8008752:	68fb      	ldr	r3, [r7, #12]
	}
 8008754:	4618      	mov	r0, r3
 8008756:	3718      	adds	r7, #24
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b08e      	sub	sp, #56	; 0x38
 8008760:	af00      	add	r7, sp, #0
 8008762:	60f8      	str	r0, [r7, #12]
 8008764:	60b9      	str	r1, [r7, #8]
 8008766:	607a      	str	r2, [r7, #4]
 8008768:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800876a:	2300      	movs	r3, #0
 800876c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008774:	2b00      	cmp	r3, #0
 8008776:	d10a      	bne.n	800878e <xQueueGenericSend+0x32>
	__asm volatile
 8008778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800877c:	f383 8811 	msr	BASEPRI, r3
 8008780:	f3bf 8f6f 	isb	sy
 8008784:	f3bf 8f4f 	dsb	sy
 8008788:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800878a:	bf00      	nop
 800878c:	e7fe      	b.n	800878c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d103      	bne.n	800879c <xQueueGenericSend+0x40>
 8008794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008798:	2b00      	cmp	r3, #0
 800879a:	d101      	bne.n	80087a0 <xQueueGenericSend+0x44>
 800879c:	2301      	movs	r3, #1
 800879e:	e000      	b.n	80087a2 <xQueueGenericSend+0x46>
 80087a0:	2300      	movs	r3, #0
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d10a      	bne.n	80087bc <xQueueGenericSend+0x60>
	__asm volatile
 80087a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087aa:	f383 8811 	msr	BASEPRI, r3
 80087ae:	f3bf 8f6f 	isb	sy
 80087b2:	f3bf 8f4f 	dsb	sy
 80087b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80087b8:	bf00      	nop
 80087ba:	e7fe      	b.n	80087ba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	2b02      	cmp	r3, #2
 80087c0:	d103      	bne.n	80087ca <xQueueGenericSend+0x6e>
 80087c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	d101      	bne.n	80087ce <xQueueGenericSend+0x72>
 80087ca:	2301      	movs	r3, #1
 80087cc:	e000      	b.n	80087d0 <xQueueGenericSend+0x74>
 80087ce:	2300      	movs	r3, #0
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d10a      	bne.n	80087ea <xQueueGenericSend+0x8e>
	__asm volatile
 80087d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d8:	f383 8811 	msr	BASEPRI, r3
 80087dc:	f3bf 8f6f 	isb	sy
 80087e0:	f3bf 8f4f 	dsb	sy
 80087e4:	623b      	str	r3, [r7, #32]
}
 80087e6:	bf00      	nop
 80087e8:	e7fe      	b.n	80087e8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80087ea:	f001 fc1d 	bl	800a028 <xTaskGetSchedulerState>
 80087ee:	4603      	mov	r3, r0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d102      	bne.n	80087fa <xQueueGenericSend+0x9e>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d101      	bne.n	80087fe <xQueueGenericSend+0xa2>
 80087fa:	2301      	movs	r3, #1
 80087fc:	e000      	b.n	8008800 <xQueueGenericSend+0xa4>
 80087fe:	2300      	movs	r3, #0
 8008800:	2b00      	cmp	r3, #0
 8008802:	d10a      	bne.n	800881a <xQueueGenericSend+0xbe>
	__asm volatile
 8008804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008808:	f383 8811 	msr	BASEPRI, r3
 800880c:	f3bf 8f6f 	isb	sy
 8008810:	f3bf 8f4f 	dsb	sy
 8008814:	61fb      	str	r3, [r7, #28]
}
 8008816:	bf00      	nop
 8008818:	e7fe      	b.n	8008818 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800881a:	f002 f9ab 	bl	800ab74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800881e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008820:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008826:	429a      	cmp	r2, r3
 8008828:	d302      	bcc.n	8008830 <xQueueGenericSend+0xd4>
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	2b02      	cmp	r3, #2
 800882e:	d129      	bne.n	8008884 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008830:	683a      	ldr	r2, [r7, #0]
 8008832:	68b9      	ldr	r1, [r7, #8]
 8008834:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008836:	f000 fa0b 	bl	8008c50 <prvCopyDataToQueue>
 800883a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800883c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800883e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008840:	2b00      	cmp	r3, #0
 8008842:	d010      	beq.n	8008866 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008846:	3324      	adds	r3, #36	; 0x24
 8008848:	4618      	mov	r0, r3
 800884a:	f001 f9c7 	bl	8009bdc <xTaskRemoveFromEventList>
 800884e:	4603      	mov	r3, r0
 8008850:	2b00      	cmp	r3, #0
 8008852:	d013      	beq.n	800887c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008854:	4b3f      	ldr	r3, [pc, #252]	; (8008954 <xQueueGenericSend+0x1f8>)
 8008856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800885a:	601a      	str	r2, [r3, #0]
 800885c:	f3bf 8f4f 	dsb	sy
 8008860:	f3bf 8f6f 	isb	sy
 8008864:	e00a      	b.n	800887c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008868:	2b00      	cmp	r3, #0
 800886a:	d007      	beq.n	800887c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800886c:	4b39      	ldr	r3, [pc, #228]	; (8008954 <xQueueGenericSend+0x1f8>)
 800886e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008872:	601a      	str	r2, [r3, #0]
 8008874:	f3bf 8f4f 	dsb	sy
 8008878:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800887c:	f002 f9aa 	bl	800abd4 <vPortExitCritical>
				return pdPASS;
 8008880:	2301      	movs	r3, #1
 8008882:	e063      	b.n	800894c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d103      	bne.n	8008892 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800888a:	f002 f9a3 	bl	800abd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800888e:	2300      	movs	r3, #0
 8008890:	e05c      	b.n	800894c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008894:	2b00      	cmp	r3, #0
 8008896:	d106      	bne.n	80088a6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008898:	f107 0314 	add.w	r3, r7, #20
 800889c:	4618      	mov	r0, r3
 800889e:	f001 fa01 	bl	8009ca4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80088a2:	2301      	movs	r3, #1
 80088a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80088a6:	f002 f995 	bl	800abd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80088aa:	f000 ff6d 	bl	8009788 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80088ae:	f002 f961 	bl	800ab74 <vPortEnterCritical>
 80088b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80088b8:	b25b      	sxtb	r3, r3
 80088ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088be:	d103      	bne.n	80088c8 <xQueueGenericSend+0x16c>
 80088c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c2:	2200      	movs	r2, #0
 80088c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088ce:	b25b      	sxtb	r3, r3
 80088d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088d4:	d103      	bne.n	80088de <xQueueGenericSend+0x182>
 80088d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d8:	2200      	movs	r2, #0
 80088da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80088de:	f002 f979 	bl	800abd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80088e2:	1d3a      	adds	r2, r7, #4
 80088e4:	f107 0314 	add.w	r3, r7, #20
 80088e8:	4611      	mov	r1, r2
 80088ea:	4618      	mov	r0, r3
 80088ec:	f001 f9f0 	bl	8009cd0 <xTaskCheckForTimeOut>
 80088f0:	4603      	mov	r3, r0
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d124      	bne.n	8008940 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80088f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088f8:	f000 faa2 	bl	8008e40 <prvIsQueueFull>
 80088fc:	4603      	mov	r3, r0
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d018      	beq.n	8008934 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008904:	3310      	adds	r3, #16
 8008906:	687a      	ldr	r2, [r7, #4]
 8008908:	4611      	mov	r1, r2
 800890a:	4618      	mov	r0, r3
 800890c:	f001 f916 	bl	8009b3c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008910:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008912:	f000 fa2d 	bl	8008d70 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008916:	f000 ff45 	bl	80097a4 <xTaskResumeAll>
 800891a:	4603      	mov	r3, r0
 800891c:	2b00      	cmp	r3, #0
 800891e:	f47f af7c 	bne.w	800881a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008922:	4b0c      	ldr	r3, [pc, #48]	; (8008954 <xQueueGenericSend+0x1f8>)
 8008924:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008928:	601a      	str	r2, [r3, #0]
 800892a:	f3bf 8f4f 	dsb	sy
 800892e:	f3bf 8f6f 	isb	sy
 8008932:	e772      	b.n	800881a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008934:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008936:	f000 fa1b 	bl	8008d70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800893a:	f000 ff33 	bl	80097a4 <xTaskResumeAll>
 800893e:	e76c      	b.n	800881a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008940:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008942:	f000 fa15 	bl	8008d70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008946:	f000 ff2d 	bl	80097a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800894a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800894c:	4618      	mov	r0, r3
 800894e:	3738      	adds	r7, #56	; 0x38
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}
 8008954:	e000ed04 	.word	0xe000ed04

08008958 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b090      	sub	sp, #64	; 0x40
 800895c:	af00      	add	r7, sp, #0
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	60b9      	str	r1, [r7, #8]
 8008962:	607a      	str	r2, [r7, #4]
 8008964:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800896a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800896c:	2b00      	cmp	r3, #0
 800896e:	d10a      	bne.n	8008986 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008974:	f383 8811 	msr	BASEPRI, r3
 8008978:	f3bf 8f6f 	isb	sy
 800897c:	f3bf 8f4f 	dsb	sy
 8008980:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008982:	bf00      	nop
 8008984:	e7fe      	b.n	8008984 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d103      	bne.n	8008994 <xQueueGenericSendFromISR+0x3c>
 800898c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800898e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008990:	2b00      	cmp	r3, #0
 8008992:	d101      	bne.n	8008998 <xQueueGenericSendFromISR+0x40>
 8008994:	2301      	movs	r3, #1
 8008996:	e000      	b.n	800899a <xQueueGenericSendFromISR+0x42>
 8008998:	2300      	movs	r3, #0
 800899a:	2b00      	cmp	r3, #0
 800899c:	d10a      	bne.n	80089b4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800899e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a2:	f383 8811 	msr	BASEPRI, r3
 80089a6:	f3bf 8f6f 	isb	sy
 80089aa:	f3bf 8f4f 	dsb	sy
 80089ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80089b0:	bf00      	nop
 80089b2:	e7fe      	b.n	80089b2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	2b02      	cmp	r3, #2
 80089b8:	d103      	bne.n	80089c2 <xQueueGenericSendFromISR+0x6a>
 80089ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089be:	2b01      	cmp	r3, #1
 80089c0:	d101      	bne.n	80089c6 <xQueueGenericSendFromISR+0x6e>
 80089c2:	2301      	movs	r3, #1
 80089c4:	e000      	b.n	80089c8 <xQueueGenericSendFromISR+0x70>
 80089c6:	2300      	movs	r3, #0
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d10a      	bne.n	80089e2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80089cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d0:	f383 8811 	msr	BASEPRI, r3
 80089d4:	f3bf 8f6f 	isb	sy
 80089d8:	f3bf 8f4f 	dsb	sy
 80089dc:	623b      	str	r3, [r7, #32]
}
 80089de:	bf00      	nop
 80089e0:	e7fe      	b.n	80089e0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80089e2:	f002 f9a9 	bl	800ad38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80089e6:	f3ef 8211 	mrs	r2, BASEPRI
 80089ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ee:	f383 8811 	msr	BASEPRI, r3
 80089f2:	f3bf 8f6f 	isb	sy
 80089f6:	f3bf 8f4f 	dsb	sy
 80089fa:	61fa      	str	r2, [r7, #28]
 80089fc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80089fe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008a00:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d302      	bcc.n	8008a14 <xQueueGenericSendFromISR+0xbc>
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	2b02      	cmp	r3, #2
 8008a12:	d12f      	bne.n	8008a74 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a22:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008a24:	683a      	ldr	r2, [r7, #0]
 8008a26:	68b9      	ldr	r1, [r7, #8]
 8008a28:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008a2a:	f000 f911 	bl	8008c50 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008a2e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a36:	d112      	bne.n	8008a5e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d016      	beq.n	8008a6e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a42:	3324      	adds	r3, #36	; 0x24
 8008a44:	4618      	mov	r0, r3
 8008a46:	f001 f8c9 	bl	8009bdc <xTaskRemoveFromEventList>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d00e      	beq.n	8008a6e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d00b      	beq.n	8008a6e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2201      	movs	r2, #1
 8008a5a:	601a      	str	r2, [r3, #0]
 8008a5c:	e007      	b.n	8008a6e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008a5e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008a62:	3301      	adds	r3, #1
 8008a64:	b2db      	uxtb	r3, r3
 8008a66:	b25a      	sxtb	r2, r3
 8008a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008a72:	e001      	b.n	8008a78 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008a74:	2300      	movs	r3, #0
 8008a76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a7a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008a82:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008a84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3740      	adds	r7, #64	; 0x40
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
	...

08008a90 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b08c      	sub	sp, #48	; 0x30
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	60f8      	str	r0, [r7, #12]
 8008a98:	60b9      	str	r1, [r7, #8]
 8008a9a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d10a      	bne.n	8008ac0 <xQueueReceive+0x30>
	__asm volatile
 8008aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aae:	f383 8811 	msr	BASEPRI, r3
 8008ab2:	f3bf 8f6f 	isb	sy
 8008ab6:	f3bf 8f4f 	dsb	sy
 8008aba:	623b      	str	r3, [r7, #32]
}
 8008abc:	bf00      	nop
 8008abe:	e7fe      	b.n	8008abe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d103      	bne.n	8008ace <xQueueReceive+0x3e>
 8008ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d101      	bne.n	8008ad2 <xQueueReceive+0x42>
 8008ace:	2301      	movs	r3, #1
 8008ad0:	e000      	b.n	8008ad4 <xQueueReceive+0x44>
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d10a      	bne.n	8008aee <xQueueReceive+0x5e>
	__asm volatile
 8008ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008adc:	f383 8811 	msr	BASEPRI, r3
 8008ae0:	f3bf 8f6f 	isb	sy
 8008ae4:	f3bf 8f4f 	dsb	sy
 8008ae8:	61fb      	str	r3, [r7, #28]
}
 8008aea:	bf00      	nop
 8008aec:	e7fe      	b.n	8008aec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008aee:	f001 fa9b 	bl	800a028 <xTaskGetSchedulerState>
 8008af2:	4603      	mov	r3, r0
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d102      	bne.n	8008afe <xQueueReceive+0x6e>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d101      	bne.n	8008b02 <xQueueReceive+0x72>
 8008afe:	2301      	movs	r3, #1
 8008b00:	e000      	b.n	8008b04 <xQueueReceive+0x74>
 8008b02:	2300      	movs	r3, #0
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d10a      	bne.n	8008b1e <xQueueReceive+0x8e>
	__asm volatile
 8008b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b0c:	f383 8811 	msr	BASEPRI, r3
 8008b10:	f3bf 8f6f 	isb	sy
 8008b14:	f3bf 8f4f 	dsb	sy
 8008b18:	61bb      	str	r3, [r7, #24]
}
 8008b1a:	bf00      	nop
 8008b1c:	e7fe      	b.n	8008b1c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008b1e:	f002 f829 	bl	800ab74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b26:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d01f      	beq.n	8008b6e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008b2e:	68b9      	ldr	r1, [r7, #8]
 8008b30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b32:	f000 f8f7 	bl	8008d24 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b38:	1e5a      	subs	r2, r3, #1
 8008b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b3c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b40:	691b      	ldr	r3, [r3, #16]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d00f      	beq.n	8008b66 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b48:	3310      	adds	r3, #16
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f001 f846 	bl	8009bdc <xTaskRemoveFromEventList>
 8008b50:	4603      	mov	r3, r0
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d007      	beq.n	8008b66 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008b56:	4b3d      	ldr	r3, [pc, #244]	; (8008c4c <xQueueReceive+0x1bc>)
 8008b58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b5c:	601a      	str	r2, [r3, #0]
 8008b5e:	f3bf 8f4f 	dsb	sy
 8008b62:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008b66:	f002 f835 	bl	800abd4 <vPortExitCritical>
				return pdPASS;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	e069      	b.n	8008c42 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d103      	bne.n	8008b7c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008b74:	f002 f82e 	bl	800abd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	e062      	b.n	8008c42 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d106      	bne.n	8008b90 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b82:	f107 0310 	add.w	r3, r7, #16
 8008b86:	4618      	mov	r0, r3
 8008b88:	f001 f88c 	bl	8009ca4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008b90:	f002 f820 	bl	800abd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008b94:	f000 fdf8 	bl	8009788 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b98:	f001 ffec 	bl	800ab74 <vPortEnterCritical>
 8008b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ba2:	b25b      	sxtb	r3, r3
 8008ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ba8:	d103      	bne.n	8008bb2 <xQueueReceive+0x122>
 8008baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bac:	2200      	movs	r2, #0
 8008bae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008bb8:	b25b      	sxtb	r3, r3
 8008bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bbe:	d103      	bne.n	8008bc8 <xQueueReceive+0x138>
 8008bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008bc8:	f002 f804 	bl	800abd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008bcc:	1d3a      	adds	r2, r7, #4
 8008bce:	f107 0310 	add.w	r3, r7, #16
 8008bd2:	4611      	mov	r1, r2
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f001 f87b 	bl	8009cd0 <xTaskCheckForTimeOut>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d123      	bne.n	8008c28 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008be0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008be2:	f000 f917 	bl	8008e14 <prvIsQueueEmpty>
 8008be6:	4603      	mov	r3, r0
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d017      	beq.n	8008c1c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bee:	3324      	adds	r3, #36	; 0x24
 8008bf0:	687a      	ldr	r2, [r7, #4]
 8008bf2:	4611      	mov	r1, r2
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f000 ffa1 	bl	8009b3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008bfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bfc:	f000 f8b8 	bl	8008d70 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008c00:	f000 fdd0 	bl	80097a4 <xTaskResumeAll>
 8008c04:	4603      	mov	r3, r0
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d189      	bne.n	8008b1e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008c0a:	4b10      	ldr	r3, [pc, #64]	; (8008c4c <xQueueReceive+0x1bc>)
 8008c0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c10:	601a      	str	r2, [r3, #0]
 8008c12:	f3bf 8f4f 	dsb	sy
 8008c16:	f3bf 8f6f 	isb	sy
 8008c1a:	e780      	b.n	8008b1e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008c1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c1e:	f000 f8a7 	bl	8008d70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c22:	f000 fdbf 	bl	80097a4 <xTaskResumeAll>
 8008c26:	e77a      	b.n	8008b1e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008c28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c2a:	f000 f8a1 	bl	8008d70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c2e:	f000 fdb9 	bl	80097a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c34:	f000 f8ee 	bl	8008e14 <prvIsQueueEmpty>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	f43f af6f 	beq.w	8008b1e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008c40:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3730      	adds	r7, #48	; 0x30
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}
 8008c4a:	bf00      	nop
 8008c4c:	e000ed04 	.word	0xe000ed04

08008c50 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b086      	sub	sp, #24
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	60f8      	str	r0, [r7, #12]
 8008c58:	60b9      	str	r1, [r7, #8]
 8008c5a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c64:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d10d      	bne.n	8008c8a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d14d      	bne.n	8008d12 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	689b      	ldr	r3, [r3, #8]
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f001 f9f2 	bl	800a064 <xTaskPriorityDisinherit>
 8008c80:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2200      	movs	r2, #0
 8008c86:	609a      	str	r2, [r3, #8]
 8008c88:	e043      	b.n	8008d12 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d119      	bne.n	8008cc4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	6858      	ldr	r0, [r3, #4]
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c98:	461a      	mov	r2, r3
 8008c9a:	68b9      	ldr	r1, [r7, #8]
 8008c9c:	f003 f9b9 	bl	800c012 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	685a      	ldr	r2, [r3, #4]
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ca8:	441a      	add	r2, r3
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	685a      	ldr	r2, [r3, #4]
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	689b      	ldr	r3, [r3, #8]
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d32b      	bcc.n	8008d12 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681a      	ldr	r2, [r3, #0]
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	605a      	str	r2, [r3, #4]
 8008cc2:	e026      	b.n	8008d12 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	68d8      	ldr	r0, [r3, #12]
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ccc:	461a      	mov	r2, r3
 8008cce:	68b9      	ldr	r1, [r7, #8]
 8008cd0:	f003 f99f 	bl	800c012 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	68da      	ldr	r2, [r3, #12]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cdc:	425b      	negs	r3, r3
 8008cde:	441a      	add	r2, r3
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	68da      	ldr	r2, [r3, #12]
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d207      	bcs.n	8008d00 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	689a      	ldr	r2, [r3, #8]
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cf8:	425b      	negs	r3, r3
 8008cfa:	441a      	add	r2, r3
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2b02      	cmp	r3, #2
 8008d04:	d105      	bne.n	8008d12 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d002      	beq.n	8008d12 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	3b01      	subs	r3, #1
 8008d10:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	1c5a      	adds	r2, r3, #1
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008d1a:	697b      	ldr	r3, [r7, #20]
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3718      	adds	r7, #24
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b082      	sub	sp, #8
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d018      	beq.n	8008d68 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	68da      	ldr	r2, [r3, #12]
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d3e:	441a      	add	r2, r3
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	68da      	ldr	r2, [r3, #12]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	689b      	ldr	r3, [r3, #8]
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d303      	bcc.n	8008d58 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681a      	ldr	r2, [r3, #0]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	68d9      	ldr	r1, [r3, #12]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d60:	461a      	mov	r2, r3
 8008d62:	6838      	ldr	r0, [r7, #0]
 8008d64:	f003 f955 	bl	800c012 <memcpy>
	}
}
 8008d68:	bf00      	nop
 8008d6a:	3708      	adds	r7, #8
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}

08008d70 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b084      	sub	sp, #16
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008d78:	f001 fefc 	bl	800ab74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d82:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008d84:	e011      	b.n	8008daa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d012      	beq.n	8008db4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	3324      	adds	r3, #36	; 0x24
 8008d92:	4618      	mov	r0, r3
 8008d94:	f000 ff22 	bl	8009bdc <xTaskRemoveFromEventList>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d001      	beq.n	8008da2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008d9e:	f000 fff9 	bl	8009d94 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008da2:	7bfb      	ldrb	r3, [r7, #15]
 8008da4:	3b01      	subs	r3, #1
 8008da6:	b2db      	uxtb	r3, r3
 8008da8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	dce9      	bgt.n	8008d86 <prvUnlockQueue+0x16>
 8008db2:	e000      	b.n	8008db6 <prvUnlockQueue+0x46>
					break;
 8008db4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	22ff      	movs	r2, #255	; 0xff
 8008dba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008dbe:	f001 ff09 	bl	800abd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008dc2:	f001 fed7 	bl	800ab74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008dcc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008dce:	e011      	b.n	8008df4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	691b      	ldr	r3, [r3, #16]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d012      	beq.n	8008dfe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	3310      	adds	r3, #16
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f000 fefd 	bl	8009bdc <xTaskRemoveFromEventList>
 8008de2:	4603      	mov	r3, r0
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d001      	beq.n	8008dec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008de8:	f000 ffd4 	bl	8009d94 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008dec:	7bbb      	ldrb	r3, [r7, #14]
 8008dee:	3b01      	subs	r3, #1
 8008df0:	b2db      	uxtb	r3, r3
 8008df2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008df4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	dce9      	bgt.n	8008dd0 <prvUnlockQueue+0x60>
 8008dfc:	e000      	b.n	8008e00 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008dfe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	22ff      	movs	r2, #255	; 0xff
 8008e04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008e08:	f001 fee4 	bl	800abd4 <vPortExitCritical>
}
 8008e0c:	bf00      	nop
 8008e0e:	3710      	adds	r7, #16
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b084      	sub	sp, #16
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008e1c:	f001 feaa 	bl	800ab74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d102      	bne.n	8008e2e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008e28:	2301      	movs	r3, #1
 8008e2a:	60fb      	str	r3, [r7, #12]
 8008e2c:	e001      	b.n	8008e32 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008e32:	f001 fecf 	bl	800abd4 <vPortExitCritical>

	return xReturn;
 8008e36:	68fb      	ldr	r3, [r7, #12]
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3710      	adds	r7, #16
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b084      	sub	sp, #16
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008e48:	f001 fe94 	bl	800ab74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e54:	429a      	cmp	r2, r3
 8008e56:	d102      	bne.n	8008e5e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008e58:	2301      	movs	r3, #1
 8008e5a:	60fb      	str	r3, [r7, #12]
 8008e5c:	e001      	b.n	8008e62 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008e62:	f001 feb7 	bl	800abd4 <vPortExitCritical>

	return xReturn;
 8008e66:	68fb      	ldr	r3, [r7, #12]
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3710      	adds	r7, #16
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008e70:	b480      	push	{r7}
 8008e72:	b085      	sub	sp, #20
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	60fb      	str	r3, [r7, #12]
 8008e7e:	e014      	b.n	8008eaa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008e80:	4a0f      	ldr	r2, [pc, #60]	; (8008ec0 <vQueueAddToRegistry+0x50>)
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d10b      	bne.n	8008ea4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008e8c:	490c      	ldr	r1, [pc, #48]	; (8008ec0 <vQueueAddToRegistry+0x50>)
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	683a      	ldr	r2, [r7, #0]
 8008e92:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008e96:	4a0a      	ldr	r2, [pc, #40]	; (8008ec0 <vQueueAddToRegistry+0x50>)
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	00db      	lsls	r3, r3, #3
 8008e9c:	4413      	add	r3, r2
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008ea2:	e006      	b.n	8008eb2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	60fb      	str	r3, [r7, #12]
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2b07      	cmp	r3, #7
 8008eae:	d9e7      	bls.n	8008e80 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008eb0:	bf00      	nop
 8008eb2:	bf00      	nop
 8008eb4:	3714      	adds	r7, #20
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr
 8008ebe:	bf00      	nop
 8008ec0:	20000ecc 	.word	0x20000ecc

08008ec4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b086      	sub	sp, #24
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	60f8      	str	r0, [r7, #12]
 8008ecc:	60b9      	str	r1, [r7, #8]
 8008ece:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008ed4:	f001 fe4e 	bl	800ab74 <vPortEnterCritical>
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ede:	b25b      	sxtb	r3, r3
 8008ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ee4:	d103      	bne.n	8008eee <vQueueWaitForMessageRestricted+0x2a>
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ef4:	b25b      	sxtb	r3, r3
 8008ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008efa:	d103      	bne.n	8008f04 <vQueueWaitForMessageRestricted+0x40>
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	2200      	movs	r2, #0
 8008f00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f04:	f001 fe66 	bl	800abd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d106      	bne.n	8008f1e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	3324      	adds	r3, #36	; 0x24
 8008f14:	687a      	ldr	r2, [r7, #4]
 8008f16:	68b9      	ldr	r1, [r7, #8]
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f000 fe33 	bl	8009b84 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008f1e:	6978      	ldr	r0, [r7, #20]
 8008f20:	f7ff ff26 	bl	8008d70 <prvUnlockQueue>
	}
 8008f24:	bf00      	nop
 8008f26:	3718      	adds	r7, #24
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b08e      	sub	sp, #56	; 0x38
 8008f30:	af04      	add	r7, sp, #16
 8008f32:	60f8      	str	r0, [r7, #12]
 8008f34:	60b9      	str	r1, [r7, #8]
 8008f36:	607a      	str	r2, [r7, #4]
 8008f38:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d10a      	bne.n	8008f56 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f44:	f383 8811 	msr	BASEPRI, r3
 8008f48:	f3bf 8f6f 	isb	sy
 8008f4c:	f3bf 8f4f 	dsb	sy
 8008f50:	623b      	str	r3, [r7, #32]
}
 8008f52:	bf00      	nop
 8008f54:	e7fe      	b.n	8008f54 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d10a      	bne.n	8008f72 <xTaskCreateStatic+0x46>
	__asm volatile
 8008f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f60:	f383 8811 	msr	BASEPRI, r3
 8008f64:	f3bf 8f6f 	isb	sy
 8008f68:	f3bf 8f4f 	dsb	sy
 8008f6c:	61fb      	str	r3, [r7, #28]
}
 8008f6e:	bf00      	nop
 8008f70:	e7fe      	b.n	8008f70 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008f72:	23ac      	movs	r3, #172	; 0xac
 8008f74:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	2bac      	cmp	r3, #172	; 0xac
 8008f7a:	d00a      	beq.n	8008f92 <xTaskCreateStatic+0x66>
	__asm volatile
 8008f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f80:	f383 8811 	msr	BASEPRI, r3
 8008f84:	f3bf 8f6f 	isb	sy
 8008f88:	f3bf 8f4f 	dsb	sy
 8008f8c:	61bb      	str	r3, [r7, #24]
}
 8008f8e:	bf00      	nop
 8008f90:	e7fe      	b.n	8008f90 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008f92:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d01e      	beq.n	8008fd8 <xTaskCreateStatic+0xac>
 8008f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d01b      	beq.n	8008fd8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fa2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008fa8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fac:	2202      	movs	r2, #2
 8008fae:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	9303      	str	r3, [sp, #12]
 8008fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb8:	9302      	str	r3, [sp, #8]
 8008fba:	f107 0314 	add.w	r3, r7, #20
 8008fbe:	9301      	str	r3, [sp, #4]
 8008fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc2:	9300      	str	r3, [sp, #0]
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	687a      	ldr	r2, [r7, #4]
 8008fc8:	68b9      	ldr	r1, [r7, #8]
 8008fca:	68f8      	ldr	r0, [r7, #12]
 8008fcc:	f000 f850 	bl	8009070 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008fd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008fd2:	f000 f903 	bl	80091dc <prvAddNewTaskToReadyList>
 8008fd6:	e001      	b.n	8008fdc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008fdc:	697b      	ldr	r3, [r7, #20]
	}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3728      	adds	r7, #40	; 0x28
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}

08008fe6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008fe6:	b580      	push	{r7, lr}
 8008fe8:	b08c      	sub	sp, #48	; 0x30
 8008fea:	af04      	add	r7, sp, #16
 8008fec:	60f8      	str	r0, [r7, #12]
 8008fee:	60b9      	str	r1, [r7, #8]
 8008ff0:	603b      	str	r3, [r7, #0]
 8008ff2:	4613      	mov	r3, r2
 8008ff4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008ff6:	88fb      	ldrh	r3, [r7, #6]
 8008ff8:	009b      	lsls	r3, r3, #2
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f001 fedc 	bl	800adb8 <pvPortMalloc>
 8009000:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d00e      	beq.n	8009026 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009008:	20ac      	movs	r0, #172	; 0xac
 800900a:	f001 fed5 	bl	800adb8 <pvPortMalloc>
 800900e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009010:	69fb      	ldr	r3, [r7, #28]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d003      	beq.n	800901e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009016:	69fb      	ldr	r3, [r7, #28]
 8009018:	697a      	ldr	r2, [r7, #20]
 800901a:	631a      	str	r2, [r3, #48]	; 0x30
 800901c:	e005      	b.n	800902a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800901e:	6978      	ldr	r0, [r7, #20]
 8009020:	f001 ff96 	bl	800af50 <vPortFree>
 8009024:	e001      	b.n	800902a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009026:	2300      	movs	r3, #0
 8009028:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800902a:	69fb      	ldr	r3, [r7, #28]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d017      	beq.n	8009060 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009030:	69fb      	ldr	r3, [r7, #28]
 8009032:	2200      	movs	r2, #0
 8009034:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009038:	88fa      	ldrh	r2, [r7, #6]
 800903a:	2300      	movs	r3, #0
 800903c:	9303      	str	r3, [sp, #12]
 800903e:	69fb      	ldr	r3, [r7, #28]
 8009040:	9302      	str	r3, [sp, #8]
 8009042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009044:	9301      	str	r3, [sp, #4]
 8009046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009048:	9300      	str	r3, [sp, #0]
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	68b9      	ldr	r1, [r7, #8]
 800904e:	68f8      	ldr	r0, [r7, #12]
 8009050:	f000 f80e 	bl	8009070 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009054:	69f8      	ldr	r0, [r7, #28]
 8009056:	f000 f8c1 	bl	80091dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800905a:	2301      	movs	r3, #1
 800905c:	61bb      	str	r3, [r7, #24]
 800905e:	e002      	b.n	8009066 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009060:	f04f 33ff 	mov.w	r3, #4294967295
 8009064:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009066:	69bb      	ldr	r3, [r7, #24]
	}
 8009068:	4618      	mov	r0, r3
 800906a:	3720      	adds	r7, #32
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}

08009070 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b088      	sub	sp, #32
 8009074:	af00      	add	r7, sp, #0
 8009076:	60f8      	str	r0, [r7, #12]
 8009078:	60b9      	str	r1, [r7, #8]
 800907a:	607a      	str	r2, [r7, #4]
 800907c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800907e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009080:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	009b      	lsls	r3, r3, #2
 8009086:	461a      	mov	r2, r3
 8009088:	21a5      	movs	r1, #165	; 0xa5
 800908a:	f002 feed 	bl	800be68 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800908e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009090:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009098:	3b01      	subs	r3, #1
 800909a:	009b      	lsls	r3, r3, #2
 800909c:	4413      	add	r3, r2
 800909e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80090a0:	69bb      	ldr	r3, [r7, #24]
 80090a2:	f023 0307 	bic.w	r3, r3, #7
 80090a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80090a8:	69bb      	ldr	r3, [r7, #24]
 80090aa:	f003 0307 	and.w	r3, r3, #7
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d00a      	beq.n	80090c8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80090b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b6:	f383 8811 	msr	BASEPRI, r3
 80090ba:	f3bf 8f6f 	isb	sy
 80090be:	f3bf 8f4f 	dsb	sy
 80090c2:	617b      	str	r3, [r7, #20]
}
 80090c4:	bf00      	nop
 80090c6:	e7fe      	b.n	80090c6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d01f      	beq.n	800910e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80090ce:	2300      	movs	r3, #0
 80090d0:	61fb      	str	r3, [r7, #28]
 80090d2:	e012      	b.n	80090fa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80090d4:	68ba      	ldr	r2, [r7, #8]
 80090d6:	69fb      	ldr	r3, [r7, #28]
 80090d8:	4413      	add	r3, r2
 80090da:	7819      	ldrb	r1, [r3, #0]
 80090dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090de:	69fb      	ldr	r3, [r7, #28]
 80090e0:	4413      	add	r3, r2
 80090e2:	3334      	adds	r3, #52	; 0x34
 80090e4:	460a      	mov	r2, r1
 80090e6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80090e8:	68ba      	ldr	r2, [r7, #8]
 80090ea:	69fb      	ldr	r3, [r7, #28]
 80090ec:	4413      	add	r3, r2
 80090ee:	781b      	ldrb	r3, [r3, #0]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d006      	beq.n	8009102 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80090f4:	69fb      	ldr	r3, [r7, #28]
 80090f6:	3301      	adds	r3, #1
 80090f8:	61fb      	str	r3, [r7, #28]
 80090fa:	69fb      	ldr	r3, [r7, #28]
 80090fc:	2b0f      	cmp	r3, #15
 80090fe:	d9e9      	bls.n	80090d4 <prvInitialiseNewTask+0x64>
 8009100:	e000      	b.n	8009104 <prvInitialiseNewTask+0x94>
			{
				break;
 8009102:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009106:	2200      	movs	r2, #0
 8009108:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800910c:	e003      	b.n	8009116 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800910e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009110:	2200      	movs	r2, #0
 8009112:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009118:	2b37      	cmp	r3, #55	; 0x37
 800911a:	d901      	bls.n	8009120 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800911c:	2337      	movs	r3, #55	; 0x37
 800911e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009122:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009124:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009128:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800912a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800912c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800912e:	2200      	movs	r2, #0
 8009130:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009134:	3304      	adds	r3, #4
 8009136:	4618      	mov	r0, r3
 8009138:	f7ff f8f2 	bl	8008320 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800913c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800913e:	3318      	adds	r3, #24
 8009140:	4618      	mov	r0, r3
 8009142:	f7ff f8ed 	bl	8008320 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009148:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800914a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800914c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800914e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009154:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009158:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800915a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
	{
		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 800915c:	2300      	movs	r3, #0
 800915e:	61fb      	str	r3, [r7, #28]
 8009160:	e009      	b.n	8009176 <prvInitialiseNewTask+0x106>
		{
			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 8009162:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009164:	69fb      	ldr	r3, [r7, #28]
 8009166:	3314      	adds	r3, #20
 8009168:	009b      	lsls	r3, r3, #2
 800916a:	4413      	add	r3, r2
 800916c:	2200      	movs	r2, #0
 800916e:	605a      	str	r2, [r3, #4]
		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 8009170:	69fb      	ldr	r3, [r7, #28]
 8009172:	3301      	adds	r3, #1
 8009174:	61fb      	str	r3, [r7, #28]
 8009176:	69fb      	ldr	r3, [r7, #28]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d0f2      	beq.n	8009162 <prvInitialiseNewTask+0xf2>
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800917c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800917e:	2200      	movs	r2, #0
 8009180:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009186:	2200      	movs	r2, #0
 8009188:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800918c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800918e:	3358      	adds	r3, #88	; 0x58
 8009190:	224c      	movs	r2, #76	; 0x4c
 8009192:	2100      	movs	r1, #0
 8009194:	4618      	mov	r0, r3
 8009196:	f002 fe67 	bl	800be68 <memset>
 800919a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800919c:	4a0c      	ldr	r2, [pc, #48]	; (80091d0 <prvInitialiseNewTask+0x160>)
 800919e:	65da      	str	r2, [r3, #92]	; 0x5c
 80091a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a2:	4a0c      	ldr	r2, [pc, #48]	; (80091d4 <prvInitialiseNewTask+0x164>)
 80091a4:	661a      	str	r2, [r3, #96]	; 0x60
 80091a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a8:	4a0b      	ldr	r2, [pc, #44]	; (80091d8 <prvInitialiseNewTask+0x168>)
 80091aa:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80091ac:	683a      	ldr	r2, [r7, #0]
 80091ae:	68f9      	ldr	r1, [r7, #12]
 80091b0:	69b8      	ldr	r0, [r7, #24]
 80091b2:	f001 fbb3 	bl	800a91c <pxPortInitialiseStack>
 80091b6:	4602      	mov	r2, r0
 80091b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ba:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80091bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d002      	beq.n	80091c8 <prvInitialiseNewTask+0x158>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80091c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091c6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091c8:	bf00      	nop
 80091ca:	3720      	adds	r7, #32
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}
 80091d0:	20005160 	.word	0x20005160
 80091d4:	200051c8 	.word	0x200051c8
 80091d8:	20005230 	.word	0x20005230

080091dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b082      	sub	sp, #8
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80091e4:	f001 fcc6 	bl	800ab74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80091e8:	4b2d      	ldr	r3, [pc, #180]	; (80092a0 <prvAddNewTaskToReadyList+0xc4>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	3301      	adds	r3, #1
 80091ee:	4a2c      	ldr	r2, [pc, #176]	; (80092a0 <prvAddNewTaskToReadyList+0xc4>)
 80091f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80091f2:	4b2c      	ldr	r3, [pc, #176]	; (80092a4 <prvAddNewTaskToReadyList+0xc8>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d109      	bne.n	800920e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80091fa:	4a2a      	ldr	r2, [pc, #168]	; (80092a4 <prvAddNewTaskToReadyList+0xc8>)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009200:	4b27      	ldr	r3, [pc, #156]	; (80092a0 <prvAddNewTaskToReadyList+0xc4>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	2b01      	cmp	r3, #1
 8009206:	d110      	bne.n	800922a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009208:	f000 fe3c 	bl	8009e84 <prvInitialiseTaskLists>
 800920c:	e00d      	b.n	800922a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800920e:	4b26      	ldr	r3, [pc, #152]	; (80092a8 <prvAddNewTaskToReadyList+0xcc>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d109      	bne.n	800922a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009216:	4b23      	ldr	r3, [pc, #140]	; (80092a4 <prvAddNewTaskToReadyList+0xc8>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009220:	429a      	cmp	r2, r3
 8009222:	d802      	bhi.n	800922a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009224:	4a1f      	ldr	r2, [pc, #124]	; (80092a4 <prvAddNewTaskToReadyList+0xc8>)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800922a:	4b20      	ldr	r3, [pc, #128]	; (80092ac <prvAddNewTaskToReadyList+0xd0>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	3301      	adds	r3, #1
 8009230:	4a1e      	ldr	r2, [pc, #120]	; (80092ac <prvAddNewTaskToReadyList+0xd0>)
 8009232:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009234:	4b1d      	ldr	r3, [pc, #116]	; (80092ac <prvAddNewTaskToReadyList+0xd0>)
 8009236:	681a      	ldr	r2, [r3, #0]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009240:	4b1b      	ldr	r3, [pc, #108]	; (80092b0 <prvAddNewTaskToReadyList+0xd4>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	429a      	cmp	r2, r3
 8009246:	d903      	bls.n	8009250 <prvAddNewTaskToReadyList+0x74>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800924c:	4a18      	ldr	r2, [pc, #96]	; (80092b0 <prvAddNewTaskToReadyList+0xd4>)
 800924e:	6013      	str	r3, [r2, #0]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009254:	4613      	mov	r3, r2
 8009256:	009b      	lsls	r3, r3, #2
 8009258:	4413      	add	r3, r2
 800925a:	009b      	lsls	r3, r3, #2
 800925c:	4a15      	ldr	r2, [pc, #84]	; (80092b4 <prvAddNewTaskToReadyList+0xd8>)
 800925e:	441a      	add	r2, r3
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	3304      	adds	r3, #4
 8009264:	4619      	mov	r1, r3
 8009266:	4610      	mov	r0, r2
 8009268:	f7ff f867 	bl	800833a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800926c:	f001 fcb2 	bl	800abd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009270:	4b0d      	ldr	r3, [pc, #52]	; (80092a8 <prvAddNewTaskToReadyList+0xcc>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d00e      	beq.n	8009296 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009278:	4b0a      	ldr	r3, [pc, #40]	; (80092a4 <prvAddNewTaskToReadyList+0xc8>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009282:	429a      	cmp	r2, r3
 8009284:	d207      	bcs.n	8009296 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009286:	4b0c      	ldr	r3, [pc, #48]	; (80092b8 <prvAddNewTaskToReadyList+0xdc>)
 8009288:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800928c:	601a      	str	r2, [r3, #0]
 800928e:	f3bf 8f4f 	dsb	sy
 8009292:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009296:	bf00      	nop
 8009298:	3708      	adds	r7, #8
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}
 800929e:	bf00      	nop
 80092a0:	200013e0 	.word	0x200013e0
 80092a4:	20000f0c 	.word	0x20000f0c
 80092a8:	200013ec 	.word	0x200013ec
 80092ac:	200013fc 	.word	0x200013fc
 80092b0:	200013e8 	.word	0x200013e8
 80092b4:	20000f10 	.word	0x20000f10
 80092b8:	e000ed04 	.word	0xe000ed04

080092bc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b084      	sub	sp, #16
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80092c4:	f001 fc56 	bl	800ab74 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d102      	bne.n	80092d4 <vTaskDelete+0x18>
 80092ce:	4b2c      	ldr	r3, [pc, #176]	; (8009380 <vTaskDelete+0xc4>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	e000      	b.n	80092d6 <vTaskDelete+0x1a>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	3304      	adds	r3, #4
 80092dc:	4618      	mov	r0, r3
 80092de:	f7ff f889 	bl	80083f4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d004      	beq.n	80092f4 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	3318      	adds	r3, #24
 80092ee:	4618      	mov	r0, r3
 80092f0:	f7ff f880 	bl	80083f4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80092f4:	4b23      	ldr	r3, [pc, #140]	; (8009384 <vTaskDelete+0xc8>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	3301      	adds	r3, #1
 80092fa:	4a22      	ldr	r2, [pc, #136]	; (8009384 <vTaskDelete+0xc8>)
 80092fc:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80092fe:	4b20      	ldr	r3, [pc, #128]	; (8009380 <vTaskDelete+0xc4>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	68fa      	ldr	r2, [r7, #12]
 8009304:	429a      	cmp	r2, r3
 8009306:	d10b      	bne.n	8009320 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	3304      	adds	r3, #4
 800930c:	4619      	mov	r1, r3
 800930e:	481e      	ldr	r0, [pc, #120]	; (8009388 <vTaskDelete+0xcc>)
 8009310:	f7ff f813 	bl	800833a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8009314:	4b1d      	ldr	r3, [pc, #116]	; (800938c <vTaskDelete+0xd0>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	3301      	adds	r3, #1
 800931a:	4a1c      	ldr	r2, [pc, #112]	; (800938c <vTaskDelete+0xd0>)
 800931c:	6013      	str	r3, [r2, #0]
 800931e:	e009      	b.n	8009334 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8009320:	4b1b      	ldr	r3, [pc, #108]	; (8009390 <vTaskDelete+0xd4>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	3b01      	subs	r3, #1
 8009326:	4a1a      	ldr	r2, [pc, #104]	; (8009390 <vTaskDelete+0xd4>)
 8009328:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800932a:	68f8      	ldr	r0, [r7, #12]
 800932c:	f000 fe18 	bl	8009f60 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8009330:	f000 fe4a 	bl	8009fc8 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8009334:	f001 fc4e 	bl	800abd4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8009338:	4b16      	ldr	r3, [pc, #88]	; (8009394 <vTaskDelete+0xd8>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d01b      	beq.n	8009378 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8009340:	4b0f      	ldr	r3, [pc, #60]	; (8009380 <vTaskDelete+0xc4>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	68fa      	ldr	r2, [r7, #12]
 8009346:	429a      	cmp	r2, r3
 8009348:	d116      	bne.n	8009378 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800934a:	4b13      	ldr	r3, [pc, #76]	; (8009398 <vTaskDelete+0xdc>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d00a      	beq.n	8009368 <vTaskDelete+0xac>
	__asm volatile
 8009352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009356:	f383 8811 	msr	BASEPRI, r3
 800935a:	f3bf 8f6f 	isb	sy
 800935e:	f3bf 8f4f 	dsb	sy
 8009362:	60bb      	str	r3, [r7, #8]
}
 8009364:	bf00      	nop
 8009366:	e7fe      	b.n	8009366 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8009368:	4b0c      	ldr	r3, [pc, #48]	; (800939c <vTaskDelete+0xe0>)
 800936a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800936e:	601a      	str	r2, [r3, #0]
 8009370:	f3bf 8f4f 	dsb	sy
 8009374:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009378:	bf00      	nop
 800937a:	3710      	adds	r7, #16
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}
 8009380:	20000f0c 	.word	0x20000f0c
 8009384:	200013fc 	.word	0x200013fc
 8009388:	200013b4 	.word	0x200013b4
 800938c:	200013c8 	.word	0x200013c8
 8009390:	200013e0 	.word	0x200013e0
 8009394:	200013ec 	.word	0x200013ec
 8009398:	20001408 	.word	0x20001408
 800939c:	e000ed04 	.word	0xe000ed04

080093a0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b08a      	sub	sp, #40	; 0x28
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80093aa:	2300      	movs	r3, #0
 80093ac:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d10a      	bne.n	80093ca <vTaskDelayUntil+0x2a>
	__asm volatile
 80093b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b8:	f383 8811 	msr	BASEPRI, r3
 80093bc:	f3bf 8f6f 	isb	sy
 80093c0:	f3bf 8f4f 	dsb	sy
 80093c4:	617b      	str	r3, [r7, #20]
}
 80093c6:	bf00      	nop
 80093c8:	e7fe      	b.n	80093c8 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d10a      	bne.n	80093e6 <vTaskDelayUntil+0x46>
	__asm volatile
 80093d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d4:	f383 8811 	msr	BASEPRI, r3
 80093d8:	f3bf 8f6f 	isb	sy
 80093dc:	f3bf 8f4f 	dsb	sy
 80093e0:	613b      	str	r3, [r7, #16]
}
 80093e2:	bf00      	nop
 80093e4:	e7fe      	b.n	80093e4 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 80093e6:	4b2a      	ldr	r3, [pc, #168]	; (8009490 <vTaskDelayUntil+0xf0>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d00a      	beq.n	8009404 <vTaskDelayUntil+0x64>
	__asm volatile
 80093ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f2:	f383 8811 	msr	BASEPRI, r3
 80093f6:	f3bf 8f6f 	isb	sy
 80093fa:	f3bf 8f4f 	dsb	sy
 80093fe:	60fb      	str	r3, [r7, #12]
}
 8009400:	bf00      	nop
 8009402:	e7fe      	b.n	8009402 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8009404:	f000 f9c0 	bl	8009788 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8009408:	4b22      	ldr	r3, [pc, #136]	; (8009494 <vTaskDelayUntil+0xf4>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	683a      	ldr	r2, [r7, #0]
 8009414:	4413      	add	r3, r2
 8009416:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	6a3a      	ldr	r2, [r7, #32]
 800941e:	429a      	cmp	r2, r3
 8009420:	d20b      	bcs.n	800943a <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	69fa      	ldr	r2, [r7, #28]
 8009428:	429a      	cmp	r2, r3
 800942a:	d211      	bcs.n	8009450 <vTaskDelayUntil+0xb0>
 800942c:	69fa      	ldr	r2, [r7, #28]
 800942e:	6a3b      	ldr	r3, [r7, #32]
 8009430:	429a      	cmp	r2, r3
 8009432:	d90d      	bls.n	8009450 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8009434:	2301      	movs	r3, #1
 8009436:	627b      	str	r3, [r7, #36]	; 0x24
 8009438:	e00a      	b.n	8009450 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	69fa      	ldr	r2, [r7, #28]
 8009440:	429a      	cmp	r2, r3
 8009442:	d303      	bcc.n	800944c <vTaskDelayUntil+0xac>
 8009444:	69fa      	ldr	r2, [r7, #28]
 8009446:	6a3b      	ldr	r3, [r7, #32]
 8009448:	429a      	cmp	r2, r3
 800944a:	d901      	bls.n	8009450 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800944c:	2301      	movs	r3, #1
 800944e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	69fa      	ldr	r2, [r7, #28]
 8009454:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8009456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009458:	2b00      	cmp	r3, #0
 800945a:	d006      	beq.n	800946a <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800945c:	69fa      	ldr	r2, [r7, #28]
 800945e:	6a3b      	ldr	r3, [r7, #32]
 8009460:	1ad3      	subs	r3, r2, r3
 8009462:	2100      	movs	r1, #0
 8009464:	4618      	mov	r0, r3
 8009466:	f000 feb7 	bl	800a1d8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800946a:	f000 f99b 	bl	80097a4 <xTaskResumeAll>
 800946e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009470:	69bb      	ldr	r3, [r7, #24]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d107      	bne.n	8009486 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8009476:	4b08      	ldr	r3, [pc, #32]	; (8009498 <vTaskDelayUntil+0xf8>)
 8009478:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800947c:	601a      	str	r2, [r3, #0]
 800947e:	f3bf 8f4f 	dsb	sy
 8009482:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009486:	bf00      	nop
 8009488:	3728      	adds	r7, #40	; 0x28
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}
 800948e:	bf00      	nop
 8009490:	20001408 	.word	0x20001408
 8009494:	200013e4 	.word	0x200013e4
 8009498:	e000ed04 	.word	0xe000ed04

0800949c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800949c:	b580      	push	{r7, lr}
 800949e:	b084      	sub	sp, #16
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80094a4:	f001 fb66 	bl	800ab74 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d102      	bne.n	80094b4 <vTaskSuspend+0x18>
 80094ae:	4b30      	ldr	r3, [pc, #192]	; (8009570 <vTaskSuspend+0xd4>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	e000      	b.n	80094b6 <vTaskSuspend+0x1a>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	3304      	adds	r3, #4
 80094bc:	4618      	mov	r0, r3
 80094be:	f7fe ff99 	bl	80083f4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d004      	beq.n	80094d4 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	3318      	adds	r3, #24
 80094ce:	4618      	mov	r0, r3
 80094d0:	f7fe ff90 	bl	80083f4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	3304      	adds	r3, #4
 80094d8:	4619      	mov	r1, r3
 80094da:	4826      	ldr	r0, [pc, #152]	; (8009574 <vTaskSuspend+0xd8>)
 80094dc:	f7fe ff2d 	bl	800833a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 80094e6:	b2db      	uxtb	r3, r3
 80094e8:	2b01      	cmp	r3, #1
 80094ea:	d103      	bne.n	80094f4 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	2200      	movs	r2, #0
 80094f0:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80094f4:	f001 fb6e 	bl	800abd4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80094f8:	4b1f      	ldr	r3, [pc, #124]	; (8009578 <vTaskSuspend+0xdc>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d005      	beq.n	800950c <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8009500:	f001 fb38 	bl	800ab74 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8009504:	f000 fd60 	bl	8009fc8 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8009508:	f001 fb64 	bl	800abd4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800950c:	4b18      	ldr	r3, [pc, #96]	; (8009570 <vTaskSuspend+0xd4>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	68fa      	ldr	r2, [r7, #12]
 8009512:	429a      	cmp	r2, r3
 8009514:	d127      	bne.n	8009566 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8009516:	4b18      	ldr	r3, [pc, #96]	; (8009578 <vTaskSuspend+0xdc>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d017      	beq.n	800954e <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800951e:	4b17      	ldr	r3, [pc, #92]	; (800957c <vTaskSuspend+0xe0>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d00a      	beq.n	800953c <vTaskSuspend+0xa0>
	__asm volatile
 8009526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800952a:	f383 8811 	msr	BASEPRI, r3
 800952e:	f3bf 8f6f 	isb	sy
 8009532:	f3bf 8f4f 	dsb	sy
 8009536:	60bb      	str	r3, [r7, #8]
}
 8009538:	bf00      	nop
 800953a:	e7fe      	b.n	800953a <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800953c:	4b10      	ldr	r3, [pc, #64]	; (8009580 <vTaskSuspend+0xe4>)
 800953e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009542:	601a      	str	r2, [r3, #0]
 8009544:	f3bf 8f4f 	dsb	sy
 8009548:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800954c:	e00b      	b.n	8009566 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800954e:	4b09      	ldr	r3, [pc, #36]	; (8009574 <vTaskSuspend+0xd8>)
 8009550:	681a      	ldr	r2, [r3, #0]
 8009552:	4b0c      	ldr	r3, [pc, #48]	; (8009584 <vTaskSuspend+0xe8>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	429a      	cmp	r2, r3
 8009558:	d103      	bne.n	8009562 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800955a:	4b05      	ldr	r3, [pc, #20]	; (8009570 <vTaskSuspend+0xd4>)
 800955c:	2200      	movs	r2, #0
 800955e:	601a      	str	r2, [r3, #0]
	}
 8009560:	e001      	b.n	8009566 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8009562:	f000 fa87 	bl	8009a74 <vTaskSwitchContext>
	}
 8009566:	bf00      	nop
 8009568:	3710      	adds	r7, #16
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
 800956e:	bf00      	nop
 8009570:	20000f0c 	.word	0x20000f0c
 8009574:	200013cc 	.word	0x200013cc
 8009578:	200013ec 	.word	0x200013ec
 800957c:	20001408 	.word	0x20001408
 8009580:	e000ed04 	.word	0xe000ed04
 8009584:	200013e0 	.word	0x200013e0

08009588 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8009588:	b480      	push	{r7}
 800958a:	b087      	sub	sp, #28
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8009590:	2300      	movs	r3, #0
 8009592:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d10a      	bne.n	80095b4 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800959e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a2:	f383 8811 	msr	BASEPRI, r3
 80095a6:	f3bf 8f6f 	isb	sy
 80095aa:	f3bf 8f4f 	dsb	sy
 80095ae:	60fb      	str	r3, [r7, #12]
}
 80095b0:	bf00      	nop
 80095b2:	e7fe      	b.n	80095b2 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	695b      	ldr	r3, [r3, #20]
 80095b8:	4a0a      	ldr	r2, [pc, #40]	; (80095e4 <prvTaskIsTaskSuspended+0x5c>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d10a      	bne.n	80095d4 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095c2:	4a09      	ldr	r2, [pc, #36]	; (80095e8 <prvTaskIsTaskSuspended+0x60>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d005      	beq.n	80095d4 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d101      	bne.n	80095d4 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 80095d0:	2301      	movs	r3, #1
 80095d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80095d4:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80095d6:	4618      	mov	r0, r3
 80095d8:	371c      	adds	r7, #28
 80095da:	46bd      	mov	sp, r7
 80095dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e0:	4770      	bx	lr
 80095e2:	bf00      	nop
 80095e4:	200013cc 	.word	0x200013cc
 80095e8:	200013a0 	.word	0x200013a0

080095ec <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d10a      	bne.n	8009614 <vTaskResume+0x28>
	__asm volatile
 80095fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009602:	f383 8811 	msr	BASEPRI, r3
 8009606:	f3bf 8f6f 	isb	sy
 800960a:	f3bf 8f4f 	dsb	sy
 800960e:	60bb      	str	r3, [r7, #8]
}
 8009610:	bf00      	nop
 8009612:	e7fe      	b.n	8009612 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8009614:	4b20      	ldr	r3, [pc, #128]	; (8009698 <vTaskResume+0xac>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	68fa      	ldr	r2, [r7, #12]
 800961a:	429a      	cmp	r2, r3
 800961c:	d038      	beq.n	8009690 <vTaskResume+0xa4>
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d035      	beq.n	8009690 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8009624:	f001 faa6 	bl	800ab74 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8009628:	68f8      	ldr	r0, [r7, #12]
 800962a:	f7ff ffad 	bl	8009588 <prvTaskIsTaskSuspended>
 800962e:	4603      	mov	r3, r0
 8009630:	2b00      	cmp	r3, #0
 8009632:	d02b      	beq.n	800968c <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	3304      	adds	r3, #4
 8009638:	4618      	mov	r0, r3
 800963a:	f7fe fedb 	bl	80083f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009642:	4b16      	ldr	r3, [pc, #88]	; (800969c <vTaskResume+0xb0>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	429a      	cmp	r2, r3
 8009648:	d903      	bls.n	8009652 <vTaskResume+0x66>
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800964e:	4a13      	ldr	r2, [pc, #76]	; (800969c <vTaskResume+0xb0>)
 8009650:	6013      	str	r3, [r2, #0]
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009656:	4613      	mov	r3, r2
 8009658:	009b      	lsls	r3, r3, #2
 800965a:	4413      	add	r3, r2
 800965c:	009b      	lsls	r3, r3, #2
 800965e:	4a10      	ldr	r2, [pc, #64]	; (80096a0 <vTaskResume+0xb4>)
 8009660:	441a      	add	r2, r3
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	3304      	adds	r3, #4
 8009666:	4619      	mov	r1, r3
 8009668:	4610      	mov	r0, r2
 800966a:	f7fe fe66 	bl	800833a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009672:	4b09      	ldr	r3, [pc, #36]	; (8009698 <vTaskResume+0xac>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009678:	429a      	cmp	r2, r3
 800967a:	d307      	bcc.n	800968c <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800967c:	4b09      	ldr	r3, [pc, #36]	; (80096a4 <vTaskResume+0xb8>)
 800967e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009682:	601a      	str	r2, [r3, #0]
 8009684:	f3bf 8f4f 	dsb	sy
 8009688:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800968c:	f001 faa2 	bl	800abd4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009690:	bf00      	nop
 8009692:	3710      	adds	r7, #16
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}
 8009698:	20000f0c 	.word	0x20000f0c
 800969c:	200013e8 	.word	0x200013e8
 80096a0:	20000f10 	.word	0x20000f10
 80096a4:	e000ed04 	.word	0xe000ed04

080096a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b08a      	sub	sp, #40	; 0x28
 80096ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80096ae:	2300      	movs	r3, #0
 80096b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80096b2:	2300      	movs	r3, #0
 80096b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80096b6:	463a      	mov	r2, r7
 80096b8:	1d39      	adds	r1, r7, #4
 80096ba:	f107 0308 	add.w	r3, r7, #8
 80096be:	4618      	mov	r0, r3
 80096c0:	f7fe fdda 	bl	8008278 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80096c4:	6839      	ldr	r1, [r7, #0]
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	68ba      	ldr	r2, [r7, #8]
 80096ca:	9202      	str	r2, [sp, #8]
 80096cc:	9301      	str	r3, [sp, #4]
 80096ce:	2300      	movs	r3, #0
 80096d0:	9300      	str	r3, [sp, #0]
 80096d2:	2300      	movs	r3, #0
 80096d4:	460a      	mov	r2, r1
 80096d6:	4924      	ldr	r1, [pc, #144]	; (8009768 <vTaskStartScheduler+0xc0>)
 80096d8:	4824      	ldr	r0, [pc, #144]	; (800976c <vTaskStartScheduler+0xc4>)
 80096da:	f7ff fc27 	bl	8008f2c <xTaskCreateStatic>
 80096de:	4603      	mov	r3, r0
 80096e0:	4a23      	ldr	r2, [pc, #140]	; (8009770 <vTaskStartScheduler+0xc8>)
 80096e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80096e4:	4b22      	ldr	r3, [pc, #136]	; (8009770 <vTaskStartScheduler+0xc8>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d002      	beq.n	80096f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80096ec:	2301      	movs	r3, #1
 80096ee:	617b      	str	r3, [r7, #20]
 80096f0:	e001      	b.n	80096f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80096f2:	2300      	movs	r3, #0
 80096f4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	d102      	bne.n	8009702 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80096fc:	f000 fdc0 	bl	800a280 <xTimerCreateTimerTask>
 8009700:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	2b01      	cmp	r3, #1
 8009706:	d11b      	bne.n	8009740 <vTaskStartScheduler+0x98>
	__asm volatile
 8009708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800970c:	f383 8811 	msr	BASEPRI, r3
 8009710:	f3bf 8f6f 	isb	sy
 8009714:	f3bf 8f4f 	dsb	sy
 8009718:	613b      	str	r3, [r7, #16]
}
 800971a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800971c:	4b15      	ldr	r3, [pc, #84]	; (8009774 <vTaskStartScheduler+0xcc>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	3358      	adds	r3, #88	; 0x58
 8009722:	4a15      	ldr	r2, [pc, #84]	; (8009778 <vTaskStartScheduler+0xd0>)
 8009724:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009726:	4b15      	ldr	r3, [pc, #84]	; (800977c <vTaskStartScheduler+0xd4>)
 8009728:	f04f 32ff 	mov.w	r2, #4294967295
 800972c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800972e:	4b14      	ldr	r3, [pc, #80]	; (8009780 <vTaskStartScheduler+0xd8>)
 8009730:	2201      	movs	r2, #1
 8009732:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009734:	4b13      	ldr	r3, [pc, #76]	; (8009784 <vTaskStartScheduler+0xdc>)
 8009736:	2200      	movs	r2, #0
 8009738:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800973a:	f001 f979 	bl	800aa30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800973e:	e00e      	b.n	800975e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009746:	d10a      	bne.n	800975e <vTaskStartScheduler+0xb6>
	__asm volatile
 8009748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800974c:	f383 8811 	msr	BASEPRI, r3
 8009750:	f3bf 8f6f 	isb	sy
 8009754:	f3bf 8f4f 	dsb	sy
 8009758:	60fb      	str	r3, [r7, #12]
}
 800975a:	bf00      	nop
 800975c:	e7fe      	b.n	800975c <vTaskStartScheduler+0xb4>
}
 800975e:	bf00      	nop
 8009760:	3718      	adds	r7, #24
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}
 8009766:	bf00      	nop
 8009768:	0800dddc 	.word	0x0800dddc
 800976c:	08009dad 	.word	0x08009dad
 8009770:	20001404 	.word	0x20001404
 8009774:	20000f0c 	.word	0x20000f0c
 8009778:	20000068 	.word	0x20000068
 800977c:	20001400 	.word	0x20001400
 8009780:	200013ec 	.word	0x200013ec
 8009784:	200013e4 	.word	0x200013e4

08009788 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009788:	b480      	push	{r7}
 800978a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800978c:	4b04      	ldr	r3, [pc, #16]	; (80097a0 <vTaskSuspendAll+0x18>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	3301      	adds	r3, #1
 8009792:	4a03      	ldr	r2, [pc, #12]	; (80097a0 <vTaskSuspendAll+0x18>)
 8009794:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009796:	bf00      	nop
 8009798:	46bd      	mov	sp, r7
 800979a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979e:	4770      	bx	lr
 80097a0:	20001408 	.word	0x20001408

080097a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b084      	sub	sp, #16
 80097a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80097aa:	2300      	movs	r3, #0
 80097ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80097ae:	2300      	movs	r3, #0
 80097b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80097b2:	4b42      	ldr	r3, [pc, #264]	; (80098bc <xTaskResumeAll+0x118>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d10a      	bne.n	80097d0 <xTaskResumeAll+0x2c>
	__asm volatile
 80097ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097be:	f383 8811 	msr	BASEPRI, r3
 80097c2:	f3bf 8f6f 	isb	sy
 80097c6:	f3bf 8f4f 	dsb	sy
 80097ca:	603b      	str	r3, [r7, #0]
}
 80097cc:	bf00      	nop
 80097ce:	e7fe      	b.n	80097ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80097d0:	f001 f9d0 	bl	800ab74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80097d4:	4b39      	ldr	r3, [pc, #228]	; (80098bc <xTaskResumeAll+0x118>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	3b01      	subs	r3, #1
 80097da:	4a38      	ldr	r2, [pc, #224]	; (80098bc <xTaskResumeAll+0x118>)
 80097dc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097de:	4b37      	ldr	r3, [pc, #220]	; (80098bc <xTaskResumeAll+0x118>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d162      	bne.n	80098ac <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80097e6:	4b36      	ldr	r3, [pc, #216]	; (80098c0 <xTaskResumeAll+0x11c>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d05e      	beq.n	80098ac <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80097ee:	e02f      	b.n	8009850 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097f0:	4b34      	ldr	r3, [pc, #208]	; (80098c4 <xTaskResumeAll+0x120>)
 80097f2:	68db      	ldr	r3, [r3, #12]
 80097f4:	68db      	ldr	r3, [r3, #12]
 80097f6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	3318      	adds	r3, #24
 80097fc:	4618      	mov	r0, r3
 80097fe:	f7fe fdf9 	bl	80083f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	3304      	adds	r3, #4
 8009806:	4618      	mov	r0, r3
 8009808:	f7fe fdf4 	bl	80083f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009810:	4b2d      	ldr	r3, [pc, #180]	; (80098c8 <xTaskResumeAll+0x124>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	429a      	cmp	r2, r3
 8009816:	d903      	bls.n	8009820 <xTaskResumeAll+0x7c>
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800981c:	4a2a      	ldr	r2, [pc, #168]	; (80098c8 <xTaskResumeAll+0x124>)
 800981e:	6013      	str	r3, [r2, #0]
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009824:	4613      	mov	r3, r2
 8009826:	009b      	lsls	r3, r3, #2
 8009828:	4413      	add	r3, r2
 800982a:	009b      	lsls	r3, r3, #2
 800982c:	4a27      	ldr	r2, [pc, #156]	; (80098cc <xTaskResumeAll+0x128>)
 800982e:	441a      	add	r2, r3
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	3304      	adds	r3, #4
 8009834:	4619      	mov	r1, r3
 8009836:	4610      	mov	r0, r2
 8009838:	f7fe fd7f 	bl	800833a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009840:	4b23      	ldr	r3, [pc, #140]	; (80098d0 <xTaskResumeAll+0x12c>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009846:	429a      	cmp	r2, r3
 8009848:	d302      	bcc.n	8009850 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800984a:	4b22      	ldr	r3, [pc, #136]	; (80098d4 <xTaskResumeAll+0x130>)
 800984c:	2201      	movs	r2, #1
 800984e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009850:	4b1c      	ldr	r3, [pc, #112]	; (80098c4 <xTaskResumeAll+0x120>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d1cb      	bne.n	80097f0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d001      	beq.n	8009862 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800985e:	f000 fbb3 	bl	8009fc8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009862:	4b1d      	ldr	r3, [pc, #116]	; (80098d8 <xTaskResumeAll+0x134>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d010      	beq.n	8009890 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800986e:	f000 f847 	bl	8009900 <xTaskIncrementTick>
 8009872:	4603      	mov	r3, r0
 8009874:	2b00      	cmp	r3, #0
 8009876:	d002      	beq.n	800987e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009878:	4b16      	ldr	r3, [pc, #88]	; (80098d4 <xTaskResumeAll+0x130>)
 800987a:	2201      	movs	r2, #1
 800987c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	3b01      	subs	r3, #1
 8009882:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d1f1      	bne.n	800986e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800988a:	4b13      	ldr	r3, [pc, #76]	; (80098d8 <xTaskResumeAll+0x134>)
 800988c:	2200      	movs	r2, #0
 800988e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009890:	4b10      	ldr	r3, [pc, #64]	; (80098d4 <xTaskResumeAll+0x130>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d009      	beq.n	80098ac <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009898:	2301      	movs	r3, #1
 800989a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800989c:	4b0f      	ldr	r3, [pc, #60]	; (80098dc <xTaskResumeAll+0x138>)
 800989e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098a2:	601a      	str	r2, [r3, #0]
 80098a4:	f3bf 8f4f 	dsb	sy
 80098a8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80098ac:	f001 f992 	bl	800abd4 <vPortExitCritical>

	return xAlreadyYielded;
 80098b0:	68bb      	ldr	r3, [r7, #8]
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3710      	adds	r7, #16
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}
 80098ba:	bf00      	nop
 80098bc:	20001408 	.word	0x20001408
 80098c0:	200013e0 	.word	0x200013e0
 80098c4:	200013a0 	.word	0x200013a0
 80098c8:	200013e8 	.word	0x200013e8
 80098cc:	20000f10 	.word	0x20000f10
 80098d0:	20000f0c 	.word	0x20000f0c
 80098d4:	200013f4 	.word	0x200013f4
 80098d8:	200013f0 	.word	0x200013f0
 80098dc:	e000ed04 	.word	0xe000ed04

080098e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80098e0:	b480      	push	{r7}
 80098e2:	b083      	sub	sp, #12
 80098e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80098e6:	4b05      	ldr	r3, [pc, #20]	; (80098fc <xTaskGetTickCount+0x1c>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80098ec:	687b      	ldr	r3, [r7, #4]
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	370c      	adds	r7, #12
 80098f2:	46bd      	mov	sp, r7
 80098f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f8:	4770      	bx	lr
 80098fa:	bf00      	nop
 80098fc:	200013e4 	.word	0x200013e4

08009900 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b086      	sub	sp, #24
 8009904:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009906:	2300      	movs	r3, #0
 8009908:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800990a:	4b4f      	ldr	r3, [pc, #316]	; (8009a48 <xTaskIncrementTick+0x148>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	2b00      	cmp	r3, #0
 8009910:	f040 808f 	bne.w	8009a32 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009914:	4b4d      	ldr	r3, [pc, #308]	; (8009a4c <xTaskIncrementTick+0x14c>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	3301      	adds	r3, #1
 800991a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800991c:	4a4b      	ldr	r2, [pc, #300]	; (8009a4c <xTaskIncrementTick+0x14c>)
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d120      	bne.n	800996a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009928:	4b49      	ldr	r3, [pc, #292]	; (8009a50 <xTaskIncrementTick+0x150>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d00a      	beq.n	8009948 <xTaskIncrementTick+0x48>
	__asm volatile
 8009932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009936:	f383 8811 	msr	BASEPRI, r3
 800993a:	f3bf 8f6f 	isb	sy
 800993e:	f3bf 8f4f 	dsb	sy
 8009942:	603b      	str	r3, [r7, #0]
}
 8009944:	bf00      	nop
 8009946:	e7fe      	b.n	8009946 <xTaskIncrementTick+0x46>
 8009948:	4b41      	ldr	r3, [pc, #260]	; (8009a50 <xTaskIncrementTick+0x150>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	60fb      	str	r3, [r7, #12]
 800994e:	4b41      	ldr	r3, [pc, #260]	; (8009a54 <xTaskIncrementTick+0x154>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	4a3f      	ldr	r2, [pc, #252]	; (8009a50 <xTaskIncrementTick+0x150>)
 8009954:	6013      	str	r3, [r2, #0]
 8009956:	4a3f      	ldr	r2, [pc, #252]	; (8009a54 <xTaskIncrementTick+0x154>)
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	6013      	str	r3, [r2, #0]
 800995c:	4b3e      	ldr	r3, [pc, #248]	; (8009a58 <xTaskIncrementTick+0x158>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	3301      	adds	r3, #1
 8009962:	4a3d      	ldr	r2, [pc, #244]	; (8009a58 <xTaskIncrementTick+0x158>)
 8009964:	6013      	str	r3, [r2, #0]
 8009966:	f000 fb2f 	bl	8009fc8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800996a:	4b3c      	ldr	r3, [pc, #240]	; (8009a5c <xTaskIncrementTick+0x15c>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	693a      	ldr	r2, [r7, #16]
 8009970:	429a      	cmp	r2, r3
 8009972:	d349      	bcc.n	8009a08 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009974:	4b36      	ldr	r3, [pc, #216]	; (8009a50 <xTaskIncrementTick+0x150>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d104      	bne.n	8009988 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800997e:	4b37      	ldr	r3, [pc, #220]	; (8009a5c <xTaskIncrementTick+0x15c>)
 8009980:	f04f 32ff 	mov.w	r2, #4294967295
 8009984:	601a      	str	r2, [r3, #0]
					break;
 8009986:	e03f      	b.n	8009a08 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009988:	4b31      	ldr	r3, [pc, #196]	; (8009a50 <xTaskIncrementTick+0x150>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	68db      	ldr	r3, [r3, #12]
 800998e:	68db      	ldr	r3, [r3, #12]
 8009990:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	685b      	ldr	r3, [r3, #4]
 8009996:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009998:	693a      	ldr	r2, [r7, #16]
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	429a      	cmp	r2, r3
 800999e:	d203      	bcs.n	80099a8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80099a0:	4a2e      	ldr	r2, [pc, #184]	; (8009a5c <xTaskIncrementTick+0x15c>)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80099a6:	e02f      	b.n	8009a08 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	3304      	adds	r3, #4
 80099ac:	4618      	mov	r0, r3
 80099ae:	f7fe fd21 	bl	80083f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d004      	beq.n	80099c4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	3318      	adds	r3, #24
 80099be:	4618      	mov	r0, r3
 80099c0:	f7fe fd18 	bl	80083f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099c8:	4b25      	ldr	r3, [pc, #148]	; (8009a60 <xTaskIncrementTick+0x160>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	429a      	cmp	r2, r3
 80099ce:	d903      	bls.n	80099d8 <xTaskIncrementTick+0xd8>
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099d4:	4a22      	ldr	r2, [pc, #136]	; (8009a60 <xTaskIncrementTick+0x160>)
 80099d6:	6013      	str	r3, [r2, #0]
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099dc:	4613      	mov	r3, r2
 80099de:	009b      	lsls	r3, r3, #2
 80099e0:	4413      	add	r3, r2
 80099e2:	009b      	lsls	r3, r3, #2
 80099e4:	4a1f      	ldr	r2, [pc, #124]	; (8009a64 <xTaskIncrementTick+0x164>)
 80099e6:	441a      	add	r2, r3
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	3304      	adds	r3, #4
 80099ec:	4619      	mov	r1, r3
 80099ee:	4610      	mov	r0, r2
 80099f0:	f7fe fca3 	bl	800833a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099f8:	4b1b      	ldr	r3, [pc, #108]	; (8009a68 <xTaskIncrementTick+0x168>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099fe:	429a      	cmp	r2, r3
 8009a00:	d3b8      	bcc.n	8009974 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009a02:	2301      	movs	r3, #1
 8009a04:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a06:	e7b5      	b.n	8009974 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009a08:	4b17      	ldr	r3, [pc, #92]	; (8009a68 <xTaskIncrementTick+0x168>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a0e:	4915      	ldr	r1, [pc, #84]	; (8009a64 <xTaskIncrementTick+0x164>)
 8009a10:	4613      	mov	r3, r2
 8009a12:	009b      	lsls	r3, r3, #2
 8009a14:	4413      	add	r3, r2
 8009a16:	009b      	lsls	r3, r3, #2
 8009a18:	440b      	add	r3, r1
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	2b01      	cmp	r3, #1
 8009a1e:	d901      	bls.n	8009a24 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009a20:	2301      	movs	r3, #1
 8009a22:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009a24:	4b11      	ldr	r3, [pc, #68]	; (8009a6c <xTaskIncrementTick+0x16c>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d007      	beq.n	8009a3c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	617b      	str	r3, [r7, #20]
 8009a30:	e004      	b.n	8009a3c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009a32:	4b0f      	ldr	r3, [pc, #60]	; (8009a70 <xTaskIncrementTick+0x170>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	3301      	adds	r3, #1
 8009a38:	4a0d      	ldr	r2, [pc, #52]	; (8009a70 <xTaskIncrementTick+0x170>)
 8009a3a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009a3c:	697b      	ldr	r3, [r7, #20]
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3718      	adds	r7, #24
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
 8009a46:	bf00      	nop
 8009a48:	20001408 	.word	0x20001408
 8009a4c:	200013e4 	.word	0x200013e4
 8009a50:	20001398 	.word	0x20001398
 8009a54:	2000139c 	.word	0x2000139c
 8009a58:	200013f8 	.word	0x200013f8
 8009a5c:	20001400 	.word	0x20001400
 8009a60:	200013e8 	.word	0x200013e8
 8009a64:	20000f10 	.word	0x20000f10
 8009a68:	20000f0c 	.word	0x20000f0c
 8009a6c:	200013f4 	.word	0x200013f4
 8009a70:	200013f0 	.word	0x200013f0

08009a74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009a74:	b480      	push	{r7}
 8009a76:	b085      	sub	sp, #20
 8009a78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009a7a:	4b2a      	ldr	r3, [pc, #168]	; (8009b24 <vTaskSwitchContext+0xb0>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d003      	beq.n	8009a8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009a82:	4b29      	ldr	r3, [pc, #164]	; (8009b28 <vTaskSwitchContext+0xb4>)
 8009a84:	2201      	movs	r2, #1
 8009a86:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009a88:	e046      	b.n	8009b18 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009a8a:	4b27      	ldr	r3, [pc, #156]	; (8009b28 <vTaskSwitchContext+0xb4>)
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a90:	4b26      	ldr	r3, [pc, #152]	; (8009b2c <vTaskSwitchContext+0xb8>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	60fb      	str	r3, [r7, #12]
 8009a96:	e010      	b.n	8009aba <vTaskSwitchContext+0x46>
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d10a      	bne.n	8009ab4 <vTaskSwitchContext+0x40>
	__asm volatile
 8009a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa2:	f383 8811 	msr	BASEPRI, r3
 8009aa6:	f3bf 8f6f 	isb	sy
 8009aaa:	f3bf 8f4f 	dsb	sy
 8009aae:	607b      	str	r3, [r7, #4]
}
 8009ab0:	bf00      	nop
 8009ab2:	e7fe      	b.n	8009ab2 <vTaskSwitchContext+0x3e>
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	3b01      	subs	r3, #1
 8009ab8:	60fb      	str	r3, [r7, #12]
 8009aba:	491d      	ldr	r1, [pc, #116]	; (8009b30 <vTaskSwitchContext+0xbc>)
 8009abc:	68fa      	ldr	r2, [r7, #12]
 8009abe:	4613      	mov	r3, r2
 8009ac0:	009b      	lsls	r3, r3, #2
 8009ac2:	4413      	add	r3, r2
 8009ac4:	009b      	lsls	r3, r3, #2
 8009ac6:	440b      	add	r3, r1
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d0e4      	beq.n	8009a98 <vTaskSwitchContext+0x24>
 8009ace:	68fa      	ldr	r2, [r7, #12]
 8009ad0:	4613      	mov	r3, r2
 8009ad2:	009b      	lsls	r3, r3, #2
 8009ad4:	4413      	add	r3, r2
 8009ad6:	009b      	lsls	r3, r3, #2
 8009ad8:	4a15      	ldr	r2, [pc, #84]	; (8009b30 <vTaskSwitchContext+0xbc>)
 8009ada:	4413      	add	r3, r2
 8009adc:	60bb      	str	r3, [r7, #8]
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	685b      	ldr	r3, [r3, #4]
 8009ae2:	685a      	ldr	r2, [r3, #4]
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	605a      	str	r2, [r3, #4]
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	685a      	ldr	r2, [r3, #4]
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	3308      	adds	r3, #8
 8009af0:	429a      	cmp	r2, r3
 8009af2:	d104      	bne.n	8009afe <vTaskSwitchContext+0x8a>
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	685b      	ldr	r3, [r3, #4]
 8009af8:	685a      	ldr	r2, [r3, #4]
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	605a      	str	r2, [r3, #4]
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	68db      	ldr	r3, [r3, #12]
 8009b04:	4a0b      	ldr	r2, [pc, #44]	; (8009b34 <vTaskSwitchContext+0xc0>)
 8009b06:	6013      	str	r3, [r2, #0]
 8009b08:	4a08      	ldr	r2, [pc, #32]	; (8009b2c <vTaskSwitchContext+0xb8>)
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009b0e:	4b09      	ldr	r3, [pc, #36]	; (8009b34 <vTaskSwitchContext+0xc0>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	3358      	adds	r3, #88	; 0x58
 8009b14:	4a08      	ldr	r2, [pc, #32]	; (8009b38 <vTaskSwitchContext+0xc4>)
 8009b16:	6013      	str	r3, [r2, #0]
}
 8009b18:	bf00      	nop
 8009b1a:	3714      	adds	r7, #20
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b22:	4770      	bx	lr
 8009b24:	20001408 	.word	0x20001408
 8009b28:	200013f4 	.word	0x200013f4
 8009b2c:	200013e8 	.word	0x200013e8
 8009b30:	20000f10 	.word	0x20000f10
 8009b34:	20000f0c 	.word	0x20000f0c
 8009b38:	20000068 	.word	0x20000068

08009b3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b084      	sub	sp, #16
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d10a      	bne.n	8009b62 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b50:	f383 8811 	msr	BASEPRI, r3
 8009b54:	f3bf 8f6f 	isb	sy
 8009b58:	f3bf 8f4f 	dsb	sy
 8009b5c:	60fb      	str	r3, [r7, #12]
}
 8009b5e:	bf00      	nop
 8009b60:	e7fe      	b.n	8009b60 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b62:	4b07      	ldr	r3, [pc, #28]	; (8009b80 <vTaskPlaceOnEventList+0x44>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	3318      	adds	r3, #24
 8009b68:	4619      	mov	r1, r3
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f7fe fc09 	bl	8008382 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009b70:	2101      	movs	r1, #1
 8009b72:	6838      	ldr	r0, [r7, #0]
 8009b74:	f000 fb30 	bl	800a1d8 <prvAddCurrentTaskToDelayedList>
}
 8009b78:	bf00      	nop
 8009b7a:	3710      	adds	r7, #16
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}
 8009b80:	20000f0c 	.word	0x20000f0c

08009b84 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b086      	sub	sp, #24
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	60f8      	str	r0, [r7, #12]
 8009b8c:	60b9      	str	r1, [r7, #8]
 8009b8e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d10a      	bne.n	8009bac <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b9a:	f383 8811 	msr	BASEPRI, r3
 8009b9e:	f3bf 8f6f 	isb	sy
 8009ba2:	f3bf 8f4f 	dsb	sy
 8009ba6:	617b      	str	r3, [r7, #20]
}
 8009ba8:	bf00      	nop
 8009baa:	e7fe      	b.n	8009baa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009bac:	4b0a      	ldr	r3, [pc, #40]	; (8009bd8 <vTaskPlaceOnEventListRestricted+0x54>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	3318      	adds	r3, #24
 8009bb2:	4619      	mov	r1, r3
 8009bb4:	68f8      	ldr	r0, [r7, #12]
 8009bb6:	f7fe fbc0 	bl	800833a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d002      	beq.n	8009bc6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8009bc4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009bc6:	6879      	ldr	r1, [r7, #4]
 8009bc8:	68b8      	ldr	r0, [r7, #8]
 8009bca:	f000 fb05 	bl	800a1d8 <prvAddCurrentTaskToDelayedList>
	}
 8009bce:	bf00      	nop
 8009bd0:	3718      	adds	r7, #24
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
 8009bd6:	bf00      	nop
 8009bd8:	20000f0c 	.word	0x20000f0c

08009bdc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b086      	sub	sp, #24
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	68db      	ldr	r3, [r3, #12]
 8009be8:	68db      	ldr	r3, [r3, #12]
 8009bea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d10a      	bne.n	8009c08 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf6:	f383 8811 	msr	BASEPRI, r3
 8009bfa:	f3bf 8f6f 	isb	sy
 8009bfe:	f3bf 8f4f 	dsb	sy
 8009c02:	60fb      	str	r3, [r7, #12]
}
 8009c04:	bf00      	nop
 8009c06:	e7fe      	b.n	8009c06 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	3318      	adds	r3, #24
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f7fe fbf1 	bl	80083f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c12:	4b1e      	ldr	r3, [pc, #120]	; (8009c8c <xTaskRemoveFromEventList+0xb0>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d11d      	bne.n	8009c56 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	3304      	adds	r3, #4
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f7fe fbe8 	bl	80083f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c28:	4b19      	ldr	r3, [pc, #100]	; (8009c90 <xTaskRemoveFromEventList+0xb4>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	d903      	bls.n	8009c38 <xTaskRemoveFromEventList+0x5c>
 8009c30:	693b      	ldr	r3, [r7, #16]
 8009c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c34:	4a16      	ldr	r2, [pc, #88]	; (8009c90 <xTaskRemoveFromEventList+0xb4>)
 8009c36:	6013      	str	r3, [r2, #0]
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c3c:	4613      	mov	r3, r2
 8009c3e:	009b      	lsls	r3, r3, #2
 8009c40:	4413      	add	r3, r2
 8009c42:	009b      	lsls	r3, r3, #2
 8009c44:	4a13      	ldr	r2, [pc, #76]	; (8009c94 <xTaskRemoveFromEventList+0xb8>)
 8009c46:	441a      	add	r2, r3
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	3304      	adds	r3, #4
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	4610      	mov	r0, r2
 8009c50:	f7fe fb73 	bl	800833a <vListInsertEnd>
 8009c54:	e005      	b.n	8009c62 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	3318      	adds	r3, #24
 8009c5a:	4619      	mov	r1, r3
 8009c5c:	480e      	ldr	r0, [pc, #56]	; (8009c98 <xTaskRemoveFromEventList+0xbc>)
 8009c5e:	f7fe fb6c 	bl	800833a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009c62:	693b      	ldr	r3, [r7, #16]
 8009c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c66:	4b0d      	ldr	r3, [pc, #52]	; (8009c9c <xTaskRemoveFromEventList+0xc0>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c6c:	429a      	cmp	r2, r3
 8009c6e:	d905      	bls.n	8009c7c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009c70:	2301      	movs	r3, #1
 8009c72:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009c74:	4b0a      	ldr	r3, [pc, #40]	; (8009ca0 <xTaskRemoveFromEventList+0xc4>)
 8009c76:	2201      	movs	r2, #1
 8009c78:	601a      	str	r2, [r3, #0]
 8009c7a:	e001      	b.n	8009c80 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009c80:	697b      	ldr	r3, [r7, #20]
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3718      	adds	r7, #24
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}
 8009c8a:	bf00      	nop
 8009c8c:	20001408 	.word	0x20001408
 8009c90:	200013e8 	.word	0x200013e8
 8009c94:	20000f10 	.word	0x20000f10
 8009c98:	200013a0 	.word	0x200013a0
 8009c9c:	20000f0c 	.word	0x20000f0c
 8009ca0:	200013f4 	.word	0x200013f4

08009ca4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b083      	sub	sp, #12
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009cac:	4b06      	ldr	r3, [pc, #24]	; (8009cc8 <vTaskInternalSetTimeOutState+0x24>)
 8009cae:	681a      	ldr	r2, [r3, #0]
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009cb4:	4b05      	ldr	r3, [pc, #20]	; (8009ccc <vTaskInternalSetTimeOutState+0x28>)
 8009cb6:	681a      	ldr	r2, [r3, #0]
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	605a      	str	r2, [r3, #4]
}
 8009cbc:	bf00      	nop
 8009cbe:	370c      	adds	r7, #12
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr
 8009cc8:	200013f8 	.word	0x200013f8
 8009ccc:	200013e4 	.word	0x200013e4

08009cd0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b088      	sub	sp, #32
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d10a      	bne.n	8009cf6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce4:	f383 8811 	msr	BASEPRI, r3
 8009ce8:	f3bf 8f6f 	isb	sy
 8009cec:	f3bf 8f4f 	dsb	sy
 8009cf0:	613b      	str	r3, [r7, #16]
}
 8009cf2:	bf00      	nop
 8009cf4:	e7fe      	b.n	8009cf4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d10a      	bne.n	8009d12 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d00:	f383 8811 	msr	BASEPRI, r3
 8009d04:	f3bf 8f6f 	isb	sy
 8009d08:	f3bf 8f4f 	dsb	sy
 8009d0c:	60fb      	str	r3, [r7, #12]
}
 8009d0e:	bf00      	nop
 8009d10:	e7fe      	b.n	8009d10 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009d12:	f000 ff2f 	bl	800ab74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009d16:	4b1d      	ldr	r3, [pc, #116]	; (8009d8c <xTaskCheckForTimeOut+0xbc>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	685b      	ldr	r3, [r3, #4]
 8009d20:	69ba      	ldr	r2, [r7, #24]
 8009d22:	1ad3      	subs	r3, r2, r3
 8009d24:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d2e:	d102      	bne.n	8009d36 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009d30:	2300      	movs	r3, #0
 8009d32:	61fb      	str	r3, [r7, #28]
 8009d34:	e023      	b.n	8009d7e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681a      	ldr	r2, [r3, #0]
 8009d3a:	4b15      	ldr	r3, [pc, #84]	; (8009d90 <xTaskCheckForTimeOut+0xc0>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	d007      	beq.n	8009d52 <xTaskCheckForTimeOut+0x82>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	685b      	ldr	r3, [r3, #4]
 8009d46:	69ba      	ldr	r2, [r7, #24]
 8009d48:	429a      	cmp	r2, r3
 8009d4a:	d302      	bcc.n	8009d52 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	61fb      	str	r3, [r7, #28]
 8009d50:	e015      	b.n	8009d7e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	697a      	ldr	r2, [r7, #20]
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	d20b      	bcs.n	8009d74 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	681a      	ldr	r2, [r3, #0]
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	1ad2      	subs	r2, r2, r3
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f7ff ff9b 	bl	8009ca4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	61fb      	str	r3, [r7, #28]
 8009d72:	e004      	b.n	8009d7e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	2200      	movs	r2, #0
 8009d78:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009d7e:	f000 ff29 	bl	800abd4 <vPortExitCritical>

	return xReturn;
 8009d82:	69fb      	ldr	r3, [r7, #28]
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3720      	adds	r7, #32
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}
 8009d8c:	200013e4 	.word	0x200013e4
 8009d90:	200013f8 	.word	0x200013f8

08009d94 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009d94:	b480      	push	{r7}
 8009d96:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009d98:	4b03      	ldr	r3, [pc, #12]	; (8009da8 <vTaskMissedYield+0x14>)
 8009d9a:	2201      	movs	r2, #1
 8009d9c:	601a      	str	r2, [r3, #0]
}
 8009d9e:	bf00      	nop
 8009da0:	46bd      	mov	sp, r7
 8009da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da6:	4770      	bx	lr
 8009da8:	200013f4 	.word	0x200013f4

08009dac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b082      	sub	sp, #8
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009db4:	f000 f8a6 	bl	8009f04 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009db8:	4b06      	ldr	r3, [pc, #24]	; (8009dd4 <prvIdleTask+0x28>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	2b01      	cmp	r3, #1
 8009dbe:	d9f9      	bls.n	8009db4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009dc0:	4b05      	ldr	r3, [pc, #20]	; (8009dd8 <prvIdleTask+0x2c>)
 8009dc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dc6:	601a      	str	r2, [r3, #0]
 8009dc8:	f3bf 8f4f 	dsb	sy
 8009dcc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009dd0:	e7f0      	b.n	8009db4 <prvIdleTask+0x8>
 8009dd2:	bf00      	nop
 8009dd4:	20000f10 	.word	0x20000f10
 8009dd8:	e000ed04 	.word	0xe000ed04

08009ddc <vTaskSetThreadLocalStoragePointer>:
/*-----------------------------------------------------------*/

#if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )

	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue )
	{
 8009ddc:	b480      	push	{r7}
 8009dde:	b087      	sub	sp, #28
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	60f8      	str	r0, [r7, #12]
 8009de4:	60b9      	str	r1, [r7, #8]
 8009de6:	607a      	str	r2, [r7, #4]
	TCB_t *pxTCB;

		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	dc1c      	bgt.n	8009e28 <vTaskSetThreadLocalStoragePointer+0x4c>
		{
			pxTCB = prvGetTCBFromHandle( xTaskToSet );
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d102      	bne.n	8009dfa <vTaskSetThreadLocalStoragePointer+0x1e>
 8009df4:	4b0f      	ldr	r3, [pc, #60]	; (8009e34 <vTaskSetThreadLocalStoragePointer+0x58>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	e000      	b.n	8009dfc <vTaskSetThreadLocalStoragePointer+0x20>
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	617b      	str	r3, [r7, #20]
			configASSERT( pxTCB != NULL );
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d10a      	bne.n	8009e1a <vTaskSetThreadLocalStoragePointer+0x3e>
	__asm volatile
 8009e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e08:	f383 8811 	msr	BASEPRI, r3
 8009e0c:	f3bf 8f6f 	isb	sy
 8009e10:	f3bf 8f4f 	dsb	sy
 8009e14:	613b      	str	r3, [r7, #16]
}
 8009e16:	bf00      	nop
 8009e18:	e7fe      	b.n	8009e18 <vTaskSetThreadLocalStoragePointer+0x3c>
			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
 8009e1a:	697a      	ldr	r2, [r7, #20]
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	3314      	adds	r3, #20
 8009e20:	009b      	lsls	r3, r3, #2
 8009e22:	4413      	add	r3, r2
 8009e24:	687a      	ldr	r2, [r7, #4]
 8009e26:	605a      	str	r2, [r3, #4]
		}
	}
 8009e28:	bf00      	nop
 8009e2a:	371c      	adds	r7, #28
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e32:	4770      	bx	lr
 8009e34:	20000f0c 	.word	0x20000f0c

08009e38 <pvTaskGetThreadLocalStoragePointer>:
/*-----------------------------------------------------------*/

#if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )

	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
	{
 8009e38:	b480      	push	{r7}
 8009e3a:	b085      	sub	sp, #20
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
 8009e40:	6039      	str	r1, [r7, #0]
	void *pvReturn = NULL;
 8009e42:	2300      	movs	r3, #0
 8009e44:	60fb      	str	r3, [r7, #12]
	TCB_t *pxTCB;

		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	dc0f      	bgt.n	8009e6c <pvTaskGetThreadLocalStoragePointer+0x34>
		{
			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d102      	bne.n	8009e58 <pvTaskGetThreadLocalStoragePointer+0x20>
 8009e52:	4b0b      	ldr	r3, [pc, #44]	; (8009e80 <pvTaskGetThreadLocalStoragePointer+0x48>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	e000      	b.n	8009e5a <pvTaskGetThreadLocalStoragePointer+0x22>
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	60bb      	str	r3, [r7, #8]
			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
 8009e5c:	68ba      	ldr	r2, [r7, #8]
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	3314      	adds	r3, #20
 8009e62:	009b      	lsls	r3, r3, #2
 8009e64:	4413      	add	r3, r2
 8009e66:	685b      	ldr	r3, [r3, #4]
 8009e68:	60fb      	str	r3, [r7, #12]
 8009e6a:	e001      	b.n	8009e70 <pvTaskGetThreadLocalStoragePointer+0x38>
		}
		else
		{
			pvReturn = NULL;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	60fb      	str	r3, [r7, #12]
		}

		return pvReturn;
 8009e70:	68fb      	ldr	r3, [r7, #12]
	}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3714      	adds	r7, #20
 8009e76:	46bd      	mov	sp, r7
 8009e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7c:	4770      	bx	lr
 8009e7e:	bf00      	nop
 8009e80:	20000f0c 	.word	0x20000f0c

08009e84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b082      	sub	sp, #8
 8009e88:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	607b      	str	r3, [r7, #4]
 8009e8e:	e00c      	b.n	8009eaa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009e90:	687a      	ldr	r2, [r7, #4]
 8009e92:	4613      	mov	r3, r2
 8009e94:	009b      	lsls	r3, r3, #2
 8009e96:	4413      	add	r3, r2
 8009e98:	009b      	lsls	r3, r3, #2
 8009e9a:	4a12      	ldr	r2, [pc, #72]	; (8009ee4 <prvInitialiseTaskLists+0x60>)
 8009e9c:	4413      	add	r3, r2
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f7fe fa1e 	bl	80082e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	3301      	adds	r3, #1
 8009ea8:	607b      	str	r3, [r7, #4]
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2b37      	cmp	r3, #55	; 0x37
 8009eae:	d9ef      	bls.n	8009e90 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009eb0:	480d      	ldr	r0, [pc, #52]	; (8009ee8 <prvInitialiseTaskLists+0x64>)
 8009eb2:	f7fe fa15 	bl	80082e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009eb6:	480d      	ldr	r0, [pc, #52]	; (8009eec <prvInitialiseTaskLists+0x68>)
 8009eb8:	f7fe fa12 	bl	80082e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009ebc:	480c      	ldr	r0, [pc, #48]	; (8009ef0 <prvInitialiseTaskLists+0x6c>)
 8009ebe:	f7fe fa0f 	bl	80082e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009ec2:	480c      	ldr	r0, [pc, #48]	; (8009ef4 <prvInitialiseTaskLists+0x70>)
 8009ec4:	f7fe fa0c 	bl	80082e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009ec8:	480b      	ldr	r0, [pc, #44]	; (8009ef8 <prvInitialiseTaskLists+0x74>)
 8009eca:	f7fe fa09 	bl	80082e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009ece:	4b0b      	ldr	r3, [pc, #44]	; (8009efc <prvInitialiseTaskLists+0x78>)
 8009ed0:	4a05      	ldr	r2, [pc, #20]	; (8009ee8 <prvInitialiseTaskLists+0x64>)
 8009ed2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009ed4:	4b0a      	ldr	r3, [pc, #40]	; (8009f00 <prvInitialiseTaskLists+0x7c>)
 8009ed6:	4a05      	ldr	r2, [pc, #20]	; (8009eec <prvInitialiseTaskLists+0x68>)
 8009ed8:	601a      	str	r2, [r3, #0]
}
 8009eda:	bf00      	nop
 8009edc:	3708      	adds	r7, #8
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}
 8009ee2:	bf00      	nop
 8009ee4:	20000f10 	.word	0x20000f10
 8009ee8:	20001370 	.word	0x20001370
 8009eec:	20001384 	.word	0x20001384
 8009ef0:	200013a0 	.word	0x200013a0
 8009ef4:	200013b4 	.word	0x200013b4
 8009ef8:	200013cc 	.word	0x200013cc
 8009efc:	20001398 	.word	0x20001398
 8009f00:	2000139c 	.word	0x2000139c

08009f04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b082      	sub	sp, #8
 8009f08:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009f0a:	e019      	b.n	8009f40 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009f0c:	f000 fe32 	bl	800ab74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f10:	4b10      	ldr	r3, [pc, #64]	; (8009f54 <prvCheckTasksWaitingTermination+0x50>)
 8009f12:	68db      	ldr	r3, [r3, #12]
 8009f14:	68db      	ldr	r3, [r3, #12]
 8009f16:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	3304      	adds	r3, #4
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f7fe fa69 	bl	80083f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009f22:	4b0d      	ldr	r3, [pc, #52]	; (8009f58 <prvCheckTasksWaitingTermination+0x54>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	3b01      	subs	r3, #1
 8009f28:	4a0b      	ldr	r2, [pc, #44]	; (8009f58 <prvCheckTasksWaitingTermination+0x54>)
 8009f2a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009f2c:	4b0b      	ldr	r3, [pc, #44]	; (8009f5c <prvCheckTasksWaitingTermination+0x58>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	3b01      	subs	r3, #1
 8009f32:	4a0a      	ldr	r2, [pc, #40]	; (8009f5c <prvCheckTasksWaitingTermination+0x58>)
 8009f34:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009f36:	f000 fe4d 	bl	800abd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f000 f810 	bl	8009f60 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009f40:	4b06      	ldr	r3, [pc, #24]	; (8009f5c <prvCheckTasksWaitingTermination+0x58>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d1e1      	bne.n	8009f0c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009f48:	bf00      	nop
 8009f4a:	bf00      	nop
 8009f4c:	3708      	adds	r7, #8
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}
 8009f52:	bf00      	nop
 8009f54:	200013b4 	.word	0x200013b4
 8009f58:	200013e0 	.word	0x200013e0
 8009f5c:	200013c8 	.word	0x200013c8

08009f60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b084      	sub	sp, #16
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	3358      	adds	r3, #88	; 0x58
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f001 ff97 	bl	800bea0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d108      	bne.n	8009f8e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f80:	4618      	mov	r0, r3
 8009f82:	f000 ffe5 	bl	800af50 <vPortFree>
				vPortFree( pxTCB );
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f000 ffe2 	bl	800af50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009f8c:	e018      	b.n	8009fc0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8009f94:	2b01      	cmp	r3, #1
 8009f96:	d103      	bne.n	8009fa0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f000 ffd9 	bl	800af50 <vPortFree>
	}
 8009f9e:	e00f      	b.n	8009fc0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8009fa6:	2b02      	cmp	r3, #2
 8009fa8:	d00a      	beq.n	8009fc0 <prvDeleteTCB+0x60>
	__asm volatile
 8009faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fae:	f383 8811 	msr	BASEPRI, r3
 8009fb2:	f3bf 8f6f 	isb	sy
 8009fb6:	f3bf 8f4f 	dsb	sy
 8009fba:	60fb      	str	r3, [r7, #12]
}
 8009fbc:	bf00      	nop
 8009fbe:	e7fe      	b.n	8009fbe <prvDeleteTCB+0x5e>
	}
 8009fc0:	bf00      	nop
 8009fc2:	3710      	adds	r7, #16
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}

08009fc8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b083      	sub	sp, #12
 8009fcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009fce:	4b0c      	ldr	r3, [pc, #48]	; (800a000 <prvResetNextTaskUnblockTime+0x38>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d104      	bne.n	8009fe2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009fd8:	4b0a      	ldr	r3, [pc, #40]	; (800a004 <prvResetNextTaskUnblockTime+0x3c>)
 8009fda:	f04f 32ff 	mov.w	r2, #4294967295
 8009fde:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009fe0:	e008      	b.n	8009ff4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fe2:	4b07      	ldr	r3, [pc, #28]	; (800a000 <prvResetNextTaskUnblockTime+0x38>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	68db      	ldr	r3, [r3, #12]
 8009fe8:	68db      	ldr	r3, [r3, #12]
 8009fea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	685b      	ldr	r3, [r3, #4]
 8009ff0:	4a04      	ldr	r2, [pc, #16]	; (800a004 <prvResetNextTaskUnblockTime+0x3c>)
 8009ff2:	6013      	str	r3, [r2, #0]
}
 8009ff4:	bf00      	nop
 8009ff6:	370c      	adds	r7, #12
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffe:	4770      	bx	lr
 800a000:	20001398 	.word	0x20001398
 800a004:	20001400 	.word	0x20001400

0800a008 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800a008:	b480      	push	{r7}
 800a00a:	b083      	sub	sp, #12
 800a00c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800a00e:	4b05      	ldr	r3, [pc, #20]	; (800a024 <xTaskGetCurrentTaskHandle+0x1c>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	607b      	str	r3, [r7, #4]

		return xReturn;
 800a014:	687b      	ldr	r3, [r7, #4]
	}
 800a016:	4618      	mov	r0, r3
 800a018:	370c      	adds	r7, #12
 800a01a:	46bd      	mov	sp, r7
 800a01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a020:	4770      	bx	lr
 800a022:	bf00      	nop
 800a024:	20000f0c 	.word	0x20000f0c

0800a028 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a028:	b480      	push	{r7}
 800a02a:	b083      	sub	sp, #12
 800a02c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a02e:	4b0b      	ldr	r3, [pc, #44]	; (800a05c <xTaskGetSchedulerState+0x34>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d102      	bne.n	800a03c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a036:	2301      	movs	r3, #1
 800a038:	607b      	str	r3, [r7, #4]
 800a03a:	e008      	b.n	800a04e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a03c:	4b08      	ldr	r3, [pc, #32]	; (800a060 <xTaskGetSchedulerState+0x38>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d102      	bne.n	800a04a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a044:	2302      	movs	r3, #2
 800a046:	607b      	str	r3, [r7, #4]
 800a048:	e001      	b.n	800a04e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a04a:	2300      	movs	r3, #0
 800a04c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a04e:	687b      	ldr	r3, [r7, #4]
	}
 800a050:	4618      	mov	r0, r3
 800a052:	370c      	adds	r7, #12
 800a054:	46bd      	mov	sp, r7
 800a056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05a:	4770      	bx	lr
 800a05c:	200013ec 	.word	0x200013ec
 800a060:	20001408 	.word	0x20001408

0800a064 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a064:	b580      	push	{r7, lr}
 800a066:	b086      	sub	sp, #24
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a070:	2300      	movs	r3, #0
 800a072:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d056      	beq.n	800a128 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a07a:	4b2e      	ldr	r3, [pc, #184]	; (800a134 <xTaskPriorityDisinherit+0xd0>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	693a      	ldr	r2, [r7, #16]
 800a080:	429a      	cmp	r2, r3
 800a082:	d00a      	beq.n	800a09a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a084:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a088:	f383 8811 	msr	BASEPRI, r3
 800a08c:	f3bf 8f6f 	isb	sy
 800a090:	f3bf 8f4f 	dsb	sy
 800a094:	60fb      	str	r3, [r7, #12]
}
 800a096:	bf00      	nop
 800a098:	e7fe      	b.n	800a098 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d10a      	bne.n	800a0b8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a0a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a6:	f383 8811 	msr	BASEPRI, r3
 800a0aa:	f3bf 8f6f 	isb	sy
 800a0ae:	f3bf 8f4f 	dsb	sy
 800a0b2:	60bb      	str	r3, [r7, #8]
}
 800a0b4:	bf00      	nop
 800a0b6:	e7fe      	b.n	800a0b6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0bc:	1e5a      	subs	r2, r3, #1
 800a0be:	693b      	ldr	r3, [r7, #16]
 800a0c0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a0c2:	693b      	ldr	r3, [r7, #16]
 800a0c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0ca:	429a      	cmp	r2, r3
 800a0cc:	d02c      	beq.n	800a128 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d128      	bne.n	800a128 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a0d6:	693b      	ldr	r3, [r7, #16]
 800a0d8:	3304      	adds	r3, #4
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f7fe f98a 	bl	80083f4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0f8:	4b0f      	ldr	r3, [pc, #60]	; (800a138 <xTaskPriorityDisinherit+0xd4>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	429a      	cmp	r2, r3
 800a0fe:	d903      	bls.n	800a108 <xTaskPriorityDisinherit+0xa4>
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a104:	4a0c      	ldr	r2, [pc, #48]	; (800a138 <xTaskPriorityDisinherit+0xd4>)
 800a106:	6013      	str	r3, [r2, #0]
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a10c:	4613      	mov	r3, r2
 800a10e:	009b      	lsls	r3, r3, #2
 800a110:	4413      	add	r3, r2
 800a112:	009b      	lsls	r3, r3, #2
 800a114:	4a09      	ldr	r2, [pc, #36]	; (800a13c <xTaskPriorityDisinherit+0xd8>)
 800a116:	441a      	add	r2, r3
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	3304      	adds	r3, #4
 800a11c:	4619      	mov	r1, r3
 800a11e:	4610      	mov	r0, r2
 800a120:	f7fe f90b 	bl	800833a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a124:	2301      	movs	r3, #1
 800a126:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a128:	697b      	ldr	r3, [r7, #20]
	}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3718      	adds	r7, #24
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}
 800a132:	bf00      	nop
 800a134:	20000f0c 	.word	0x20000f0c
 800a138:	200013e8 	.word	0x200013e8
 800a13c:	20000f10 	.word	0x20000f10

0800a140 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800a140:	b580      	push	{r7, lr}
 800a142:	b084      	sub	sp, #16
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800a14a:	f000 fd13 	bl	800ab74 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800a14e:	4b20      	ldr	r3, [pc, #128]	; (800a1d0 <ulTaskNotifyTake+0x90>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a156:	2b00      	cmp	r3, #0
 800a158:	d113      	bne.n	800a182 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800a15a:	4b1d      	ldr	r3, [pc, #116]	; (800a1d0 <ulTaskNotifyTake+0x90>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	2201      	movs	r2, #1
 800a160:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8

				if( xTicksToWait > ( TickType_t ) 0 )
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d00b      	beq.n	800a182 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a16a:	2101      	movs	r1, #1
 800a16c:	6838      	ldr	r0, [r7, #0]
 800a16e:	f000 f833 	bl	800a1d8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800a172:	4b18      	ldr	r3, [pc, #96]	; (800a1d4 <ulTaskNotifyTake+0x94>)
 800a174:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a178:	601a      	str	r2, [r3, #0]
 800a17a:	f3bf 8f4f 	dsb	sy
 800a17e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800a182:	f000 fd27 	bl	800abd4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800a186:	f000 fcf5 	bl	800ab74 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800a18a:	4b11      	ldr	r3, [pc, #68]	; (800a1d0 <ulTaskNotifyTake+0x90>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a192:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d00e      	beq.n	800a1b8 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d005      	beq.n	800a1ac <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800a1a0:	4b0b      	ldr	r3, [pc, #44]	; (800a1d0 <ulTaskNotifyTake+0x90>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 800a1aa:	e005      	b.n	800a1b8 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800a1ac:	4b08      	ldr	r3, [pc, #32]	; (800a1d0 <ulTaskNotifyTake+0x90>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	68fa      	ldr	r2, [r7, #12]
 800a1b2:	3a01      	subs	r2, #1
 800a1b4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a1b8:	4b05      	ldr	r3, [pc, #20]	; (800a1d0 <ulTaskNotifyTake+0x90>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		}
		taskEXIT_CRITICAL();
 800a1c2:	f000 fd07 	bl	800abd4 <vPortExitCritical>

		return ulReturn;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
	}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3710      	adds	r7, #16
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}
 800a1d0:	20000f0c 	.word	0x20000f0c
 800a1d4:	e000ed04 	.word	0xe000ed04

0800a1d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b084      	sub	sp, #16
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
 800a1e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a1e2:	4b21      	ldr	r3, [pc, #132]	; (800a268 <prvAddCurrentTaskToDelayedList+0x90>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a1e8:	4b20      	ldr	r3, [pc, #128]	; (800a26c <prvAddCurrentTaskToDelayedList+0x94>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	3304      	adds	r3, #4
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f7fe f900 	bl	80083f4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1fa:	d10a      	bne.n	800a212 <prvAddCurrentTaskToDelayedList+0x3a>
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d007      	beq.n	800a212 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a202:	4b1a      	ldr	r3, [pc, #104]	; (800a26c <prvAddCurrentTaskToDelayedList+0x94>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	3304      	adds	r3, #4
 800a208:	4619      	mov	r1, r3
 800a20a:	4819      	ldr	r0, [pc, #100]	; (800a270 <prvAddCurrentTaskToDelayedList+0x98>)
 800a20c:	f7fe f895 	bl	800833a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a210:	e026      	b.n	800a260 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a212:	68fa      	ldr	r2, [r7, #12]
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	4413      	add	r3, r2
 800a218:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a21a:	4b14      	ldr	r3, [pc, #80]	; (800a26c <prvAddCurrentTaskToDelayedList+0x94>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	68ba      	ldr	r2, [r7, #8]
 800a220:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a222:	68ba      	ldr	r2, [r7, #8]
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	429a      	cmp	r2, r3
 800a228:	d209      	bcs.n	800a23e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a22a:	4b12      	ldr	r3, [pc, #72]	; (800a274 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a22c:	681a      	ldr	r2, [r3, #0]
 800a22e:	4b0f      	ldr	r3, [pc, #60]	; (800a26c <prvAddCurrentTaskToDelayedList+0x94>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	3304      	adds	r3, #4
 800a234:	4619      	mov	r1, r3
 800a236:	4610      	mov	r0, r2
 800a238:	f7fe f8a3 	bl	8008382 <vListInsert>
}
 800a23c:	e010      	b.n	800a260 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a23e:	4b0e      	ldr	r3, [pc, #56]	; (800a278 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a240:	681a      	ldr	r2, [r3, #0]
 800a242:	4b0a      	ldr	r3, [pc, #40]	; (800a26c <prvAddCurrentTaskToDelayedList+0x94>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	3304      	adds	r3, #4
 800a248:	4619      	mov	r1, r3
 800a24a:	4610      	mov	r0, r2
 800a24c:	f7fe f899 	bl	8008382 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a250:	4b0a      	ldr	r3, [pc, #40]	; (800a27c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	68ba      	ldr	r2, [r7, #8]
 800a256:	429a      	cmp	r2, r3
 800a258:	d202      	bcs.n	800a260 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a25a:	4a08      	ldr	r2, [pc, #32]	; (800a27c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	6013      	str	r3, [r2, #0]
}
 800a260:	bf00      	nop
 800a262:	3710      	adds	r7, #16
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}
 800a268:	200013e4 	.word	0x200013e4
 800a26c:	20000f0c 	.word	0x20000f0c
 800a270:	200013cc 	.word	0x200013cc
 800a274:	2000139c 	.word	0x2000139c
 800a278:	20001398 	.word	0x20001398
 800a27c:	20001400 	.word	0x20001400

0800a280 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b08a      	sub	sp, #40	; 0x28
 800a284:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a286:	2300      	movs	r3, #0
 800a288:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a28a:	f000 fb07 	bl	800a89c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a28e:	4b1c      	ldr	r3, [pc, #112]	; (800a300 <xTimerCreateTimerTask+0x80>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d021      	beq.n	800a2da <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a296:	2300      	movs	r3, #0
 800a298:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a29a:	2300      	movs	r3, #0
 800a29c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a29e:	1d3a      	adds	r2, r7, #4
 800a2a0:	f107 0108 	add.w	r1, r7, #8
 800a2a4:	f107 030c 	add.w	r3, r7, #12
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	f7fd ffff 	bl	80082ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a2ae:	6879      	ldr	r1, [r7, #4]
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	68fa      	ldr	r2, [r7, #12]
 800a2b4:	9202      	str	r2, [sp, #8]
 800a2b6:	9301      	str	r3, [sp, #4]
 800a2b8:	2302      	movs	r3, #2
 800a2ba:	9300      	str	r3, [sp, #0]
 800a2bc:	2300      	movs	r3, #0
 800a2be:	460a      	mov	r2, r1
 800a2c0:	4910      	ldr	r1, [pc, #64]	; (800a304 <xTimerCreateTimerTask+0x84>)
 800a2c2:	4811      	ldr	r0, [pc, #68]	; (800a308 <xTimerCreateTimerTask+0x88>)
 800a2c4:	f7fe fe32 	bl	8008f2c <xTaskCreateStatic>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	4a10      	ldr	r2, [pc, #64]	; (800a30c <xTimerCreateTimerTask+0x8c>)
 800a2cc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a2ce:	4b0f      	ldr	r3, [pc, #60]	; (800a30c <xTimerCreateTimerTask+0x8c>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d001      	beq.n	800a2da <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d10a      	bne.n	800a2f6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a2e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e4:	f383 8811 	msr	BASEPRI, r3
 800a2e8:	f3bf 8f6f 	isb	sy
 800a2ec:	f3bf 8f4f 	dsb	sy
 800a2f0:	613b      	str	r3, [r7, #16]
}
 800a2f2:	bf00      	nop
 800a2f4:	e7fe      	b.n	800a2f4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a2f6:	697b      	ldr	r3, [r7, #20]
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3718      	adds	r7, #24
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}
 800a300:	2000143c 	.word	0x2000143c
 800a304:	0800dde4 	.word	0x0800dde4
 800a308:	0800a445 	.word	0x0800a445
 800a30c:	20001440 	.word	0x20001440

0800a310 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b08a      	sub	sp, #40	; 0x28
 800a314:	af00      	add	r7, sp, #0
 800a316:	60f8      	str	r0, [r7, #12]
 800a318:	60b9      	str	r1, [r7, #8]
 800a31a:	607a      	str	r2, [r7, #4]
 800a31c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a31e:	2300      	movs	r3, #0
 800a320:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d10a      	bne.n	800a33e <xTimerGenericCommand+0x2e>
	__asm volatile
 800a328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a32c:	f383 8811 	msr	BASEPRI, r3
 800a330:	f3bf 8f6f 	isb	sy
 800a334:	f3bf 8f4f 	dsb	sy
 800a338:	623b      	str	r3, [r7, #32]
}
 800a33a:	bf00      	nop
 800a33c:	e7fe      	b.n	800a33c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a33e:	4b1a      	ldr	r3, [pc, #104]	; (800a3a8 <xTimerGenericCommand+0x98>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d02a      	beq.n	800a39c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	2b05      	cmp	r3, #5
 800a356:	dc18      	bgt.n	800a38a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a358:	f7ff fe66 	bl	800a028 <xTaskGetSchedulerState>
 800a35c:	4603      	mov	r3, r0
 800a35e:	2b02      	cmp	r3, #2
 800a360:	d109      	bne.n	800a376 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a362:	4b11      	ldr	r3, [pc, #68]	; (800a3a8 <xTimerGenericCommand+0x98>)
 800a364:	6818      	ldr	r0, [r3, #0]
 800a366:	f107 0110 	add.w	r1, r7, #16
 800a36a:	2300      	movs	r3, #0
 800a36c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a36e:	f7fe f9f5 	bl	800875c <xQueueGenericSend>
 800a372:	6278      	str	r0, [r7, #36]	; 0x24
 800a374:	e012      	b.n	800a39c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a376:	4b0c      	ldr	r3, [pc, #48]	; (800a3a8 <xTimerGenericCommand+0x98>)
 800a378:	6818      	ldr	r0, [r3, #0]
 800a37a:	f107 0110 	add.w	r1, r7, #16
 800a37e:	2300      	movs	r3, #0
 800a380:	2200      	movs	r2, #0
 800a382:	f7fe f9eb 	bl	800875c <xQueueGenericSend>
 800a386:	6278      	str	r0, [r7, #36]	; 0x24
 800a388:	e008      	b.n	800a39c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a38a:	4b07      	ldr	r3, [pc, #28]	; (800a3a8 <xTimerGenericCommand+0x98>)
 800a38c:	6818      	ldr	r0, [r3, #0]
 800a38e:	f107 0110 	add.w	r1, r7, #16
 800a392:	2300      	movs	r3, #0
 800a394:	683a      	ldr	r2, [r7, #0]
 800a396:	f7fe fadf 	bl	8008958 <xQueueGenericSendFromISR>
 800a39a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3728      	adds	r7, #40	; 0x28
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}
 800a3a6:	bf00      	nop
 800a3a8:	2000143c 	.word	0x2000143c

0800a3ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b088      	sub	sp, #32
 800a3b0:	af02      	add	r7, sp, #8
 800a3b2:	6078      	str	r0, [r7, #4]
 800a3b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3b6:	4b22      	ldr	r3, [pc, #136]	; (800a440 <prvProcessExpiredTimer+0x94>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	68db      	ldr	r3, [r3, #12]
 800a3bc:	68db      	ldr	r3, [r3, #12]
 800a3be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	3304      	adds	r3, #4
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f7fe f815 	bl	80083f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a3d0:	f003 0304 	and.w	r3, r3, #4
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d022      	beq.n	800a41e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	699a      	ldr	r2, [r3, #24]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	18d1      	adds	r1, r2, r3
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	683a      	ldr	r2, [r7, #0]
 800a3e4:	6978      	ldr	r0, [r7, #20]
 800a3e6:	f000 f8d1 	bl	800a58c <prvInsertTimerInActiveList>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d01f      	beq.n	800a430 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	9300      	str	r3, [sp, #0]
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	687a      	ldr	r2, [r7, #4]
 800a3f8:	2100      	movs	r1, #0
 800a3fa:	6978      	ldr	r0, [r7, #20]
 800a3fc:	f7ff ff88 	bl	800a310 <xTimerGenericCommand>
 800a400:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a402:	693b      	ldr	r3, [r7, #16]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d113      	bne.n	800a430 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a40c:	f383 8811 	msr	BASEPRI, r3
 800a410:	f3bf 8f6f 	isb	sy
 800a414:	f3bf 8f4f 	dsb	sy
 800a418:	60fb      	str	r3, [r7, #12]
}
 800a41a:	bf00      	nop
 800a41c:	e7fe      	b.n	800a41c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a424:	f023 0301 	bic.w	r3, r3, #1
 800a428:	b2da      	uxtb	r2, r3
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a430:	697b      	ldr	r3, [r7, #20]
 800a432:	6a1b      	ldr	r3, [r3, #32]
 800a434:	6978      	ldr	r0, [r7, #20]
 800a436:	4798      	blx	r3
}
 800a438:	bf00      	nop
 800a43a:	3718      	adds	r7, #24
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}
 800a440:	20001434 	.word	0x20001434

0800a444 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b084      	sub	sp, #16
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a44c:	f107 0308 	add.w	r3, r7, #8
 800a450:	4618      	mov	r0, r3
 800a452:	f000 f857 	bl	800a504 <prvGetNextExpireTime>
 800a456:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	4619      	mov	r1, r3
 800a45c:	68f8      	ldr	r0, [r7, #12]
 800a45e:	f000 f803 	bl	800a468 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a462:	f000 f8d5 	bl	800a610 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a466:	e7f1      	b.n	800a44c <prvTimerTask+0x8>

0800a468 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b084      	sub	sp, #16
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
 800a470:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a472:	f7ff f989 	bl	8009788 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a476:	f107 0308 	add.w	r3, r7, #8
 800a47a:	4618      	mov	r0, r3
 800a47c:	f000 f866 	bl	800a54c <prvSampleTimeNow>
 800a480:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d130      	bne.n	800a4ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d10a      	bne.n	800a4a4 <prvProcessTimerOrBlockTask+0x3c>
 800a48e:	687a      	ldr	r2, [r7, #4]
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	429a      	cmp	r2, r3
 800a494:	d806      	bhi.n	800a4a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a496:	f7ff f985 	bl	80097a4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a49a:	68f9      	ldr	r1, [r7, #12]
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f7ff ff85 	bl	800a3ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a4a2:	e024      	b.n	800a4ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d008      	beq.n	800a4bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a4aa:	4b13      	ldr	r3, [pc, #76]	; (800a4f8 <prvProcessTimerOrBlockTask+0x90>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d101      	bne.n	800a4b8 <prvProcessTimerOrBlockTask+0x50>
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	e000      	b.n	800a4ba <prvProcessTimerOrBlockTask+0x52>
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a4bc:	4b0f      	ldr	r3, [pc, #60]	; (800a4fc <prvProcessTimerOrBlockTask+0x94>)
 800a4be:	6818      	ldr	r0, [r3, #0]
 800a4c0:	687a      	ldr	r2, [r7, #4]
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	1ad3      	subs	r3, r2, r3
 800a4c6:	683a      	ldr	r2, [r7, #0]
 800a4c8:	4619      	mov	r1, r3
 800a4ca:	f7fe fcfb 	bl	8008ec4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a4ce:	f7ff f969 	bl	80097a4 <xTaskResumeAll>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d10a      	bne.n	800a4ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a4d8:	4b09      	ldr	r3, [pc, #36]	; (800a500 <prvProcessTimerOrBlockTask+0x98>)
 800a4da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4de:	601a      	str	r2, [r3, #0]
 800a4e0:	f3bf 8f4f 	dsb	sy
 800a4e4:	f3bf 8f6f 	isb	sy
}
 800a4e8:	e001      	b.n	800a4ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a4ea:	f7ff f95b 	bl	80097a4 <xTaskResumeAll>
}
 800a4ee:	bf00      	nop
 800a4f0:	3710      	adds	r7, #16
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}
 800a4f6:	bf00      	nop
 800a4f8:	20001438 	.word	0x20001438
 800a4fc:	2000143c 	.word	0x2000143c
 800a500:	e000ed04 	.word	0xe000ed04

0800a504 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a504:	b480      	push	{r7}
 800a506:	b085      	sub	sp, #20
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a50c:	4b0e      	ldr	r3, [pc, #56]	; (800a548 <prvGetNextExpireTime+0x44>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d101      	bne.n	800a51a <prvGetNextExpireTime+0x16>
 800a516:	2201      	movs	r2, #1
 800a518:	e000      	b.n	800a51c <prvGetNextExpireTime+0x18>
 800a51a:	2200      	movs	r2, #0
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d105      	bne.n	800a534 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a528:	4b07      	ldr	r3, [pc, #28]	; (800a548 <prvGetNextExpireTime+0x44>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	68db      	ldr	r3, [r3, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	60fb      	str	r3, [r7, #12]
 800a532:	e001      	b.n	800a538 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a534:	2300      	movs	r3, #0
 800a536:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a538:	68fb      	ldr	r3, [r7, #12]
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	3714      	adds	r7, #20
 800a53e:	46bd      	mov	sp, r7
 800a540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a544:	4770      	bx	lr
 800a546:	bf00      	nop
 800a548:	20001434 	.word	0x20001434

0800a54c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b084      	sub	sp, #16
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a554:	f7ff f9c4 	bl	80098e0 <xTaskGetTickCount>
 800a558:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a55a:	4b0b      	ldr	r3, [pc, #44]	; (800a588 <prvSampleTimeNow+0x3c>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	68fa      	ldr	r2, [r7, #12]
 800a560:	429a      	cmp	r2, r3
 800a562:	d205      	bcs.n	800a570 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a564:	f000 f936 	bl	800a7d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2201      	movs	r2, #1
 800a56c:	601a      	str	r2, [r3, #0]
 800a56e:	e002      	b.n	800a576 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2200      	movs	r2, #0
 800a574:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a576:	4a04      	ldr	r2, [pc, #16]	; (800a588 <prvSampleTimeNow+0x3c>)
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a57c:	68fb      	ldr	r3, [r7, #12]
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3710      	adds	r7, #16
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}
 800a586:	bf00      	nop
 800a588:	20001444 	.word	0x20001444

0800a58c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b086      	sub	sp, #24
 800a590:	af00      	add	r7, sp, #0
 800a592:	60f8      	str	r0, [r7, #12]
 800a594:	60b9      	str	r1, [r7, #8]
 800a596:	607a      	str	r2, [r7, #4]
 800a598:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a59a:	2300      	movs	r3, #0
 800a59c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	68ba      	ldr	r2, [r7, #8]
 800a5a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	68fa      	ldr	r2, [r7, #12]
 800a5a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a5aa:	68ba      	ldr	r2, [r7, #8]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	429a      	cmp	r2, r3
 800a5b0:	d812      	bhi.n	800a5d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5b2:	687a      	ldr	r2, [r7, #4]
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	1ad2      	subs	r2, r2, r3
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	699b      	ldr	r3, [r3, #24]
 800a5bc:	429a      	cmp	r2, r3
 800a5be:	d302      	bcc.n	800a5c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	617b      	str	r3, [r7, #20]
 800a5c4:	e01b      	b.n	800a5fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a5c6:	4b10      	ldr	r3, [pc, #64]	; (800a608 <prvInsertTimerInActiveList+0x7c>)
 800a5c8:	681a      	ldr	r2, [r3, #0]
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	3304      	adds	r3, #4
 800a5ce:	4619      	mov	r1, r3
 800a5d0:	4610      	mov	r0, r2
 800a5d2:	f7fd fed6 	bl	8008382 <vListInsert>
 800a5d6:	e012      	b.n	800a5fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a5d8:	687a      	ldr	r2, [r7, #4]
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	429a      	cmp	r2, r3
 800a5de:	d206      	bcs.n	800a5ee <prvInsertTimerInActiveList+0x62>
 800a5e0:	68ba      	ldr	r2, [r7, #8]
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	429a      	cmp	r2, r3
 800a5e6:	d302      	bcc.n	800a5ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	617b      	str	r3, [r7, #20]
 800a5ec:	e007      	b.n	800a5fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a5ee:	4b07      	ldr	r3, [pc, #28]	; (800a60c <prvInsertTimerInActiveList+0x80>)
 800a5f0:	681a      	ldr	r2, [r3, #0]
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	3304      	adds	r3, #4
 800a5f6:	4619      	mov	r1, r3
 800a5f8:	4610      	mov	r0, r2
 800a5fa:	f7fd fec2 	bl	8008382 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a5fe:	697b      	ldr	r3, [r7, #20]
}
 800a600:	4618      	mov	r0, r3
 800a602:	3718      	adds	r7, #24
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}
 800a608:	20001438 	.word	0x20001438
 800a60c:	20001434 	.word	0x20001434

0800a610 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b08e      	sub	sp, #56	; 0x38
 800a614:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a616:	e0ca      	b.n	800a7ae <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	da18      	bge.n	800a650 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a61e:	1d3b      	adds	r3, r7, #4
 800a620:	3304      	adds	r3, #4
 800a622:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a626:	2b00      	cmp	r3, #0
 800a628:	d10a      	bne.n	800a640 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a62e:	f383 8811 	msr	BASEPRI, r3
 800a632:	f3bf 8f6f 	isb	sy
 800a636:	f3bf 8f4f 	dsb	sy
 800a63a:	61fb      	str	r3, [r7, #28]
}
 800a63c:	bf00      	nop
 800a63e:	e7fe      	b.n	800a63e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a646:	6850      	ldr	r0, [r2, #4]
 800a648:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a64a:	6892      	ldr	r2, [r2, #8]
 800a64c:	4611      	mov	r1, r2
 800a64e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2b00      	cmp	r3, #0
 800a654:	f2c0 80ab 	blt.w	800a7ae <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a65e:	695b      	ldr	r3, [r3, #20]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d004      	beq.n	800a66e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a666:	3304      	adds	r3, #4
 800a668:	4618      	mov	r0, r3
 800a66a:	f7fd fec3 	bl	80083f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a66e:	463b      	mov	r3, r7
 800a670:	4618      	mov	r0, r3
 800a672:	f7ff ff6b 	bl	800a54c <prvSampleTimeNow>
 800a676:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2b09      	cmp	r3, #9
 800a67c:	f200 8096 	bhi.w	800a7ac <prvProcessReceivedCommands+0x19c>
 800a680:	a201      	add	r2, pc, #4	; (adr r2, 800a688 <prvProcessReceivedCommands+0x78>)
 800a682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a686:	bf00      	nop
 800a688:	0800a6b1 	.word	0x0800a6b1
 800a68c:	0800a6b1 	.word	0x0800a6b1
 800a690:	0800a6b1 	.word	0x0800a6b1
 800a694:	0800a725 	.word	0x0800a725
 800a698:	0800a739 	.word	0x0800a739
 800a69c:	0800a783 	.word	0x0800a783
 800a6a0:	0800a6b1 	.word	0x0800a6b1
 800a6a4:	0800a6b1 	.word	0x0800a6b1
 800a6a8:	0800a725 	.word	0x0800a725
 800a6ac:	0800a739 	.word	0x0800a739
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6b6:	f043 0301 	orr.w	r3, r3, #1
 800a6ba:	b2da      	uxtb	r2, r3
 800a6bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a6c2:	68ba      	ldr	r2, [r7, #8]
 800a6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6c6:	699b      	ldr	r3, [r3, #24]
 800a6c8:	18d1      	adds	r1, r2, r3
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6d0:	f7ff ff5c 	bl	800a58c <prvInsertTimerInActiveList>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d069      	beq.n	800a7ae <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6dc:	6a1b      	ldr	r3, [r3, #32]
 800a6de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6e0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a6e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6e8:	f003 0304 	and.w	r3, r3, #4
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d05e      	beq.n	800a7ae <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a6f0:	68ba      	ldr	r2, [r7, #8]
 800a6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f4:	699b      	ldr	r3, [r3, #24]
 800a6f6:	441a      	add	r2, r3
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	9300      	str	r3, [sp, #0]
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	2100      	movs	r1, #0
 800a700:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a702:	f7ff fe05 	bl	800a310 <xTimerGenericCommand>
 800a706:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a708:	6a3b      	ldr	r3, [r7, #32]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d14f      	bne.n	800a7ae <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a70e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a712:	f383 8811 	msr	BASEPRI, r3
 800a716:	f3bf 8f6f 	isb	sy
 800a71a:	f3bf 8f4f 	dsb	sy
 800a71e:	61bb      	str	r3, [r7, #24]
}
 800a720:	bf00      	nop
 800a722:	e7fe      	b.n	800a722 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a726:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a72a:	f023 0301 	bic.w	r3, r3, #1
 800a72e:	b2da      	uxtb	r2, r3
 800a730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a732:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a736:	e03a      	b.n	800a7ae <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a73a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a73e:	f043 0301 	orr.w	r3, r3, #1
 800a742:	b2da      	uxtb	r2, r3
 800a744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a746:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a74a:	68ba      	ldr	r2, [r7, #8]
 800a74c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a74e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a752:	699b      	ldr	r3, [r3, #24]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d10a      	bne.n	800a76e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a75c:	f383 8811 	msr	BASEPRI, r3
 800a760:	f3bf 8f6f 	isb	sy
 800a764:	f3bf 8f4f 	dsb	sy
 800a768:	617b      	str	r3, [r7, #20]
}
 800a76a:	bf00      	nop
 800a76c:	e7fe      	b.n	800a76c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a76e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a770:	699a      	ldr	r2, [r3, #24]
 800a772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a774:	18d1      	adds	r1, r2, r3
 800a776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a77a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a77c:	f7ff ff06 	bl	800a58c <prvInsertTimerInActiveList>
					break;
 800a780:	e015      	b.n	800a7ae <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a784:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a788:	f003 0302 	and.w	r3, r3, #2
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d103      	bne.n	800a798 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a790:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a792:	f000 fbdd 	bl	800af50 <vPortFree>
 800a796:	e00a      	b.n	800a7ae <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a79a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a79e:	f023 0301 	bic.w	r3, r3, #1
 800a7a2:	b2da      	uxtb	r2, r3
 800a7a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a7aa:	e000      	b.n	800a7ae <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800a7ac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a7ae:	4b08      	ldr	r3, [pc, #32]	; (800a7d0 <prvProcessReceivedCommands+0x1c0>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	1d39      	adds	r1, r7, #4
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f7fe f96a 	bl	8008a90 <xQueueReceive>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	f47f af2a 	bne.w	800a618 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a7c4:	bf00      	nop
 800a7c6:	bf00      	nop
 800a7c8:	3730      	adds	r7, #48	; 0x30
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}
 800a7ce:	bf00      	nop
 800a7d0:	2000143c 	.word	0x2000143c

0800a7d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b088      	sub	sp, #32
 800a7d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a7da:	e048      	b.n	800a86e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a7dc:	4b2d      	ldr	r3, [pc, #180]	; (800a894 <prvSwitchTimerLists+0xc0>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	68db      	ldr	r3, [r3, #12]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7e6:	4b2b      	ldr	r3, [pc, #172]	; (800a894 <prvSwitchTimerLists+0xc0>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	68db      	ldr	r3, [r3, #12]
 800a7ec:	68db      	ldr	r3, [r3, #12]
 800a7ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	3304      	adds	r3, #4
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f7fd fdfd 	bl	80083f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	6a1b      	ldr	r3, [r3, #32]
 800a7fe:	68f8      	ldr	r0, [r7, #12]
 800a800:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a808:	f003 0304 	and.w	r3, r3, #4
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d02e      	beq.n	800a86e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	699b      	ldr	r3, [r3, #24]
 800a814:	693a      	ldr	r2, [r7, #16]
 800a816:	4413      	add	r3, r2
 800a818:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a81a:	68ba      	ldr	r2, [r7, #8]
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	429a      	cmp	r2, r3
 800a820:	d90e      	bls.n	800a840 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	68ba      	ldr	r2, [r7, #8]
 800a826:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	68fa      	ldr	r2, [r7, #12]
 800a82c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a82e:	4b19      	ldr	r3, [pc, #100]	; (800a894 <prvSwitchTimerLists+0xc0>)
 800a830:	681a      	ldr	r2, [r3, #0]
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	3304      	adds	r3, #4
 800a836:	4619      	mov	r1, r3
 800a838:	4610      	mov	r0, r2
 800a83a:	f7fd fda2 	bl	8008382 <vListInsert>
 800a83e:	e016      	b.n	800a86e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a840:	2300      	movs	r3, #0
 800a842:	9300      	str	r3, [sp, #0]
 800a844:	2300      	movs	r3, #0
 800a846:	693a      	ldr	r2, [r7, #16]
 800a848:	2100      	movs	r1, #0
 800a84a:	68f8      	ldr	r0, [r7, #12]
 800a84c:	f7ff fd60 	bl	800a310 <xTimerGenericCommand>
 800a850:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d10a      	bne.n	800a86e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a85c:	f383 8811 	msr	BASEPRI, r3
 800a860:	f3bf 8f6f 	isb	sy
 800a864:	f3bf 8f4f 	dsb	sy
 800a868:	603b      	str	r3, [r7, #0]
}
 800a86a:	bf00      	nop
 800a86c:	e7fe      	b.n	800a86c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a86e:	4b09      	ldr	r3, [pc, #36]	; (800a894 <prvSwitchTimerLists+0xc0>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d1b1      	bne.n	800a7dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a878:	4b06      	ldr	r3, [pc, #24]	; (800a894 <prvSwitchTimerLists+0xc0>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a87e:	4b06      	ldr	r3, [pc, #24]	; (800a898 <prvSwitchTimerLists+0xc4>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	4a04      	ldr	r2, [pc, #16]	; (800a894 <prvSwitchTimerLists+0xc0>)
 800a884:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a886:	4a04      	ldr	r2, [pc, #16]	; (800a898 <prvSwitchTimerLists+0xc4>)
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	6013      	str	r3, [r2, #0]
}
 800a88c:	bf00      	nop
 800a88e:	3718      	adds	r7, #24
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}
 800a894:	20001434 	.word	0x20001434
 800a898:	20001438 	.word	0x20001438

0800a89c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b082      	sub	sp, #8
 800a8a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a8a2:	f000 f967 	bl	800ab74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a8a6:	4b15      	ldr	r3, [pc, #84]	; (800a8fc <prvCheckForValidListAndQueue+0x60>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d120      	bne.n	800a8f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a8ae:	4814      	ldr	r0, [pc, #80]	; (800a900 <prvCheckForValidListAndQueue+0x64>)
 800a8b0:	f7fd fd16 	bl	80082e0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a8b4:	4813      	ldr	r0, [pc, #76]	; (800a904 <prvCheckForValidListAndQueue+0x68>)
 800a8b6:	f7fd fd13 	bl	80082e0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a8ba:	4b13      	ldr	r3, [pc, #76]	; (800a908 <prvCheckForValidListAndQueue+0x6c>)
 800a8bc:	4a10      	ldr	r2, [pc, #64]	; (800a900 <prvCheckForValidListAndQueue+0x64>)
 800a8be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a8c0:	4b12      	ldr	r3, [pc, #72]	; (800a90c <prvCheckForValidListAndQueue+0x70>)
 800a8c2:	4a10      	ldr	r2, [pc, #64]	; (800a904 <prvCheckForValidListAndQueue+0x68>)
 800a8c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	9300      	str	r3, [sp, #0]
 800a8ca:	4b11      	ldr	r3, [pc, #68]	; (800a910 <prvCheckForValidListAndQueue+0x74>)
 800a8cc:	4a11      	ldr	r2, [pc, #68]	; (800a914 <prvCheckForValidListAndQueue+0x78>)
 800a8ce:	2110      	movs	r1, #16
 800a8d0:	200a      	movs	r0, #10
 800a8d2:	f7fd fe21 	bl	8008518 <xQueueGenericCreateStatic>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	4a08      	ldr	r2, [pc, #32]	; (800a8fc <prvCheckForValidListAndQueue+0x60>)
 800a8da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a8dc:	4b07      	ldr	r3, [pc, #28]	; (800a8fc <prvCheckForValidListAndQueue+0x60>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d005      	beq.n	800a8f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a8e4:	4b05      	ldr	r3, [pc, #20]	; (800a8fc <prvCheckForValidListAndQueue+0x60>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	490b      	ldr	r1, [pc, #44]	; (800a918 <prvCheckForValidListAndQueue+0x7c>)
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f7fe fac0 	bl	8008e70 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a8f0:	f000 f970 	bl	800abd4 <vPortExitCritical>
}
 800a8f4:	bf00      	nop
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}
 800a8fa:	bf00      	nop
 800a8fc:	2000143c 	.word	0x2000143c
 800a900:	2000140c 	.word	0x2000140c
 800a904:	20001420 	.word	0x20001420
 800a908:	20001434 	.word	0x20001434
 800a90c:	20001438 	.word	0x20001438
 800a910:	200014e8 	.word	0x200014e8
 800a914:	20001448 	.word	0x20001448
 800a918:	0800ddec 	.word	0x0800ddec

0800a91c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a91c:	b480      	push	{r7}
 800a91e:	b085      	sub	sp, #20
 800a920:	af00      	add	r7, sp, #0
 800a922:	60f8      	str	r0, [r7, #12]
 800a924:	60b9      	str	r1, [r7, #8]
 800a926:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	3b04      	subs	r3, #4
 800a92c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a934:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	3b04      	subs	r3, #4
 800a93a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	f023 0201 	bic.w	r2, r3, #1
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	3b04      	subs	r3, #4
 800a94a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a94c:	4a0c      	ldr	r2, [pc, #48]	; (800a980 <pxPortInitialiseStack+0x64>)
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	3b14      	subs	r3, #20
 800a956:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a958:	687a      	ldr	r2, [r7, #4]
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	3b04      	subs	r3, #4
 800a962:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	f06f 0202 	mvn.w	r2, #2
 800a96a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	3b20      	subs	r3, #32
 800a970:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a972:	68fb      	ldr	r3, [r7, #12]
}
 800a974:	4618      	mov	r0, r3
 800a976:	3714      	adds	r7, #20
 800a978:	46bd      	mov	sp, r7
 800a97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97e:	4770      	bx	lr
 800a980:	0800a985 	.word	0x0800a985

0800a984 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a984:	b480      	push	{r7}
 800a986:	b085      	sub	sp, #20
 800a988:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a98a:	2300      	movs	r3, #0
 800a98c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a98e:	4b12      	ldr	r3, [pc, #72]	; (800a9d8 <prvTaskExitError+0x54>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a996:	d00a      	beq.n	800a9ae <prvTaskExitError+0x2a>
	__asm volatile
 800a998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a99c:	f383 8811 	msr	BASEPRI, r3
 800a9a0:	f3bf 8f6f 	isb	sy
 800a9a4:	f3bf 8f4f 	dsb	sy
 800a9a8:	60fb      	str	r3, [r7, #12]
}
 800a9aa:	bf00      	nop
 800a9ac:	e7fe      	b.n	800a9ac <prvTaskExitError+0x28>
	__asm volatile
 800a9ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b2:	f383 8811 	msr	BASEPRI, r3
 800a9b6:	f3bf 8f6f 	isb	sy
 800a9ba:	f3bf 8f4f 	dsb	sy
 800a9be:	60bb      	str	r3, [r7, #8]
}
 800a9c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a9c2:	bf00      	nop
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d0fc      	beq.n	800a9c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a9ca:	bf00      	nop
 800a9cc:	bf00      	nop
 800a9ce:	3714      	adds	r7, #20
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d6:	4770      	bx	lr
 800a9d8:	2000000c 	.word	0x2000000c
 800a9dc:	00000000 	.word	0x00000000

0800a9e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a9e0:	4b07      	ldr	r3, [pc, #28]	; (800aa00 <pxCurrentTCBConst2>)
 800a9e2:	6819      	ldr	r1, [r3, #0]
 800a9e4:	6808      	ldr	r0, [r1, #0]
 800a9e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9ea:	f380 8809 	msr	PSP, r0
 800a9ee:	f3bf 8f6f 	isb	sy
 800a9f2:	f04f 0000 	mov.w	r0, #0
 800a9f6:	f380 8811 	msr	BASEPRI, r0
 800a9fa:	4770      	bx	lr
 800a9fc:	f3af 8000 	nop.w

0800aa00 <pxCurrentTCBConst2>:
 800aa00:	20000f0c 	.word	0x20000f0c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800aa04:	bf00      	nop
 800aa06:	bf00      	nop

0800aa08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800aa08:	4808      	ldr	r0, [pc, #32]	; (800aa2c <prvPortStartFirstTask+0x24>)
 800aa0a:	6800      	ldr	r0, [r0, #0]
 800aa0c:	6800      	ldr	r0, [r0, #0]
 800aa0e:	f380 8808 	msr	MSP, r0
 800aa12:	f04f 0000 	mov.w	r0, #0
 800aa16:	f380 8814 	msr	CONTROL, r0
 800aa1a:	b662      	cpsie	i
 800aa1c:	b661      	cpsie	f
 800aa1e:	f3bf 8f4f 	dsb	sy
 800aa22:	f3bf 8f6f 	isb	sy
 800aa26:	df00      	svc	0
 800aa28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800aa2a:	bf00      	nop
 800aa2c:	e000ed08 	.word	0xe000ed08

0800aa30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b086      	sub	sp, #24
 800aa34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800aa36:	4b46      	ldr	r3, [pc, #280]	; (800ab50 <xPortStartScheduler+0x120>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	4a46      	ldr	r2, [pc, #280]	; (800ab54 <xPortStartScheduler+0x124>)
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	d10a      	bne.n	800aa56 <xPortStartScheduler+0x26>
	__asm volatile
 800aa40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa44:	f383 8811 	msr	BASEPRI, r3
 800aa48:	f3bf 8f6f 	isb	sy
 800aa4c:	f3bf 8f4f 	dsb	sy
 800aa50:	613b      	str	r3, [r7, #16]
}
 800aa52:	bf00      	nop
 800aa54:	e7fe      	b.n	800aa54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800aa56:	4b3e      	ldr	r3, [pc, #248]	; (800ab50 <xPortStartScheduler+0x120>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	4a3f      	ldr	r2, [pc, #252]	; (800ab58 <xPortStartScheduler+0x128>)
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d10a      	bne.n	800aa76 <xPortStartScheduler+0x46>
	__asm volatile
 800aa60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa64:	f383 8811 	msr	BASEPRI, r3
 800aa68:	f3bf 8f6f 	isb	sy
 800aa6c:	f3bf 8f4f 	dsb	sy
 800aa70:	60fb      	str	r3, [r7, #12]
}
 800aa72:	bf00      	nop
 800aa74:	e7fe      	b.n	800aa74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800aa76:	4b39      	ldr	r3, [pc, #228]	; (800ab5c <xPortStartScheduler+0x12c>)
 800aa78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	781b      	ldrb	r3, [r3, #0]
 800aa7e:	b2db      	uxtb	r3, r3
 800aa80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aa82:	697b      	ldr	r3, [r7, #20]
 800aa84:	22ff      	movs	r2, #255	; 0xff
 800aa86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	781b      	ldrb	r3, [r3, #0]
 800aa8c:	b2db      	uxtb	r3, r3
 800aa8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800aa90:	78fb      	ldrb	r3, [r7, #3]
 800aa92:	b2db      	uxtb	r3, r3
 800aa94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800aa98:	b2da      	uxtb	r2, r3
 800aa9a:	4b31      	ldr	r3, [pc, #196]	; (800ab60 <xPortStartScheduler+0x130>)
 800aa9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800aa9e:	4b31      	ldr	r3, [pc, #196]	; (800ab64 <xPortStartScheduler+0x134>)
 800aaa0:	2207      	movs	r2, #7
 800aaa2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aaa4:	e009      	b.n	800aaba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800aaa6:	4b2f      	ldr	r3, [pc, #188]	; (800ab64 <xPortStartScheduler+0x134>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	3b01      	subs	r3, #1
 800aaac:	4a2d      	ldr	r2, [pc, #180]	; (800ab64 <xPortStartScheduler+0x134>)
 800aaae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800aab0:	78fb      	ldrb	r3, [r7, #3]
 800aab2:	b2db      	uxtb	r3, r3
 800aab4:	005b      	lsls	r3, r3, #1
 800aab6:	b2db      	uxtb	r3, r3
 800aab8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aaba:	78fb      	ldrb	r3, [r7, #3]
 800aabc:	b2db      	uxtb	r3, r3
 800aabe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aac2:	2b80      	cmp	r3, #128	; 0x80
 800aac4:	d0ef      	beq.n	800aaa6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800aac6:	4b27      	ldr	r3, [pc, #156]	; (800ab64 <xPortStartScheduler+0x134>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	f1c3 0307 	rsb	r3, r3, #7
 800aace:	2b04      	cmp	r3, #4
 800aad0:	d00a      	beq.n	800aae8 <xPortStartScheduler+0xb8>
	__asm volatile
 800aad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad6:	f383 8811 	msr	BASEPRI, r3
 800aada:	f3bf 8f6f 	isb	sy
 800aade:	f3bf 8f4f 	dsb	sy
 800aae2:	60bb      	str	r3, [r7, #8]
}
 800aae4:	bf00      	nop
 800aae6:	e7fe      	b.n	800aae6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800aae8:	4b1e      	ldr	r3, [pc, #120]	; (800ab64 <xPortStartScheduler+0x134>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	021b      	lsls	r3, r3, #8
 800aaee:	4a1d      	ldr	r2, [pc, #116]	; (800ab64 <xPortStartScheduler+0x134>)
 800aaf0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aaf2:	4b1c      	ldr	r3, [pc, #112]	; (800ab64 <xPortStartScheduler+0x134>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aafa:	4a1a      	ldr	r2, [pc, #104]	; (800ab64 <xPortStartScheduler+0x134>)
 800aafc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	b2da      	uxtb	r2, r3
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ab06:	4b18      	ldr	r3, [pc, #96]	; (800ab68 <xPortStartScheduler+0x138>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	4a17      	ldr	r2, [pc, #92]	; (800ab68 <xPortStartScheduler+0x138>)
 800ab0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ab10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ab12:	4b15      	ldr	r3, [pc, #84]	; (800ab68 <xPortStartScheduler+0x138>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	4a14      	ldr	r2, [pc, #80]	; (800ab68 <xPortStartScheduler+0x138>)
 800ab18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ab1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ab1e:	f000 f8dd 	bl	800acdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ab22:	4b12      	ldr	r3, [pc, #72]	; (800ab6c <xPortStartScheduler+0x13c>)
 800ab24:	2200      	movs	r2, #0
 800ab26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ab28:	f000 f8fc 	bl	800ad24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ab2c:	4b10      	ldr	r3, [pc, #64]	; (800ab70 <xPortStartScheduler+0x140>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	4a0f      	ldr	r2, [pc, #60]	; (800ab70 <xPortStartScheduler+0x140>)
 800ab32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ab36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ab38:	f7ff ff66 	bl	800aa08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ab3c:	f7fe ff9a 	bl	8009a74 <vTaskSwitchContext>
	prvTaskExitError();
 800ab40:	f7ff ff20 	bl	800a984 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ab44:	2300      	movs	r3, #0
}
 800ab46:	4618      	mov	r0, r3
 800ab48:	3718      	adds	r7, #24
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}
 800ab4e:	bf00      	nop
 800ab50:	e000ed00 	.word	0xe000ed00
 800ab54:	410fc271 	.word	0x410fc271
 800ab58:	410fc270 	.word	0x410fc270
 800ab5c:	e000e400 	.word	0xe000e400
 800ab60:	20001538 	.word	0x20001538
 800ab64:	2000153c 	.word	0x2000153c
 800ab68:	e000ed20 	.word	0xe000ed20
 800ab6c:	2000000c 	.word	0x2000000c
 800ab70:	e000ef34 	.word	0xe000ef34

0800ab74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ab74:	b480      	push	{r7}
 800ab76:	b083      	sub	sp, #12
 800ab78:	af00      	add	r7, sp, #0
	__asm volatile
 800ab7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab7e:	f383 8811 	msr	BASEPRI, r3
 800ab82:	f3bf 8f6f 	isb	sy
 800ab86:	f3bf 8f4f 	dsb	sy
 800ab8a:	607b      	str	r3, [r7, #4]
}
 800ab8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ab8e:	4b0f      	ldr	r3, [pc, #60]	; (800abcc <vPortEnterCritical+0x58>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	3301      	adds	r3, #1
 800ab94:	4a0d      	ldr	r2, [pc, #52]	; (800abcc <vPortEnterCritical+0x58>)
 800ab96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ab98:	4b0c      	ldr	r3, [pc, #48]	; (800abcc <vPortEnterCritical+0x58>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	2b01      	cmp	r3, #1
 800ab9e:	d10f      	bne.n	800abc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aba0:	4b0b      	ldr	r3, [pc, #44]	; (800abd0 <vPortEnterCritical+0x5c>)
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	b2db      	uxtb	r3, r3
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d00a      	beq.n	800abc0 <vPortEnterCritical+0x4c>
	__asm volatile
 800abaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abae:	f383 8811 	msr	BASEPRI, r3
 800abb2:	f3bf 8f6f 	isb	sy
 800abb6:	f3bf 8f4f 	dsb	sy
 800abba:	603b      	str	r3, [r7, #0]
}
 800abbc:	bf00      	nop
 800abbe:	e7fe      	b.n	800abbe <vPortEnterCritical+0x4a>
	}
}
 800abc0:	bf00      	nop
 800abc2:	370c      	adds	r7, #12
 800abc4:	46bd      	mov	sp, r7
 800abc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abca:	4770      	bx	lr
 800abcc:	2000000c 	.word	0x2000000c
 800abd0:	e000ed04 	.word	0xe000ed04

0800abd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800abd4:	b480      	push	{r7}
 800abd6:	b083      	sub	sp, #12
 800abd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800abda:	4b12      	ldr	r3, [pc, #72]	; (800ac24 <vPortExitCritical+0x50>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d10a      	bne.n	800abf8 <vPortExitCritical+0x24>
	__asm volatile
 800abe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe6:	f383 8811 	msr	BASEPRI, r3
 800abea:	f3bf 8f6f 	isb	sy
 800abee:	f3bf 8f4f 	dsb	sy
 800abf2:	607b      	str	r3, [r7, #4]
}
 800abf4:	bf00      	nop
 800abf6:	e7fe      	b.n	800abf6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800abf8:	4b0a      	ldr	r3, [pc, #40]	; (800ac24 <vPortExitCritical+0x50>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	3b01      	subs	r3, #1
 800abfe:	4a09      	ldr	r2, [pc, #36]	; (800ac24 <vPortExitCritical+0x50>)
 800ac00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ac02:	4b08      	ldr	r3, [pc, #32]	; (800ac24 <vPortExitCritical+0x50>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d105      	bne.n	800ac16 <vPortExitCritical+0x42>
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	f383 8811 	msr	BASEPRI, r3
}
 800ac14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ac16:	bf00      	nop
 800ac18:	370c      	adds	r7, #12
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac20:	4770      	bx	lr
 800ac22:	bf00      	nop
 800ac24:	2000000c 	.word	0x2000000c
	...

0800ac30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ac30:	f3ef 8009 	mrs	r0, PSP
 800ac34:	f3bf 8f6f 	isb	sy
 800ac38:	4b15      	ldr	r3, [pc, #84]	; (800ac90 <pxCurrentTCBConst>)
 800ac3a:	681a      	ldr	r2, [r3, #0]
 800ac3c:	f01e 0f10 	tst.w	lr, #16
 800ac40:	bf08      	it	eq
 800ac42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ac46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac4a:	6010      	str	r0, [r2, #0]
 800ac4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ac50:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ac54:	f380 8811 	msr	BASEPRI, r0
 800ac58:	f3bf 8f4f 	dsb	sy
 800ac5c:	f3bf 8f6f 	isb	sy
 800ac60:	f7fe ff08 	bl	8009a74 <vTaskSwitchContext>
 800ac64:	f04f 0000 	mov.w	r0, #0
 800ac68:	f380 8811 	msr	BASEPRI, r0
 800ac6c:	bc09      	pop	{r0, r3}
 800ac6e:	6819      	ldr	r1, [r3, #0]
 800ac70:	6808      	ldr	r0, [r1, #0]
 800ac72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac76:	f01e 0f10 	tst.w	lr, #16
 800ac7a:	bf08      	it	eq
 800ac7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ac80:	f380 8809 	msr	PSP, r0
 800ac84:	f3bf 8f6f 	isb	sy
 800ac88:	4770      	bx	lr
 800ac8a:	bf00      	nop
 800ac8c:	f3af 8000 	nop.w

0800ac90 <pxCurrentTCBConst>:
 800ac90:	20000f0c 	.word	0x20000f0c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ac94:	bf00      	nop
 800ac96:	bf00      	nop

0800ac98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b082      	sub	sp, #8
 800ac9c:	af00      	add	r7, sp, #0
	__asm volatile
 800ac9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca2:	f383 8811 	msr	BASEPRI, r3
 800aca6:	f3bf 8f6f 	isb	sy
 800acaa:	f3bf 8f4f 	dsb	sy
 800acae:	607b      	str	r3, [r7, #4]
}
 800acb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800acb2:	f7fe fe25 	bl	8009900 <xTaskIncrementTick>
 800acb6:	4603      	mov	r3, r0
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d003      	beq.n	800acc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800acbc:	4b06      	ldr	r3, [pc, #24]	; (800acd8 <xPortSysTickHandler+0x40>)
 800acbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acc2:	601a      	str	r2, [r3, #0]
 800acc4:	2300      	movs	r3, #0
 800acc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	f383 8811 	msr	BASEPRI, r3
}
 800acce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800acd0:	bf00      	nop
 800acd2:	3708      	adds	r7, #8
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}
 800acd8:	e000ed04 	.word	0xe000ed04

0800acdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800acdc:	b480      	push	{r7}
 800acde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ace0:	4b0b      	ldr	r3, [pc, #44]	; (800ad10 <vPortSetupTimerInterrupt+0x34>)
 800ace2:	2200      	movs	r2, #0
 800ace4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ace6:	4b0b      	ldr	r3, [pc, #44]	; (800ad14 <vPortSetupTimerInterrupt+0x38>)
 800ace8:	2200      	movs	r2, #0
 800acea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800acec:	4b0a      	ldr	r3, [pc, #40]	; (800ad18 <vPortSetupTimerInterrupt+0x3c>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	4a0a      	ldr	r2, [pc, #40]	; (800ad1c <vPortSetupTimerInterrupt+0x40>)
 800acf2:	fba2 2303 	umull	r2, r3, r2, r3
 800acf6:	099b      	lsrs	r3, r3, #6
 800acf8:	4a09      	ldr	r2, [pc, #36]	; (800ad20 <vPortSetupTimerInterrupt+0x44>)
 800acfa:	3b01      	subs	r3, #1
 800acfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800acfe:	4b04      	ldr	r3, [pc, #16]	; (800ad10 <vPortSetupTimerInterrupt+0x34>)
 800ad00:	2207      	movs	r2, #7
 800ad02:	601a      	str	r2, [r3, #0]
}
 800ad04:	bf00      	nop
 800ad06:	46bd      	mov	sp, r7
 800ad08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0c:	4770      	bx	lr
 800ad0e:	bf00      	nop
 800ad10:	e000e010 	.word	0xe000e010
 800ad14:	e000e018 	.word	0xe000e018
 800ad18:	20000000 	.word	0x20000000
 800ad1c:	10624dd3 	.word	0x10624dd3
 800ad20:	e000e014 	.word	0xe000e014

0800ad24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ad24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ad34 <vPortEnableVFP+0x10>
 800ad28:	6801      	ldr	r1, [r0, #0]
 800ad2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ad2e:	6001      	str	r1, [r0, #0]
 800ad30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ad32:	bf00      	nop
 800ad34:	e000ed88 	.word	0xe000ed88

0800ad38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ad38:	b480      	push	{r7}
 800ad3a:	b085      	sub	sp, #20
 800ad3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ad3e:	f3ef 8305 	mrs	r3, IPSR
 800ad42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	2b0f      	cmp	r3, #15
 800ad48:	d914      	bls.n	800ad74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ad4a:	4a17      	ldr	r2, [pc, #92]	; (800ada8 <vPortValidateInterruptPriority+0x70>)
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	4413      	add	r3, r2
 800ad50:	781b      	ldrb	r3, [r3, #0]
 800ad52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ad54:	4b15      	ldr	r3, [pc, #84]	; (800adac <vPortValidateInterruptPriority+0x74>)
 800ad56:	781b      	ldrb	r3, [r3, #0]
 800ad58:	7afa      	ldrb	r2, [r7, #11]
 800ad5a:	429a      	cmp	r2, r3
 800ad5c:	d20a      	bcs.n	800ad74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ad5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad62:	f383 8811 	msr	BASEPRI, r3
 800ad66:	f3bf 8f6f 	isb	sy
 800ad6a:	f3bf 8f4f 	dsb	sy
 800ad6e:	607b      	str	r3, [r7, #4]
}
 800ad70:	bf00      	nop
 800ad72:	e7fe      	b.n	800ad72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ad74:	4b0e      	ldr	r3, [pc, #56]	; (800adb0 <vPortValidateInterruptPriority+0x78>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ad7c:	4b0d      	ldr	r3, [pc, #52]	; (800adb4 <vPortValidateInterruptPriority+0x7c>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d90a      	bls.n	800ad9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ad84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad88:	f383 8811 	msr	BASEPRI, r3
 800ad8c:	f3bf 8f6f 	isb	sy
 800ad90:	f3bf 8f4f 	dsb	sy
 800ad94:	603b      	str	r3, [r7, #0]
}
 800ad96:	bf00      	nop
 800ad98:	e7fe      	b.n	800ad98 <vPortValidateInterruptPriority+0x60>
	}
 800ad9a:	bf00      	nop
 800ad9c:	3714      	adds	r7, #20
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada4:	4770      	bx	lr
 800ada6:	bf00      	nop
 800ada8:	e000e3f0 	.word	0xe000e3f0
 800adac:	20001538 	.word	0x20001538
 800adb0:	e000ed0c 	.word	0xe000ed0c
 800adb4:	2000153c 	.word	0x2000153c

0800adb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b08a      	sub	sp, #40	; 0x28
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800adc0:	2300      	movs	r3, #0
 800adc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800adc4:	f7fe fce0 	bl	8009788 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800adc8:	4b5b      	ldr	r3, [pc, #364]	; (800af38 <pvPortMalloc+0x180>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d101      	bne.n	800add4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800add0:	f000 f920 	bl	800b014 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800add4:	4b59      	ldr	r3, [pc, #356]	; (800af3c <pvPortMalloc+0x184>)
 800add6:	681a      	ldr	r2, [r3, #0]
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	4013      	ands	r3, r2
 800addc:	2b00      	cmp	r3, #0
 800adde:	f040 8093 	bne.w	800af08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d01d      	beq.n	800ae24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ade8:	2208      	movs	r2, #8
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	4413      	add	r3, r2
 800adee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f003 0307 	and.w	r3, r3, #7
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d014      	beq.n	800ae24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	f023 0307 	bic.w	r3, r3, #7
 800ae00:	3308      	adds	r3, #8
 800ae02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	f003 0307 	and.w	r3, r3, #7
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d00a      	beq.n	800ae24 <pvPortMalloc+0x6c>
	__asm volatile
 800ae0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae12:	f383 8811 	msr	BASEPRI, r3
 800ae16:	f3bf 8f6f 	isb	sy
 800ae1a:	f3bf 8f4f 	dsb	sy
 800ae1e:	617b      	str	r3, [r7, #20]
}
 800ae20:	bf00      	nop
 800ae22:	e7fe      	b.n	800ae22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d06e      	beq.n	800af08 <pvPortMalloc+0x150>
 800ae2a:	4b45      	ldr	r3, [pc, #276]	; (800af40 <pvPortMalloc+0x188>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	687a      	ldr	r2, [r7, #4]
 800ae30:	429a      	cmp	r2, r3
 800ae32:	d869      	bhi.n	800af08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ae34:	4b43      	ldr	r3, [pc, #268]	; (800af44 <pvPortMalloc+0x18c>)
 800ae36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ae38:	4b42      	ldr	r3, [pc, #264]	; (800af44 <pvPortMalloc+0x18c>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ae3e:	e004      	b.n	800ae4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ae40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ae44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ae4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae4c:	685b      	ldr	r3, [r3, #4]
 800ae4e:	687a      	ldr	r2, [r7, #4]
 800ae50:	429a      	cmp	r2, r3
 800ae52:	d903      	bls.n	800ae5c <pvPortMalloc+0xa4>
 800ae54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d1f1      	bne.n	800ae40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ae5c:	4b36      	ldr	r3, [pc, #216]	; (800af38 <pvPortMalloc+0x180>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d050      	beq.n	800af08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ae66:	6a3b      	ldr	r3, [r7, #32]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	2208      	movs	r2, #8
 800ae6c:	4413      	add	r3, r2
 800ae6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ae70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae72:	681a      	ldr	r2, [r3, #0]
 800ae74:	6a3b      	ldr	r3, [r7, #32]
 800ae76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ae78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae7a:	685a      	ldr	r2, [r3, #4]
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	1ad2      	subs	r2, r2, r3
 800ae80:	2308      	movs	r3, #8
 800ae82:	005b      	lsls	r3, r3, #1
 800ae84:	429a      	cmp	r2, r3
 800ae86:	d91f      	bls.n	800aec8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ae88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	4413      	add	r3, r2
 800ae8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae90:	69bb      	ldr	r3, [r7, #24]
 800ae92:	f003 0307 	and.w	r3, r3, #7
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d00a      	beq.n	800aeb0 <pvPortMalloc+0xf8>
	__asm volatile
 800ae9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae9e:	f383 8811 	msr	BASEPRI, r3
 800aea2:	f3bf 8f6f 	isb	sy
 800aea6:	f3bf 8f4f 	dsb	sy
 800aeaa:	613b      	str	r3, [r7, #16]
}
 800aeac:	bf00      	nop
 800aeae:	e7fe      	b.n	800aeae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aeb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeb2:	685a      	ldr	r2, [r3, #4]
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	1ad2      	subs	r2, r2, r3
 800aeb8:	69bb      	ldr	r3, [r7, #24]
 800aeba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aebe:	687a      	ldr	r2, [r7, #4]
 800aec0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aec2:	69b8      	ldr	r0, [r7, #24]
 800aec4:	f000 f908 	bl	800b0d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aec8:	4b1d      	ldr	r3, [pc, #116]	; (800af40 <pvPortMalloc+0x188>)
 800aeca:	681a      	ldr	r2, [r3, #0]
 800aecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aece:	685b      	ldr	r3, [r3, #4]
 800aed0:	1ad3      	subs	r3, r2, r3
 800aed2:	4a1b      	ldr	r2, [pc, #108]	; (800af40 <pvPortMalloc+0x188>)
 800aed4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aed6:	4b1a      	ldr	r3, [pc, #104]	; (800af40 <pvPortMalloc+0x188>)
 800aed8:	681a      	ldr	r2, [r3, #0]
 800aeda:	4b1b      	ldr	r3, [pc, #108]	; (800af48 <pvPortMalloc+0x190>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	429a      	cmp	r2, r3
 800aee0:	d203      	bcs.n	800aeea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aee2:	4b17      	ldr	r3, [pc, #92]	; (800af40 <pvPortMalloc+0x188>)
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	4a18      	ldr	r2, [pc, #96]	; (800af48 <pvPortMalloc+0x190>)
 800aee8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aeea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeec:	685a      	ldr	r2, [r3, #4]
 800aeee:	4b13      	ldr	r3, [pc, #76]	; (800af3c <pvPortMalloc+0x184>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	431a      	orrs	r2, r3
 800aef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aef6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aefa:	2200      	movs	r2, #0
 800aefc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800aefe:	4b13      	ldr	r3, [pc, #76]	; (800af4c <pvPortMalloc+0x194>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	3301      	adds	r3, #1
 800af04:	4a11      	ldr	r2, [pc, #68]	; (800af4c <pvPortMalloc+0x194>)
 800af06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800af08:	f7fe fc4c 	bl	80097a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800af0c:	69fb      	ldr	r3, [r7, #28]
 800af0e:	f003 0307 	and.w	r3, r3, #7
 800af12:	2b00      	cmp	r3, #0
 800af14:	d00a      	beq.n	800af2c <pvPortMalloc+0x174>
	__asm volatile
 800af16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af1a:	f383 8811 	msr	BASEPRI, r3
 800af1e:	f3bf 8f6f 	isb	sy
 800af22:	f3bf 8f4f 	dsb	sy
 800af26:	60fb      	str	r3, [r7, #12]
}
 800af28:	bf00      	nop
 800af2a:	e7fe      	b.n	800af2a <pvPortMalloc+0x172>
	return pvReturn;
 800af2c:	69fb      	ldr	r3, [r7, #28]
}
 800af2e:	4618      	mov	r0, r3
 800af30:	3728      	adds	r7, #40	; 0x28
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}
 800af36:	bf00      	nop
 800af38:	20005148 	.word	0x20005148
 800af3c:	2000515c 	.word	0x2000515c
 800af40:	2000514c 	.word	0x2000514c
 800af44:	20005140 	.word	0x20005140
 800af48:	20005150 	.word	0x20005150
 800af4c:	20005154 	.word	0x20005154

0800af50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b086      	sub	sp, #24
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d04d      	beq.n	800affe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800af62:	2308      	movs	r3, #8
 800af64:	425b      	negs	r3, r3
 800af66:	697a      	ldr	r2, [r7, #20]
 800af68:	4413      	add	r3, r2
 800af6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800af6c:	697b      	ldr	r3, [r7, #20]
 800af6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800af70:	693b      	ldr	r3, [r7, #16]
 800af72:	685a      	ldr	r2, [r3, #4]
 800af74:	4b24      	ldr	r3, [pc, #144]	; (800b008 <vPortFree+0xb8>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	4013      	ands	r3, r2
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d10a      	bne.n	800af94 <vPortFree+0x44>
	__asm volatile
 800af7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af82:	f383 8811 	msr	BASEPRI, r3
 800af86:	f3bf 8f6f 	isb	sy
 800af8a:	f3bf 8f4f 	dsb	sy
 800af8e:	60fb      	str	r3, [r7, #12]
}
 800af90:	bf00      	nop
 800af92:	e7fe      	b.n	800af92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800af94:	693b      	ldr	r3, [r7, #16]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d00a      	beq.n	800afb2 <vPortFree+0x62>
	__asm volatile
 800af9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afa0:	f383 8811 	msr	BASEPRI, r3
 800afa4:	f3bf 8f6f 	isb	sy
 800afa8:	f3bf 8f4f 	dsb	sy
 800afac:	60bb      	str	r3, [r7, #8]
}
 800afae:	bf00      	nop
 800afb0:	e7fe      	b.n	800afb0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800afb2:	693b      	ldr	r3, [r7, #16]
 800afb4:	685a      	ldr	r2, [r3, #4]
 800afb6:	4b14      	ldr	r3, [pc, #80]	; (800b008 <vPortFree+0xb8>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	4013      	ands	r3, r2
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d01e      	beq.n	800affe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800afc0:	693b      	ldr	r3, [r7, #16]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d11a      	bne.n	800affe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	685a      	ldr	r2, [r3, #4]
 800afcc:	4b0e      	ldr	r3, [pc, #56]	; (800b008 <vPortFree+0xb8>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	43db      	mvns	r3, r3
 800afd2:	401a      	ands	r2, r3
 800afd4:	693b      	ldr	r3, [r7, #16]
 800afd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800afd8:	f7fe fbd6 	bl	8009788 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800afdc:	693b      	ldr	r3, [r7, #16]
 800afde:	685a      	ldr	r2, [r3, #4]
 800afe0:	4b0a      	ldr	r3, [pc, #40]	; (800b00c <vPortFree+0xbc>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	4413      	add	r3, r2
 800afe6:	4a09      	ldr	r2, [pc, #36]	; (800b00c <vPortFree+0xbc>)
 800afe8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800afea:	6938      	ldr	r0, [r7, #16]
 800afec:	f000 f874 	bl	800b0d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800aff0:	4b07      	ldr	r3, [pc, #28]	; (800b010 <vPortFree+0xc0>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	3301      	adds	r3, #1
 800aff6:	4a06      	ldr	r2, [pc, #24]	; (800b010 <vPortFree+0xc0>)
 800aff8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800affa:	f7fe fbd3 	bl	80097a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800affe:	bf00      	nop
 800b000:	3718      	adds	r7, #24
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}
 800b006:	bf00      	nop
 800b008:	2000515c 	.word	0x2000515c
 800b00c:	2000514c 	.word	0x2000514c
 800b010:	20005158 	.word	0x20005158

0800b014 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b014:	b480      	push	{r7}
 800b016:	b085      	sub	sp, #20
 800b018:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b01a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b01e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b020:	4b27      	ldr	r3, [pc, #156]	; (800b0c0 <prvHeapInit+0xac>)
 800b022:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	f003 0307 	and.w	r3, r3, #7
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d00c      	beq.n	800b048 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	3307      	adds	r3, #7
 800b032:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	f023 0307 	bic.w	r3, r3, #7
 800b03a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b03c:	68ba      	ldr	r2, [r7, #8]
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	1ad3      	subs	r3, r2, r3
 800b042:	4a1f      	ldr	r2, [pc, #124]	; (800b0c0 <prvHeapInit+0xac>)
 800b044:	4413      	add	r3, r2
 800b046:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b04c:	4a1d      	ldr	r2, [pc, #116]	; (800b0c4 <prvHeapInit+0xb0>)
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b052:	4b1c      	ldr	r3, [pc, #112]	; (800b0c4 <prvHeapInit+0xb0>)
 800b054:	2200      	movs	r2, #0
 800b056:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	68ba      	ldr	r2, [r7, #8]
 800b05c:	4413      	add	r3, r2
 800b05e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b060:	2208      	movs	r2, #8
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	1a9b      	subs	r3, r3, r2
 800b066:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	f023 0307 	bic.w	r3, r3, #7
 800b06e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	4a15      	ldr	r2, [pc, #84]	; (800b0c8 <prvHeapInit+0xb4>)
 800b074:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b076:	4b14      	ldr	r3, [pc, #80]	; (800b0c8 <prvHeapInit+0xb4>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	2200      	movs	r2, #0
 800b07c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b07e:	4b12      	ldr	r3, [pc, #72]	; (800b0c8 <prvHeapInit+0xb4>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	2200      	movs	r2, #0
 800b084:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	68fa      	ldr	r2, [r7, #12]
 800b08e:	1ad2      	subs	r2, r2, r3
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b094:	4b0c      	ldr	r3, [pc, #48]	; (800b0c8 <prvHeapInit+0xb4>)
 800b096:	681a      	ldr	r2, [r3, #0]
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	685b      	ldr	r3, [r3, #4]
 800b0a0:	4a0a      	ldr	r2, [pc, #40]	; (800b0cc <prvHeapInit+0xb8>)
 800b0a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	685b      	ldr	r3, [r3, #4]
 800b0a8:	4a09      	ldr	r2, [pc, #36]	; (800b0d0 <prvHeapInit+0xbc>)
 800b0aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b0ac:	4b09      	ldr	r3, [pc, #36]	; (800b0d4 <prvHeapInit+0xc0>)
 800b0ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b0b2:	601a      	str	r2, [r3, #0]
}
 800b0b4:	bf00      	nop
 800b0b6:	3714      	adds	r7, #20
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0be:	4770      	bx	lr
 800b0c0:	20001540 	.word	0x20001540
 800b0c4:	20005140 	.word	0x20005140
 800b0c8:	20005148 	.word	0x20005148
 800b0cc:	20005150 	.word	0x20005150
 800b0d0:	2000514c 	.word	0x2000514c
 800b0d4:	2000515c 	.word	0x2000515c

0800b0d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b0d8:	b480      	push	{r7}
 800b0da:	b085      	sub	sp, #20
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b0e0:	4b28      	ldr	r3, [pc, #160]	; (800b184 <prvInsertBlockIntoFreeList+0xac>)
 800b0e2:	60fb      	str	r3, [r7, #12]
 800b0e4:	e002      	b.n	800b0ec <prvInsertBlockIntoFreeList+0x14>
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	60fb      	str	r3, [r7, #12]
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	687a      	ldr	r2, [r7, #4]
 800b0f2:	429a      	cmp	r2, r3
 800b0f4:	d8f7      	bhi.n	800b0e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	685b      	ldr	r3, [r3, #4]
 800b0fe:	68ba      	ldr	r2, [r7, #8]
 800b100:	4413      	add	r3, r2
 800b102:	687a      	ldr	r2, [r7, #4]
 800b104:	429a      	cmp	r2, r3
 800b106:	d108      	bne.n	800b11a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	685a      	ldr	r2, [r3, #4]
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	685b      	ldr	r3, [r3, #4]
 800b110:	441a      	add	r2, r3
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	685b      	ldr	r3, [r3, #4]
 800b122:	68ba      	ldr	r2, [r7, #8]
 800b124:	441a      	add	r2, r3
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	429a      	cmp	r2, r3
 800b12c:	d118      	bne.n	800b160 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	681a      	ldr	r2, [r3, #0]
 800b132:	4b15      	ldr	r3, [pc, #84]	; (800b188 <prvInsertBlockIntoFreeList+0xb0>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	429a      	cmp	r2, r3
 800b138:	d00d      	beq.n	800b156 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	685a      	ldr	r2, [r3, #4]
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	685b      	ldr	r3, [r3, #4]
 800b144:	441a      	add	r2, r3
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	681a      	ldr	r2, [r3, #0]
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	601a      	str	r2, [r3, #0]
 800b154:	e008      	b.n	800b168 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b156:	4b0c      	ldr	r3, [pc, #48]	; (800b188 <prvInsertBlockIntoFreeList+0xb0>)
 800b158:	681a      	ldr	r2, [r3, #0]
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	601a      	str	r2, [r3, #0]
 800b15e:	e003      	b.n	800b168 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	681a      	ldr	r2, [r3, #0]
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b168:	68fa      	ldr	r2, [r7, #12]
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	429a      	cmp	r2, r3
 800b16e:	d002      	beq.n	800b176 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	687a      	ldr	r2, [r7, #4]
 800b174:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b176:	bf00      	nop
 800b178:	3714      	adds	r7, #20
 800b17a:	46bd      	mov	sp, r7
 800b17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b180:	4770      	bx	lr
 800b182:	bf00      	nop
 800b184:	20005140 	.word	0x20005140
 800b188:	20005148 	.word	0x20005148

0800b18c <__cvt>:
 800b18c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b190:	ec55 4b10 	vmov	r4, r5, d0
 800b194:	2d00      	cmp	r5, #0
 800b196:	460e      	mov	r6, r1
 800b198:	4619      	mov	r1, r3
 800b19a:	462b      	mov	r3, r5
 800b19c:	bfbb      	ittet	lt
 800b19e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b1a2:	461d      	movlt	r5, r3
 800b1a4:	2300      	movge	r3, #0
 800b1a6:	232d      	movlt	r3, #45	; 0x2d
 800b1a8:	700b      	strb	r3, [r1, #0]
 800b1aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b1ac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b1b0:	4691      	mov	r9, r2
 800b1b2:	f023 0820 	bic.w	r8, r3, #32
 800b1b6:	bfbc      	itt	lt
 800b1b8:	4622      	movlt	r2, r4
 800b1ba:	4614      	movlt	r4, r2
 800b1bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b1c0:	d005      	beq.n	800b1ce <__cvt+0x42>
 800b1c2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b1c6:	d100      	bne.n	800b1ca <__cvt+0x3e>
 800b1c8:	3601      	adds	r6, #1
 800b1ca:	2102      	movs	r1, #2
 800b1cc:	e000      	b.n	800b1d0 <__cvt+0x44>
 800b1ce:	2103      	movs	r1, #3
 800b1d0:	ab03      	add	r3, sp, #12
 800b1d2:	9301      	str	r3, [sp, #4]
 800b1d4:	ab02      	add	r3, sp, #8
 800b1d6:	9300      	str	r3, [sp, #0]
 800b1d8:	ec45 4b10 	vmov	d0, r4, r5
 800b1dc:	4653      	mov	r3, sl
 800b1de:	4632      	mov	r2, r6
 800b1e0:	f000 ffae 	bl	800c140 <_dtoa_r>
 800b1e4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b1e8:	4607      	mov	r7, r0
 800b1ea:	d102      	bne.n	800b1f2 <__cvt+0x66>
 800b1ec:	f019 0f01 	tst.w	r9, #1
 800b1f0:	d022      	beq.n	800b238 <__cvt+0xac>
 800b1f2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b1f6:	eb07 0906 	add.w	r9, r7, r6
 800b1fa:	d110      	bne.n	800b21e <__cvt+0x92>
 800b1fc:	783b      	ldrb	r3, [r7, #0]
 800b1fe:	2b30      	cmp	r3, #48	; 0x30
 800b200:	d10a      	bne.n	800b218 <__cvt+0x8c>
 800b202:	2200      	movs	r2, #0
 800b204:	2300      	movs	r3, #0
 800b206:	4620      	mov	r0, r4
 800b208:	4629      	mov	r1, r5
 800b20a:	f7f5 fc65 	bl	8000ad8 <__aeabi_dcmpeq>
 800b20e:	b918      	cbnz	r0, 800b218 <__cvt+0x8c>
 800b210:	f1c6 0601 	rsb	r6, r6, #1
 800b214:	f8ca 6000 	str.w	r6, [sl]
 800b218:	f8da 3000 	ldr.w	r3, [sl]
 800b21c:	4499      	add	r9, r3
 800b21e:	2200      	movs	r2, #0
 800b220:	2300      	movs	r3, #0
 800b222:	4620      	mov	r0, r4
 800b224:	4629      	mov	r1, r5
 800b226:	f7f5 fc57 	bl	8000ad8 <__aeabi_dcmpeq>
 800b22a:	b108      	cbz	r0, 800b230 <__cvt+0xa4>
 800b22c:	f8cd 900c 	str.w	r9, [sp, #12]
 800b230:	2230      	movs	r2, #48	; 0x30
 800b232:	9b03      	ldr	r3, [sp, #12]
 800b234:	454b      	cmp	r3, r9
 800b236:	d307      	bcc.n	800b248 <__cvt+0xbc>
 800b238:	9b03      	ldr	r3, [sp, #12]
 800b23a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b23c:	1bdb      	subs	r3, r3, r7
 800b23e:	4638      	mov	r0, r7
 800b240:	6013      	str	r3, [r2, #0]
 800b242:	b004      	add	sp, #16
 800b244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b248:	1c59      	adds	r1, r3, #1
 800b24a:	9103      	str	r1, [sp, #12]
 800b24c:	701a      	strb	r2, [r3, #0]
 800b24e:	e7f0      	b.n	800b232 <__cvt+0xa6>

0800b250 <__exponent>:
 800b250:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b252:	4603      	mov	r3, r0
 800b254:	2900      	cmp	r1, #0
 800b256:	bfb8      	it	lt
 800b258:	4249      	neglt	r1, r1
 800b25a:	f803 2b02 	strb.w	r2, [r3], #2
 800b25e:	bfb4      	ite	lt
 800b260:	222d      	movlt	r2, #45	; 0x2d
 800b262:	222b      	movge	r2, #43	; 0x2b
 800b264:	2909      	cmp	r1, #9
 800b266:	7042      	strb	r2, [r0, #1]
 800b268:	dd2a      	ble.n	800b2c0 <__exponent+0x70>
 800b26a:	f10d 0207 	add.w	r2, sp, #7
 800b26e:	4617      	mov	r7, r2
 800b270:	260a      	movs	r6, #10
 800b272:	4694      	mov	ip, r2
 800b274:	fb91 f5f6 	sdiv	r5, r1, r6
 800b278:	fb06 1415 	mls	r4, r6, r5, r1
 800b27c:	3430      	adds	r4, #48	; 0x30
 800b27e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800b282:	460c      	mov	r4, r1
 800b284:	2c63      	cmp	r4, #99	; 0x63
 800b286:	f102 32ff 	add.w	r2, r2, #4294967295
 800b28a:	4629      	mov	r1, r5
 800b28c:	dcf1      	bgt.n	800b272 <__exponent+0x22>
 800b28e:	3130      	adds	r1, #48	; 0x30
 800b290:	f1ac 0402 	sub.w	r4, ip, #2
 800b294:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b298:	1c41      	adds	r1, r0, #1
 800b29a:	4622      	mov	r2, r4
 800b29c:	42ba      	cmp	r2, r7
 800b29e:	d30a      	bcc.n	800b2b6 <__exponent+0x66>
 800b2a0:	f10d 0209 	add.w	r2, sp, #9
 800b2a4:	eba2 020c 	sub.w	r2, r2, ip
 800b2a8:	42bc      	cmp	r4, r7
 800b2aa:	bf88      	it	hi
 800b2ac:	2200      	movhi	r2, #0
 800b2ae:	4413      	add	r3, r2
 800b2b0:	1a18      	subs	r0, r3, r0
 800b2b2:	b003      	add	sp, #12
 800b2b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2b6:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b2ba:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b2be:	e7ed      	b.n	800b29c <__exponent+0x4c>
 800b2c0:	2330      	movs	r3, #48	; 0x30
 800b2c2:	3130      	adds	r1, #48	; 0x30
 800b2c4:	7083      	strb	r3, [r0, #2]
 800b2c6:	70c1      	strb	r1, [r0, #3]
 800b2c8:	1d03      	adds	r3, r0, #4
 800b2ca:	e7f1      	b.n	800b2b0 <__exponent+0x60>

0800b2cc <_printf_float>:
 800b2cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2d0:	ed2d 8b02 	vpush	{d8}
 800b2d4:	b08d      	sub	sp, #52	; 0x34
 800b2d6:	460c      	mov	r4, r1
 800b2d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b2dc:	4616      	mov	r6, r2
 800b2de:	461f      	mov	r7, r3
 800b2e0:	4605      	mov	r5, r0
 800b2e2:	f000 fdc9 	bl	800be78 <_localeconv_r>
 800b2e6:	f8d0 a000 	ldr.w	sl, [r0]
 800b2ea:	4650      	mov	r0, sl
 800b2ec:	f7f4 ffc8 	bl	8000280 <strlen>
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	930a      	str	r3, [sp, #40]	; 0x28
 800b2f4:	6823      	ldr	r3, [r4, #0]
 800b2f6:	9305      	str	r3, [sp, #20]
 800b2f8:	f8d8 3000 	ldr.w	r3, [r8]
 800b2fc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b300:	3307      	adds	r3, #7
 800b302:	f023 0307 	bic.w	r3, r3, #7
 800b306:	f103 0208 	add.w	r2, r3, #8
 800b30a:	f8c8 2000 	str.w	r2, [r8]
 800b30e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b312:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b316:	9307      	str	r3, [sp, #28]
 800b318:	f8cd 8018 	str.w	r8, [sp, #24]
 800b31c:	ee08 0a10 	vmov	s16, r0
 800b320:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800b324:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b328:	4b9e      	ldr	r3, [pc, #632]	; (800b5a4 <_printf_float+0x2d8>)
 800b32a:	f04f 32ff 	mov.w	r2, #4294967295
 800b32e:	f7f5 fc05 	bl	8000b3c <__aeabi_dcmpun>
 800b332:	bb88      	cbnz	r0, 800b398 <_printf_float+0xcc>
 800b334:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b338:	4b9a      	ldr	r3, [pc, #616]	; (800b5a4 <_printf_float+0x2d8>)
 800b33a:	f04f 32ff 	mov.w	r2, #4294967295
 800b33e:	f7f5 fbdf 	bl	8000b00 <__aeabi_dcmple>
 800b342:	bb48      	cbnz	r0, 800b398 <_printf_float+0xcc>
 800b344:	2200      	movs	r2, #0
 800b346:	2300      	movs	r3, #0
 800b348:	4640      	mov	r0, r8
 800b34a:	4649      	mov	r1, r9
 800b34c:	f7f5 fbce 	bl	8000aec <__aeabi_dcmplt>
 800b350:	b110      	cbz	r0, 800b358 <_printf_float+0x8c>
 800b352:	232d      	movs	r3, #45	; 0x2d
 800b354:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b358:	4a93      	ldr	r2, [pc, #588]	; (800b5a8 <_printf_float+0x2dc>)
 800b35a:	4b94      	ldr	r3, [pc, #592]	; (800b5ac <_printf_float+0x2e0>)
 800b35c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b360:	bf94      	ite	ls
 800b362:	4690      	movls	r8, r2
 800b364:	4698      	movhi	r8, r3
 800b366:	2303      	movs	r3, #3
 800b368:	6123      	str	r3, [r4, #16]
 800b36a:	9b05      	ldr	r3, [sp, #20]
 800b36c:	f023 0304 	bic.w	r3, r3, #4
 800b370:	6023      	str	r3, [r4, #0]
 800b372:	f04f 0900 	mov.w	r9, #0
 800b376:	9700      	str	r7, [sp, #0]
 800b378:	4633      	mov	r3, r6
 800b37a:	aa0b      	add	r2, sp, #44	; 0x2c
 800b37c:	4621      	mov	r1, r4
 800b37e:	4628      	mov	r0, r5
 800b380:	f000 f9da 	bl	800b738 <_printf_common>
 800b384:	3001      	adds	r0, #1
 800b386:	f040 8090 	bne.w	800b4aa <_printf_float+0x1de>
 800b38a:	f04f 30ff 	mov.w	r0, #4294967295
 800b38e:	b00d      	add	sp, #52	; 0x34
 800b390:	ecbd 8b02 	vpop	{d8}
 800b394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b398:	4642      	mov	r2, r8
 800b39a:	464b      	mov	r3, r9
 800b39c:	4640      	mov	r0, r8
 800b39e:	4649      	mov	r1, r9
 800b3a0:	f7f5 fbcc 	bl	8000b3c <__aeabi_dcmpun>
 800b3a4:	b140      	cbz	r0, 800b3b8 <_printf_float+0xec>
 800b3a6:	464b      	mov	r3, r9
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	bfbc      	itt	lt
 800b3ac:	232d      	movlt	r3, #45	; 0x2d
 800b3ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b3b2:	4a7f      	ldr	r2, [pc, #508]	; (800b5b0 <_printf_float+0x2e4>)
 800b3b4:	4b7f      	ldr	r3, [pc, #508]	; (800b5b4 <_printf_float+0x2e8>)
 800b3b6:	e7d1      	b.n	800b35c <_printf_float+0x90>
 800b3b8:	6863      	ldr	r3, [r4, #4]
 800b3ba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b3be:	9206      	str	r2, [sp, #24]
 800b3c0:	1c5a      	adds	r2, r3, #1
 800b3c2:	d13f      	bne.n	800b444 <_printf_float+0x178>
 800b3c4:	2306      	movs	r3, #6
 800b3c6:	6063      	str	r3, [r4, #4]
 800b3c8:	9b05      	ldr	r3, [sp, #20]
 800b3ca:	6861      	ldr	r1, [r4, #4]
 800b3cc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	9303      	str	r3, [sp, #12]
 800b3d4:	ab0a      	add	r3, sp, #40	; 0x28
 800b3d6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b3da:	ab09      	add	r3, sp, #36	; 0x24
 800b3dc:	ec49 8b10 	vmov	d0, r8, r9
 800b3e0:	9300      	str	r3, [sp, #0]
 800b3e2:	6022      	str	r2, [r4, #0]
 800b3e4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b3e8:	4628      	mov	r0, r5
 800b3ea:	f7ff fecf 	bl	800b18c <__cvt>
 800b3ee:	9b06      	ldr	r3, [sp, #24]
 800b3f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b3f2:	2b47      	cmp	r3, #71	; 0x47
 800b3f4:	4680      	mov	r8, r0
 800b3f6:	d108      	bne.n	800b40a <_printf_float+0x13e>
 800b3f8:	1cc8      	adds	r0, r1, #3
 800b3fa:	db02      	blt.n	800b402 <_printf_float+0x136>
 800b3fc:	6863      	ldr	r3, [r4, #4]
 800b3fe:	4299      	cmp	r1, r3
 800b400:	dd41      	ble.n	800b486 <_printf_float+0x1ba>
 800b402:	f1ab 0302 	sub.w	r3, fp, #2
 800b406:	fa5f fb83 	uxtb.w	fp, r3
 800b40a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b40e:	d820      	bhi.n	800b452 <_printf_float+0x186>
 800b410:	3901      	subs	r1, #1
 800b412:	465a      	mov	r2, fp
 800b414:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b418:	9109      	str	r1, [sp, #36]	; 0x24
 800b41a:	f7ff ff19 	bl	800b250 <__exponent>
 800b41e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b420:	1813      	adds	r3, r2, r0
 800b422:	2a01      	cmp	r2, #1
 800b424:	4681      	mov	r9, r0
 800b426:	6123      	str	r3, [r4, #16]
 800b428:	dc02      	bgt.n	800b430 <_printf_float+0x164>
 800b42a:	6822      	ldr	r2, [r4, #0]
 800b42c:	07d2      	lsls	r2, r2, #31
 800b42e:	d501      	bpl.n	800b434 <_printf_float+0x168>
 800b430:	3301      	adds	r3, #1
 800b432:	6123      	str	r3, [r4, #16]
 800b434:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d09c      	beq.n	800b376 <_printf_float+0xaa>
 800b43c:	232d      	movs	r3, #45	; 0x2d
 800b43e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b442:	e798      	b.n	800b376 <_printf_float+0xaa>
 800b444:	9a06      	ldr	r2, [sp, #24]
 800b446:	2a47      	cmp	r2, #71	; 0x47
 800b448:	d1be      	bne.n	800b3c8 <_printf_float+0xfc>
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d1bc      	bne.n	800b3c8 <_printf_float+0xfc>
 800b44e:	2301      	movs	r3, #1
 800b450:	e7b9      	b.n	800b3c6 <_printf_float+0xfa>
 800b452:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b456:	d118      	bne.n	800b48a <_printf_float+0x1be>
 800b458:	2900      	cmp	r1, #0
 800b45a:	6863      	ldr	r3, [r4, #4]
 800b45c:	dd0b      	ble.n	800b476 <_printf_float+0x1aa>
 800b45e:	6121      	str	r1, [r4, #16]
 800b460:	b913      	cbnz	r3, 800b468 <_printf_float+0x19c>
 800b462:	6822      	ldr	r2, [r4, #0]
 800b464:	07d0      	lsls	r0, r2, #31
 800b466:	d502      	bpl.n	800b46e <_printf_float+0x1a2>
 800b468:	3301      	adds	r3, #1
 800b46a:	440b      	add	r3, r1
 800b46c:	6123      	str	r3, [r4, #16]
 800b46e:	65a1      	str	r1, [r4, #88]	; 0x58
 800b470:	f04f 0900 	mov.w	r9, #0
 800b474:	e7de      	b.n	800b434 <_printf_float+0x168>
 800b476:	b913      	cbnz	r3, 800b47e <_printf_float+0x1b2>
 800b478:	6822      	ldr	r2, [r4, #0]
 800b47a:	07d2      	lsls	r2, r2, #31
 800b47c:	d501      	bpl.n	800b482 <_printf_float+0x1b6>
 800b47e:	3302      	adds	r3, #2
 800b480:	e7f4      	b.n	800b46c <_printf_float+0x1a0>
 800b482:	2301      	movs	r3, #1
 800b484:	e7f2      	b.n	800b46c <_printf_float+0x1a0>
 800b486:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b48a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b48c:	4299      	cmp	r1, r3
 800b48e:	db05      	blt.n	800b49c <_printf_float+0x1d0>
 800b490:	6823      	ldr	r3, [r4, #0]
 800b492:	6121      	str	r1, [r4, #16]
 800b494:	07d8      	lsls	r0, r3, #31
 800b496:	d5ea      	bpl.n	800b46e <_printf_float+0x1a2>
 800b498:	1c4b      	adds	r3, r1, #1
 800b49a:	e7e7      	b.n	800b46c <_printf_float+0x1a0>
 800b49c:	2900      	cmp	r1, #0
 800b49e:	bfd4      	ite	le
 800b4a0:	f1c1 0202 	rsble	r2, r1, #2
 800b4a4:	2201      	movgt	r2, #1
 800b4a6:	4413      	add	r3, r2
 800b4a8:	e7e0      	b.n	800b46c <_printf_float+0x1a0>
 800b4aa:	6823      	ldr	r3, [r4, #0]
 800b4ac:	055a      	lsls	r2, r3, #21
 800b4ae:	d407      	bmi.n	800b4c0 <_printf_float+0x1f4>
 800b4b0:	6923      	ldr	r3, [r4, #16]
 800b4b2:	4642      	mov	r2, r8
 800b4b4:	4631      	mov	r1, r6
 800b4b6:	4628      	mov	r0, r5
 800b4b8:	47b8      	blx	r7
 800b4ba:	3001      	adds	r0, #1
 800b4bc:	d12c      	bne.n	800b518 <_printf_float+0x24c>
 800b4be:	e764      	b.n	800b38a <_printf_float+0xbe>
 800b4c0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b4c4:	f240 80e0 	bls.w	800b688 <_printf_float+0x3bc>
 800b4c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	f7f5 fb02 	bl	8000ad8 <__aeabi_dcmpeq>
 800b4d4:	2800      	cmp	r0, #0
 800b4d6:	d034      	beq.n	800b542 <_printf_float+0x276>
 800b4d8:	4a37      	ldr	r2, [pc, #220]	; (800b5b8 <_printf_float+0x2ec>)
 800b4da:	2301      	movs	r3, #1
 800b4dc:	4631      	mov	r1, r6
 800b4de:	4628      	mov	r0, r5
 800b4e0:	47b8      	blx	r7
 800b4e2:	3001      	adds	r0, #1
 800b4e4:	f43f af51 	beq.w	800b38a <_printf_float+0xbe>
 800b4e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b4ec:	429a      	cmp	r2, r3
 800b4ee:	db02      	blt.n	800b4f6 <_printf_float+0x22a>
 800b4f0:	6823      	ldr	r3, [r4, #0]
 800b4f2:	07d8      	lsls	r0, r3, #31
 800b4f4:	d510      	bpl.n	800b518 <_printf_float+0x24c>
 800b4f6:	ee18 3a10 	vmov	r3, s16
 800b4fa:	4652      	mov	r2, sl
 800b4fc:	4631      	mov	r1, r6
 800b4fe:	4628      	mov	r0, r5
 800b500:	47b8      	blx	r7
 800b502:	3001      	adds	r0, #1
 800b504:	f43f af41 	beq.w	800b38a <_printf_float+0xbe>
 800b508:	f04f 0800 	mov.w	r8, #0
 800b50c:	f104 091a 	add.w	r9, r4, #26
 800b510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b512:	3b01      	subs	r3, #1
 800b514:	4543      	cmp	r3, r8
 800b516:	dc09      	bgt.n	800b52c <_printf_float+0x260>
 800b518:	6823      	ldr	r3, [r4, #0]
 800b51a:	079b      	lsls	r3, r3, #30
 800b51c:	f100 8107 	bmi.w	800b72e <_printf_float+0x462>
 800b520:	68e0      	ldr	r0, [r4, #12]
 800b522:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b524:	4298      	cmp	r0, r3
 800b526:	bfb8      	it	lt
 800b528:	4618      	movlt	r0, r3
 800b52a:	e730      	b.n	800b38e <_printf_float+0xc2>
 800b52c:	2301      	movs	r3, #1
 800b52e:	464a      	mov	r2, r9
 800b530:	4631      	mov	r1, r6
 800b532:	4628      	mov	r0, r5
 800b534:	47b8      	blx	r7
 800b536:	3001      	adds	r0, #1
 800b538:	f43f af27 	beq.w	800b38a <_printf_float+0xbe>
 800b53c:	f108 0801 	add.w	r8, r8, #1
 800b540:	e7e6      	b.n	800b510 <_printf_float+0x244>
 800b542:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b544:	2b00      	cmp	r3, #0
 800b546:	dc39      	bgt.n	800b5bc <_printf_float+0x2f0>
 800b548:	4a1b      	ldr	r2, [pc, #108]	; (800b5b8 <_printf_float+0x2ec>)
 800b54a:	2301      	movs	r3, #1
 800b54c:	4631      	mov	r1, r6
 800b54e:	4628      	mov	r0, r5
 800b550:	47b8      	blx	r7
 800b552:	3001      	adds	r0, #1
 800b554:	f43f af19 	beq.w	800b38a <_printf_float+0xbe>
 800b558:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b55c:	4313      	orrs	r3, r2
 800b55e:	d102      	bne.n	800b566 <_printf_float+0x29a>
 800b560:	6823      	ldr	r3, [r4, #0]
 800b562:	07d9      	lsls	r1, r3, #31
 800b564:	d5d8      	bpl.n	800b518 <_printf_float+0x24c>
 800b566:	ee18 3a10 	vmov	r3, s16
 800b56a:	4652      	mov	r2, sl
 800b56c:	4631      	mov	r1, r6
 800b56e:	4628      	mov	r0, r5
 800b570:	47b8      	blx	r7
 800b572:	3001      	adds	r0, #1
 800b574:	f43f af09 	beq.w	800b38a <_printf_float+0xbe>
 800b578:	f04f 0900 	mov.w	r9, #0
 800b57c:	f104 0a1a 	add.w	sl, r4, #26
 800b580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b582:	425b      	negs	r3, r3
 800b584:	454b      	cmp	r3, r9
 800b586:	dc01      	bgt.n	800b58c <_printf_float+0x2c0>
 800b588:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b58a:	e792      	b.n	800b4b2 <_printf_float+0x1e6>
 800b58c:	2301      	movs	r3, #1
 800b58e:	4652      	mov	r2, sl
 800b590:	4631      	mov	r1, r6
 800b592:	4628      	mov	r0, r5
 800b594:	47b8      	blx	r7
 800b596:	3001      	adds	r0, #1
 800b598:	f43f aef7 	beq.w	800b38a <_printf_float+0xbe>
 800b59c:	f109 0901 	add.w	r9, r9, #1
 800b5a0:	e7ee      	b.n	800b580 <_printf_float+0x2b4>
 800b5a2:	bf00      	nop
 800b5a4:	7fefffff 	.word	0x7fefffff
 800b5a8:	0800de1c 	.word	0x0800de1c
 800b5ac:	0800de20 	.word	0x0800de20
 800b5b0:	0800de24 	.word	0x0800de24
 800b5b4:	0800de28 	.word	0x0800de28
 800b5b8:	0800de2c 	.word	0x0800de2c
 800b5bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b5be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b5c0:	429a      	cmp	r2, r3
 800b5c2:	bfa8      	it	ge
 800b5c4:	461a      	movge	r2, r3
 800b5c6:	2a00      	cmp	r2, #0
 800b5c8:	4691      	mov	r9, r2
 800b5ca:	dc37      	bgt.n	800b63c <_printf_float+0x370>
 800b5cc:	f04f 0b00 	mov.w	fp, #0
 800b5d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b5d4:	f104 021a 	add.w	r2, r4, #26
 800b5d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b5da:	9305      	str	r3, [sp, #20]
 800b5dc:	eba3 0309 	sub.w	r3, r3, r9
 800b5e0:	455b      	cmp	r3, fp
 800b5e2:	dc33      	bgt.n	800b64c <_printf_float+0x380>
 800b5e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b5e8:	429a      	cmp	r2, r3
 800b5ea:	db3b      	blt.n	800b664 <_printf_float+0x398>
 800b5ec:	6823      	ldr	r3, [r4, #0]
 800b5ee:	07da      	lsls	r2, r3, #31
 800b5f0:	d438      	bmi.n	800b664 <_printf_float+0x398>
 800b5f2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b5f6:	eba2 0903 	sub.w	r9, r2, r3
 800b5fa:	9b05      	ldr	r3, [sp, #20]
 800b5fc:	1ad2      	subs	r2, r2, r3
 800b5fe:	4591      	cmp	r9, r2
 800b600:	bfa8      	it	ge
 800b602:	4691      	movge	r9, r2
 800b604:	f1b9 0f00 	cmp.w	r9, #0
 800b608:	dc35      	bgt.n	800b676 <_printf_float+0x3aa>
 800b60a:	f04f 0800 	mov.w	r8, #0
 800b60e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b612:	f104 0a1a 	add.w	sl, r4, #26
 800b616:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b61a:	1a9b      	subs	r3, r3, r2
 800b61c:	eba3 0309 	sub.w	r3, r3, r9
 800b620:	4543      	cmp	r3, r8
 800b622:	f77f af79 	ble.w	800b518 <_printf_float+0x24c>
 800b626:	2301      	movs	r3, #1
 800b628:	4652      	mov	r2, sl
 800b62a:	4631      	mov	r1, r6
 800b62c:	4628      	mov	r0, r5
 800b62e:	47b8      	blx	r7
 800b630:	3001      	adds	r0, #1
 800b632:	f43f aeaa 	beq.w	800b38a <_printf_float+0xbe>
 800b636:	f108 0801 	add.w	r8, r8, #1
 800b63a:	e7ec      	b.n	800b616 <_printf_float+0x34a>
 800b63c:	4613      	mov	r3, r2
 800b63e:	4631      	mov	r1, r6
 800b640:	4642      	mov	r2, r8
 800b642:	4628      	mov	r0, r5
 800b644:	47b8      	blx	r7
 800b646:	3001      	adds	r0, #1
 800b648:	d1c0      	bne.n	800b5cc <_printf_float+0x300>
 800b64a:	e69e      	b.n	800b38a <_printf_float+0xbe>
 800b64c:	2301      	movs	r3, #1
 800b64e:	4631      	mov	r1, r6
 800b650:	4628      	mov	r0, r5
 800b652:	9205      	str	r2, [sp, #20]
 800b654:	47b8      	blx	r7
 800b656:	3001      	adds	r0, #1
 800b658:	f43f ae97 	beq.w	800b38a <_printf_float+0xbe>
 800b65c:	9a05      	ldr	r2, [sp, #20]
 800b65e:	f10b 0b01 	add.w	fp, fp, #1
 800b662:	e7b9      	b.n	800b5d8 <_printf_float+0x30c>
 800b664:	ee18 3a10 	vmov	r3, s16
 800b668:	4652      	mov	r2, sl
 800b66a:	4631      	mov	r1, r6
 800b66c:	4628      	mov	r0, r5
 800b66e:	47b8      	blx	r7
 800b670:	3001      	adds	r0, #1
 800b672:	d1be      	bne.n	800b5f2 <_printf_float+0x326>
 800b674:	e689      	b.n	800b38a <_printf_float+0xbe>
 800b676:	9a05      	ldr	r2, [sp, #20]
 800b678:	464b      	mov	r3, r9
 800b67a:	4442      	add	r2, r8
 800b67c:	4631      	mov	r1, r6
 800b67e:	4628      	mov	r0, r5
 800b680:	47b8      	blx	r7
 800b682:	3001      	adds	r0, #1
 800b684:	d1c1      	bne.n	800b60a <_printf_float+0x33e>
 800b686:	e680      	b.n	800b38a <_printf_float+0xbe>
 800b688:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b68a:	2a01      	cmp	r2, #1
 800b68c:	dc01      	bgt.n	800b692 <_printf_float+0x3c6>
 800b68e:	07db      	lsls	r3, r3, #31
 800b690:	d53a      	bpl.n	800b708 <_printf_float+0x43c>
 800b692:	2301      	movs	r3, #1
 800b694:	4642      	mov	r2, r8
 800b696:	4631      	mov	r1, r6
 800b698:	4628      	mov	r0, r5
 800b69a:	47b8      	blx	r7
 800b69c:	3001      	adds	r0, #1
 800b69e:	f43f ae74 	beq.w	800b38a <_printf_float+0xbe>
 800b6a2:	ee18 3a10 	vmov	r3, s16
 800b6a6:	4652      	mov	r2, sl
 800b6a8:	4631      	mov	r1, r6
 800b6aa:	4628      	mov	r0, r5
 800b6ac:	47b8      	blx	r7
 800b6ae:	3001      	adds	r0, #1
 800b6b0:	f43f ae6b 	beq.w	800b38a <_printf_float+0xbe>
 800b6b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800b6c0:	f7f5 fa0a 	bl	8000ad8 <__aeabi_dcmpeq>
 800b6c4:	b9d8      	cbnz	r0, 800b6fe <_printf_float+0x432>
 800b6c6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b6ca:	f108 0201 	add.w	r2, r8, #1
 800b6ce:	4631      	mov	r1, r6
 800b6d0:	4628      	mov	r0, r5
 800b6d2:	47b8      	blx	r7
 800b6d4:	3001      	adds	r0, #1
 800b6d6:	d10e      	bne.n	800b6f6 <_printf_float+0x42a>
 800b6d8:	e657      	b.n	800b38a <_printf_float+0xbe>
 800b6da:	2301      	movs	r3, #1
 800b6dc:	4652      	mov	r2, sl
 800b6de:	4631      	mov	r1, r6
 800b6e0:	4628      	mov	r0, r5
 800b6e2:	47b8      	blx	r7
 800b6e4:	3001      	adds	r0, #1
 800b6e6:	f43f ae50 	beq.w	800b38a <_printf_float+0xbe>
 800b6ea:	f108 0801 	add.w	r8, r8, #1
 800b6ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6f0:	3b01      	subs	r3, #1
 800b6f2:	4543      	cmp	r3, r8
 800b6f4:	dcf1      	bgt.n	800b6da <_printf_float+0x40e>
 800b6f6:	464b      	mov	r3, r9
 800b6f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b6fc:	e6da      	b.n	800b4b4 <_printf_float+0x1e8>
 800b6fe:	f04f 0800 	mov.w	r8, #0
 800b702:	f104 0a1a 	add.w	sl, r4, #26
 800b706:	e7f2      	b.n	800b6ee <_printf_float+0x422>
 800b708:	2301      	movs	r3, #1
 800b70a:	4642      	mov	r2, r8
 800b70c:	e7df      	b.n	800b6ce <_printf_float+0x402>
 800b70e:	2301      	movs	r3, #1
 800b710:	464a      	mov	r2, r9
 800b712:	4631      	mov	r1, r6
 800b714:	4628      	mov	r0, r5
 800b716:	47b8      	blx	r7
 800b718:	3001      	adds	r0, #1
 800b71a:	f43f ae36 	beq.w	800b38a <_printf_float+0xbe>
 800b71e:	f108 0801 	add.w	r8, r8, #1
 800b722:	68e3      	ldr	r3, [r4, #12]
 800b724:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b726:	1a5b      	subs	r3, r3, r1
 800b728:	4543      	cmp	r3, r8
 800b72a:	dcf0      	bgt.n	800b70e <_printf_float+0x442>
 800b72c:	e6f8      	b.n	800b520 <_printf_float+0x254>
 800b72e:	f04f 0800 	mov.w	r8, #0
 800b732:	f104 0919 	add.w	r9, r4, #25
 800b736:	e7f4      	b.n	800b722 <_printf_float+0x456>

0800b738 <_printf_common>:
 800b738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b73c:	4616      	mov	r6, r2
 800b73e:	4699      	mov	r9, r3
 800b740:	688a      	ldr	r2, [r1, #8]
 800b742:	690b      	ldr	r3, [r1, #16]
 800b744:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b748:	4293      	cmp	r3, r2
 800b74a:	bfb8      	it	lt
 800b74c:	4613      	movlt	r3, r2
 800b74e:	6033      	str	r3, [r6, #0]
 800b750:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b754:	4607      	mov	r7, r0
 800b756:	460c      	mov	r4, r1
 800b758:	b10a      	cbz	r2, 800b75e <_printf_common+0x26>
 800b75a:	3301      	adds	r3, #1
 800b75c:	6033      	str	r3, [r6, #0]
 800b75e:	6823      	ldr	r3, [r4, #0]
 800b760:	0699      	lsls	r1, r3, #26
 800b762:	bf42      	ittt	mi
 800b764:	6833      	ldrmi	r3, [r6, #0]
 800b766:	3302      	addmi	r3, #2
 800b768:	6033      	strmi	r3, [r6, #0]
 800b76a:	6825      	ldr	r5, [r4, #0]
 800b76c:	f015 0506 	ands.w	r5, r5, #6
 800b770:	d106      	bne.n	800b780 <_printf_common+0x48>
 800b772:	f104 0a19 	add.w	sl, r4, #25
 800b776:	68e3      	ldr	r3, [r4, #12]
 800b778:	6832      	ldr	r2, [r6, #0]
 800b77a:	1a9b      	subs	r3, r3, r2
 800b77c:	42ab      	cmp	r3, r5
 800b77e:	dc26      	bgt.n	800b7ce <_printf_common+0x96>
 800b780:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b784:	1e13      	subs	r3, r2, #0
 800b786:	6822      	ldr	r2, [r4, #0]
 800b788:	bf18      	it	ne
 800b78a:	2301      	movne	r3, #1
 800b78c:	0692      	lsls	r2, r2, #26
 800b78e:	d42b      	bmi.n	800b7e8 <_printf_common+0xb0>
 800b790:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b794:	4649      	mov	r1, r9
 800b796:	4638      	mov	r0, r7
 800b798:	47c0      	blx	r8
 800b79a:	3001      	adds	r0, #1
 800b79c:	d01e      	beq.n	800b7dc <_printf_common+0xa4>
 800b79e:	6823      	ldr	r3, [r4, #0]
 800b7a0:	6922      	ldr	r2, [r4, #16]
 800b7a2:	f003 0306 	and.w	r3, r3, #6
 800b7a6:	2b04      	cmp	r3, #4
 800b7a8:	bf02      	ittt	eq
 800b7aa:	68e5      	ldreq	r5, [r4, #12]
 800b7ac:	6833      	ldreq	r3, [r6, #0]
 800b7ae:	1aed      	subeq	r5, r5, r3
 800b7b0:	68a3      	ldr	r3, [r4, #8]
 800b7b2:	bf0c      	ite	eq
 800b7b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b7b8:	2500      	movne	r5, #0
 800b7ba:	4293      	cmp	r3, r2
 800b7bc:	bfc4      	itt	gt
 800b7be:	1a9b      	subgt	r3, r3, r2
 800b7c0:	18ed      	addgt	r5, r5, r3
 800b7c2:	2600      	movs	r6, #0
 800b7c4:	341a      	adds	r4, #26
 800b7c6:	42b5      	cmp	r5, r6
 800b7c8:	d11a      	bne.n	800b800 <_printf_common+0xc8>
 800b7ca:	2000      	movs	r0, #0
 800b7cc:	e008      	b.n	800b7e0 <_printf_common+0xa8>
 800b7ce:	2301      	movs	r3, #1
 800b7d0:	4652      	mov	r2, sl
 800b7d2:	4649      	mov	r1, r9
 800b7d4:	4638      	mov	r0, r7
 800b7d6:	47c0      	blx	r8
 800b7d8:	3001      	adds	r0, #1
 800b7da:	d103      	bne.n	800b7e4 <_printf_common+0xac>
 800b7dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b7e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7e4:	3501      	adds	r5, #1
 800b7e6:	e7c6      	b.n	800b776 <_printf_common+0x3e>
 800b7e8:	18e1      	adds	r1, r4, r3
 800b7ea:	1c5a      	adds	r2, r3, #1
 800b7ec:	2030      	movs	r0, #48	; 0x30
 800b7ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b7f2:	4422      	add	r2, r4
 800b7f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b7f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b7fc:	3302      	adds	r3, #2
 800b7fe:	e7c7      	b.n	800b790 <_printf_common+0x58>
 800b800:	2301      	movs	r3, #1
 800b802:	4622      	mov	r2, r4
 800b804:	4649      	mov	r1, r9
 800b806:	4638      	mov	r0, r7
 800b808:	47c0      	blx	r8
 800b80a:	3001      	adds	r0, #1
 800b80c:	d0e6      	beq.n	800b7dc <_printf_common+0xa4>
 800b80e:	3601      	adds	r6, #1
 800b810:	e7d9      	b.n	800b7c6 <_printf_common+0x8e>
	...

0800b814 <_printf_i>:
 800b814:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b818:	7e0f      	ldrb	r7, [r1, #24]
 800b81a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b81c:	2f78      	cmp	r7, #120	; 0x78
 800b81e:	4691      	mov	r9, r2
 800b820:	4680      	mov	r8, r0
 800b822:	460c      	mov	r4, r1
 800b824:	469a      	mov	sl, r3
 800b826:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b82a:	d807      	bhi.n	800b83c <_printf_i+0x28>
 800b82c:	2f62      	cmp	r7, #98	; 0x62
 800b82e:	d80a      	bhi.n	800b846 <_printf_i+0x32>
 800b830:	2f00      	cmp	r7, #0
 800b832:	f000 80d4 	beq.w	800b9de <_printf_i+0x1ca>
 800b836:	2f58      	cmp	r7, #88	; 0x58
 800b838:	f000 80c0 	beq.w	800b9bc <_printf_i+0x1a8>
 800b83c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b840:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b844:	e03a      	b.n	800b8bc <_printf_i+0xa8>
 800b846:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b84a:	2b15      	cmp	r3, #21
 800b84c:	d8f6      	bhi.n	800b83c <_printf_i+0x28>
 800b84e:	a101      	add	r1, pc, #4	; (adr r1, 800b854 <_printf_i+0x40>)
 800b850:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b854:	0800b8ad 	.word	0x0800b8ad
 800b858:	0800b8c1 	.word	0x0800b8c1
 800b85c:	0800b83d 	.word	0x0800b83d
 800b860:	0800b83d 	.word	0x0800b83d
 800b864:	0800b83d 	.word	0x0800b83d
 800b868:	0800b83d 	.word	0x0800b83d
 800b86c:	0800b8c1 	.word	0x0800b8c1
 800b870:	0800b83d 	.word	0x0800b83d
 800b874:	0800b83d 	.word	0x0800b83d
 800b878:	0800b83d 	.word	0x0800b83d
 800b87c:	0800b83d 	.word	0x0800b83d
 800b880:	0800b9c5 	.word	0x0800b9c5
 800b884:	0800b8ed 	.word	0x0800b8ed
 800b888:	0800b97f 	.word	0x0800b97f
 800b88c:	0800b83d 	.word	0x0800b83d
 800b890:	0800b83d 	.word	0x0800b83d
 800b894:	0800b9e7 	.word	0x0800b9e7
 800b898:	0800b83d 	.word	0x0800b83d
 800b89c:	0800b8ed 	.word	0x0800b8ed
 800b8a0:	0800b83d 	.word	0x0800b83d
 800b8a4:	0800b83d 	.word	0x0800b83d
 800b8a8:	0800b987 	.word	0x0800b987
 800b8ac:	682b      	ldr	r3, [r5, #0]
 800b8ae:	1d1a      	adds	r2, r3, #4
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	602a      	str	r2, [r5, #0]
 800b8b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b8b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b8bc:	2301      	movs	r3, #1
 800b8be:	e09f      	b.n	800ba00 <_printf_i+0x1ec>
 800b8c0:	6820      	ldr	r0, [r4, #0]
 800b8c2:	682b      	ldr	r3, [r5, #0]
 800b8c4:	0607      	lsls	r7, r0, #24
 800b8c6:	f103 0104 	add.w	r1, r3, #4
 800b8ca:	6029      	str	r1, [r5, #0]
 800b8cc:	d501      	bpl.n	800b8d2 <_printf_i+0xbe>
 800b8ce:	681e      	ldr	r6, [r3, #0]
 800b8d0:	e003      	b.n	800b8da <_printf_i+0xc6>
 800b8d2:	0646      	lsls	r6, r0, #25
 800b8d4:	d5fb      	bpl.n	800b8ce <_printf_i+0xba>
 800b8d6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b8da:	2e00      	cmp	r6, #0
 800b8dc:	da03      	bge.n	800b8e6 <_printf_i+0xd2>
 800b8de:	232d      	movs	r3, #45	; 0x2d
 800b8e0:	4276      	negs	r6, r6
 800b8e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b8e6:	485a      	ldr	r0, [pc, #360]	; (800ba50 <_printf_i+0x23c>)
 800b8e8:	230a      	movs	r3, #10
 800b8ea:	e012      	b.n	800b912 <_printf_i+0xfe>
 800b8ec:	682b      	ldr	r3, [r5, #0]
 800b8ee:	6820      	ldr	r0, [r4, #0]
 800b8f0:	1d19      	adds	r1, r3, #4
 800b8f2:	6029      	str	r1, [r5, #0]
 800b8f4:	0605      	lsls	r5, r0, #24
 800b8f6:	d501      	bpl.n	800b8fc <_printf_i+0xe8>
 800b8f8:	681e      	ldr	r6, [r3, #0]
 800b8fa:	e002      	b.n	800b902 <_printf_i+0xee>
 800b8fc:	0641      	lsls	r1, r0, #25
 800b8fe:	d5fb      	bpl.n	800b8f8 <_printf_i+0xe4>
 800b900:	881e      	ldrh	r6, [r3, #0]
 800b902:	4853      	ldr	r0, [pc, #332]	; (800ba50 <_printf_i+0x23c>)
 800b904:	2f6f      	cmp	r7, #111	; 0x6f
 800b906:	bf0c      	ite	eq
 800b908:	2308      	moveq	r3, #8
 800b90a:	230a      	movne	r3, #10
 800b90c:	2100      	movs	r1, #0
 800b90e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b912:	6865      	ldr	r5, [r4, #4]
 800b914:	60a5      	str	r5, [r4, #8]
 800b916:	2d00      	cmp	r5, #0
 800b918:	bfa2      	ittt	ge
 800b91a:	6821      	ldrge	r1, [r4, #0]
 800b91c:	f021 0104 	bicge.w	r1, r1, #4
 800b920:	6021      	strge	r1, [r4, #0]
 800b922:	b90e      	cbnz	r6, 800b928 <_printf_i+0x114>
 800b924:	2d00      	cmp	r5, #0
 800b926:	d04b      	beq.n	800b9c0 <_printf_i+0x1ac>
 800b928:	4615      	mov	r5, r2
 800b92a:	fbb6 f1f3 	udiv	r1, r6, r3
 800b92e:	fb03 6711 	mls	r7, r3, r1, r6
 800b932:	5dc7      	ldrb	r7, [r0, r7]
 800b934:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b938:	4637      	mov	r7, r6
 800b93a:	42bb      	cmp	r3, r7
 800b93c:	460e      	mov	r6, r1
 800b93e:	d9f4      	bls.n	800b92a <_printf_i+0x116>
 800b940:	2b08      	cmp	r3, #8
 800b942:	d10b      	bne.n	800b95c <_printf_i+0x148>
 800b944:	6823      	ldr	r3, [r4, #0]
 800b946:	07de      	lsls	r6, r3, #31
 800b948:	d508      	bpl.n	800b95c <_printf_i+0x148>
 800b94a:	6923      	ldr	r3, [r4, #16]
 800b94c:	6861      	ldr	r1, [r4, #4]
 800b94e:	4299      	cmp	r1, r3
 800b950:	bfde      	ittt	le
 800b952:	2330      	movle	r3, #48	; 0x30
 800b954:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b958:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b95c:	1b52      	subs	r2, r2, r5
 800b95e:	6122      	str	r2, [r4, #16]
 800b960:	f8cd a000 	str.w	sl, [sp]
 800b964:	464b      	mov	r3, r9
 800b966:	aa03      	add	r2, sp, #12
 800b968:	4621      	mov	r1, r4
 800b96a:	4640      	mov	r0, r8
 800b96c:	f7ff fee4 	bl	800b738 <_printf_common>
 800b970:	3001      	adds	r0, #1
 800b972:	d14a      	bne.n	800ba0a <_printf_i+0x1f6>
 800b974:	f04f 30ff 	mov.w	r0, #4294967295
 800b978:	b004      	add	sp, #16
 800b97a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b97e:	6823      	ldr	r3, [r4, #0]
 800b980:	f043 0320 	orr.w	r3, r3, #32
 800b984:	6023      	str	r3, [r4, #0]
 800b986:	4833      	ldr	r0, [pc, #204]	; (800ba54 <_printf_i+0x240>)
 800b988:	2778      	movs	r7, #120	; 0x78
 800b98a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b98e:	6823      	ldr	r3, [r4, #0]
 800b990:	6829      	ldr	r1, [r5, #0]
 800b992:	061f      	lsls	r7, r3, #24
 800b994:	f851 6b04 	ldr.w	r6, [r1], #4
 800b998:	d402      	bmi.n	800b9a0 <_printf_i+0x18c>
 800b99a:	065f      	lsls	r7, r3, #25
 800b99c:	bf48      	it	mi
 800b99e:	b2b6      	uxthmi	r6, r6
 800b9a0:	07df      	lsls	r7, r3, #31
 800b9a2:	bf48      	it	mi
 800b9a4:	f043 0320 	orrmi.w	r3, r3, #32
 800b9a8:	6029      	str	r1, [r5, #0]
 800b9aa:	bf48      	it	mi
 800b9ac:	6023      	strmi	r3, [r4, #0]
 800b9ae:	b91e      	cbnz	r6, 800b9b8 <_printf_i+0x1a4>
 800b9b0:	6823      	ldr	r3, [r4, #0]
 800b9b2:	f023 0320 	bic.w	r3, r3, #32
 800b9b6:	6023      	str	r3, [r4, #0]
 800b9b8:	2310      	movs	r3, #16
 800b9ba:	e7a7      	b.n	800b90c <_printf_i+0xf8>
 800b9bc:	4824      	ldr	r0, [pc, #144]	; (800ba50 <_printf_i+0x23c>)
 800b9be:	e7e4      	b.n	800b98a <_printf_i+0x176>
 800b9c0:	4615      	mov	r5, r2
 800b9c2:	e7bd      	b.n	800b940 <_printf_i+0x12c>
 800b9c4:	682b      	ldr	r3, [r5, #0]
 800b9c6:	6826      	ldr	r6, [r4, #0]
 800b9c8:	6961      	ldr	r1, [r4, #20]
 800b9ca:	1d18      	adds	r0, r3, #4
 800b9cc:	6028      	str	r0, [r5, #0]
 800b9ce:	0635      	lsls	r5, r6, #24
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	d501      	bpl.n	800b9d8 <_printf_i+0x1c4>
 800b9d4:	6019      	str	r1, [r3, #0]
 800b9d6:	e002      	b.n	800b9de <_printf_i+0x1ca>
 800b9d8:	0670      	lsls	r0, r6, #25
 800b9da:	d5fb      	bpl.n	800b9d4 <_printf_i+0x1c0>
 800b9dc:	8019      	strh	r1, [r3, #0]
 800b9de:	2300      	movs	r3, #0
 800b9e0:	6123      	str	r3, [r4, #16]
 800b9e2:	4615      	mov	r5, r2
 800b9e4:	e7bc      	b.n	800b960 <_printf_i+0x14c>
 800b9e6:	682b      	ldr	r3, [r5, #0]
 800b9e8:	1d1a      	adds	r2, r3, #4
 800b9ea:	602a      	str	r2, [r5, #0]
 800b9ec:	681d      	ldr	r5, [r3, #0]
 800b9ee:	6862      	ldr	r2, [r4, #4]
 800b9f0:	2100      	movs	r1, #0
 800b9f2:	4628      	mov	r0, r5
 800b9f4:	f7f4 fbf4 	bl	80001e0 <memchr>
 800b9f8:	b108      	cbz	r0, 800b9fe <_printf_i+0x1ea>
 800b9fa:	1b40      	subs	r0, r0, r5
 800b9fc:	6060      	str	r0, [r4, #4]
 800b9fe:	6863      	ldr	r3, [r4, #4]
 800ba00:	6123      	str	r3, [r4, #16]
 800ba02:	2300      	movs	r3, #0
 800ba04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba08:	e7aa      	b.n	800b960 <_printf_i+0x14c>
 800ba0a:	6923      	ldr	r3, [r4, #16]
 800ba0c:	462a      	mov	r2, r5
 800ba0e:	4649      	mov	r1, r9
 800ba10:	4640      	mov	r0, r8
 800ba12:	47d0      	blx	sl
 800ba14:	3001      	adds	r0, #1
 800ba16:	d0ad      	beq.n	800b974 <_printf_i+0x160>
 800ba18:	6823      	ldr	r3, [r4, #0]
 800ba1a:	079b      	lsls	r3, r3, #30
 800ba1c:	d413      	bmi.n	800ba46 <_printf_i+0x232>
 800ba1e:	68e0      	ldr	r0, [r4, #12]
 800ba20:	9b03      	ldr	r3, [sp, #12]
 800ba22:	4298      	cmp	r0, r3
 800ba24:	bfb8      	it	lt
 800ba26:	4618      	movlt	r0, r3
 800ba28:	e7a6      	b.n	800b978 <_printf_i+0x164>
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	4632      	mov	r2, r6
 800ba2e:	4649      	mov	r1, r9
 800ba30:	4640      	mov	r0, r8
 800ba32:	47d0      	blx	sl
 800ba34:	3001      	adds	r0, #1
 800ba36:	d09d      	beq.n	800b974 <_printf_i+0x160>
 800ba38:	3501      	adds	r5, #1
 800ba3a:	68e3      	ldr	r3, [r4, #12]
 800ba3c:	9903      	ldr	r1, [sp, #12]
 800ba3e:	1a5b      	subs	r3, r3, r1
 800ba40:	42ab      	cmp	r3, r5
 800ba42:	dcf2      	bgt.n	800ba2a <_printf_i+0x216>
 800ba44:	e7eb      	b.n	800ba1e <_printf_i+0x20a>
 800ba46:	2500      	movs	r5, #0
 800ba48:	f104 0619 	add.w	r6, r4, #25
 800ba4c:	e7f5      	b.n	800ba3a <_printf_i+0x226>
 800ba4e:	bf00      	nop
 800ba50:	0800de2e 	.word	0x0800de2e
 800ba54:	0800de3f 	.word	0x0800de3f

0800ba58 <std>:
 800ba58:	2300      	movs	r3, #0
 800ba5a:	b510      	push	{r4, lr}
 800ba5c:	4604      	mov	r4, r0
 800ba5e:	e9c0 3300 	strd	r3, r3, [r0]
 800ba62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ba66:	6083      	str	r3, [r0, #8]
 800ba68:	8181      	strh	r1, [r0, #12]
 800ba6a:	6643      	str	r3, [r0, #100]	; 0x64
 800ba6c:	81c2      	strh	r2, [r0, #14]
 800ba6e:	6183      	str	r3, [r0, #24]
 800ba70:	4619      	mov	r1, r3
 800ba72:	2208      	movs	r2, #8
 800ba74:	305c      	adds	r0, #92	; 0x5c
 800ba76:	f000 f9f7 	bl	800be68 <memset>
 800ba7a:	4b0d      	ldr	r3, [pc, #52]	; (800bab0 <std+0x58>)
 800ba7c:	6263      	str	r3, [r4, #36]	; 0x24
 800ba7e:	4b0d      	ldr	r3, [pc, #52]	; (800bab4 <std+0x5c>)
 800ba80:	62a3      	str	r3, [r4, #40]	; 0x28
 800ba82:	4b0d      	ldr	r3, [pc, #52]	; (800bab8 <std+0x60>)
 800ba84:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ba86:	4b0d      	ldr	r3, [pc, #52]	; (800babc <std+0x64>)
 800ba88:	6323      	str	r3, [r4, #48]	; 0x30
 800ba8a:	4b0d      	ldr	r3, [pc, #52]	; (800bac0 <std+0x68>)
 800ba8c:	6224      	str	r4, [r4, #32]
 800ba8e:	429c      	cmp	r4, r3
 800ba90:	d006      	beq.n	800baa0 <std+0x48>
 800ba92:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ba96:	4294      	cmp	r4, r2
 800ba98:	d002      	beq.n	800baa0 <std+0x48>
 800ba9a:	33d0      	adds	r3, #208	; 0xd0
 800ba9c:	429c      	cmp	r4, r3
 800ba9e:	d105      	bne.n	800baac <std+0x54>
 800baa0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800baa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800baa8:	f000 bab0 	b.w	800c00c <__retarget_lock_init_recursive>
 800baac:	bd10      	pop	{r4, pc}
 800baae:	bf00      	nop
 800bab0:	0800bcb9 	.word	0x0800bcb9
 800bab4:	0800bcdb 	.word	0x0800bcdb
 800bab8:	0800bd13 	.word	0x0800bd13
 800babc:	0800bd37 	.word	0x0800bd37
 800bac0:	20005160 	.word	0x20005160

0800bac4 <stdio_exit_handler>:
 800bac4:	4a02      	ldr	r2, [pc, #8]	; (800bad0 <stdio_exit_handler+0xc>)
 800bac6:	4903      	ldr	r1, [pc, #12]	; (800bad4 <stdio_exit_handler+0x10>)
 800bac8:	4803      	ldr	r0, [pc, #12]	; (800bad8 <stdio_exit_handler+0x14>)
 800baca:	f000 b869 	b.w	800bba0 <_fwalk_sglue>
 800bace:	bf00      	nop
 800bad0:	20000010 	.word	0x20000010
 800bad4:	0800d9b1 	.word	0x0800d9b1
 800bad8:	2000001c 	.word	0x2000001c

0800badc <cleanup_stdio>:
 800badc:	6841      	ldr	r1, [r0, #4]
 800bade:	4b0c      	ldr	r3, [pc, #48]	; (800bb10 <cleanup_stdio+0x34>)
 800bae0:	4299      	cmp	r1, r3
 800bae2:	b510      	push	{r4, lr}
 800bae4:	4604      	mov	r4, r0
 800bae6:	d001      	beq.n	800baec <cleanup_stdio+0x10>
 800bae8:	f001 ff62 	bl	800d9b0 <_fflush_r>
 800baec:	68a1      	ldr	r1, [r4, #8]
 800baee:	4b09      	ldr	r3, [pc, #36]	; (800bb14 <cleanup_stdio+0x38>)
 800baf0:	4299      	cmp	r1, r3
 800baf2:	d002      	beq.n	800bafa <cleanup_stdio+0x1e>
 800baf4:	4620      	mov	r0, r4
 800baf6:	f001 ff5b 	bl	800d9b0 <_fflush_r>
 800bafa:	68e1      	ldr	r1, [r4, #12]
 800bafc:	4b06      	ldr	r3, [pc, #24]	; (800bb18 <cleanup_stdio+0x3c>)
 800bafe:	4299      	cmp	r1, r3
 800bb00:	d004      	beq.n	800bb0c <cleanup_stdio+0x30>
 800bb02:	4620      	mov	r0, r4
 800bb04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb08:	f001 bf52 	b.w	800d9b0 <_fflush_r>
 800bb0c:	bd10      	pop	{r4, pc}
 800bb0e:	bf00      	nop
 800bb10:	20005160 	.word	0x20005160
 800bb14:	200051c8 	.word	0x200051c8
 800bb18:	20005230 	.word	0x20005230

0800bb1c <global_stdio_init.part.0>:
 800bb1c:	b510      	push	{r4, lr}
 800bb1e:	4b0b      	ldr	r3, [pc, #44]	; (800bb4c <global_stdio_init.part.0+0x30>)
 800bb20:	4c0b      	ldr	r4, [pc, #44]	; (800bb50 <global_stdio_init.part.0+0x34>)
 800bb22:	4a0c      	ldr	r2, [pc, #48]	; (800bb54 <global_stdio_init.part.0+0x38>)
 800bb24:	601a      	str	r2, [r3, #0]
 800bb26:	4620      	mov	r0, r4
 800bb28:	2200      	movs	r2, #0
 800bb2a:	2104      	movs	r1, #4
 800bb2c:	f7ff ff94 	bl	800ba58 <std>
 800bb30:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800bb34:	2201      	movs	r2, #1
 800bb36:	2109      	movs	r1, #9
 800bb38:	f7ff ff8e 	bl	800ba58 <std>
 800bb3c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800bb40:	2202      	movs	r2, #2
 800bb42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb46:	2112      	movs	r1, #18
 800bb48:	f7ff bf86 	b.w	800ba58 <std>
 800bb4c:	20005298 	.word	0x20005298
 800bb50:	20005160 	.word	0x20005160
 800bb54:	0800bac5 	.word	0x0800bac5

0800bb58 <__sfp_lock_acquire>:
 800bb58:	4801      	ldr	r0, [pc, #4]	; (800bb60 <__sfp_lock_acquire+0x8>)
 800bb5a:	f000 ba58 	b.w	800c00e <__retarget_lock_acquire_recursive>
 800bb5e:	bf00      	nop
 800bb60:	200052a1 	.word	0x200052a1

0800bb64 <__sfp_lock_release>:
 800bb64:	4801      	ldr	r0, [pc, #4]	; (800bb6c <__sfp_lock_release+0x8>)
 800bb66:	f000 ba53 	b.w	800c010 <__retarget_lock_release_recursive>
 800bb6a:	bf00      	nop
 800bb6c:	200052a1 	.word	0x200052a1

0800bb70 <__sinit>:
 800bb70:	b510      	push	{r4, lr}
 800bb72:	4604      	mov	r4, r0
 800bb74:	f7ff fff0 	bl	800bb58 <__sfp_lock_acquire>
 800bb78:	6a23      	ldr	r3, [r4, #32]
 800bb7a:	b11b      	cbz	r3, 800bb84 <__sinit+0x14>
 800bb7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb80:	f7ff bff0 	b.w	800bb64 <__sfp_lock_release>
 800bb84:	4b04      	ldr	r3, [pc, #16]	; (800bb98 <__sinit+0x28>)
 800bb86:	6223      	str	r3, [r4, #32]
 800bb88:	4b04      	ldr	r3, [pc, #16]	; (800bb9c <__sinit+0x2c>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d1f5      	bne.n	800bb7c <__sinit+0xc>
 800bb90:	f7ff ffc4 	bl	800bb1c <global_stdio_init.part.0>
 800bb94:	e7f2      	b.n	800bb7c <__sinit+0xc>
 800bb96:	bf00      	nop
 800bb98:	0800badd 	.word	0x0800badd
 800bb9c:	20005298 	.word	0x20005298

0800bba0 <_fwalk_sglue>:
 800bba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bba4:	4607      	mov	r7, r0
 800bba6:	4688      	mov	r8, r1
 800bba8:	4614      	mov	r4, r2
 800bbaa:	2600      	movs	r6, #0
 800bbac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bbb0:	f1b9 0901 	subs.w	r9, r9, #1
 800bbb4:	d505      	bpl.n	800bbc2 <_fwalk_sglue+0x22>
 800bbb6:	6824      	ldr	r4, [r4, #0]
 800bbb8:	2c00      	cmp	r4, #0
 800bbba:	d1f7      	bne.n	800bbac <_fwalk_sglue+0xc>
 800bbbc:	4630      	mov	r0, r6
 800bbbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbc2:	89ab      	ldrh	r3, [r5, #12]
 800bbc4:	2b01      	cmp	r3, #1
 800bbc6:	d907      	bls.n	800bbd8 <_fwalk_sglue+0x38>
 800bbc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bbcc:	3301      	adds	r3, #1
 800bbce:	d003      	beq.n	800bbd8 <_fwalk_sglue+0x38>
 800bbd0:	4629      	mov	r1, r5
 800bbd2:	4638      	mov	r0, r7
 800bbd4:	47c0      	blx	r8
 800bbd6:	4306      	orrs	r6, r0
 800bbd8:	3568      	adds	r5, #104	; 0x68
 800bbda:	e7e9      	b.n	800bbb0 <_fwalk_sglue+0x10>

0800bbdc <iprintf>:
 800bbdc:	b40f      	push	{r0, r1, r2, r3}
 800bbde:	b507      	push	{r0, r1, r2, lr}
 800bbe0:	4906      	ldr	r1, [pc, #24]	; (800bbfc <iprintf+0x20>)
 800bbe2:	ab04      	add	r3, sp, #16
 800bbe4:	6808      	ldr	r0, [r1, #0]
 800bbe6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbea:	6881      	ldr	r1, [r0, #8]
 800bbec:	9301      	str	r3, [sp, #4]
 800bbee:	f001 fd3f 	bl	800d670 <_vfiprintf_r>
 800bbf2:	b003      	add	sp, #12
 800bbf4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bbf8:	b004      	add	sp, #16
 800bbfa:	4770      	bx	lr
 800bbfc:	20000068 	.word	0x20000068

0800bc00 <_puts_r>:
 800bc00:	6a03      	ldr	r3, [r0, #32]
 800bc02:	b570      	push	{r4, r5, r6, lr}
 800bc04:	6884      	ldr	r4, [r0, #8]
 800bc06:	4605      	mov	r5, r0
 800bc08:	460e      	mov	r6, r1
 800bc0a:	b90b      	cbnz	r3, 800bc10 <_puts_r+0x10>
 800bc0c:	f7ff ffb0 	bl	800bb70 <__sinit>
 800bc10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bc12:	07db      	lsls	r3, r3, #31
 800bc14:	d405      	bmi.n	800bc22 <_puts_r+0x22>
 800bc16:	89a3      	ldrh	r3, [r4, #12]
 800bc18:	0598      	lsls	r0, r3, #22
 800bc1a:	d402      	bmi.n	800bc22 <_puts_r+0x22>
 800bc1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc1e:	f000 f9f6 	bl	800c00e <__retarget_lock_acquire_recursive>
 800bc22:	89a3      	ldrh	r3, [r4, #12]
 800bc24:	0719      	lsls	r1, r3, #28
 800bc26:	d513      	bpl.n	800bc50 <_puts_r+0x50>
 800bc28:	6923      	ldr	r3, [r4, #16]
 800bc2a:	b18b      	cbz	r3, 800bc50 <_puts_r+0x50>
 800bc2c:	3e01      	subs	r6, #1
 800bc2e:	68a3      	ldr	r3, [r4, #8]
 800bc30:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bc34:	3b01      	subs	r3, #1
 800bc36:	60a3      	str	r3, [r4, #8]
 800bc38:	b9e9      	cbnz	r1, 800bc76 <_puts_r+0x76>
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	da2e      	bge.n	800bc9c <_puts_r+0x9c>
 800bc3e:	4622      	mov	r2, r4
 800bc40:	210a      	movs	r1, #10
 800bc42:	4628      	mov	r0, r5
 800bc44:	f000 f87b 	bl	800bd3e <__swbuf_r>
 800bc48:	3001      	adds	r0, #1
 800bc4a:	d007      	beq.n	800bc5c <_puts_r+0x5c>
 800bc4c:	250a      	movs	r5, #10
 800bc4e:	e007      	b.n	800bc60 <_puts_r+0x60>
 800bc50:	4621      	mov	r1, r4
 800bc52:	4628      	mov	r0, r5
 800bc54:	f000 f8b0 	bl	800bdb8 <__swsetup_r>
 800bc58:	2800      	cmp	r0, #0
 800bc5a:	d0e7      	beq.n	800bc2c <_puts_r+0x2c>
 800bc5c:	f04f 35ff 	mov.w	r5, #4294967295
 800bc60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bc62:	07da      	lsls	r2, r3, #31
 800bc64:	d405      	bmi.n	800bc72 <_puts_r+0x72>
 800bc66:	89a3      	ldrh	r3, [r4, #12]
 800bc68:	059b      	lsls	r3, r3, #22
 800bc6a:	d402      	bmi.n	800bc72 <_puts_r+0x72>
 800bc6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc6e:	f000 f9cf 	bl	800c010 <__retarget_lock_release_recursive>
 800bc72:	4628      	mov	r0, r5
 800bc74:	bd70      	pop	{r4, r5, r6, pc}
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	da04      	bge.n	800bc84 <_puts_r+0x84>
 800bc7a:	69a2      	ldr	r2, [r4, #24]
 800bc7c:	429a      	cmp	r2, r3
 800bc7e:	dc06      	bgt.n	800bc8e <_puts_r+0x8e>
 800bc80:	290a      	cmp	r1, #10
 800bc82:	d004      	beq.n	800bc8e <_puts_r+0x8e>
 800bc84:	6823      	ldr	r3, [r4, #0]
 800bc86:	1c5a      	adds	r2, r3, #1
 800bc88:	6022      	str	r2, [r4, #0]
 800bc8a:	7019      	strb	r1, [r3, #0]
 800bc8c:	e7cf      	b.n	800bc2e <_puts_r+0x2e>
 800bc8e:	4622      	mov	r2, r4
 800bc90:	4628      	mov	r0, r5
 800bc92:	f000 f854 	bl	800bd3e <__swbuf_r>
 800bc96:	3001      	adds	r0, #1
 800bc98:	d1c9      	bne.n	800bc2e <_puts_r+0x2e>
 800bc9a:	e7df      	b.n	800bc5c <_puts_r+0x5c>
 800bc9c:	6823      	ldr	r3, [r4, #0]
 800bc9e:	250a      	movs	r5, #10
 800bca0:	1c5a      	adds	r2, r3, #1
 800bca2:	6022      	str	r2, [r4, #0]
 800bca4:	701d      	strb	r5, [r3, #0]
 800bca6:	e7db      	b.n	800bc60 <_puts_r+0x60>

0800bca8 <puts>:
 800bca8:	4b02      	ldr	r3, [pc, #8]	; (800bcb4 <puts+0xc>)
 800bcaa:	4601      	mov	r1, r0
 800bcac:	6818      	ldr	r0, [r3, #0]
 800bcae:	f7ff bfa7 	b.w	800bc00 <_puts_r>
 800bcb2:	bf00      	nop
 800bcb4:	20000068 	.word	0x20000068

0800bcb8 <__sread>:
 800bcb8:	b510      	push	{r4, lr}
 800bcba:	460c      	mov	r4, r1
 800bcbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcc0:	f000 f956 	bl	800bf70 <_read_r>
 800bcc4:	2800      	cmp	r0, #0
 800bcc6:	bfab      	itete	ge
 800bcc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bcca:	89a3      	ldrhlt	r3, [r4, #12]
 800bccc:	181b      	addge	r3, r3, r0
 800bcce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bcd2:	bfac      	ite	ge
 800bcd4:	6563      	strge	r3, [r4, #84]	; 0x54
 800bcd6:	81a3      	strhlt	r3, [r4, #12]
 800bcd8:	bd10      	pop	{r4, pc}

0800bcda <__swrite>:
 800bcda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcde:	461f      	mov	r7, r3
 800bce0:	898b      	ldrh	r3, [r1, #12]
 800bce2:	05db      	lsls	r3, r3, #23
 800bce4:	4605      	mov	r5, r0
 800bce6:	460c      	mov	r4, r1
 800bce8:	4616      	mov	r6, r2
 800bcea:	d505      	bpl.n	800bcf8 <__swrite+0x1e>
 800bcec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcf0:	2302      	movs	r3, #2
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	f000 f92a 	bl	800bf4c <_lseek_r>
 800bcf8:	89a3      	ldrh	r3, [r4, #12]
 800bcfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bcfe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bd02:	81a3      	strh	r3, [r4, #12]
 800bd04:	4632      	mov	r2, r6
 800bd06:	463b      	mov	r3, r7
 800bd08:	4628      	mov	r0, r5
 800bd0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd0e:	f000 b941 	b.w	800bf94 <_write_r>

0800bd12 <__sseek>:
 800bd12:	b510      	push	{r4, lr}
 800bd14:	460c      	mov	r4, r1
 800bd16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd1a:	f000 f917 	bl	800bf4c <_lseek_r>
 800bd1e:	1c43      	adds	r3, r0, #1
 800bd20:	89a3      	ldrh	r3, [r4, #12]
 800bd22:	bf15      	itete	ne
 800bd24:	6560      	strne	r0, [r4, #84]	; 0x54
 800bd26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bd2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bd2e:	81a3      	strheq	r3, [r4, #12]
 800bd30:	bf18      	it	ne
 800bd32:	81a3      	strhne	r3, [r4, #12]
 800bd34:	bd10      	pop	{r4, pc}

0800bd36 <__sclose>:
 800bd36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd3a:	f000 b8a1 	b.w	800be80 <_close_r>

0800bd3e <__swbuf_r>:
 800bd3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd40:	460e      	mov	r6, r1
 800bd42:	4614      	mov	r4, r2
 800bd44:	4605      	mov	r5, r0
 800bd46:	b118      	cbz	r0, 800bd50 <__swbuf_r+0x12>
 800bd48:	6a03      	ldr	r3, [r0, #32]
 800bd4a:	b90b      	cbnz	r3, 800bd50 <__swbuf_r+0x12>
 800bd4c:	f7ff ff10 	bl	800bb70 <__sinit>
 800bd50:	69a3      	ldr	r3, [r4, #24]
 800bd52:	60a3      	str	r3, [r4, #8]
 800bd54:	89a3      	ldrh	r3, [r4, #12]
 800bd56:	071a      	lsls	r2, r3, #28
 800bd58:	d525      	bpl.n	800bda6 <__swbuf_r+0x68>
 800bd5a:	6923      	ldr	r3, [r4, #16]
 800bd5c:	b31b      	cbz	r3, 800bda6 <__swbuf_r+0x68>
 800bd5e:	6823      	ldr	r3, [r4, #0]
 800bd60:	6922      	ldr	r2, [r4, #16]
 800bd62:	1a98      	subs	r0, r3, r2
 800bd64:	6963      	ldr	r3, [r4, #20]
 800bd66:	b2f6      	uxtb	r6, r6
 800bd68:	4283      	cmp	r3, r0
 800bd6a:	4637      	mov	r7, r6
 800bd6c:	dc04      	bgt.n	800bd78 <__swbuf_r+0x3a>
 800bd6e:	4621      	mov	r1, r4
 800bd70:	4628      	mov	r0, r5
 800bd72:	f001 fe1d 	bl	800d9b0 <_fflush_r>
 800bd76:	b9e0      	cbnz	r0, 800bdb2 <__swbuf_r+0x74>
 800bd78:	68a3      	ldr	r3, [r4, #8]
 800bd7a:	3b01      	subs	r3, #1
 800bd7c:	60a3      	str	r3, [r4, #8]
 800bd7e:	6823      	ldr	r3, [r4, #0]
 800bd80:	1c5a      	adds	r2, r3, #1
 800bd82:	6022      	str	r2, [r4, #0]
 800bd84:	701e      	strb	r6, [r3, #0]
 800bd86:	6962      	ldr	r2, [r4, #20]
 800bd88:	1c43      	adds	r3, r0, #1
 800bd8a:	429a      	cmp	r2, r3
 800bd8c:	d004      	beq.n	800bd98 <__swbuf_r+0x5a>
 800bd8e:	89a3      	ldrh	r3, [r4, #12]
 800bd90:	07db      	lsls	r3, r3, #31
 800bd92:	d506      	bpl.n	800bda2 <__swbuf_r+0x64>
 800bd94:	2e0a      	cmp	r6, #10
 800bd96:	d104      	bne.n	800bda2 <__swbuf_r+0x64>
 800bd98:	4621      	mov	r1, r4
 800bd9a:	4628      	mov	r0, r5
 800bd9c:	f001 fe08 	bl	800d9b0 <_fflush_r>
 800bda0:	b938      	cbnz	r0, 800bdb2 <__swbuf_r+0x74>
 800bda2:	4638      	mov	r0, r7
 800bda4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bda6:	4621      	mov	r1, r4
 800bda8:	4628      	mov	r0, r5
 800bdaa:	f000 f805 	bl	800bdb8 <__swsetup_r>
 800bdae:	2800      	cmp	r0, #0
 800bdb0:	d0d5      	beq.n	800bd5e <__swbuf_r+0x20>
 800bdb2:	f04f 37ff 	mov.w	r7, #4294967295
 800bdb6:	e7f4      	b.n	800bda2 <__swbuf_r+0x64>

0800bdb8 <__swsetup_r>:
 800bdb8:	b538      	push	{r3, r4, r5, lr}
 800bdba:	4b2a      	ldr	r3, [pc, #168]	; (800be64 <__swsetup_r+0xac>)
 800bdbc:	4605      	mov	r5, r0
 800bdbe:	6818      	ldr	r0, [r3, #0]
 800bdc0:	460c      	mov	r4, r1
 800bdc2:	b118      	cbz	r0, 800bdcc <__swsetup_r+0x14>
 800bdc4:	6a03      	ldr	r3, [r0, #32]
 800bdc6:	b90b      	cbnz	r3, 800bdcc <__swsetup_r+0x14>
 800bdc8:	f7ff fed2 	bl	800bb70 <__sinit>
 800bdcc:	89a3      	ldrh	r3, [r4, #12]
 800bdce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bdd2:	0718      	lsls	r0, r3, #28
 800bdd4:	d422      	bmi.n	800be1c <__swsetup_r+0x64>
 800bdd6:	06d9      	lsls	r1, r3, #27
 800bdd8:	d407      	bmi.n	800bdea <__swsetup_r+0x32>
 800bdda:	2309      	movs	r3, #9
 800bddc:	602b      	str	r3, [r5, #0]
 800bdde:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bde2:	81a3      	strh	r3, [r4, #12]
 800bde4:	f04f 30ff 	mov.w	r0, #4294967295
 800bde8:	e034      	b.n	800be54 <__swsetup_r+0x9c>
 800bdea:	0758      	lsls	r0, r3, #29
 800bdec:	d512      	bpl.n	800be14 <__swsetup_r+0x5c>
 800bdee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bdf0:	b141      	cbz	r1, 800be04 <__swsetup_r+0x4c>
 800bdf2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bdf6:	4299      	cmp	r1, r3
 800bdf8:	d002      	beq.n	800be00 <__swsetup_r+0x48>
 800bdfa:	4628      	mov	r0, r5
 800bdfc:	f000 ff92 	bl	800cd24 <_free_r>
 800be00:	2300      	movs	r3, #0
 800be02:	6363      	str	r3, [r4, #52]	; 0x34
 800be04:	89a3      	ldrh	r3, [r4, #12]
 800be06:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800be0a:	81a3      	strh	r3, [r4, #12]
 800be0c:	2300      	movs	r3, #0
 800be0e:	6063      	str	r3, [r4, #4]
 800be10:	6923      	ldr	r3, [r4, #16]
 800be12:	6023      	str	r3, [r4, #0]
 800be14:	89a3      	ldrh	r3, [r4, #12]
 800be16:	f043 0308 	orr.w	r3, r3, #8
 800be1a:	81a3      	strh	r3, [r4, #12]
 800be1c:	6923      	ldr	r3, [r4, #16]
 800be1e:	b94b      	cbnz	r3, 800be34 <__swsetup_r+0x7c>
 800be20:	89a3      	ldrh	r3, [r4, #12]
 800be22:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800be26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be2a:	d003      	beq.n	800be34 <__swsetup_r+0x7c>
 800be2c:	4621      	mov	r1, r4
 800be2e:	4628      	mov	r0, r5
 800be30:	f001 fe0c 	bl	800da4c <__smakebuf_r>
 800be34:	89a0      	ldrh	r0, [r4, #12]
 800be36:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800be3a:	f010 0301 	ands.w	r3, r0, #1
 800be3e:	d00a      	beq.n	800be56 <__swsetup_r+0x9e>
 800be40:	2300      	movs	r3, #0
 800be42:	60a3      	str	r3, [r4, #8]
 800be44:	6963      	ldr	r3, [r4, #20]
 800be46:	425b      	negs	r3, r3
 800be48:	61a3      	str	r3, [r4, #24]
 800be4a:	6923      	ldr	r3, [r4, #16]
 800be4c:	b943      	cbnz	r3, 800be60 <__swsetup_r+0xa8>
 800be4e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800be52:	d1c4      	bne.n	800bdde <__swsetup_r+0x26>
 800be54:	bd38      	pop	{r3, r4, r5, pc}
 800be56:	0781      	lsls	r1, r0, #30
 800be58:	bf58      	it	pl
 800be5a:	6963      	ldrpl	r3, [r4, #20]
 800be5c:	60a3      	str	r3, [r4, #8]
 800be5e:	e7f4      	b.n	800be4a <__swsetup_r+0x92>
 800be60:	2000      	movs	r0, #0
 800be62:	e7f7      	b.n	800be54 <__swsetup_r+0x9c>
 800be64:	20000068 	.word	0x20000068

0800be68 <memset>:
 800be68:	4402      	add	r2, r0
 800be6a:	4603      	mov	r3, r0
 800be6c:	4293      	cmp	r3, r2
 800be6e:	d100      	bne.n	800be72 <memset+0xa>
 800be70:	4770      	bx	lr
 800be72:	f803 1b01 	strb.w	r1, [r3], #1
 800be76:	e7f9      	b.n	800be6c <memset+0x4>

0800be78 <_localeconv_r>:
 800be78:	4800      	ldr	r0, [pc, #0]	; (800be7c <_localeconv_r+0x4>)
 800be7a:	4770      	bx	lr
 800be7c:	2000015c 	.word	0x2000015c

0800be80 <_close_r>:
 800be80:	b538      	push	{r3, r4, r5, lr}
 800be82:	4d06      	ldr	r5, [pc, #24]	; (800be9c <_close_r+0x1c>)
 800be84:	2300      	movs	r3, #0
 800be86:	4604      	mov	r4, r0
 800be88:	4608      	mov	r0, r1
 800be8a:	602b      	str	r3, [r5, #0]
 800be8c:	f7f7 fbbf 	bl	800360e <_close>
 800be90:	1c43      	adds	r3, r0, #1
 800be92:	d102      	bne.n	800be9a <_close_r+0x1a>
 800be94:	682b      	ldr	r3, [r5, #0]
 800be96:	b103      	cbz	r3, 800be9a <_close_r+0x1a>
 800be98:	6023      	str	r3, [r4, #0]
 800be9a:	bd38      	pop	{r3, r4, r5, pc}
 800be9c:	2000529c 	.word	0x2000529c

0800bea0 <_reclaim_reent>:
 800bea0:	4b29      	ldr	r3, [pc, #164]	; (800bf48 <_reclaim_reent+0xa8>)
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	4283      	cmp	r3, r0
 800bea6:	b570      	push	{r4, r5, r6, lr}
 800bea8:	4604      	mov	r4, r0
 800beaa:	d04b      	beq.n	800bf44 <_reclaim_reent+0xa4>
 800beac:	69c3      	ldr	r3, [r0, #28]
 800beae:	b143      	cbz	r3, 800bec2 <_reclaim_reent+0x22>
 800beb0:	68db      	ldr	r3, [r3, #12]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d144      	bne.n	800bf40 <_reclaim_reent+0xa0>
 800beb6:	69e3      	ldr	r3, [r4, #28]
 800beb8:	6819      	ldr	r1, [r3, #0]
 800beba:	b111      	cbz	r1, 800bec2 <_reclaim_reent+0x22>
 800bebc:	4620      	mov	r0, r4
 800bebe:	f000 ff31 	bl	800cd24 <_free_r>
 800bec2:	6961      	ldr	r1, [r4, #20]
 800bec4:	b111      	cbz	r1, 800becc <_reclaim_reent+0x2c>
 800bec6:	4620      	mov	r0, r4
 800bec8:	f000 ff2c 	bl	800cd24 <_free_r>
 800becc:	69e1      	ldr	r1, [r4, #28]
 800bece:	b111      	cbz	r1, 800bed6 <_reclaim_reent+0x36>
 800bed0:	4620      	mov	r0, r4
 800bed2:	f000 ff27 	bl	800cd24 <_free_r>
 800bed6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800bed8:	b111      	cbz	r1, 800bee0 <_reclaim_reent+0x40>
 800beda:	4620      	mov	r0, r4
 800bedc:	f000 ff22 	bl	800cd24 <_free_r>
 800bee0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bee2:	b111      	cbz	r1, 800beea <_reclaim_reent+0x4a>
 800bee4:	4620      	mov	r0, r4
 800bee6:	f000 ff1d 	bl	800cd24 <_free_r>
 800beea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800beec:	b111      	cbz	r1, 800bef4 <_reclaim_reent+0x54>
 800beee:	4620      	mov	r0, r4
 800bef0:	f000 ff18 	bl	800cd24 <_free_r>
 800bef4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bef6:	b111      	cbz	r1, 800befe <_reclaim_reent+0x5e>
 800bef8:	4620      	mov	r0, r4
 800befa:	f000 ff13 	bl	800cd24 <_free_r>
 800befe:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800bf00:	b111      	cbz	r1, 800bf08 <_reclaim_reent+0x68>
 800bf02:	4620      	mov	r0, r4
 800bf04:	f000 ff0e 	bl	800cd24 <_free_r>
 800bf08:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800bf0a:	b111      	cbz	r1, 800bf12 <_reclaim_reent+0x72>
 800bf0c:	4620      	mov	r0, r4
 800bf0e:	f000 ff09 	bl	800cd24 <_free_r>
 800bf12:	6a23      	ldr	r3, [r4, #32]
 800bf14:	b1b3      	cbz	r3, 800bf44 <_reclaim_reent+0xa4>
 800bf16:	4620      	mov	r0, r4
 800bf18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bf1c:	4718      	bx	r3
 800bf1e:	5949      	ldr	r1, [r1, r5]
 800bf20:	b941      	cbnz	r1, 800bf34 <_reclaim_reent+0x94>
 800bf22:	3504      	adds	r5, #4
 800bf24:	69e3      	ldr	r3, [r4, #28]
 800bf26:	2d80      	cmp	r5, #128	; 0x80
 800bf28:	68d9      	ldr	r1, [r3, #12]
 800bf2a:	d1f8      	bne.n	800bf1e <_reclaim_reent+0x7e>
 800bf2c:	4620      	mov	r0, r4
 800bf2e:	f000 fef9 	bl	800cd24 <_free_r>
 800bf32:	e7c0      	b.n	800beb6 <_reclaim_reent+0x16>
 800bf34:	680e      	ldr	r6, [r1, #0]
 800bf36:	4620      	mov	r0, r4
 800bf38:	f000 fef4 	bl	800cd24 <_free_r>
 800bf3c:	4631      	mov	r1, r6
 800bf3e:	e7ef      	b.n	800bf20 <_reclaim_reent+0x80>
 800bf40:	2500      	movs	r5, #0
 800bf42:	e7ef      	b.n	800bf24 <_reclaim_reent+0x84>
 800bf44:	bd70      	pop	{r4, r5, r6, pc}
 800bf46:	bf00      	nop
 800bf48:	20000068 	.word	0x20000068

0800bf4c <_lseek_r>:
 800bf4c:	b538      	push	{r3, r4, r5, lr}
 800bf4e:	4d07      	ldr	r5, [pc, #28]	; (800bf6c <_lseek_r+0x20>)
 800bf50:	4604      	mov	r4, r0
 800bf52:	4608      	mov	r0, r1
 800bf54:	4611      	mov	r1, r2
 800bf56:	2200      	movs	r2, #0
 800bf58:	602a      	str	r2, [r5, #0]
 800bf5a:	461a      	mov	r2, r3
 800bf5c:	f7f7 fb7e 	bl	800365c <_lseek>
 800bf60:	1c43      	adds	r3, r0, #1
 800bf62:	d102      	bne.n	800bf6a <_lseek_r+0x1e>
 800bf64:	682b      	ldr	r3, [r5, #0]
 800bf66:	b103      	cbz	r3, 800bf6a <_lseek_r+0x1e>
 800bf68:	6023      	str	r3, [r4, #0]
 800bf6a:	bd38      	pop	{r3, r4, r5, pc}
 800bf6c:	2000529c 	.word	0x2000529c

0800bf70 <_read_r>:
 800bf70:	b538      	push	{r3, r4, r5, lr}
 800bf72:	4d07      	ldr	r5, [pc, #28]	; (800bf90 <_read_r+0x20>)
 800bf74:	4604      	mov	r4, r0
 800bf76:	4608      	mov	r0, r1
 800bf78:	4611      	mov	r1, r2
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	602a      	str	r2, [r5, #0]
 800bf7e:	461a      	mov	r2, r3
 800bf80:	f7f7 fb0c 	bl	800359c <_read>
 800bf84:	1c43      	adds	r3, r0, #1
 800bf86:	d102      	bne.n	800bf8e <_read_r+0x1e>
 800bf88:	682b      	ldr	r3, [r5, #0]
 800bf8a:	b103      	cbz	r3, 800bf8e <_read_r+0x1e>
 800bf8c:	6023      	str	r3, [r4, #0]
 800bf8e:	bd38      	pop	{r3, r4, r5, pc}
 800bf90:	2000529c 	.word	0x2000529c

0800bf94 <_write_r>:
 800bf94:	b538      	push	{r3, r4, r5, lr}
 800bf96:	4d07      	ldr	r5, [pc, #28]	; (800bfb4 <_write_r+0x20>)
 800bf98:	4604      	mov	r4, r0
 800bf9a:	4608      	mov	r0, r1
 800bf9c:	4611      	mov	r1, r2
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	602a      	str	r2, [r5, #0]
 800bfa2:	461a      	mov	r2, r3
 800bfa4:	f7f7 fb17 	bl	80035d6 <_write>
 800bfa8:	1c43      	adds	r3, r0, #1
 800bfaa:	d102      	bne.n	800bfb2 <_write_r+0x1e>
 800bfac:	682b      	ldr	r3, [r5, #0]
 800bfae:	b103      	cbz	r3, 800bfb2 <_write_r+0x1e>
 800bfb0:	6023      	str	r3, [r4, #0]
 800bfb2:	bd38      	pop	{r3, r4, r5, pc}
 800bfb4:	2000529c 	.word	0x2000529c

0800bfb8 <__errno>:
 800bfb8:	4b01      	ldr	r3, [pc, #4]	; (800bfc0 <__errno+0x8>)
 800bfba:	6818      	ldr	r0, [r3, #0]
 800bfbc:	4770      	bx	lr
 800bfbe:	bf00      	nop
 800bfc0:	20000068 	.word	0x20000068

0800bfc4 <__libc_init_array>:
 800bfc4:	b570      	push	{r4, r5, r6, lr}
 800bfc6:	4d0d      	ldr	r5, [pc, #52]	; (800bffc <__libc_init_array+0x38>)
 800bfc8:	4c0d      	ldr	r4, [pc, #52]	; (800c000 <__libc_init_array+0x3c>)
 800bfca:	1b64      	subs	r4, r4, r5
 800bfcc:	10a4      	asrs	r4, r4, #2
 800bfce:	2600      	movs	r6, #0
 800bfd0:	42a6      	cmp	r6, r4
 800bfd2:	d109      	bne.n	800bfe8 <__libc_init_array+0x24>
 800bfd4:	4d0b      	ldr	r5, [pc, #44]	; (800c004 <__libc_init_array+0x40>)
 800bfd6:	4c0c      	ldr	r4, [pc, #48]	; (800c008 <__libc_init_array+0x44>)
 800bfd8:	f001 fe58 	bl	800dc8c <_init>
 800bfdc:	1b64      	subs	r4, r4, r5
 800bfde:	10a4      	asrs	r4, r4, #2
 800bfe0:	2600      	movs	r6, #0
 800bfe2:	42a6      	cmp	r6, r4
 800bfe4:	d105      	bne.n	800bff2 <__libc_init_array+0x2e>
 800bfe6:	bd70      	pop	{r4, r5, r6, pc}
 800bfe8:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfec:	4798      	blx	r3
 800bfee:	3601      	adds	r6, #1
 800bff0:	e7ee      	b.n	800bfd0 <__libc_init_array+0xc>
 800bff2:	f855 3b04 	ldr.w	r3, [r5], #4
 800bff6:	4798      	blx	r3
 800bff8:	3601      	adds	r6, #1
 800bffa:	e7f2      	b.n	800bfe2 <__libc_init_array+0x1e>
 800bffc:	0800e194 	.word	0x0800e194
 800c000:	0800e194 	.word	0x0800e194
 800c004:	0800e194 	.word	0x0800e194
 800c008:	0800e198 	.word	0x0800e198

0800c00c <__retarget_lock_init_recursive>:
 800c00c:	4770      	bx	lr

0800c00e <__retarget_lock_acquire_recursive>:
 800c00e:	4770      	bx	lr

0800c010 <__retarget_lock_release_recursive>:
 800c010:	4770      	bx	lr

0800c012 <memcpy>:
 800c012:	440a      	add	r2, r1
 800c014:	4291      	cmp	r1, r2
 800c016:	f100 33ff 	add.w	r3, r0, #4294967295
 800c01a:	d100      	bne.n	800c01e <memcpy+0xc>
 800c01c:	4770      	bx	lr
 800c01e:	b510      	push	{r4, lr}
 800c020:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c024:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c028:	4291      	cmp	r1, r2
 800c02a:	d1f9      	bne.n	800c020 <memcpy+0xe>
 800c02c:	bd10      	pop	{r4, pc}

0800c02e <quorem>:
 800c02e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c032:	6903      	ldr	r3, [r0, #16]
 800c034:	690c      	ldr	r4, [r1, #16]
 800c036:	42a3      	cmp	r3, r4
 800c038:	4607      	mov	r7, r0
 800c03a:	db7e      	blt.n	800c13a <quorem+0x10c>
 800c03c:	3c01      	subs	r4, #1
 800c03e:	f101 0814 	add.w	r8, r1, #20
 800c042:	f100 0514 	add.w	r5, r0, #20
 800c046:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c04a:	9301      	str	r3, [sp, #4]
 800c04c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c050:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c054:	3301      	adds	r3, #1
 800c056:	429a      	cmp	r2, r3
 800c058:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c05c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c060:	fbb2 f6f3 	udiv	r6, r2, r3
 800c064:	d331      	bcc.n	800c0ca <quorem+0x9c>
 800c066:	f04f 0e00 	mov.w	lr, #0
 800c06a:	4640      	mov	r0, r8
 800c06c:	46ac      	mov	ip, r5
 800c06e:	46f2      	mov	sl, lr
 800c070:	f850 2b04 	ldr.w	r2, [r0], #4
 800c074:	b293      	uxth	r3, r2
 800c076:	fb06 e303 	mla	r3, r6, r3, lr
 800c07a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c07e:	0c1a      	lsrs	r2, r3, #16
 800c080:	b29b      	uxth	r3, r3
 800c082:	ebaa 0303 	sub.w	r3, sl, r3
 800c086:	f8dc a000 	ldr.w	sl, [ip]
 800c08a:	fa13 f38a 	uxtah	r3, r3, sl
 800c08e:	fb06 220e 	mla	r2, r6, lr, r2
 800c092:	9300      	str	r3, [sp, #0]
 800c094:	9b00      	ldr	r3, [sp, #0]
 800c096:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c09a:	b292      	uxth	r2, r2
 800c09c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c0a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c0a4:	f8bd 3000 	ldrh.w	r3, [sp]
 800c0a8:	4581      	cmp	r9, r0
 800c0aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c0ae:	f84c 3b04 	str.w	r3, [ip], #4
 800c0b2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c0b6:	d2db      	bcs.n	800c070 <quorem+0x42>
 800c0b8:	f855 300b 	ldr.w	r3, [r5, fp]
 800c0bc:	b92b      	cbnz	r3, 800c0ca <quorem+0x9c>
 800c0be:	9b01      	ldr	r3, [sp, #4]
 800c0c0:	3b04      	subs	r3, #4
 800c0c2:	429d      	cmp	r5, r3
 800c0c4:	461a      	mov	r2, r3
 800c0c6:	d32c      	bcc.n	800c122 <quorem+0xf4>
 800c0c8:	613c      	str	r4, [r7, #16]
 800c0ca:	4638      	mov	r0, r7
 800c0cc:	f001 f9a6 	bl	800d41c <__mcmp>
 800c0d0:	2800      	cmp	r0, #0
 800c0d2:	db22      	blt.n	800c11a <quorem+0xec>
 800c0d4:	3601      	adds	r6, #1
 800c0d6:	4629      	mov	r1, r5
 800c0d8:	2000      	movs	r0, #0
 800c0da:	f858 2b04 	ldr.w	r2, [r8], #4
 800c0de:	f8d1 c000 	ldr.w	ip, [r1]
 800c0e2:	b293      	uxth	r3, r2
 800c0e4:	1ac3      	subs	r3, r0, r3
 800c0e6:	0c12      	lsrs	r2, r2, #16
 800c0e8:	fa13 f38c 	uxtah	r3, r3, ip
 800c0ec:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c0f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c0f4:	b29b      	uxth	r3, r3
 800c0f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c0fa:	45c1      	cmp	r9, r8
 800c0fc:	f841 3b04 	str.w	r3, [r1], #4
 800c100:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c104:	d2e9      	bcs.n	800c0da <quorem+0xac>
 800c106:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c10a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c10e:	b922      	cbnz	r2, 800c11a <quorem+0xec>
 800c110:	3b04      	subs	r3, #4
 800c112:	429d      	cmp	r5, r3
 800c114:	461a      	mov	r2, r3
 800c116:	d30a      	bcc.n	800c12e <quorem+0x100>
 800c118:	613c      	str	r4, [r7, #16]
 800c11a:	4630      	mov	r0, r6
 800c11c:	b003      	add	sp, #12
 800c11e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c122:	6812      	ldr	r2, [r2, #0]
 800c124:	3b04      	subs	r3, #4
 800c126:	2a00      	cmp	r2, #0
 800c128:	d1ce      	bne.n	800c0c8 <quorem+0x9a>
 800c12a:	3c01      	subs	r4, #1
 800c12c:	e7c9      	b.n	800c0c2 <quorem+0x94>
 800c12e:	6812      	ldr	r2, [r2, #0]
 800c130:	3b04      	subs	r3, #4
 800c132:	2a00      	cmp	r2, #0
 800c134:	d1f0      	bne.n	800c118 <quorem+0xea>
 800c136:	3c01      	subs	r4, #1
 800c138:	e7eb      	b.n	800c112 <quorem+0xe4>
 800c13a:	2000      	movs	r0, #0
 800c13c:	e7ee      	b.n	800c11c <quorem+0xee>
	...

0800c140 <_dtoa_r>:
 800c140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c144:	ed2d 8b04 	vpush	{d8-d9}
 800c148:	69c5      	ldr	r5, [r0, #28]
 800c14a:	b093      	sub	sp, #76	; 0x4c
 800c14c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c150:	ec57 6b10 	vmov	r6, r7, d0
 800c154:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c158:	9107      	str	r1, [sp, #28]
 800c15a:	4604      	mov	r4, r0
 800c15c:	920a      	str	r2, [sp, #40]	; 0x28
 800c15e:	930d      	str	r3, [sp, #52]	; 0x34
 800c160:	b975      	cbnz	r5, 800c180 <_dtoa_r+0x40>
 800c162:	2010      	movs	r0, #16
 800c164:	f000 fe2a 	bl	800cdbc <malloc>
 800c168:	4602      	mov	r2, r0
 800c16a:	61e0      	str	r0, [r4, #28]
 800c16c:	b920      	cbnz	r0, 800c178 <_dtoa_r+0x38>
 800c16e:	4bae      	ldr	r3, [pc, #696]	; (800c428 <_dtoa_r+0x2e8>)
 800c170:	21ef      	movs	r1, #239	; 0xef
 800c172:	48ae      	ldr	r0, [pc, #696]	; (800c42c <_dtoa_r+0x2ec>)
 800c174:	f001 fcd8 	bl	800db28 <__assert_func>
 800c178:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c17c:	6005      	str	r5, [r0, #0]
 800c17e:	60c5      	str	r5, [r0, #12]
 800c180:	69e3      	ldr	r3, [r4, #28]
 800c182:	6819      	ldr	r1, [r3, #0]
 800c184:	b151      	cbz	r1, 800c19c <_dtoa_r+0x5c>
 800c186:	685a      	ldr	r2, [r3, #4]
 800c188:	604a      	str	r2, [r1, #4]
 800c18a:	2301      	movs	r3, #1
 800c18c:	4093      	lsls	r3, r2
 800c18e:	608b      	str	r3, [r1, #8]
 800c190:	4620      	mov	r0, r4
 800c192:	f000 ff07 	bl	800cfa4 <_Bfree>
 800c196:	69e3      	ldr	r3, [r4, #28]
 800c198:	2200      	movs	r2, #0
 800c19a:	601a      	str	r2, [r3, #0]
 800c19c:	1e3b      	subs	r3, r7, #0
 800c19e:	bfbb      	ittet	lt
 800c1a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c1a4:	9303      	strlt	r3, [sp, #12]
 800c1a6:	2300      	movge	r3, #0
 800c1a8:	2201      	movlt	r2, #1
 800c1aa:	bfac      	ite	ge
 800c1ac:	f8c8 3000 	strge.w	r3, [r8]
 800c1b0:	f8c8 2000 	strlt.w	r2, [r8]
 800c1b4:	4b9e      	ldr	r3, [pc, #632]	; (800c430 <_dtoa_r+0x2f0>)
 800c1b6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c1ba:	ea33 0308 	bics.w	r3, r3, r8
 800c1be:	d11b      	bne.n	800c1f8 <_dtoa_r+0xb8>
 800c1c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c1c2:	f242 730f 	movw	r3, #9999	; 0x270f
 800c1c6:	6013      	str	r3, [r2, #0]
 800c1c8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c1cc:	4333      	orrs	r3, r6
 800c1ce:	f000 8593 	beq.w	800ccf8 <_dtoa_r+0xbb8>
 800c1d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c1d4:	b963      	cbnz	r3, 800c1f0 <_dtoa_r+0xb0>
 800c1d6:	4b97      	ldr	r3, [pc, #604]	; (800c434 <_dtoa_r+0x2f4>)
 800c1d8:	e027      	b.n	800c22a <_dtoa_r+0xea>
 800c1da:	4b97      	ldr	r3, [pc, #604]	; (800c438 <_dtoa_r+0x2f8>)
 800c1dc:	9300      	str	r3, [sp, #0]
 800c1de:	3308      	adds	r3, #8
 800c1e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c1e2:	6013      	str	r3, [r2, #0]
 800c1e4:	9800      	ldr	r0, [sp, #0]
 800c1e6:	b013      	add	sp, #76	; 0x4c
 800c1e8:	ecbd 8b04 	vpop	{d8-d9}
 800c1ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1f0:	4b90      	ldr	r3, [pc, #576]	; (800c434 <_dtoa_r+0x2f4>)
 800c1f2:	9300      	str	r3, [sp, #0]
 800c1f4:	3303      	adds	r3, #3
 800c1f6:	e7f3      	b.n	800c1e0 <_dtoa_r+0xa0>
 800c1f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	ec51 0b17 	vmov	r0, r1, d7
 800c202:	eeb0 8a47 	vmov.f32	s16, s14
 800c206:	eef0 8a67 	vmov.f32	s17, s15
 800c20a:	2300      	movs	r3, #0
 800c20c:	f7f4 fc64 	bl	8000ad8 <__aeabi_dcmpeq>
 800c210:	4681      	mov	r9, r0
 800c212:	b160      	cbz	r0, 800c22e <_dtoa_r+0xee>
 800c214:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c216:	2301      	movs	r3, #1
 800c218:	6013      	str	r3, [r2, #0]
 800c21a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	f000 8568 	beq.w	800ccf2 <_dtoa_r+0xbb2>
 800c222:	4b86      	ldr	r3, [pc, #536]	; (800c43c <_dtoa_r+0x2fc>)
 800c224:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c226:	6013      	str	r3, [r2, #0]
 800c228:	3b01      	subs	r3, #1
 800c22a:	9300      	str	r3, [sp, #0]
 800c22c:	e7da      	b.n	800c1e4 <_dtoa_r+0xa4>
 800c22e:	aa10      	add	r2, sp, #64	; 0x40
 800c230:	a911      	add	r1, sp, #68	; 0x44
 800c232:	4620      	mov	r0, r4
 800c234:	eeb0 0a48 	vmov.f32	s0, s16
 800c238:	eef0 0a68 	vmov.f32	s1, s17
 800c23c:	f001 f994 	bl	800d568 <__d2b>
 800c240:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c244:	4682      	mov	sl, r0
 800c246:	2d00      	cmp	r5, #0
 800c248:	d07f      	beq.n	800c34a <_dtoa_r+0x20a>
 800c24a:	ee18 3a90 	vmov	r3, s17
 800c24e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c252:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c256:	ec51 0b18 	vmov	r0, r1, d8
 800c25a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c25e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c262:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c266:	4619      	mov	r1, r3
 800c268:	2200      	movs	r2, #0
 800c26a:	4b75      	ldr	r3, [pc, #468]	; (800c440 <_dtoa_r+0x300>)
 800c26c:	f7f4 f814 	bl	8000298 <__aeabi_dsub>
 800c270:	a367      	add	r3, pc, #412	; (adr r3, 800c410 <_dtoa_r+0x2d0>)
 800c272:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c276:	f7f4 f9c7 	bl	8000608 <__aeabi_dmul>
 800c27a:	a367      	add	r3, pc, #412	; (adr r3, 800c418 <_dtoa_r+0x2d8>)
 800c27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c280:	f7f4 f80c 	bl	800029c <__adddf3>
 800c284:	4606      	mov	r6, r0
 800c286:	4628      	mov	r0, r5
 800c288:	460f      	mov	r7, r1
 800c28a:	f7f4 f953 	bl	8000534 <__aeabi_i2d>
 800c28e:	a364      	add	r3, pc, #400	; (adr r3, 800c420 <_dtoa_r+0x2e0>)
 800c290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c294:	f7f4 f9b8 	bl	8000608 <__aeabi_dmul>
 800c298:	4602      	mov	r2, r0
 800c29a:	460b      	mov	r3, r1
 800c29c:	4630      	mov	r0, r6
 800c29e:	4639      	mov	r1, r7
 800c2a0:	f7f3 fffc 	bl	800029c <__adddf3>
 800c2a4:	4606      	mov	r6, r0
 800c2a6:	460f      	mov	r7, r1
 800c2a8:	f7f4 fc5e 	bl	8000b68 <__aeabi_d2iz>
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	4683      	mov	fp, r0
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	4630      	mov	r0, r6
 800c2b4:	4639      	mov	r1, r7
 800c2b6:	f7f4 fc19 	bl	8000aec <__aeabi_dcmplt>
 800c2ba:	b148      	cbz	r0, 800c2d0 <_dtoa_r+0x190>
 800c2bc:	4658      	mov	r0, fp
 800c2be:	f7f4 f939 	bl	8000534 <__aeabi_i2d>
 800c2c2:	4632      	mov	r2, r6
 800c2c4:	463b      	mov	r3, r7
 800c2c6:	f7f4 fc07 	bl	8000ad8 <__aeabi_dcmpeq>
 800c2ca:	b908      	cbnz	r0, 800c2d0 <_dtoa_r+0x190>
 800c2cc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c2d0:	f1bb 0f16 	cmp.w	fp, #22
 800c2d4:	d857      	bhi.n	800c386 <_dtoa_r+0x246>
 800c2d6:	4b5b      	ldr	r3, [pc, #364]	; (800c444 <_dtoa_r+0x304>)
 800c2d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2e0:	ec51 0b18 	vmov	r0, r1, d8
 800c2e4:	f7f4 fc02 	bl	8000aec <__aeabi_dcmplt>
 800c2e8:	2800      	cmp	r0, #0
 800c2ea:	d04e      	beq.n	800c38a <_dtoa_r+0x24a>
 800c2ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	930c      	str	r3, [sp, #48]	; 0x30
 800c2f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c2f6:	1b5b      	subs	r3, r3, r5
 800c2f8:	1e5a      	subs	r2, r3, #1
 800c2fa:	bf45      	ittet	mi
 800c2fc:	f1c3 0301 	rsbmi	r3, r3, #1
 800c300:	9305      	strmi	r3, [sp, #20]
 800c302:	2300      	movpl	r3, #0
 800c304:	2300      	movmi	r3, #0
 800c306:	9206      	str	r2, [sp, #24]
 800c308:	bf54      	ite	pl
 800c30a:	9305      	strpl	r3, [sp, #20]
 800c30c:	9306      	strmi	r3, [sp, #24]
 800c30e:	f1bb 0f00 	cmp.w	fp, #0
 800c312:	db3c      	blt.n	800c38e <_dtoa_r+0x24e>
 800c314:	9b06      	ldr	r3, [sp, #24]
 800c316:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800c31a:	445b      	add	r3, fp
 800c31c:	9306      	str	r3, [sp, #24]
 800c31e:	2300      	movs	r3, #0
 800c320:	9308      	str	r3, [sp, #32]
 800c322:	9b07      	ldr	r3, [sp, #28]
 800c324:	2b09      	cmp	r3, #9
 800c326:	d868      	bhi.n	800c3fa <_dtoa_r+0x2ba>
 800c328:	2b05      	cmp	r3, #5
 800c32a:	bfc4      	itt	gt
 800c32c:	3b04      	subgt	r3, #4
 800c32e:	9307      	strgt	r3, [sp, #28]
 800c330:	9b07      	ldr	r3, [sp, #28]
 800c332:	f1a3 0302 	sub.w	r3, r3, #2
 800c336:	bfcc      	ite	gt
 800c338:	2500      	movgt	r5, #0
 800c33a:	2501      	movle	r5, #1
 800c33c:	2b03      	cmp	r3, #3
 800c33e:	f200 8085 	bhi.w	800c44c <_dtoa_r+0x30c>
 800c342:	e8df f003 	tbb	[pc, r3]
 800c346:	3b2e      	.short	0x3b2e
 800c348:	5839      	.short	0x5839
 800c34a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c34e:	441d      	add	r5, r3
 800c350:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c354:	2b20      	cmp	r3, #32
 800c356:	bfc1      	itttt	gt
 800c358:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c35c:	fa08 f803 	lslgt.w	r8, r8, r3
 800c360:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800c364:	fa26 f303 	lsrgt.w	r3, r6, r3
 800c368:	bfd6      	itet	le
 800c36a:	f1c3 0320 	rsble	r3, r3, #32
 800c36e:	ea48 0003 	orrgt.w	r0, r8, r3
 800c372:	fa06 f003 	lslle.w	r0, r6, r3
 800c376:	f7f4 f8cd 	bl	8000514 <__aeabi_ui2d>
 800c37a:	2201      	movs	r2, #1
 800c37c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800c380:	3d01      	subs	r5, #1
 800c382:	920e      	str	r2, [sp, #56]	; 0x38
 800c384:	e76f      	b.n	800c266 <_dtoa_r+0x126>
 800c386:	2301      	movs	r3, #1
 800c388:	e7b3      	b.n	800c2f2 <_dtoa_r+0x1b2>
 800c38a:	900c      	str	r0, [sp, #48]	; 0x30
 800c38c:	e7b2      	b.n	800c2f4 <_dtoa_r+0x1b4>
 800c38e:	9b05      	ldr	r3, [sp, #20]
 800c390:	eba3 030b 	sub.w	r3, r3, fp
 800c394:	9305      	str	r3, [sp, #20]
 800c396:	f1cb 0300 	rsb	r3, fp, #0
 800c39a:	9308      	str	r3, [sp, #32]
 800c39c:	2300      	movs	r3, #0
 800c39e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c3a0:	e7bf      	b.n	800c322 <_dtoa_r+0x1e2>
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	9309      	str	r3, [sp, #36]	; 0x24
 800c3a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	dc52      	bgt.n	800c452 <_dtoa_r+0x312>
 800c3ac:	2301      	movs	r3, #1
 800c3ae:	9301      	str	r3, [sp, #4]
 800c3b0:	9304      	str	r3, [sp, #16]
 800c3b2:	461a      	mov	r2, r3
 800c3b4:	920a      	str	r2, [sp, #40]	; 0x28
 800c3b6:	e00b      	b.n	800c3d0 <_dtoa_r+0x290>
 800c3b8:	2301      	movs	r3, #1
 800c3ba:	e7f3      	b.n	800c3a4 <_dtoa_r+0x264>
 800c3bc:	2300      	movs	r3, #0
 800c3be:	9309      	str	r3, [sp, #36]	; 0x24
 800c3c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3c2:	445b      	add	r3, fp
 800c3c4:	9301      	str	r3, [sp, #4]
 800c3c6:	3301      	adds	r3, #1
 800c3c8:	2b01      	cmp	r3, #1
 800c3ca:	9304      	str	r3, [sp, #16]
 800c3cc:	bfb8      	it	lt
 800c3ce:	2301      	movlt	r3, #1
 800c3d0:	69e0      	ldr	r0, [r4, #28]
 800c3d2:	2100      	movs	r1, #0
 800c3d4:	2204      	movs	r2, #4
 800c3d6:	f102 0614 	add.w	r6, r2, #20
 800c3da:	429e      	cmp	r6, r3
 800c3dc:	d93d      	bls.n	800c45a <_dtoa_r+0x31a>
 800c3de:	6041      	str	r1, [r0, #4]
 800c3e0:	4620      	mov	r0, r4
 800c3e2:	f000 fd9f 	bl	800cf24 <_Balloc>
 800c3e6:	9000      	str	r0, [sp, #0]
 800c3e8:	2800      	cmp	r0, #0
 800c3ea:	d139      	bne.n	800c460 <_dtoa_r+0x320>
 800c3ec:	4b16      	ldr	r3, [pc, #88]	; (800c448 <_dtoa_r+0x308>)
 800c3ee:	4602      	mov	r2, r0
 800c3f0:	f240 11af 	movw	r1, #431	; 0x1af
 800c3f4:	e6bd      	b.n	800c172 <_dtoa_r+0x32>
 800c3f6:	2301      	movs	r3, #1
 800c3f8:	e7e1      	b.n	800c3be <_dtoa_r+0x27e>
 800c3fa:	2501      	movs	r5, #1
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	9307      	str	r3, [sp, #28]
 800c400:	9509      	str	r5, [sp, #36]	; 0x24
 800c402:	f04f 33ff 	mov.w	r3, #4294967295
 800c406:	9301      	str	r3, [sp, #4]
 800c408:	9304      	str	r3, [sp, #16]
 800c40a:	2200      	movs	r2, #0
 800c40c:	2312      	movs	r3, #18
 800c40e:	e7d1      	b.n	800c3b4 <_dtoa_r+0x274>
 800c410:	636f4361 	.word	0x636f4361
 800c414:	3fd287a7 	.word	0x3fd287a7
 800c418:	8b60c8b3 	.word	0x8b60c8b3
 800c41c:	3fc68a28 	.word	0x3fc68a28
 800c420:	509f79fb 	.word	0x509f79fb
 800c424:	3fd34413 	.word	0x3fd34413
 800c428:	0800de5d 	.word	0x0800de5d
 800c42c:	0800de74 	.word	0x0800de74
 800c430:	7ff00000 	.word	0x7ff00000
 800c434:	0800de59 	.word	0x0800de59
 800c438:	0800de50 	.word	0x0800de50
 800c43c:	0800de2d 	.word	0x0800de2d
 800c440:	3ff80000 	.word	0x3ff80000
 800c444:	0800df60 	.word	0x0800df60
 800c448:	0800decc 	.word	0x0800decc
 800c44c:	2301      	movs	r3, #1
 800c44e:	9309      	str	r3, [sp, #36]	; 0x24
 800c450:	e7d7      	b.n	800c402 <_dtoa_r+0x2c2>
 800c452:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c454:	9301      	str	r3, [sp, #4]
 800c456:	9304      	str	r3, [sp, #16]
 800c458:	e7ba      	b.n	800c3d0 <_dtoa_r+0x290>
 800c45a:	3101      	adds	r1, #1
 800c45c:	0052      	lsls	r2, r2, #1
 800c45e:	e7ba      	b.n	800c3d6 <_dtoa_r+0x296>
 800c460:	69e3      	ldr	r3, [r4, #28]
 800c462:	9a00      	ldr	r2, [sp, #0]
 800c464:	601a      	str	r2, [r3, #0]
 800c466:	9b04      	ldr	r3, [sp, #16]
 800c468:	2b0e      	cmp	r3, #14
 800c46a:	f200 80a8 	bhi.w	800c5be <_dtoa_r+0x47e>
 800c46e:	2d00      	cmp	r5, #0
 800c470:	f000 80a5 	beq.w	800c5be <_dtoa_r+0x47e>
 800c474:	f1bb 0f00 	cmp.w	fp, #0
 800c478:	dd38      	ble.n	800c4ec <_dtoa_r+0x3ac>
 800c47a:	4bc0      	ldr	r3, [pc, #768]	; (800c77c <_dtoa_r+0x63c>)
 800c47c:	f00b 020f 	and.w	r2, fp, #15
 800c480:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c484:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c488:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c48c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800c490:	d019      	beq.n	800c4c6 <_dtoa_r+0x386>
 800c492:	4bbb      	ldr	r3, [pc, #748]	; (800c780 <_dtoa_r+0x640>)
 800c494:	ec51 0b18 	vmov	r0, r1, d8
 800c498:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c49c:	f7f4 f9de 	bl	800085c <__aeabi_ddiv>
 800c4a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c4a4:	f008 080f 	and.w	r8, r8, #15
 800c4a8:	2503      	movs	r5, #3
 800c4aa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800c780 <_dtoa_r+0x640>
 800c4ae:	f1b8 0f00 	cmp.w	r8, #0
 800c4b2:	d10a      	bne.n	800c4ca <_dtoa_r+0x38a>
 800c4b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c4b8:	4632      	mov	r2, r6
 800c4ba:	463b      	mov	r3, r7
 800c4bc:	f7f4 f9ce 	bl	800085c <__aeabi_ddiv>
 800c4c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c4c4:	e02b      	b.n	800c51e <_dtoa_r+0x3de>
 800c4c6:	2502      	movs	r5, #2
 800c4c8:	e7ef      	b.n	800c4aa <_dtoa_r+0x36a>
 800c4ca:	f018 0f01 	tst.w	r8, #1
 800c4ce:	d008      	beq.n	800c4e2 <_dtoa_r+0x3a2>
 800c4d0:	4630      	mov	r0, r6
 800c4d2:	4639      	mov	r1, r7
 800c4d4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c4d8:	f7f4 f896 	bl	8000608 <__aeabi_dmul>
 800c4dc:	3501      	adds	r5, #1
 800c4de:	4606      	mov	r6, r0
 800c4e0:	460f      	mov	r7, r1
 800c4e2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c4e6:	f109 0908 	add.w	r9, r9, #8
 800c4ea:	e7e0      	b.n	800c4ae <_dtoa_r+0x36e>
 800c4ec:	f000 809f 	beq.w	800c62e <_dtoa_r+0x4ee>
 800c4f0:	f1cb 0600 	rsb	r6, fp, #0
 800c4f4:	4ba1      	ldr	r3, [pc, #644]	; (800c77c <_dtoa_r+0x63c>)
 800c4f6:	4fa2      	ldr	r7, [pc, #648]	; (800c780 <_dtoa_r+0x640>)
 800c4f8:	f006 020f 	and.w	r2, r6, #15
 800c4fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c504:	ec51 0b18 	vmov	r0, r1, d8
 800c508:	f7f4 f87e 	bl	8000608 <__aeabi_dmul>
 800c50c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c510:	1136      	asrs	r6, r6, #4
 800c512:	2300      	movs	r3, #0
 800c514:	2502      	movs	r5, #2
 800c516:	2e00      	cmp	r6, #0
 800c518:	d17e      	bne.n	800c618 <_dtoa_r+0x4d8>
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d1d0      	bne.n	800c4c0 <_dtoa_r+0x380>
 800c51e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c520:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c524:	2b00      	cmp	r3, #0
 800c526:	f000 8084 	beq.w	800c632 <_dtoa_r+0x4f2>
 800c52a:	4b96      	ldr	r3, [pc, #600]	; (800c784 <_dtoa_r+0x644>)
 800c52c:	2200      	movs	r2, #0
 800c52e:	4640      	mov	r0, r8
 800c530:	4649      	mov	r1, r9
 800c532:	f7f4 fadb 	bl	8000aec <__aeabi_dcmplt>
 800c536:	2800      	cmp	r0, #0
 800c538:	d07b      	beq.n	800c632 <_dtoa_r+0x4f2>
 800c53a:	9b04      	ldr	r3, [sp, #16]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d078      	beq.n	800c632 <_dtoa_r+0x4f2>
 800c540:	9b01      	ldr	r3, [sp, #4]
 800c542:	2b00      	cmp	r3, #0
 800c544:	dd39      	ble.n	800c5ba <_dtoa_r+0x47a>
 800c546:	4b90      	ldr	r3, [pc, #576]	; (800c788 <_dtoa_r+0x648>)
 800c548:	2200      	movs	r2, #0
 800c54a:	4640      	mov	r0, r8
 800c54c:	4649      	mov	r1, r9
 800c54e:	f7f4 f85b 	bl	8000608 <__aeabi_dmul>
 800c552:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c556:	9e01      	ldr	r6, [sp, #4]
 800c558:	f10b 37ff 	add.w	r7, fp, #4294967295
 800c55c:	3501      	adds	r5, #1
 800c55e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c562:	4628      	mov	r0, r5
 800c564:	f7f3 ffe6 	bl	8000534 <__aeabi_i2d>
 800c568:	4642      	mov	r2, r8
 800c56a:	464b      	mov	r3, r9
 800c56c:	f7f4 f84c 	bl	8000608 <__aeabi_dmul>
 800c570:	4b86      	ldr	r3, [pc, #536]	; (800c78c <_dtoa_r+0x64c>)
 800c572:	2200      	movs	r2, #0
 800c574:	f7f3 fe92 	bl	800029c <__adddf3>
 800c578:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c57c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c580:	9303      	str	r3, [sp, #12]
 800c582:	2e00      	cmp	r6, #0
 800c584:	d158      	bne.n	800c638 <_dtoa_r+0x4f8>
 800c586:	4b82      	ldr	r3, [pc, #520]	; (800c790 <_dtoa_r+0x650>)
 800c588:	2200      	movs	r2, #0
 800c58a:	4640      	mov	r0, r8
 800c58c:	4649      	mov	r1, r9
 800c58e:	f7f3 fe83 	bl	8000298 <__aeabi_dsub>
 800c592:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c596:	4680      	mov	r8, r0
 800c598:	4689      	mov	r9, r1
 800c59a:	f7f4 fac5 	bl	8000b28 <__aeabi_dcmpgt>
 800c59e:	2800      	cmp	r0, #0
 800c5a0:	f040 8296 	bne.w	800cad0 <_dtoa_r+0x990>
 800c5a4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c5a8:	4640      	mov	r0, r8
 800c5aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c5ae:	4649      	mov	r1, r9
 800c5b0:	f7f4 fa9c 	bl	8000aec <__aeabi_dcmplt>
 800c5b4:	2800      	cmp	r0, #0
 800c5b6:	f040 8289 	bne.w	800cacc <_dtoa_r+0x98c>
 800c5ba:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c5be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	f2c0 814e 	blt.w	800c862 <_dtoa_r+0x722>
 800c5c6:	f1bb 0f0e 	cmp.w	fp, #14
 800c5ca:	f300 814a 	bgt.w	800c862 <_dtoa_r+0x722>
 800c5ce:	4b6b      	ldr	r3, [pc, #428]	; (800c77c <_dtoa_r+0x63c>)
 800c5d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c5d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c5d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	f280 80dc 	bge.w	800c798 <_dtoa_r+0x658>
 800c5e0:	9b04      	ldr	r3, [sp, #16]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	f300 80d8 	bgt.w	800c798 <_dtoa_r+0x658>
 800c5e8:	f040 826f 	bne.w	800caca <_dtoa_r+0x98a>
 800c5ec:	4b68      	ldr	r3, [pc, #416]	; (800c790 <_dtoa_r+0x650>)
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	4640      	mov	r0, r8
 800c5f2:	4649      	mov	r1, r9
 800c5f4:	f7f4 f808 	bl	8000608 <__aeabi_dmul>
 800c5f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c5fc:	f7f4 fa8a 	bl	8000b14 <__aeabi_dcmpge>
 800c600:	9e04      	ldr	r6, [sp, #16]
 800c602:	4637      	mov	r7, r6
 800c604:	2800      	cmp	r0, #0
 800c606:	f040 8245 	bne.w	800ca94 <_dtoa_r+0x954>
 800c60a:	9d00      	ldr	r5, [sp, #0]
 800c60c:	2331      	movs	r3, #49	; 0x31
 800c60e:	f805 3b01 	strb.w	r3, [r5], #1
 800c612:	f10b 0b01 	add.w	fp, fp, #1
 800c616:	e241      	b.n	800ca9c <_dtoa_r+0x95c>
 800c618:	07f2      	lsls	r2, r6, #31
 800c61a:	d505      	bpl.n	800c628 <_dtoa_r+0x4e8>
 800c61c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c620:	f7f3 fff2 	bl	8000608 <__aeabi_dmul>
 800c624:	3501      	adds	r5, #1
 800c626:	2301      	movs	r3, #1
 800c628:	1076      	asrs	r6, r6, #1
 800c62a:	3708      	adds	r7, #8
 800c62c:	e773      	b.n	800c516 <_dtoa_r+0x3d6>
 800c62e:	2502      	movs	r5, #2
 800c630:	e775      	b.n	800c51e <_dtoa_r+0x3de>
 800c632:	9e04      	ldr	r6, [sp, #16]
 800c634:	465f      	mov	r7, fp
 800c636:	e792      	b.n	800c55e <_dtoa_r+0x41e>
 800c638:	9900      	ldr	r1, [sp, #0]
 800c63a:	4b50      	ldr	r3, [pc, #320]	; (800c77c <_dtoa_r+0x63c>)
 800c63c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c640:	4431      	add	r1, r6
 800c642:	9102      	str	r1, [sp, #8]
 800c644:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c646:	eeb0 9a47 	vmov.f32	s18, s14
 800c64a:	eef0 9a67 	vmov.f32	s19, s15
 800c64e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c652:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c656:	2900      	cmp	r1, #0
 800c658:	d044      	beq.n	800c6e4 <_dtoa_r+0x5a4>
 800c65a:	494e      	ldr	r1, [pc, #312]	; (800c794 <_dtoa_r+0x654>)
 800c65c:	2000      	movs	r0, #0
 800c65e:	f7f4 f8fd 	bl	800085c <__aeabi_ddiv>
 800c662:	ec53 2b19 	vmov	r2, r3, d9
 800c666:	f7f3 fe17 	bl	8000298 <__aeabi_dsub>
 800c66a:	9d00      	ldr	r5, [sp, #0]
 800c66c:	ec41 0b19 	vmov	d9, r0, r1
 800c670:	4649      	mov	r1, r9
 800c672:	4640      	mov	r0, r8
 800c674:	f7f4 fa78 	bl	8000b68 <__aeabi_d2iz>
 800c678:	4606      	mov	r6, r0
 800c67a:	f7f3 ff5b 	bl	8000534 <__aeabi_i2d>
 800c67e:	4602      	mov	r2, r0
 800c680:	460b      	mov	r3, r1
 800c682:	4640      	mov	r0, r8
 800c684:	4649      	mov	r1, r9
 800c686:	f7f3 fe07 	bl	8000298 <__aeabi_dsub>
 800c68a:	3630      	adds	r6, #48	; 0x30
 800c68c:	f805 6b01 	strb.w	r6, [r5], #1
 800c690:	ec53 2b19 	vmov	r2, r3, d9
 800c694:	4680      	mov	r8, r0
 800c696:	4689      	mov	r9, r1
 800c698:	f7f4 fa28 	bl	8000aec <__aeabi_dcmplt>
 800c69c:	2800      	cmp	r0, #0
 800c69e:	d164      	bne.n	800c76a <_dtoa_r+0x62a>
 800c6a0:	4642      	mov	r2, r8
 800c6a2:	464b      	mov	r3, r9
 800c6a4:	4937      	ldr	r1, [pc, #220]	; (800c784 <_dtoa_r+0x644>)
 800c6a6:	2000      	movs	r0, #0
 800c6a8:	f7f3 fdf6 	bl	8000298 <__aeabi_dsub>
 800c6ac:	ec53 2b19 	vmov	r2, r3, d9
 800c6b0:	f7f4 fa1c 	bl	8000aec <__aeabi_dcmplt>
 800c6b4:	2800      	cmp	r0, #0
 800c6b6:	f040 80b6 	bne.w	800c826 <_dtoa_r+0x6e6>
 800c6ba:	9b02      	ldr	r3, [sp, #8]
 800c6bc:	429d      	cmp	r5, r3
 800c6be:	f43f af7c 	beq.w	800c5ba <_dtoa_r+0x47a>
 800c6c2:	4b31      	ldr	r3, [pc, #196]	; (800c788 <_dtoa_r+0x648>)
 800c6c4:	ec51 0b19 	vmov	r0, r1, d9
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	f7f3 ff9d 	bl	8000608 <__aeabi_dmul>
 800c6ce:	4b2e      	ldr	r3, [pc, #184]	; (800c788 <_dtoa_r+0x648>)
 800c6d0:	ec41 0b19 	vmov	d9, r0, r1
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	4640      	mov	r0, r8
 800c6d8:	4649      	mov	r1, r9
 800c6da:	f7f3 ff95 	bl	8000608 <__aeabi_dmul>
 800c6de:	4680      	mov	r8, r0
 800c6e0:	4689      	mov	r9, r1
 800c6e2:	e7c5      	b.n	800c670 <_dtoa_r+0x530>
 800c6e4:	ec51 0b17 	vmov	r0, r1, d7
 800c6e8:	f7f3 ff8e 	bl	8000608 <__aeabi_dmul>
 800c6ec:	9b02      	ldr	r3, [sp, #8]
 800c6ee:	9d00      	ldr	r5, [sp, #0]
 800c6f0:	930f      	str	r3, [sp, #60]	; 0x3c
 800c6f2:	ec41 0b19 	vmov	d9, r0, r1
 800c6f6:	4649      	mov	r1, r9
 800c6f8:	4640      	mov	r0, r8
 800c6fa:	f7f4 fa35 	bl	8000b68 <__aeabi_d2iz>
 800c6fe:	4606      	mov	r6, r0
 800c700:	f7f3 ff18 	bl	8000534 <__aeabi_i2d>
 800c704:	3630      	adds	r6, #48	; 0x30
 800c706:	4602      	mov	r2, r0
 800c708:	460b      	mov	r3, r1
 800c70a:	4640      	mov	r0, r8
 800c70c:	4649      	mov	r1, r9
 800c70e:	f7f3 fdc3 	bl	8000298 <__aeabi_dsub>
 800c712:	f805 6b01 	strb.w	r6, [r5], #1
 800c716:	9b02      	ldr	r3, [sp, #8]
 800c718:	429d      	cmp	r5, r3
 800c71a:	4680      	mov	r8, r0
 800c71c:	4689      	mov	r9, r1
 800c71e:	f04f 0200 	mov.w	r2, #0
 800c722:	d124      	bne.n	800c76e <_dtoa_r+0x62e>
 800c724:	4b1b      	ldr	r3, [pc, #108]	; (800c794 <_dtoa_r+0x654>)
 800c726:	ec51 0b19 	vmov	r0, r1, d9
 800c72a:	f7f3 fdb7 	bl	800029c <__adddf3>
 800c72e:	4602      	mov	r2, r0
 800c730:	460b      	mov	r3, r1
 800c732:	4640      	mov	r0, r8
 800c734:	4649      	mov	r1, r9
 800c736:	f7f4 f9f7 	bl	8000b28 <__aeabi_dcmpgt>
 800c73a:	2800      	cmp	r0, #0
 800c73c:	d173      	bne.n	800c826 <_dtoa_r+0x6e6>
 800c73e:	ec53 2b19 	vmov	r2, r3, d9
 800c742:	4914      	ldr	r1, [pc, #80]	; (800c794 <_dtoa_r+0x654>)
 800c744:	2000      	movs	r0, #0
 800c746:	f7f3 fda7 	bl	8000298 <__aeabi_dsub>
 800c74a:	4602      	mov	r2, r0
 800c74c:	460b      	mov	r3, r1
 800c74e:	4640      	mov	r0, r8
 800c750:	4649      	mov	r1, r9
 800c752:	f7f4 f9cb 	bl	8000aec <__aeabi_dcmplt>
 800c756:	2800      	cmp	r0, #0
 800c758:	f43f af2f 	beq.w	800c5ba <_dtoa_r+0x47a>
 800c75c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c75e:	1e6b      	subs	r3, r5, #1
 800c760:	930f      	str	r3, [sp, #60]	; 0x3c
 800c762:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c766:	2b30      	cmp	r3, #48	; 0x30
 800c768:	d0f8      	beq.n	800c75c <_dtoa_r+0x61c>
 800c76a:	46bb      	mov	fp, r7
 800c76c:	e04a      	b.n	800c804 <_dtoa_r+0x6c4>
 800c76e:	4b06      	ldr	r3, [pc, #24]	; (800c788 <_dtoa_r+0x648>)
 800c770:	f7f3 ff4a 	bl	8000608 <__aeabi_dmul>
 800c774:	4680      	mov	r8, r0
 800c776:	4689      	mov	r9, r1
 800c778:	e7bd      	b.n	800c6f6 <_dtoa_r+0x5b6>
 800c77a:	bf00      	nop
 800c77c:	0800df60 	.word	0x0800df60
 800c780:	0800df38 	.word	0x0800df38
 800c784:	3ff00000 	.word	0x3ff00000
 800c788:	40240000 	.word	0x40240000
 800c78c:	401c0000 	.word	0x401c0000
 800c790:	40140000 	.word	0x40140000
 800c794:	3fe00000 	.word	0x3fe00000
 800c798:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c79c:	9d00      	ldr	r5, [sp, #0]
 800c79e:	4642      	mov	r2, r8
 800c7a0:	464b      	mov	r3, r9
 800c7a2:	4630      	mov	r0, r6
 800c7a4:	4639      	mov	r1, r7
 800c7a6:	f7f4 f859 	bl	800085c <__aeabi_ddiv>
 800c7aa:	f7f4 f9dd 	bl	8000b68 <__aeabi_d2iz>
 800c7ae:	9001      	str	r0, [sp, #4]
 800c7b0:	f7f3 fec0 	bl	8000534 <__aeabi_i2d>
 800c7b4:	4642      	mov	r2, r8
 800c7b6:	464b      	mov	r3, r9
 800c7b8:	f7f3 ff26 	bl	8000608 <__aeabi_dmul>
 800c7bc:	4602      	mov	r2, r0
 800c7be:	460b      	mov	r3, r1
 800c7c0:	4630      	mov	r0, r6
 800c7c2:	4639      	mov	r1, r7
 800c7c4:	f7f3 fd68 	bl	8000298 <__aeabi_dsub>
 800c7c8:	9e01      	ldr	r6, [sp, #4]
 800c7ca:	9f04      	ldr	r7, [sp, #16]
 800c7cc:	3630      	adds	r6, #48	; 0x30
 800c7ce:	f805 6b01 	strb.w	r6, [r5], #1
 800c7d2:	9e00      	ldr	r6, [sp, #0]
 800c7d4:	1bae      	subs	r6, r5, r6
 800c7d6:	42b7      	cmp	r7, r6
 800c7d8:	4602      	mov	r2, r0
 800c7da:	460b      	mov	r3, r1
 800c7dc:	d134      	bne.n	800c848 <_dtoa_r+0x708>
 800c7de:	f7f3 fd5d 	bl	800029c <__adddf3>
 800c7e2:	4642      	mov	r2, r8
 800c7e4:	464b      	mov	r3, r9
 800c7e6:	4606      	mov	r6, r0
 800c7e8:	460f      	mov	r7, r1
 800c7ea:	f7f4 f99d 	bl	8000b28 <__aeabi_dcmpgt>
 800c7ee:	b9c8      	cbnz	r0, 800c824 <_dtoa_r+0x6e4>
 800c7f0:	4642      	mov	r2, r8
 800c7f2:	464b      	mov	r3, r9
 800c7f4:	4630      	mov	r0, r6
 800c7f6:	4639      	mov	r1, r7
 800c7f8:	f7f4 f96e 	bl	8000ad8 <__aeabi_dcmpeq>
 800c7fc:	b110      	cbz	r0, 800c804 <_dtoa_r+0x6c4>
 800c7fe:	9b01      	ldr	r3, [sp, #4]
 800c800:	07db      	lsls	r3, r3, #31
 800c802:	d40f      	bmi.n	800c824 <_dtoa_r+0x6e4>
 800c804:	4651      	mov	r1, sl
 800c806:	4620      	mov	r0, r4
 800c808:	f000 fbcc 	bl	800cfa4 <_Bfree>
 800c80c:	2300      	movs	r3, #0
 800c80e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c810:	702b      	strb	r3, [r5, #0]
 800c812:	f10b 0301 	add.w	r3, fp, #1
 800c816:	6013      	str	r3, [r2, #0]
 800c818:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	f43f ace2 	beq.w	800c1e4 <_dtoa_r+0xa4>
 800c820:	601d      	str	r5, [r3, #0]
 800c822:	e4df      	b.n	800c1e4 <_dtoa_r+0xa4>
 800c824:	465f      	mov	r7, fp
 800c826:	462b      	mov	r3, r5
 800c828:	461d      	mov	r5, r3
 800c82a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c82e:	2a39      	cmp	r2, #57	; 0x39
 800c830:	d106      	bne.n	800c840 <_dtoa_r+0x700>
 800c832:	9a00      	ldr	r2, [sp, #0]
 800c834:	429a      	cmp	r2, r3
 800c836:	d1f7      	bne.n	800c828 <_dtoa_r+0x6e8>
 800c838:	9900      	ldr	r1, [sp, #0]
 800c83a:	2230      	movs	r2, #48	; 0x30
 800c83c:	3701      	adds	r7, #1
 800c83e:	700a      	strb	r2, [r1, #0]
 800c840:	781a      	ldrb	r2, [r3, #0]
 800c842:	3201      	adds	r2, #1
 800c844:	701a      	strb	r2, [r3, #0]
 800c846:	e790      	b.n	800c76a <_dtoa_r+0x62a>
 800c848:	4ba3      	ldr	r3, [pc, #652]	; (800cad8 <_dtoa_r+0x998>)
 800c84a:	2200      	movs	r2, #0
 800c84c:	f7f3 fedc 	bl	8000608 <__aeabi_dmul>
 800c850:	2200      	movs	r2, #0
 800c852:	2300      	movs	r3, #0
 800c854:	4606      	mov	r6, r0
 800c856:	460f      	mov	r7, r1
 800c858:	f7f4 f93e 	bl	8000ad8 <__aeabi_dcmpeq>
 800c85c:	2800      	cmp	r0, #0
 800c85e:	d09e      	beq.n	800c79e <_dtoa_r+0x65e>
 800c860:	e7d0      	b.n	800c804 <_dtoa_r+0x6c4>
 800c862:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c864:	2a00      	cmp	r2, #0
 800c866:	f000 80ca 	beq.w	800c9fe <_dtoa_r+0x8be>
 800c86a:	9a07      	ldr	r2, [sp, #28]
 800c86c:	2a01      	cmp	r2, #1
 800c86e:	f300 80ad 	bgt.w	800c9cc <_dtoa_r+0x88c>
 800c872:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c874:	2a00      	cmp	r2, #0
 800c876:	f000 80a5 	beq.w	800c9c4 <_dtoa_r+0x884>
 800c87a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c87e:	9e08      	ldr	r6, [sp, #32]
 800c880:	9d05      	ldr	r5, [sp, #20]
 800c882:	9a05      	ldr	r2, [sp, #20]
 800c884:	441a      	add	r2, r3
 800c886:	9205      	str	r2, [sp, #20]
 800c888:	9a06      	ldr	r2, [sp, #24]
 800c88a:	2101      	movs	r1, #1
 800c88c:	441a      	add	r2, r3
 800c88e:	4620      	mov	r0, r4
 800c890:	9206      	str	r2, [sp, #24]
 800c892:	f000 fc3d 	bl	800d110 <__i2b>
 800c896:	4607      	mov	r7, r0
 800c898:	b165      	cbz	r5, 800c8b4 <_dtoa_r+0x774>
 800c89a:	9b06      	ldr	r3, [sp, #24]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	dd09      	ble.n	800c8b4 <_dtoa_r+0x774>
 800c8a0:	42ab      	cmp	r3, r5
 800c8a2:	9a05      	ldr	r2, [sp, #20]
 800c8a4:	bfa8      	it	ge
 800c8a6:	462b      	movge	r3, r5
 800c8a8:	1ad2      	subs	r2, r2, r3
 800c8aa:	9205      	str	r2, [sp, #20]
 800c8ac:	9a06      	ldr	r2, [sp, #24]
 800c8ae:	1aed      	subs	r5, r5, r3
 800c8b0:	1ad3      	subs	r3, r2, r3
 800c8b2:	9306      	str	r3, [sp, #24]
 800c8b4:	9b08      	ldr	r3, [sp, #32]
 800c8b6:	b1f3      	cbz	r3, 800c8f6 <_dtoa_r+0x7b6>
 800c8b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	f000 80a3 	beq.w	800ca06 <_dtoa_r+0x8c6>
 800c8c0:	2e00      	cmp	r6, #0
 800c8c2:	dd10      	ble.n	800c8e6 <_dtoa_r+0x7a6>
 800c8c4:	4639      	mov	r1, r7
 800c8c6:	4632      	mov	r2, r6
 800c8c8:	4620      	mov	r0, r4
 800c8ca:	f000 fce1 	bl	800d290 <__pow5mult>
 800c8ce:	4652      	mov	r2, sl
 800c8d0:	4601      	mov	r1, r0
 800c8d2:	4607      	mov	r7, r0
 800c8d4:	4620      	mov	r0, r4
 800c8d6:	f000 fc31 	bl	800d13c <__multiply>
 800c8da:	4651      	mov	r1, sl
 800c8dc:	4680      	mov	r8, r0
 800c8de:	4620      	mov	r0, r4
 800c8e0:	f000 fb60 	bl	800cfa4 <_Bfree>
 800c8e4:	46c2      	mov	sl, r8
 800c8e6:	9b08      	ldr	r3, [sp, #32]
 800c8e8:	1b9a      	subs	r2, r3, r6
 800c8ea:	d004      	beq.n	800c8f6 <_dtoa_r+0x7b6>
 800c8ec:	4651      	mov	r1, sl
 800c8ee:	4620      	mov	r0, r4
 800c8f0:	f000 fcce 	bl	800d290 <__pow5mult>
 800c8f4:	4682      	mov	sl, r0
 800c8f6:	2101      	movs	r1, #1
 800c8f8:	4620      	mov	r0, r4
 800c8fa:	f000 fc09 	bl	800d110 <__i2b>
 800c8fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c900:	2b00      	cmp	r3, #0
 800c902:	4606      	mov	r6, r0
 800c904:	f340 8081 	ble.w	800ca0a <_dtoa_r+0x8ca>
 800c908:	461a      	mov	r2, r3
 800c90a:	4601      	mov	r1, r0
 800c90c:	4620      	mov	r0, r4
 800c90e:	f000 fcbf 	bl	800d290 <__pow5mult>
 800c912:	9b07      	ldr	r3, [sp, #28]
 800c914:	2b01      	cmp	r3, #1
 800c916:	4606      	mov	r6, r0
 800c918:	dd7a      	ble.n	800ca10 <_dtoa_r+0x8d0>
 800c91a:	f04f 0800 	mov.w	r8, #0
 800c91e:	6933      	ldr	r3, [r6, #16]
 800c920:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c924:	6918      	ldr	r0, [r3, #16]
 800c926:	f000 fba5 	bl	800d074 <__hi0bits>
 800c92a:	f1c0 0020 	rsb	r0, r0, #32
 800c92e:	9b06      	ldr	r3, [sp, #24]
 800c930:	4418      	add	r0, r3
 800c932:	f010 001f 	ands.w	r0, r0, #31
 800c936:	f000 8094 	beq.w	800ca62 <_dtoa_r+0x922>
 800c93a:	f1c0 0320 	rsb	r3, r0, #32
 800c93e:	2b04      	cmp	r3, #4
 800c940:	f340 8085 	ble.w	800ca4e <_dtoa_r+0x90e>
 800c944:	9b05      	ldr	r3, [sp, #20]
 800c946:	f1c0 001c 	rsb	r0, r0, #28
 800c94a:	4403      	add	r3, r0
 800c94c:	9305      	str	r3, [sp, #20]
 800c94e:	9b06      	ldr	r3, [sp, #24]
 800c950:	4403      	add	r3, r0
 800c952:	4405      	add	r5, r0
 800c954:	9306      	str	r3, [sp, #24]
 800c956:	9b05      	ldr	r3, [sp, #20]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	dd05      	ble.n	800c968 <_dtoa_r+0x828>
 800c95c:	4651      	mov	r1, sl
 800c95e:	461a      	mov	r2, r3
 800c960:	4620      	mov	r0, r4
 800c962:	f000 fcef 	bl	800d344 <__lshift>
 800c966:	4682      	mov	sl, r0
 800c968:	9b06      	ldr	r3, [sp, #24]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	dd05      	ble.n	800c97a <_dtoa_r+0x83a>
 800c96e:	4631      	mov	r1, r6
 800c970:	461a      	mov	r2, r3
 800c972:	4620      	mov	r0, r4
 800c974:	f000 fce6 	bl	800d344 <__lshift>
 800c978:	4606      	mov	r6, r0
 800c97a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d072      	beq.n	800ca66 <_dtoa_r+0x926>
 800c980:	4631      	mov	r1, r6
 800c982:	4650      	mov	r0, sl
 800c984:	f000 fd4a 	bl	800d41c <__mcmp>
 800c988:	2800      	cmp	r0, #0
 800c98a:	da6c      	bge.n	800ca66 <_dtoa_r+0x926>
 800c98c:	2300      	movs	r3, #0
 800c98e:	4651      	mov	r1, sl
 800c990:	220a      	movs	r2, #10
 800c992:	4620      	mov	r0, r4
 800c994:	f000 fb28 	bl	800cfe8 <__multadd>
 800c998:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c99a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c99e:	4682      	mov	sl, r0
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	f000 81b0 	beq.w	800cd06 <_dtoa_r+0xbc6>
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	4639      	mov	r1, r7
 800c9aa:	220a      	movs	r2, #10
 800c9ac:	4620      	mov	r0, r4
 800c9ae:	f000 fb1b 	bl	800cfe8 <__multadd>
 800c9b2:	9b01      	ldr	r3, [sp, #4]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	4607      	mov	r7, r0
 800c9b8:	f300 8096 	bgt.w	800cae8 <_dtoa_r+0x9a8>
 800c9bc:	9b07      	ldr	r3, [sp, #28]
 800c9be:	2b02      	cmp	r3, #2
 800c9c0:	dc59      	bgt.n	800ca76 <_dtoa_r+0x936>
 800c9c2:	e091      	b.n	800cae8 <_dtoa_r+0x9a8>
 800c9c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c9c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c9ca:	e758      	b.n	800c87e <_dtoa_r+0x73e>
 800c9cc:	9b04      	ldr	r3, [sp, #16]
 800c9ce:	1e5e      	subs	r6, r3, #1
 800c9d0:	9b08      	ldr	r3, [sp, #32]
 800c9d2:	42b3      	cmp	r3, r6
 800c9d4:	bfbf      	itttt	lt
 800c9d6:	9b08      	ldrlt	r3, [sp, #32]
 800c9d8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800c9da:	9608      	strlt	r6, [sp, #32]
 800c9dc:	1af3      	sublt	r3, r6, r3
 800c9de:	bfb4      	ite	lt
 800c9e0:	18d2      	addlt	r2, r2, r3
 800c9e2:	1b9e      	subge	r6, r3, r6
 800c9e4:	9b04      	ldr	r3, [sp, #16]
 800c9e6:	bfbc      	itt	lt
 800c9e8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800c9ea:	2600      	movlt	r6, #0
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	bfb7      	itett	lt
 800c9f0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800c9f4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800c9f8:	1a9d      	sublt	r5, r3, r2
 800c9fa:	2300      	movlt	r3, #0
 800c9fc:	e741      	b.n	800c882 <_dtoa_r+0x742>
 800c9fe:	9e08      	ldr	r6, [sp, #32]
 800ca00:	9d05      	ldr	r5, [sp, #20]
 800ca02:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ca04:	e748      	b.n	800c898 <_dtoa_r+0x758>
 800ca06:	9a08      	ldr	r2, [sp, #32]
 800ca08:	e770      	b.n	800c8ec <_dtoa_r+0x7ac>
 800ca0a:	9b07      	ldr	r3, [sp, #28]
 800ca0c:	2b01      	cmp	r3, #1
 800ca0e:	dc19      	bgt.n	800ca44 <_dtoa_r+0x904>
 800ca10:	9b02      	ldr	r3, [sp, #8]
 800ca12:	b9bb      	cbnz	r3, 800ca44 <_dtoa_r+0x904>
 800ca14:	9b03      	ldr	r3, [sp, #12]
 800ca16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ca1a:	b99b      	cbnz	r3, 800ca44 <_dtoa_r+0x904>
 800ca1c:	9b03      	ldr	r3, [sp, #12]
 800ca1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ca22:	0d1b      	lsrs	r3, r3, #20
 800ca24:	051b      	lsls	r3, r3, #20
 800ca26:	b183      	cbz	r3, 800ca4a <_dtoa_r+0x90a>
 800ca28:	9b05      	ldr	r3, [sp, #20]
 800ca2a:	3301      	adds	r3, #1
 800ca2c:	9305      	str	r3, [sp, #20]
 800ca2e:	9b06      	ldr	r3, [sp, #24]
 800ca30:	3301      	adds	r3, #1
 800ca32:	9306      	str	r3, [sp, #24]
 800ca34:	f04f 0801 	mov.w	r8, #1
 800ca38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	f47f af6f 	bne.w	800c91e <_dtoa_r+0x7de>
 800ca40:	2001      	movs	r0, #1
 800ca42:	e774      	b.n	800c92e <_dtoa_r+0x7ee>
 800ca44:	f04f 0800 	mov.w	r8, #0
 800ca48:	e7f6      	b.n	800ca38 <_dtoa_r+0x8f8>
 800ca4a:	4698      	mov	r8, r3
 800ca4c:	e7f4      	b.n	800ca38 <_dtoa_r+0x8f8>
 800ca4e:	d082      	beq.n	800c956 <_dtoa_r+0x816>
 800ca50:	9a05      	ldr	r2, [sp, #20]
 800ca52:	331c      	adds	r3, #28
 800ca54:	441a      	add	r2, r3
 800ca56:	9205      	str	r2, [sp, #20]
 800ca58:	9a06      	ldr	r2, [sp, #24]
 800ca5a:	441a      	add	r2, r3
 800ca5c:	441d      	add	r5, r3
 800ca5e:	9206      	str	r2, [sp, #24]
 800ca60:	e779      	b.n	800c956 <_dtoa_r+0x816>
 800ca62:	4603      	mov	r3, r0
 800ca64:	e7f4      	b.n	800ca50 <_dtoa_r+0x910>
 800ca66:	9b04      	ldr	r3, [sp, #16]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	dc37      	bgt.n	800cadc <_dtoa_r+0x99c>
 800ca6c:	9b07      	ldr	r3, [sp, #28]
 800ca6e:	2b02      	cmp	r3, #2
 800ca70:	dd34      	ble.n	800cadc <_dtoa_r+0x99c>
 800ca72:	9b04      	ldr	r3, [sp, #16]
 800ca74:	9301      	str	r3, [sp, #4]
 800ca76:	9b01      	ldr	r3, [sp, #4]
 800ca78:	b963      	cbnz	r3, 800ca94 <_dtoa_r+0x954>
 800ca7a:	4631      	mov	r1, r6
 800ca7c:	2205      	movs	r2, #5
 800ca7e:	4620      	mov	r0, r4
 800ca80:	f000 fab2 	bl	800cfe8 <__multadd>
 800ca84:	4601      	mov	r1, r0
 800ca86:	4606      	mov	r6, r0
 800ca88:	4650      	mov	r0, sl
 800ca8a:	f000 fcc7 	bl	800d41c <__mcmp>
 800ca8e:	2800      	cmp	r0, #0
 800ca90:	f73f adbb 	bgt.w	800c60a <_dtoa_r+0x4ca>
 800ca94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca96:	9d00      	ldr	r5, [sp, #0]
 800ca98:	ea6f 0b03 	mvn.w	fp, r3
 800ca9c:	f04f 0800 	mov.w	r8, #0
 800caa0:	4631      	mov	r1, r6
 800caa2:	4620      	mov	r0, r4
 800caa4:	f000 fa7e 	bl	800cfa4 <_Bfree>
 800caa8:	2f00      	cmp	r7, #0
 800caaa:	f43f aeab 	beq.w	800c804 <_dtoa_r+0x6c4>
 800caae:	f1b8 0f00 	cmp.w	r8, #0
 800cab2:	d005      	beq.n	800cac0 <_dtoa_r+0x980>
 800cab4:	45b8      	cmp	r8, r7
 800cab6:	d003      	beq.n	800cac0 <_dtoa_r+0x980>
 800cab8:	4641      	mov	r1, r8
 800caba:	4620      	mov	r0, r4
 800cabc:	f000 fa72 	bl	800cfa4 <_Bfree>
 800cac0:	4639      	mov	r1, r7
 800cac2:	4620      	mov	r0, r4
 800cac4:	f000 fa6e 	bl	800cfa4 <_Bfree>
 800cac8:	e69c      	b.n	800c804 <_dtoa_r+0x6c4>
 800caca:	2600      	movs	r6, #0
 800cacc:	4637      	mov	r7, r6
 800cace:	e7e1      	b.n	800ca94 <_dtoa_r+0x954>
 800cad0:	46bb      	mov	fp, r7
 800cad2:	4637      	mov	r7, r6
 800cad4:	e599      	b.n	800c60a <_dtoa_r+0x4ca>
 800cad6:	bf00      	nop
 800cad8:	40240000 	.word	0x40240000
 800cadc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cade:	2b00      	cmp	r3, #0
 800cae0:	f000 80c8 	beq.w	800cc74 <_dtoa_r+0xb34>
 800cae4:	9b04      	ldr	r3, [sp, #16]
 800cae6:	9301      	str	r3, [sp, #4]
 800cae8:	2d00      	cmp	r5, #0
 800caea:	dd05      	ble.n	800caf8 <_dtoa_r+0x9b8>
 800caec:	4639      	mov	r1, r7
 800caee:	462a      	mov	r2, r5
 800caf0:	4620      	mov	r0, r4
 800caf2:	f000 fc27 	bl	800d344 <__lshift>
 800caf6:	4607      	mov	r7, r0
 800caf8:	f1b8 0f00 	cmp.w	r8, #0
 800cafc:	d05b      	beq.n	800cbb6 <_dtoa_r+0xa76>
 800cafe:	6879      	ldr	r1, [r7, #4]
 800cb00:	4620      	mov	r0, r4
 800cb02:	f000 fa0f 	bl	800cf24 <_Balloc>
 800cb06:	4605      	mov	r5, r0
 800cb08:	b928      	cbnz	r0, 800cb16 <_dtoa_r+0x9d6>
 800cb0a:	4b83      	ldr	r3, [pc, #524]	; (800cd18 <_dtoa_r+0xbd8>)
 800cb0c:	4602      	mov	r2, r0
 800cb0e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800cb12:	f7ff bb2e 	b.w	800c172 <_dtoa_r+0x32>
 800cb16:	693a      	ldr	r2, [r7, #16]
 800cb18:	3202      	adds	r2, #2
 800cb1a:	0092      	lsls	r2, r2, #2
 800cb1c:	f107 010c 	add.w	r1, r7, #12
 800cb20:	300c      	adds	r0, #12
 800cb22:	f7ff fa76 	bl	800c012 <memcpy>
 800cb26:	2201      	movs	r2, #1
 800cb28:	4629      	mov	r1, r5
 800cb2a:	4620      	mov	r0, r4
 800cb2c:	f000 fc0a 	bl	800d344 <__lshift>
 800cb30:	9b00      	ldr	r3, [sp, #0]
 800cb32:	3301      	adds	r3, #1
 800cb34:	9304      	str	r3, [sp, #16]
 800cb36:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb3a:	4413      	add	r3, r2
 800cb3c:	9308      	str	r3, [sp, #32]
 800cb3e:	9b02      	ldr	r3, [sp, #8]
 800cb40:	f003 0301 	and.w	r3, r3, #1
 800cb44:	46b8      	mov	r8, r7
 800cb46:	9306      	str	r3, [sp, #24]
 800cb48:	4607      	mov	r7, r0
 800cb4a:	9b04      	ldr	r3, [sp, #16]
 800cb4c:	4631      	mov	r1, r6
 800cb4e:	3b01      	subs	r3, #1
 800cb50:	4650      	mov	r0, sl
 800cb52:	9301      	str	r3, [sp, #4]
 800cb54:	f7ff fa6b 	bl	800c02e <quorem>
 800cb58:	4641      	mov	r1, r8
 800cb5a:	9002      	str	r0, [sp, #8]
 800cb5c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800cb60:	4650      	mov	r0, sl
 800cb62:	f000 fc5b 	bl	800d41c <__mcmp>
 800cb66:	463a      	mov	r2, r7
 800cb68:	9005      	str	r0, [sp, #20]
 800cb6a:	4631      	mov	r1, r6
 800cb6c:	4620      	mov	r0, r4
 800cb6e:	f000 fc71 	bl	800d454 <__mdiff>
 800cb72:	68c2      	ldr	r2, [r0, #12]
 800cb74:	4605      	mov	r5, r0
 800cb76:	bb02      	cbnz	r2, 800cbba <_dtoa_r+0xa7a>
 800cb78:	4601      	mov	r1, r0
 800cb7a:	4650      	mov	r0, sl
 800cb7c:	f000 fc4e 	bl	800d41c <__mcmp>
 800cb80:	4602      	mov	r2, r0
 800cb82:	4629      	mov	r1, r5
 800cb84:	4620      	mov	r0, r4
 800cb86:	9209      	str	r2, [sp, #36]	; 0x24
 800cb88:	f000 fa0c 	bl	800cfa4 <_Bfree>
 800cb8c:	9b07      	ldr	r3, [sp, #28]
 800cb8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb90:	9d04      	ldr	r5, [sp, #16]
 800cb92:	ea43 0102 	orr.w	r1, r3, r2
 800cb96:	9b06      	ldr	r3, [sp, #24]
 800cb98:	4319      	orrs	r1, r3
 800cb9a:	d110      	bne.n	800cbbe <_dtoa_r+0xa7e>
 800cb9c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cba0:	d029      	beq.n	800cbf6 <_dtoa_r+0xab6>
 800cba2:	9b05      	ldr	r3, [sp, #20]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	dd02      	ble.n	800cbae <_dtoa_r+0xa6e>
 800cba8:	9b02      	ldr	r3, [sp, #8]
 800cbaa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800cbae:	9b01      	ldr	r3, [sp, #4]
 800cbb0:	f883 9000 	strb.w	r9, [r3]
 800cbb4:	e774      	b.n	800caa0 <_dtoa_r+0x960>
 800cbb6:	4638      	mov	r0, r7
 800cbb8:	e7ba      	b.n	800cb30 <_dtoa_r+0x9f0>
 800cbba:	2201      	movs	r2, #1
 800cbbc:	e7e1      	b.n	800cb82 <_dtoa_r+0xa42>
 800cbbe:	9b05      	ldr	r3, [sp, #20]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	db04      	blt.n	800cbce <_dtoa_r+0xa8e>
 800cbc4:	9907      	ldr	r1, [sp, #28]
 800cbc6:	430b      	orrs	r3, r1
 800cbc8:	9906      	ldr	r1, [sp, #24]
 800cbca:	430b      	orrs	r3, r1
 800cbcc:	d120      	bne.n	800cc10 <_dtoa_r+0xad0>
 800cbce:	2a00      	cmp	r2, #0
 800cbd0:	dded      	ble.n	800cbae <_dtoa_r+0xa6e>
 800cbd2:	4651      	mov	r1, sl
 800cbd4:	2201      	movs	r2, #1
 800cbd6:	4620      	mov	r0, r4
 800cbd8:	f000 fbb4 	bl	800d344 <__lshift>
 800cbdc:	4631      	mov	r1, r6
 800cbde:	4682      	mov	sl, r0
 800cbe0:	f000 fc1c 	bl	800d41c <__mcmp>
 800cbe4:	2800      	cmp	r0, #0
 800cbe6:	dc03      	bgt.n	800cbf0 <_dtoa_r+0xab0>
 800cbe8:	d1e1      	bne.n	800cbae <_dtoa_r+0xa6e>
 800cbea:	f019 0f01 	tst.w	r9, #1
 800cbee:	d0de      	beq.n	800cbae <_dtoa_r+0xa6e>
 800cbf0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cbf4:	d1d8      	bne.n	800cba8 <_dtoa_r+0xa68>
 800cbf6:	9a01      	ldr	r2, [sp, #4]
 800cbf8:	2339      	movs	r3, #57	; 0x39
 800cbfa:	7013      	strb	r3, [r2, #0]
 800cbfc:	462b      	mov	r3, r5
 800cbfe:	461d      	mov	r5, r3
 800cc00:	3b01      	subs	r3, #1
 800cc02:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cc06:	2a39      	cmp	r2, #57	; 0x39
 800cc08:	d06c      	beq.n	800cce4 <_dtoa_r+0xba4>
 800cc0a:	3201      	adds	r2, #1
 800cc0c:	701a      	strb	r2, [r3, #0]
 800cc0e:	e747      	b.n	800caa0 <_dtoa_r+0x960>
 800cc10:	2a00      	cmp	r2, #0
 800cc12:	dd07      	ble.n	800cc24 <_dtoa_r+0xae4>
 800cc14:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cc18:	d0ed      	beq.n	800cbf6 <_dtoa_r+0xab6>
 800cc1a:	9a01      	ldr	r2, [sp, #4]
 800cc1c:	f109 0301 	add.w	r3, r9, #1
 800cc20:	7013      	strb	r3, [r2, #0]
 800cc22:	e73d      	b.n	800caa0 <_dtoa_r+0x960>
 800cc24:	9b04      	ldr	r3, [sp, #16]
 800cc26:	9a08      	ldr	r2, [sp, #32]
 800cc28:	f803 9c01 	strb.w	r9, [r3, #-1]
 800cc2c:	4293      	cmp	r3, r2
 800cc2e:	d043      	beq.n	800ccb8 <_dtoa_r+0xb78>
 800cc30:	4651      	mov	r1, sl
 800cc32:	2300      	movs	r3, #0
 800cc34:	220a      	movs	r2, #10
 800cc36:	4620      	mov	r0, r4
 800cc38:	f000 f9d6 	bl	800cfe8 <__multadd>
 800cc3c:	45b8      	cmp	r8, r7
 800cc3e:	4682      	mov	sl, r0
 800cc40:	f04f 0300 	mov.w	r3, #0
 800cc44:	f04f 020a 	mov.w	r2, #10
 800cc48:	4641      	mov	r1, r8
 800cc4a:	4620      	mov	r0, r4
 800cc4c:	d107      	bne.n	800cc5e <_dtoa_r+0xb1e>
 800cc4e:	f000 f9cb 	bl	800cfe8 <__multadd>
 800cc52:	4680      	mov	r8, r0
 800cc54:	4607      	mov	r7, r0
 800cc56:	9b04      	ldr	r3, [sp, #16]
 800cc58:	3301      	adds	r3, #1
 800cc5a:	9304      	str	r3, [sp, #16]
 800cc5c:	e775      	b.n	800cb4a <_dtoa_r+0xa0a>
 800cc5e:	f000 f9c3 	bl	800cfe8 <__multadd>
 800cc62:	4639      	mov	r1, r7
 800cc64:	4680      	mov	r8, r0
 800cc66:	2300      	movs	r3, #0
 800cc68:	220a      	movs	r2, #10
 800cc6a:	4620      	mov	r0, r4
 800cc6c:	f000 f9bc 	bl	800cfe8 <__multadd>
 800cc70:	4607      	mov	r7, r0
 800cc72:	e7f0      	b.n	800cc56 <_dtoa_r+0xb16>
 800cc74:	9b04      	ldr	r3, [sp, #16]
 800cc76:	9301      	str	r3, [sp, #4]
 800cc78:	9d00      	ldr	r5, [sp, #0]
 800cc7a:	4631      	mov	r1, r6
 800cc7c:	4650      	mov	r0, sl
 800cc7e:	f7ff f9d6 	bl	800c02e <quorem>
 800cc82:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800cc86:	9b00      	ldr	r3, [sp, #0]
 800cc88:	f805 9b01 	strb.w	r9, [r5], #1
 800cc8c:	1aea      	subs	r2, r5, r3
 800cc8e:	9b01      	ldr	r3, [sp, #4]
 800cc90:	4293      	cmp	r3, r2
 800cc92:	dd07      	ble.n	800cca4 <_dtoa_r+0xb64>
 800cc94:	4651      	mov	r1, sl
 800cc96:	2300      	movs	r3, #0
 800cc98:	220a      	movs	r2, #10
 800cc9a:	4620      	mov	r0, r4
 800cc9c:	f000 f9a4 	bl	800cfe8 <__multadd>
 800cca0:	4682      	mov	sl, r0
 800cca2:	e7ea      	b.n	800cc7a <_dtoa_r+0xb3a>
 800cca4:	9b01      	ldr	r3, [sp, #4]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	bfc8      	it	gt
 800ccaa:	461d      	movgt	r5, r3
 800ccac:	9b00      	ldr	r3, [sp, #0]
 800ccae:	bfd8      	it	le
 800ccb0:	2501      	movle	r5, #1
 800ccb2:	441d      	add	r5, r3
 800ccb4:	f04f 0800 	mov.w	r8, #0
 800ccb8:	4651      	mov	r1, sl
 800ccba:	2201      	movs	r2, #1
 800ccbc:	4620      	mov	r0, r4
 800ccbe:	f000 fb41 	bl	800d344 <__lshift>
 800ccc2:	4631      	mov	r1, r6
 800ccc4:	4682      	mov	sl, r0
 800ccc6:	f000 fba9 	bl	800d41c <__mcmp>
 800ccca:	2800      	cmp	r0, #0
 800cccc:	dc96      	bgt.n	800cbfc <_dtoa_r+0xabc>
 800ccce:	d102      	bne.n	800ccd6 <_dtoa_r+0xb96>
 800ccd0:	f019 0f01 	tst.w	r9, #1
 800ccd4:	d192      	bne.n	800cbfc <_dtoa_r+0xabc>
 800ccd6:	462b      	mov	r3, r5
 800ccd8:	461d      	mov	r5, r3
 800ccda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ccde:	2a30      	cmp	r2, #48	; 0x30
 800cce0:	d0fa      	beq.n	800ccd8 <_dtoa_r+0xb98>
 800cce2:	e6dd      	b.n	800caa0 <_dtoa_r+0x960>
 800cce4:	9a00      	ldr	r2, [sp, #0]
 800cce6:	429a      	cmp	r2, r3
 800cce8:	d189      	bne.n	800cbfe <_dtoa_r+0xabe>
 800ccea:	f10b 0b01 	add.w	fp, fp, #1
 800ccee:	2331      	movs	r3, #49	; 0x31
 800ccf0:	e796      	b.n	800cc20 <_dtoa_r+0xae0>
 800ccf2:	4b0a      	ldr	r3, [pc, #40]	; (800cd1c <_dtoa_r+0xbdc>)
 800ccf4:	f7ff ba99 	b.w	800c22a <_dtoa_r+0xea>
 800ccf8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	f47f aa6d 	bne.w	800c1da <_dtoa_r+0x9a>
 800cd00:	4b07      	ldr	r3, [pc, #28]	; (800cd20 <_dtoa_r+0xbe0>)
 800cd02:	f7ff ba92 	b.w	800c22a <_dtoa_r+0xea>
 800cd06:	9b01      	ldr	r3, [sp, #4]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	dcb5      	bgt.n	800cc78 <_dtoa_r+0xb38>
 800cd0c:	9b07      	ldr	r3, [sp, #28]
 800cd0e:	2b02      	cmp	r3, #2
 800cd10:	f73f aeb1 	bgt.w	800ca76 <_dtoa_r+0x936>
 800cd14:	e7b0      	b.n	800cc78 <_dtoa_r+0xb38>
 800cd16:	bf00      	nop
 800cd18:	0800decc 	.word	0x0800decc
 800cd1c:	0800de2c 	.word	0x0800de2c
 800cd20:	0800de50 	.word	0x0800de50

0800cd24 <_free_r>:
 800cd24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cd26:	2900      	cmp	r1, #0
 800cd28:	d044      	beq.n	800cdb4 <_free_r+0x90>
 800cd2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd2e:	9001      	str	r0, [sp, #4]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	f1a1 0404 	sub.w	r4, r1, #4
 800cd36:	bfb8      	it	lt
 800cd38:	18e4      	addlt	r4, r4, r3
 800cd3a:	f000 f8e7 	bl	800cf0c <__malloc_lock>
 800cd3e:	4a1e      	ldr	r2, [pc, #120]	; (800cdb8 <_free_r+0x94>)
 800cd40:	9801      	ldr	r0, [sp, #4]
 800cd42:	6813      	ldr	r3, [r2, #0]
 800cd44:	b933      	cbnz	r3, 800cd54 <_free_r+0x30>
 800cd46:	6063      	str	r3, [r4, #4]
 800cd48:	6014      	str	r4, [r2, #0]
 800cd4a:	b003      	add	sp, #12
 800cd4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cd50:	f000 b8e2 	b.w	800cf18 <__malloc_unlock>
 800cd54:	42a3      	cmp	r3, r4
 800cd56:	d908      	bls.n	800cd6a <_free_r+0x46>
 800cd58:	6825      	ldr	r5, [r4, #0]
 800cd5a:	1961      	adds	r1, r4, r5
 800cd5c:	428b      	cmp	r3, r1
 800cd5e:	bf01      	itttt	eq
 800cd60:	6819      	ldreq	r1, [r3, #0]
 800cd62:	685b      	ldreq	r3, [r3, #4]
 800cd64:	1949      	addeq	r1, r1, r5
 800cd66:	6021      	streq	r1, [r4, #0]
 800cd68:	e7ed      	b.n	800cd46 <_free_r+0x22>
 800cd6a:	461a      	mov	r2, r3
 800cd6c:	685b      	ldr	r3, [r3, #4]
 800cd6e:	b10b      	cbz	r3, 800cd74 <_free_r+0x50>
 800cd70:	42a3      	cmp	r3, r4
 800cd72:	d9fa      	bls.n	800cd6a <_free_r+0x46>
 800cd74:	6811      	ldr	r1, [r2, #0]
 800cd76:	1855      	adds	r5, r2, r1
 800cd78:	42a5      	cmp	r5, r4
 800cd7a:	d10b      	bne.n	800cd94 <_free_r+0x70>
 800cd7c:	6824      	ldr	r4, [r4, #0]
 800cd7e:	4421      	add	r1, r4
 800cd80:	1854      	adds	r4, r2, r1
 800cd82:	42a3      	cmp	r3, r4
 800cd84:	6011      	str	r1, [r2, #0]
 800cd86:	d1e0      	bne.n	800cd4a <_free_r+0x26>
 800cd88:	681c      	ldr	r4, [r3, #0]
 800cd8a:	685b      	ldr	r3, [r3, #4]
 800cd8c:	6053      	str	r3, [r2, #4]
 800cd8e:	440c      	add	r4, r1
 800cd90:	6014      	str	r4, [r2, #0]
 800cd92:	e7da      	b.n	800cd4a <_free_r+0x26>
 800cd94:	d902      	bls.n	800cd9c <_free_r+0x78>
 800cd96:	230c      	movs	r3, #12
 800cd98:	6003      	str	r3, [r0, #0]
 800cd9a:	e7d6      	b.n	800cd4a <_free_r+0x26>
 800cd9c:	6825      	ldr	r5, [r4, #0]
 800cd9e:	1961      	adds	r1, r4, r5
 800cda0:	428b      	cmp	r3, r1
 800cda2:	bf04      	itt	eq
 800cda4:	6819      	ldreq	r1, [r3, #0]
 800cda6:	685b      	ldreq	r3, [r3, #4]
 800cda8:	6063      	str	r3, [r4, #4]
 800cdaa:	bf04      	itt	eq
 800cdac:	1949      	addeq	r1, r1, r5
 800cdae:	6021      	streq	r1, [r4, #0]
 800cdb0:	6054      	str	r4, [r2, #4]
 800cdb2:	e7ca      	b.n	800cd4a <_free_r+0x26>
 800cdb4:	b003      	add	sp, #12
 800cdb6:	bd30      	pop	{r4, r5, pc}
 800cdb8:	200052a4 	.word	0x200052a4

0800cdbc <malloc>:
 800cdbc:	4b02      	ldr	r3, [pc, #8]	; (800cdc8 <malloc+0xc>)
 800cdbe:	4601      	mov	r1, r0
 800cdc0:	6818      	ldr	r0, [r3, #0]
 800cdc2:	f000 b823 	b.w	800ce0c <_malloc_r>
 800cdc6:	bf00      	nop
 800cdc8:	20000068 	.word	0x20000068

0800cdcc <sbrk_aligned>:
 800cdcc:	b570      	push	{r4, r5, r6, lr}
 800cdce:	4e0e      	ldr	r6, [pc, #56]	; (800ce08 <sbrk_aligned+0x3c>)
 800cdd0:	460c      	mov	r4, r1
 800cdd2:	6831      	ldr	r1, [r6, #0]
 800cdd4:	4605      	mov	r5, r0
 800cdd6:	b911      	cbnz	r1, 800cdde <sbrk_aligned+0x12>
 800cdd8:	f000 fe96 	bl	800db08 <_sbrk_r>
 800cddc:	6030      	str	r0, [r6, #0]
 800cdde:	4621      	mov	r1, r4
 800cde0:	4628      	mov	r0, r5
 800cde2:	f000 fe91 	bl	800db08 <_sbrk_r>
 800cde6:	1c43      	adds	r3, r0, #1
 800cde8:	d00a      	beq.n	800ce00 <sbrk_aligned+0x34>
 800cdea:	1cc4      	adds	r4, r0, #3
 800cdec:	f024 0403 	bic.w	r4, r4, #3
 800cdf0:	42a0      	cmp	r0, r4
 800cdf2:	d007      	beq.n	800ce04 <sbrk_aligned+0x38>
 800cdf4:	1a21      	subs	r1, r4, r0
 800cdf6:	4628      	mov	r0, r5
 800cdf8:	f000 fe86 	bl	800db08 <_sbrk_r>
 800cdfc:	3001      	adds	r0, #1
 800cdfe:	d101      	bne.n	800ce04 <sbrk_aligned+0x38>
 800ce00:	f04f 34ff 	mov.w	r4, #4294967295
 800ce04:	4620      	mov	r0, r4
 800ce06:	bd70      	pop	{r4, r5, r6, pc}
 800ce08:	200052a8 	.word	0x200052a8

0800ce0c <_malloc_r>:
 800ce0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce10:	1ccd      	adds	r5, r1, #3
 800ce12:	f025 0503 	bic.w	r5, r5, #3
 800ce16:	3508      	adds	r5, #8
 800ce18:	2d0c      	cmp	r5, #12
 800ce1a:	bf38      	it	cc
 800ce1c:	250c      	movcc	r5, #12
 800ce1e:	2d00      	cmp	r5, #0
 800ce20:	4607      	mov	r7, r0
 800ce22:	db01      	blt.n	800ce28 <_malloc_r+0x1c>
 800ce24:	42a9      	cmp	r1, r5
 800ce26:	d905      	bls.n	800ce34 <_malloc_r+0x28>
 800ce28:	230c      	movs	r3, #12
 800ce2a:	603b      	str	r3, [r7, #0]
 800ce2c:	2600      	movs	r6, #0
 800ce2e:	4630      	mov	r0, r6
 800ce30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce34:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800cf08 <_malloc_r+0xfc>
 800ce38:	f000 f868 	bl	800cf0c <__malloc_lock>
 800ce3c:	f8d8 3000 	ldr.w	r3, [r8]
 800ce40:	461c      	mov	r4, r3
 800ce42:	bb5c      	cbnz	r4, 800ce9c <_malloc_r+0x90>
 800ce44:	4629      	mov	r1, r5
 800ce46:	4638      	mov	r0, r7
 800ce48:	f7ff ffc0 	bl	800cdcc <sbrk_aligned>
 800ce4c:	1c43      	adds	r3, r0, #1
 800ce4e:	4604      	mov	r4, r0
 800ce50:	d155      	bne.n	800cefe <_malloc_r+0xf2>
 800ce52:	f8d8 4000 	ldr.w	r4, [r8]
 800ce56:	4626      	mov	r6, r4
 800ce58:	2e00      	cmp	r6, #0
 800ce5a:	d145      	bne.n	800cee8 <_malloc_r+0xdc>
 800ce5c:	2c00      	cmp	r4, #0
 800ce5e:	d048      	beq.n	800cef2 <_malloc_r+0xe6>
 800ce60:	6823      	ldr	r3, [r4, #0]
 800ce62:	4631      	mov	r1, r6
 800ce64:	4638      	mov	r0, r7
 800ce66:	eb04 0903 	add.w	r9, r4, r3
 800ce6a:	f000 fe4d 	bl	800db08 <_sbrk_r>
 800ce6e:	4581      	cmp	r9, r0
 800ce70:	d13f      	bne.n	800cef2 <_malloc_r+0xe6>
 800ce72:	6821      	ldr	r1, [r4, #0]
 800ce74:	1a6d      	subs	r5, r5, r1
 800ce76:	4629      	mov	r1, r5
 800ce78:	4638      	mov	r0, r7
 800ce7a:	f7ff ffa7 	bl	800cdcc <sbrk_aligned>
 800ce7e:	3001      	adds	r0, #1
 800ce80:	d037      	beq.n	800cef2 <_malloc_r+0xe6>
 800ce82:	6823      	ldr	r3, [r4, #0]
 800ce84:	442b      	add	r3, r5
 800ce86:	6023      	str	r3, [r4, #0]
 800ce88:	f8d8 3000 	ldr.w	r3, [r8]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d038      	beq.n	800cf02 <_malloc_r+0xf6>
 800ce90:	685a      	ldr	r2, [r3, #4]
 800ce92:	42a2      	cmp	r2, r4
 800ce94:	d12b      	bne.n	800ceee <_malloc_r+0xe2>
 800ce96:	2200      	movs	r2, #0
 800ce98:	605a      	str	r2, [r3, #4]
 800ce9a:	e00f      	b.n	800cebc <_malloc_r+0xb0>
 800ce9c:	6822      	ldr	r2, [r4, #0]
 800ce9e:	1b52      	subs	r2, r2, r5
 800cea0:	d41f      	bmi.n	800cee2 <_malloc_r+0xd6>
 800cea2:	2a0b      	cmp	r2, #11
 800cea4:	d917      	bls.n	800ced6 <_malloc_r+0xca>
 800cea6:	1961      	adds	r1, r4, r5
 800cea8:	42a3      	cmp	r3, r4
 800ceaa:	6025      	str	r5, [r4, #0]
 800ceac:	bf18      	it	ne
 800ceae:	6059      	strne	r1, [r3, #4]
 800ceb0:	6863      	ldr	r3, [r4, #4]
 800ceb2:	bf08      	it	eq
 800ceb4:	f8c8 1000 	streq.w	r1, [r8]
 800ceb8:	5162      	str	r2, [r4, r5]
 800ceba:	604b      	str	r3, [r1, #4]
 800cebc:	4638      	mov	r0, r7
 800cebe:	f104 060b 	add.w	r6, r4, #11
 800cec2:	f000 f829 	bl	800cf18 <__malloc_unlock>
 800cec6:	f026 0607 	bic.w	r6, r6, #7
 800ceca:	1d23      	adds	r3, r4, #4
 800cecc:	1af2      	subs	r2, r6, r3
 800cece:	d0ae      	beq.n	800ce2e <_malloc_r+0x22>
 800ced0:	1b9b      	subs	r3, r3, r6
 800ced2:	50a3      	str	r3, [r4, r2]
 800ced4:	e7ab      	b.n	800ce2e <_malloc_r+0x22>
 800ced6:	42a3      	cmp	r3, r4
 800ced8:	6862      	ldr	r2, [r4, #4]
 800ceda:	d1dd      	bne.n	800ce98 <_malloc_r+0x8c>
 800cedc:	f8c8 2000 	str.w	r2, [r8]
 800cee0:	e7ec      	b.n	800cebc <_malloc_r+0xb0>
 800cee2:	4623      	mov	r3, r4
 800cee4:	6864      	ldr	r4, [r4, #4]
 800cee6:	e7ac      	b.n	800ce42 <_malloc_r+0x36>
 800cee8:	4634      	mov	r4, r6
 800ceea:	6876      	ldr	r6, [r6, #4]
 800ceec:	e7b4      	b.n	800ce58 <_malloc_r+0x4c>
 800ceee:	4613      	mov	r3, r2
 800cef0:	e7cc      	b.n	800ce8c <_malloc_r+0x80>
 800cef2:	230c      	movs	r3, #12
 800cef4:	603b      	str	r3, [r7, #0]
 800cef6:	4638      	mov	r0, r7
 800cef8:	f000 f80e 	bl	800cf18 <__malloc_unlock>
 800cefc:	e797      	b.n	800ce2e <_malloc_r+0x22>
 800cefe:	6025      	str	r5, [r4, #0]
 800cf00:	e7dc      	b.n	800cebc <_malloc_r+0xb0>
 800cf02:	605b      	str	r3, [r3, #4]
 800cf04:	deff      	udf	#255	; 0xff
 800cf06:	bf00      	nop
 800cf08:	200052a4 	.word	0x200052a4

0800cf0c <__malloc_lock>:
 800cf0c:	4801      	ldr	r0, [pc, #4]	; (800cf14 <__malloc_lock+0x8>)
 800cf0e:	f7ff b87e 	b.w	800c00e <__retarget_lock_acquire_recursive>
 800cf12:	bf00      	nop
 800cf14:	200052a0 	.word	0x200052a0

0800cf18 <__malloc_unlock>:
 800cf18:	4801      	ldr	r0, [pc, #4]	; (800cf20 <__malloc_unlock+0x8>)
 800cf1a:	f7ff b879 	b.w	800c010 <__retarget_lock_release_recursive>
 800cf1e:	bf00      	nop
 800cf20:	200052a0 	.word	0x200052a0

0800cf24 <_Balloc>:
 800cf24:	b570      	push	{r4, r5, r6, lr}
 800cf26:	69c6      	ldr	r6, [r0, #28]
 800cf28:	4604      	mov	r4, r0
 800cf2a:	460d      	mov	r5, r1
 800cf2c:	b976      	cbnz	r6, 800cf4c <_Balloc+0x28>
 800cf2e:	2010      	movs	r0, #16
 800cf30:	f7ff ff44 	bl	800cdbc <malloc>
 800cf34:	4602      	mov	r2, r0
 800cf36:	61e0      	str	r0, [r4, #28]
 800cf38:	b920      	cbnz	r0, 800cf44 <_Balloc+0x20>
 800cf3a:	4b18      	ldr	r3, [pc, #96]	; (800cf9c <_Balloc+0x78>)
 800cf3c:	4818      	ldr	r0, [pc, #96]	; (800cfa0 <_Balloc+0x7c>)
 800cf3e:	216b      	movs	r1, #107	; 0x6b
 800cf40:	f000 fdf2 	bl	800db28 <__assert_func>
 800cf44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cf48:	6006      	str	r6, [r0, #0]
 800cf4a:	60c6      	str	r6, [r0, #12]
 800cf4c:	69e6      	ldr	r6, [r4, #28]
 800cf4e:	68f3      	ldr	r3, [r6, #12]
 800cf50:	b183      	cbz	r3, 800cf74 <_Balloc+0x50>
 800cf52:	69e3      	ldr	r3, [r4, #28]
 800cf54:	68db      	ldr	r3, [r3, #12]
 800cf56:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cf5a:	b9b8      	cbnz	r0, 800cf8c <_Balloc+0x68>
 800cf5c:	2101      	movs	r1, #1
 800cf5e:	fa01 f605 	lsl.w	r6, r1, r5
 800cf62:	1d72      	adds	r2, r6, #5
 800cf64:	0092      	lsls	r2, r2, #2
 800cf66:	4620      	mov	r0, r4
 800cf68:	f000 fdfc 	bl	800db64 <_calloc_r>
 800cf6c:	b160      	cbz	r0, 800cf88 <_Balloc+0x64>
 800cf6e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cf72:	e00e      	b.n	800cf92 <_Balloc+0x6e>
 800cf74:	2221      	movs	r2, #33	; 0x21
 800cf76:	2104      	movs	r1, #4
 800cf78:	4620      	mov	r0, r4
 800cf7a:	f000 fdf3 	bl	800db64 <_calloc_r>
 800cf7e:	69e3      	ldr	r3, [r4, #28]
 800cf80:	60f0      	str	r0, [r6, #12]
 800cf82:	68db      	ldr	r3, [r3, #12]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d1e4      	bne.n	800cf52 <_Balloc+0x2e>
 800cf88:	2000      	movs	r0, #0
 800cf8a:	bd70      	pop	{r4, r5, r6, pc}
 800cf8c:	6802      	ldr	r2, [r0, #0]
 800cf8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cf92:	2300      	movs	r3, #0
 800cf94:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cf98:	e7f7      	b.n	800cf8a <_Balloc+0x66>
 800cf9a:	bf00      	nop
 800cf9c:	0800de5d 	.word	0x0800de5d
 800cfa0:	0800dedd 	.word	0x0800dedd

0800cfa4 <_Bfree>:
 800cfa4:	b570      	push	{r4, r5, r6, lr}
 800cfa6:	69c6      	ldr	r6, [r0, #28]
 800cfa8:	4605      	mov	r5, r0
 800cfaa:	460c      	mov	r4, r1
 800cfac:	b976      	cbnz	r6, 800cfcc <_Bfree+0x28>
 800cfae:	2010      	movs	r0, #16
 800cfb0:	f7ff ff04 	bl	800cdbc <malloc>
 800cfb4:	4602      	mov	r2, r0
 800cfb6:	61e8      	str	r0, [r5, #28]
 800cfb8:	b920      	cbnz	r0, 800cfc4 <_Bfree+0x20>
 800cfba:	4b09      	ldr	r3, [pc, #36]	; (800cfe0 <_Bfree+0x3c>)
 800cfbc:	4809      	ldr	r0, [pc, #36]	; (800cfe4 <_Bfree+0x40>)
 800cfbe:	218f      	movs	r1, #143	; 0x8f
 800cfc0:	f000 fdb2 	bl	800db28 <__assert_func>
 800cfc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cfc8:	6006      	str	r6, [r0, #0]
 800cfca:	60c6      	str	r6, [r0, #12]
 800cfcc:	b13c      	cbz	r4, 800cfde <_Bfree+0x3a>
 800cfce:	69eb      	ldr	r3, [r5, #28]
 800cfd0:	6862      	ldr	r2, [r4, #4]
 800cfd2:	68db      	ldr	r3, [r3, #12]
 800cfd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cfd8:	6021      	str	r1, [r4, #0]
 800cfda:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cfde:	bd70      	pop	{r4, r5, r6, pc}
 800cfe0:	0800de5d 	.word	0x0800de5d
 800cfe4:	0800dedd 	.word	0x0800dedd

0800cfe8 <__multadd>:
 800cfe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfec:	690d      	ldr	r5, [r1, #16]
 800cfee:	4607      	mov	r7, r0
 800cff0:	460c      	mov	r4, r1
 800cff2:	461e      	mov	r6, r3
 800cff4:	f101 0c14 	add.w	ip, r1, #20
 800cff8:	2000      	movs	r0, #0
 800cffa:	f8dc 3000 	ldr.w	r3, [ip]
 800cffe:	b299      	uxth	r1, r3
 800d000:	fb02 6101 	mla	r1, r2, r1, r6
 800d004:	0c1e      	lsrs	r6, r3, #16
 800d006:	0c0b      	lsrs	r3, r1, #16
 800d008:	fb02 3306 	mla	r3, r2, r6, r3
 800d00c:	b289      	uxth	r1, r1
 800d00e:	3001      	adds	r0, #1
 800d010:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d014:	4285      	cmp	r5, r0
 800d016:	f84c 1b04 	str.w	r1, [ip], #4
 800d01a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d01e:	dcec      	bgt.n	800cffa <__multadd+0x12>
 800d020:	b30e      	cbz	r6, 800d066 <__multadd+0x7e>
 800d022:	68a3      	ldr	r3, [r4, #8]
 800d024:	42ab      	cmp	r3, r5
 800d026:	dc19      	bgt.n	800d05c <__multadd+0x74>
 800d028:	6861      	ldr	r1, [r4, #4]
 800d02a:	4638      	mov	r0, r7
 800d02c:	3101      	adds	r1, #1
 800d02e:	f7ff ff79 	bl	800cf24 <_Balloc>
 800d032:	4680      	mov	r8, r0
 800d034:	b928      	cbnz	r0, 800d042 <__multadd+0x5a>
 800d036:	4602      	mov	r2, r0
 800d038:	4b0c      	ldr	r3, [pc, #48]	; (800d06c <__multadd+0x84>)
 800d03a:	480d      	ldr	r0, [pc, #52]	; (800d070 <__multadd+0x88>)
 800d03c:	21ba      	movs	r1, #186	; 0xba
 800d03e:	f000 fd73 	bl	800db28 <__assert_func>
 800d042:	6922      	ldr	r2, [r4, #16]
 800d044:	3202      	adds	r2, #2
 800d046:	f104 010c 	add.w	r1, r4, #12
 800d04a:	0092      	lsls	r2, r2, #2
 800d04c:	300c      	adds	r0, #12
 800d04e:	f7fe ffe0 	bl	800c012 <memcpy>
 800d052:	4621      	mov	r1, r4
 800d054:	4638      	mov	r0, r7
 800d056:	f7ff ffa5 	bl	800cfa4 <_Bfree>
 800d05a:	4644      	mov	r4, r8
 800d05c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d060:	3501      	adds	r5, #1
 800d062:	615e      	str	r6, [r3, #20]
 800d064:	6125      	str	r5, [r4, #16]
 800d066:	4620      	mov	r0, r4
 800d068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d06c:	0800decc 	.word	0x0800decc
 800d070:	0800dedd 	.word	0x0800dedd

0800d074 <__hi0bits>:
 800d074:	0c03      	lsrs	r3, r0, #16
 800d076:	041b      	lsls	r3, r3, #16
 800d078:	b9d3      	cbnz	r3, 800d0b0 <__hi0bits+0x3c>
 800d07a:	0400      	lsls	r0, r0, #16
 800d07c:	2310      	movs	r3, #16
 800d07e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d082:	bf04      	itt	eq
 800d084:	0200      	lsleq	r0, r0, #8
 800d086:	3308      	addeq	r3, #8
 800d088:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d08c:	bf04      	itt	eq
 800d08e:	0100      	lsleq	r0, r0, #4
 800d090:	3304      	addeq	r3, #4
 800d092:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d096:	bf04      	itt	eq
 800d098:	0080      	lsleq	r0, r0, #2
 800d09a:	3302      	addeq	r3, #2
 800d09c:	2800      	cmp	r0, #0
 800d09e:	db05      	blt.n	800d0ac <__hi0bits+0x38>
 800d0a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d0a4:	f103 0301 	add.w	r3, r3, #1
 800d0a8:	bf08      	it	eq
 800d0aa:	2320      	moveq	r3, #32
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	4770      	bx	lr
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	e7e4      	b.n	800d07e <__hi0bits+0xa>

0800d0b4 <__lo0bits>:
 800d0b4:	6803      	ldr	r3, [r0, #0]
 800d0b6:	f013 0207 	ands.w	r2, r3, #7
 800d0ba:	d00c      	beq.n	800d0d6 <__lo0bits+0x22>
 800d0bc:	07d9      	lsls	r1, r3, #31
 800d0be:	d422      	bmi.n	800d106 <__lo0bits+0x52>
 800d0c0:	079a      	lsls	r2, r3, #30
 800d0c2:	bf49      	itett	mi
 800d0c4:	085b      	lsrmi	r3, r3, #1
 800d0c6:	089b      	lsrpl	r3, r3, #2
 800d0c8:	6003      	strmi	r3, [r0, #0]
 800d0ca:	2201      	movmi	r2, #1
 800d0cc:	bf5c      	itt	pl
 800d0ce:	6003      	strpl	r3, [r0, #0]
 800d0d0:	2202      	movpl	r2, #2
 800d0d2:	4610      	mov	r0, r2
 800d0d4:	4770      	bx	lr
 800d0d6:	b299      	uxth	r1, r3
 800d0d8:	b909      	cbnz	r1, 800d0de <__lo0bits+0x2a>
 800d0da:	0c1b      	lsrs	r3, r3, #16
 800d0dc:	2210      	movs	r2, #16
 800d0de:	b2d9      	uxtb	r1, r3
 800d0e0:	b909      	cbnz	r1, 800d0e6 <__lo0bits+0x32>
 800d0e2:	3208      	adds	r2, #8
 800d0e4:	0a1b      	lsrs	r3, r3, #8
 800d0e6:	0719      	lsls	r1, r3, #28
 800d0e8:	bf04      	itt	eq
 800d0ea:	091b      	lsreq	r3, r3, #4
 800d0ec:	3204      	addeq	r2, #4
 800d0ee:	0799      	lsls	r1, r3, #30
 800d0f0:	bf04      	itt	eq
 800d0f2:	089b      	lsreq	r3, r3, #2
 800d0f4:	3202      	addeq	r2, #2
 800d0f6:	07d9      	lsls	r1, r3, #31
 800d0f8:	d403      	bmi.n	800d102 <__lo0bits+0x4e>
 800d0fa:	085b      	lsrs	r3, r3, #1
 800d0fc:	f102 0201 	add.w	r2, r2, #1
 800d100:	d003      	beq.n	800d10a <__lo0bits+0x56>
 800d102:	6003      	str	r3, [r0, #0]
 800d104:	e7e5      	b.n	800d0d2 <__lo0bits+0x1e>
 800d106:	2200      	movs	r2, #0
 800d108:	e7e3      	b.n	800d0d2 <__lo0bits+0x1e>
 800d10a:	2220      	movs	r2, #32
 800d10c:	e7e1      	b.n	800d0d2 <__lo0bits+0x1e>
	...

0800d110 <__i2b>:
 800d110:	b510      	push	{r4, lr}
 800d112:	460c      	mov	r4, r1
 800d114:	2101      	movs	r1, #1
 800d116:	f7ff ff05 	bl	800cf24 <_Balloc>
 800d11a:	4602      	mov	r2, r0
 800d11c:	b928      	cbnz	r0, 800d12a <__i2b+0x1a>
 800d11e:	4b05      	ldr	r3, [pc, #20]	; (800d134 <__i2b+0x24>)
 800d120:	4805      	ldr	r0, [pc, #20]	; (800d138 <__i2b+0x28>)
 800d122:	f240 1145 	movw	r1, #325	; 0x145
 800d126:	f000 fcff 	bl	800db28 <__assert_func>
 800d12a:	2301      	movs	r3, #1
 800d12c:	6144      	str	r4, [r0, #20]
 800d12e:	6103      	str	r3, [r0, #16]
 800d130:	bd10      	pop	{r4, pc}
 800d132:	bf00      	nop
 800d134:	0800decc 	.word	0x0800decc
 800d138:	0800dedd 	.word	0x0800dedd

0800d13c <__multiply>:
 800d13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d140:	4691      	mov	r9, r2
 800d142:	690a      	ldr	r2, [r1, #16]
 800d144:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d148:	429a      	cmp	r2, r3
 800d14a:	bfb8      	it	lt
 800d14c:	460b      	movlt	r3, r1
 800d14e:	460c      	mov	r4, r1
 800d150:	bfbc      	itt	lt
 800d152:	464c      	movlt	r4, r9
 800d154:	4699      	movlt	r9, r3
 800d156:	6927      	ldr	r7, [r4, #16]
 800d158:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d15c:	68a3      	ldr	r3, [r4, #8]
 800d15e:	6861      	ldr	r1, [r4, #4]
 800d160:	eb07 060a 	add.w	r6, r7, sl
 800d164:	42b3      	cmp	r3, r6
 800d166:	b085      	sub	sp, #20
 800d168:	bfb8      	it	lt
 800d16a:	3101      	addlt	r1, #1
 800d16c:	f7ff feda 	bl	800cf24 <_Balloc>
 800d170:	b930      	cbnz	r0, 800d180 <__multiply+0x44>
 800d172:	4602      	mov	r2, r0
 800d174:	4b44      	ldr	r3, [pc, #272]	; (800d288 <__multiply+0x14c>)
 800d176:	4845      	ldr	r0, [pc, #276]	; (800d28c <__multiply+0x150>)
 800d178:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d17c:	f000 fcd4 	bl	800db28 <__assert_func>
 800d180:	f100 0514 	add.w	r5, r0, #20
 800d184:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d188:	462b      	mov	r3, r5
 800d18a:	2200      	movs	r2, #0
 800d18c:	4543      	cmp	r3, r8
 800d18e:	d321      	bcc.n	800d1d4 <__multiply+0x98>
 800d190:	f104 0314 	add.w	r3, r4, #20
 800d194:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d198:	f109 0314 	add.w	r3, r9, #20
 800d19c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d1a0:	9202      	str	r2, [sp, #8]
 800d1a2:	1b3a      	subs	r2, r7, r4
 800d1a4:	3a15      	subs	r2, #21
 800d1a6:	f022 0203 	bic.w	r2, r2, #3
 800d1aa:	3204      	adds	r2, #4
 800d1ac:	f104 0115 	add.w	r1, r4, #21
 800d1b0:	428f      	cmp	r7, r1
 800d1b2:	bf38      	it	cc
 800d1b4:	2204      	movcc	r2, #4
 800d1b6:	9201      	str	r2, [sp, #4]
 800d1b8:	9a02      	ldr	r2, [sp, #8]
 800d1ba:	9303      	str	r3, [sp, #12]
 800d1bc:	429a      	cmp	r2, r3
 800d1be:	d80c      	bhi.n	800d1da <__multiply+0x9e>
 800d1c0:	2e00      	cmp	r6, #0
 800d1c2:	dd03      	ble.n	800d1cc <__multiply+0x90>
 800d1c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d05b      	beq.n	800d284 <__multiply+0x148>
 800d1cc:	6106      	str	r6, [r0, #16]
 800d1ce:	b005      	add	sp, #20
 800d1d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1d4:	f843 2b04 	str.w	r2, [r3], #4
 800d1d8:	e7d8      	b.n	800d18c <__multiply+0x50>
 800d1da:	f8b3 a000 	ldrh.w	sl, [r3]
 800d1de:	f1ba 0f00 	cmp.w	sl, #0
 800d1e2:	d024      	beq.n	800d22e <__multiply+0xf2>
 800d1e4:	f104 0e14 	add.w	lr, r4, #20
 800d1e8:	46a9      	mov	r9, r5
 800d1ea:	f04f 0c00 	mov.w	ip, #0
 800d1ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d1f2:	f8d9 1000 	ldr.w	r1, [r9]
 800d1f6:	fa1f fb82 	uxth.w	fp, r2
 800d1fa:	b289      	uxth	r1, r1
 800d1fc:	fb0a 110b 	mla	r1, sl, fp, r1
 800d200:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d204:	f8d9 2000 	ldr.w	r2, [r9]
 800d208:	4461      	add	r1, ip
 800d20a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d20e:	fb0a c20b 	mla	r2, sl, fp, ip
 800d212:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d216:	b289      	uxth	r1, r1
 800d218:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d21c:	4577      	cmp	r7, lr
 800d21e:	f849 1b04 	str.w	r1, [r9], #4
 800d222:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d226:	d8e2      	bhi.n	800d1ee <__multiply+0xb2>
 800d228:	9a01      	ldr	r2, [sp, #4]
 800d22a:	f845 c002 	str.w	ip, [r5, r2]
 800d22e:	9a03      	ldr	r2, [sp, #12]
 800d230:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d234:	3304      	adds	r3, #4
 800d236:	f1b9 0f00 	cmp.w	r9, #0
 800d23a:	d021      	beq.n	800d280 <__multiply+0x144>
 800d23c:	6829      	ldr	r1, [r5, #0]
 800d23e:	f104 0c14 	add.w	ip, r4, #20
 800d242:	46ae      	mov	lr, r5
 800d244:	f04f 0a00 	mov.w	sl, #0
 800d248:	f8bc b000 	ldrh.w	fp, [ip]
 800d24c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d250:	fb09 220b 	mla	r2, r9, fp, r2
 800d254:	4452      	add	r2, sl
 800d256:	b289      	uxth	r1, r1
 800d258:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d25c:	f84e 1b04 	str.w	r1, [lr], #4
 800d260:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d264:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d268:	f8be 1000 	ldrh.w	r1, [lr]
 800d26c:	fb09 110a 	mla	r1, r9, sl, r1
 800d270:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d274:	4567      	cmp	r7, ip
 800d276:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d27a:	d8e5      	bhi.n	800d248 <__multiply+0x10c>
 800d27c:	9a01      	ldr	r2, [sp, #4]
 800d27e:	50a9      	str	r1, [r5, r2]
 800d280:	3504      	adds	r5, #4
 800d282:	e799      	b.n	800d1b8 <__multiply+0x7c>
 800d284:	3e01      	subs	r6, #1
 800d286:	e79b      	b.n	800d1c0 <__multiply+0x84>
 800d288:	0800decc 	.word	0x0800decc
 800d28c:	0800dedd 	.word	0x0800dedd

0800d290 <__pow5mult>:
 800d290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d294:	4615      	mov	r5, r2
 800d296:	f012 0203 	ands.w	r2, r2, #3
 800d29a:	4606      	mov	r6, r0
 800d29c:	460f      	mov	r7, r1
 800d29e:	d007      	beq.n	800d2b0 <__pow5mult+0x20>
 800d2a0:	4c25      	ldr	r4, [pc, #148]	; (800d338 <__pow5mult+0xa8>)
 800d2a2:	3a01      	subs	r2, #1
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d2aa:	f7ff fe9d 	bl	800cfe8 <__multadd>
 800d2ae:	4607      	mov	r7, r0
 800d2b0:	10ad      	asrs	r5, r5, #2
 800d2b2:	d03d      	beq.n	800d330 <__pow5mult+0xa0>
 800d2b4:	69f4      	ldr	r4, [r6, #28]
 800d2b6:	b97c      	cbnz	r4, 800d2d8 <__pow5mult+0x48>
 800d2b8:	2010      	movs	r0, #16
 800d2ba:	f7ff fd7f 	bl	800cdbc <malloc>
 800d2be:	4602      	mov	r2, r0
 800d2c0:	61f0      	str	r0, [r6, #28]
 800d2c2:	b928      	cbnz	r0, 800d2d0 <__pow5mult+0x40>
 800d2c4:	4b1d      	ldr	r3, [pc, #116]	; (800d33c <__pow5mult+0xac>)
 800d2c6:	481e      	ldr	r0, [pc, #120]	; (800d340 <__pow5mult+0xb0>)
 800d2c8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d2cc:	f000 fc2c 	bl	800db28 <__assert_func>
 800d2d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d2d4:	6004      	str	r4, [r0, #0]
 800d2d6:	60c4      	str	r4, [r0, #12]
 800d2d8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d2dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d2e0:	b94c      	cbnz	r4, 800d2f6 <__pow5mult+0x66>
 800d2e2:	f240 2171 	movw	r1, #625	; 0x271
 800d2e6:	4630      	mov	r0, r6
 800d2e8:	f7ff ff12 	bl	800d110 <__i2b>
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	f8c8 0008 	str.w	r0, [r8, #8]
 800d2f2:	4604      	mov	r4, r0
 800d2f4:	6003      	str	r3, [r0, #0]
 800d2f6:	f04f 0900 	mov.w	r9, #0
 800d2fa:	07eb      	lsls	r3, r5, #31
 800d2fc:	d50a      	bpl.n	800d314 <__pow5mult+0x84>
 800d2fe:	4639      	mov	r1, r7
 800d300:	4622      	mov	r2, r4
 800d302:	4630      	mov	r0, r6
 800d304:	f7ff ff1a 	bl	800d13c <__multiply>
 800d308:	4639      	mov	r1, r7
 800d30a:	4680      	mov	r8, r0
 800d30c:	4630      	mov	r0, r6
 800d30e:	f7ff fe49 	bl	800cfa4 <_Bfree>
 800d312:	4647      	mov	r7, r8
 800d314:	106d      	asrs	r5, r5, #1
 800d316:	d00b      	beq.n	800d330 <__pow5mult+0xa0>
 800d318:	6820      	ldr	r0, [r4, #0]
 800d31a:	b938      	cbnz	r0, 800d32c <__pow5mult+0x9c>
 800d31c:	4622      	mov	r2, r4
 800d31e:	4621      	mov	r1, r4
 800d320:	4630      	mov	r0, r6
 800d322:	f7ff ff0b 	bl	800d13c <__multiply>
 800d326:	6020      	str	r0, [r4, #0]
 800d328:	f8c0 9000 	str.w	r9, [r0]
 800d32c:	4604      	mov	r4, r0
 800d32e:	e7e4      	b.n	800d2fa <__pow5mult+0x6a>
 800d330:	4638      	mov	r0, r7
 800d332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d336:	bf00      	nop
 800d338:	0800e028 	.word	0x0800e028
 800d33c:	0800de5d 	.word	0x0800de5d
 800d340:	0800dedd 	.word	0x0800dedd

0800d344 <__lshift>:
 800d344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d348:	460c      	mov	r4, r1
 800d34a:	6849      	ldr	r1, [r1, #4]
 800d34c:	6923      	ldr	r3, [r4, #16]
 800d34e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d352:	68a3      	ldr	r3, [r4, #8]
 800d354:	4607      	mov	r7, r0
 800d356:	4691      	mov	r9, r2
 800d358:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d35c:	f108 0601 	add.w	r6, r8, #1
 800d360:	42b3      	cmp	r3, r6
 800d362:	db0b      	blt.n	800d37c <__lshift+0x38>
 800d364:	4638      	mov	r0, r7
 800d366:	f7ff fddd 	bl	800cf24 <_Balloc>
 800d36a:	4605      	mov	r5, r0
 800d36c:	b948      	cbnz	r0, 800d382 <__lshift+0x3e>
 800d36e:	4602      	mov	r2, r0
 800d370:	4b28      	ldr	r3, [pc, #160]	; (800d414 <__lshift+0xd0>)
 800d372:	4829      	ldr	r0, [pc, #164]	; (800d418 <__lshift+0xd4>)
 800d374:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800d378:	f000 fbd6 	bl	800db28 <__assert_func>
 800d37c:	3101      	adds	r1, #1
 800d37e:	005b      	lsls	r3, r3, #1
 800d380:	e7ee      	b.n	800d360 <__lshift+0x1c>
 800d382:	2300      	movs	r3, #0
 800d384:	f100 0114 	add.w	r1, r0, #20
 800d388:	f100 0210 	add.w	r2, r0, #16
 800d38c:	4618      	mov	r0, r3
 800d38e:	4553      	cmp	r3, sl
 800d390:	db33      	blt.n	800d3fa <__lshift+0xb6>
 800d392:	6920      	ldr	r0, [r4, #16]
 800d394:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d398:	f104 0314 	add.w	r3, r4, #20
 800d39c:	f019 091f 	ands.w	r9, r9, #31
 800d3a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d3a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d3a8:	d02b      	beq.n	800d402 <__lshift+0xbe>
 800d3aa:	f1c9 0e20 	rsb	lr, r9, #32
 800d3ae:	468a      	mov	sl, r1
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	6818      	ldr	r0, [r3, #0]
 800d3b4:	fa00 f009 	lsl.w	r0, r0, r9
 800d3b8:	4310      	orrs	r0, r2
 800d3ba:	f84a 0b04 	str.w	r0, [sl], #4
 800d3be:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3c2:	459c      	cmp	ip, r3
 800d3c4:	fa22 f20e 	lsr.w	r2, r2, lr
 800d3c8:	d8f3      	bhi.n	800d3b2 <__lshift+0x6e>
 800d3ca:	ebac 0304 	sub.w	r3, ip, r4
 800d3ce:	3b15      	subs	r3, #21
 800d3d0:	f023 0303 	bic.w	r3, r3, #3
 800d3d4:	3304      	adds	r3, #4
 800d3d6:	f104 0015 	add.w	r0, r4, #21
 800d3da:	4584      	cmp	ip, r0
 800d3dc:	bf38      	it	cc
 800d3de:	2304      	movcc	r3, #4
 800d3e0:	50ca      	str	r2, [r1, r3]
 800d3e2:	b10a      	cbz	r2, 800d3e8 <__lshift+0xa4>
 800d3e4:	f108 0602 	add.w	r6, r8, #2
 800d3e8:	3e01      	subs	r6, #1
 800d3ea:	4638      	mov	r0, r7
 800d3ec:	612e      	str	r6, [r5, #16]
 800d3ee:	4621      	mov	r1, r4
 800d3f0:	f7ff fdd8 	bl	800cfa4 <_Bfree>
 800d3f4:	4628      	mov	r0, r5
 800d3f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3fa:	f842 0f04 	str.w	r0, [r2, #4]!
 800d3fe:	3301      	adds	r3, #1
 800d400:	e7c5      	b.n	800d38e <__lshift+0x4a>
 800d402:	3904      	subs	r1, #4
 800d404:	f853 2b04 	ldr.w	r2, [r3], #4
 800d408:	f841 2f04 	str.w	r2, [r1, #4]!
 800d40c:	459c      	cmp	ip, r3
 800d40e:	d8f9      	bhi.n	800d404 <__lshift+0xc0>
 800d410:	e7ea      	b.n	800d3e8 <__lshift+0xa4>
 800d412:	bf00      	nop
 800d414:	0800decc 	.word	0x0800decc
 800d418:	0800dedd 	.word	0x0800dedd

0800d41c <__mcmp>:
 800d41c:	b530      	push	{r4, r5, lr}
 800d41e:	6902      	ldr	r2, [r0, #16]
 800d420:	690c      	ldr	r4, [r1, #16]
 800d422:	1b12      	subs	r2, r2, r4
 800d424:	d10e      	bne.n	800d444 <__mcmp+0x28>
 800d426:	f100 0314 	add.w	r3, r0, #20
 800d42a:	3114      	adds	r1, #20
 800d42c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d430:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d434:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d438:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d43c:	42a5      	cmp	r5, r4
 800d43e:	d003      	beq.n	800d448 <__mcmp+0x2c>
 800d440:	d305      	bcc.n	800d44e <__mcmp+0x32>
 800d442:	2201      	movs	r2, #1
 800d444:	4610      	mov	r0, r2
 800d446:	bd30      	pop	{r4, r5, pc}
 800d448:	4283      	cmp	r3, r0
 800d44a:	d3f3      	bcc.n	800d434 <__mcmp+0x18>
 800d44c:	e7fa      	b.n	800d444 <__mcmp+0x28>
 800d44e:	f04f 32ff 	mov.w	r2, #4294967295
 800d452:	e7f7      	b.n	800d444 <__mcmp+0x28>

0800d454 <__mdiff>:
 800d454:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d458:	460c      	mov	r4, r1
 800d45a:	4606      	mov	r6, r0
 800d45c:	4611      	mov	r1, r2
 800d45e:	4620      	mov	r0, r4
 800d460:	4690      	mov	r8, r2
 800d462:	f7ff ffdb 	bl	800d41c <__mcmp>
 800d466:	1e05      	subs	r5, r0, #0
 800d468:	d110      	bne.n	800d48c <__mdiff+0x38>
 800d46a:	4629      	mov	r1, r5
 800d46c:	4630      	mov	r0, r6
 800d46e:	f7ff fd59 	bl	800cf24 <_Balloc>
 800d472:	b930      	cbnz	r0, 800d482 <__mdiff+0x2e>
 800d474:	4b3a      	ldr	r3, [pc, #232]	; (800d560 <__mdiff+0x10c>)
 800d476:	4602      	mov	r2, r0
 800d478:	f240 2137 	movw	r1, #567	; 0x237
 800d47c:	4839      	ldr	r0, [pc, #228]	; (800d564 <__mdiff+0x110>)
 800d47e:	f000 fb53 	bl	800db28 <__assert_func>
 800d482:	2301      	movs	r3, #1
 800d484:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d488:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d48c:	bfa4      	itt	ge
 800d48e:	4643      	movge	r3, r8
 800d490:	46a0      	movge	r8, r4
 800d492:	4630      	mov	r0, r6
 800d494:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d498:	bfa6      	itte	ge
 800d49a:	461c      	movge	r4, r3
 800d49c:	2500      	movge	r5, #0
 800d49e:	2501      	movlt	r5, #1
 800d4a0:	f7ff fd40 	bl	800cf24 <_Balloc>
 800d4a4:	b920      	cbnz	r0, 800d4b0 <__mdiff+0x5c>
 800d4a6:	4b2e      	ldr	r3, [pc, #184]	; (800d560 <__mdiff+0x10c>)
 800d4a8:	4602      	mov	r2, r0
 800d4aa:	f240 2145 	movw	r1, #581	; 0x245
 800d4ae:	e7e5      	b.n	800d47c <__mdiff+0x28>
 800d4b0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d4b4:	6926      	ldr	r6, [r4, #16]
 800d4b6:	60c5      	str	r5, [r0, #12]
 800d4b8:	f104 0914 	add.w	r9, r4, #20
 800d4bc:	f108 0514 	add.w	r5, r8, #20
 800d4c0:	f100 0e14 	add.w	lr, r0, #20
 800d4c4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d4c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d4cc:	f108 0210 	add.w	r2, r8, #16
 800d4d0:	46f2      	mov	sl, lr
 800d4d2:	2100      	movs	r1, #0
 800d4d4:	f859 3b04 	ldr.w	r3, [r9], #4
 800d4d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d4dc:	fa11 f88b 	uxtah	r8, r1, fp
 800d4e0:	b299      	uxth	r1, r3
 800d4e2:	0c1b      	lsrs	r3, r3, #16
 800d4e4:	eba8 0801 	sub.w	r8, r8, r1
 800d4e8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d4ec:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d4f0:	fa1f f888 	uxth.w	r8, r8
 800d4f4:	1419      	asrs	r1, r3, #16
 800d4f6:	454e      	cmp	r6, r9
 800d4f8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d4fc:	f84a 3b04 	str.w	r3, [sl], #4
 800d500:	d8e8      	bhi.n	800d4d4 <__mdiff+0x80>
 800d502:	1b33      	subs	r3, r6, r4
 800d504:	3b15      	subs	r3, #21
 800d506:	f023 0303 	bic.w	r3, r3, #3
 800d50a:	3304      	adds	r3, #4
 800d50c:	3415      	adds	r4, #21
 800d50e:	42a6      	cmp	r6, r4
 800d510:	bf38      	it	cc
 800d512:	2304      	movcc	r3, #4
 800d514:	441d      	add	r5, r3
 800d516:	4473      	add	r3, lr
 800d518:	469e      	mov	lr, r3
 800d51a:	462e      	mov	r6, r5
 800d51c:	4566      	cmp	r6, ip
 800d51e:	d30e      	bcc.n	800d53e <__mdiff+0xea>
 800d520:	f10c 0203 	add.w	r2, ip, #3
 800d524:	1b52      	subs	r2, r2, r5
 800d526:	f022 0203 	bic.w	r2, r2, #3
 800d52a:	3d03      	subs	r5, #3
 800d52c:	45ac      	cmp	ip, r5
 800d52e:	bf38      	it	cc
 800d530:	2200      	movcc	r2, #0
 800d532:	4413      	add	r3, r2
 800d534:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d538:	b17a      	cbz	r2, 800d55a <__mdiff+0x106>
 800d53a:	6107      	str	r7, [r0, #16]
 800d53c:	e7a4      	b.n	800d488 <__mdiff+0x34>
 800d53e:	f856 8b04 	ldr.w	r8, [r6], #4
 800d542:	fa11 f288 	uxtah	r2, r1, r8
 800d546:	1414      	asrs	r4, r2, #16
 800d548:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d54c:	b292      	uxth	r2, r2
 800d54e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d552:	f84e 2b04 	str.w	r2, [lr], #4
 800d556:	1421      	asrs	r1, r4, #16
 800d558:	e7e0      	b.n	800d51c <__mdiff+0xc8>
 800d55a:	3f01      	subs	r7, #1
 800d55c:	e7ea      	b.n	800d534 <__mdiff+0xe0>
 800d55e:	bf00      	nop
 800d560:	0800decc 	.word	0x0800decc
 800d564:	0800dedd 	.word	0x0800dedd

0800d568 <__d2b>:
 800d568:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d56c:	460f      	mov	r7, r1
 800d56e:	2101      	movs	r1, #1
 800d570:	ec59 8b10 	vmov	r8, r9, d0
 800d574:	4616      	mov	r6, r2
 800d576:	f7ff fcd5 	bl	800cf24 <_Balloc>
 800d57a:	4604      	mov	r4, r0
 800d57c:	b930      	cbnz	r0, 800d58c <__d2b+0x24>
 800d57e:	4602      	mov	r2, r0
 800d580:	4b24      	ldr	r3, [pc, #144]	; (800d614 <__d2b+0xac>)
 800d582:	4825      	ldr	r0, [pc, #148]	; (800d618 <__d2b+0xb0>)
 800d584:	f240 310f 	movw	r1, #783	; 0x30f
 800d588:	f000 face 	bl	800db28 <__assert_func>
 800d58c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d590:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d594:	bb2d      	cbnz	r5, 800d5e2 <__d2b+0x7a>
 800d596:	9301      	str	r3, [sp, #4]
 800d598:	f1b8 0300 	subs.w	r3, r8, #0
 800d59c:	d026      	beq.n	800d5ec <__d2b+0x84>
 800d59e:	4668      	mov	r0, sp
 800d5a0:	9300      	str	r3, [sp, #0]
 800d5a2:	f7ff fd87 	bl	800d0b4 <__lo0bits>
 800d5a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d5aa:	b1e8      	cbz	r0, 800d5e8 <__d2b+0x80>
 800d5ac:	f1c0 0320 	rsb	r3, r0, #32
 800d5b0:	fa02 f303 	lsl.w	r3, r2, r3
 800d5b4:	430b      	orrs	r3, r1
 800d5b6:	40c2      	lsrs	r2, r0
 800d5b8:	6163      	str	r3, [r4, #20]
 800d5ba:	9201      	str	r2, [sp, #4]
 800d5bc:	9b01      	ldr	r3, [sp, #4]
 800d5be:	61a3      	str	r3, [r4, #24]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	bf14      	ite	ne
 800d5c4:	2202      	movne	r2, #2
 800d5c6:	2201      	moveq	r2, #1
 800d5c8:	6122      	str	r2, [r4, #16]
 800d5ca:	b1bd      	cbz	r5, 800d5fc <__d2b+0x94>
 800d5cc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d5d0:	4405      	add	r5, r0
 800d5d2:	603d      	str	r5, [r7, #0]
 800d5d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d5d8:	6030      	str	r0, [r6, #0]
 800d5da:	4620      	mov	r0, r4
 800d5dc:	b003      	add	sp, #12
 800d5de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d5e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d5e6:	e7d6      	b.n	800d596 <__d2b+0x2e>
 800d5e8:	6161      	str	r1, [r4, #20]
 800d5ea:	e7e7      	b.n	800d5bc <__d2b+0x54>
 800d5ec:	a801      	add	r0, sp, #4
 800d5ee:	f7ff fd61 	bl	800d0b4 <__lo0bits>
 800d5f2:	9b01      	ldr	r3, [sp, #4]
 800d5f4:	6163      	str	r3, [r4, #20]
 800d5f6:	3020      	adds	r0, #32
 800d5f8:	2201      	movs	r2, #1
 800d5fa:	e7e5      	b.n	800d5c8 <__d2b+0x60>
 800d5fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d600:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d604:	6038      	str	r0, [r7, #0]
 800d606:	6918      	ldr	r0, [r3, #16]
 800d608:	f7ff fd34 	bl	800d074 <__hi0bits>
 800d60c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d610:	e7e2      	b.n	800d5d8 <__d2b+0x70>
 800d612:	bf00      	nop
 800d614:	0800decc 	.word	0x0800decc
 800d618:	0800dedd 	.word	0x0800dedd

0800d61c <__sfputc_r>:
 800d61c:	6893      	ldr	r3, [r2, #8]
 800d61e:	3b01      	subs	r3, #1
 800d620:	2b00      	cmp	r3, #0
 800d622:	b410      	push	{r4}
 800d624:	6093      	str	r3, [r2, #8]
 800d626:	da08      	bge.n	800d63a <__sfputc_r+0x1e>
 800d628:	6994      	ldr	r4, [r2, #24]
 800d62a:	42a3      	cmp	r3, r4
 800d62c:	db01      	blt.n	800d632 <__sfputc_r+0x16>
 800d62e:	290a      	cmp	r1, #10
 800d630:	d103      	bne.n	800d63a <__sfputc_r+0x1e>
 800d632:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d636:	f7fe bb82 	b.w	800bd3e <__swbuf_r>
 800d63a:	6813      	ldr	r3, [r2, #0]
 800d63c:	1c58      	adds	r0, r3, #1
 800d63e:	6010      	str	r0, [r2, #0]
 800d640:	7019      	strb	r1, [r3, #0]
 800d642:	4608      	mov	r0, r1
 800d644:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d648:	4770      	bx	lr

0800d64a <__sfputs_r>:
 800d64a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d64c:	4606      	mov	r6, r0
 800d64e:	460f      	mov	r7, r1
 800d650:	4614      	mov	r4, r2
 800d652:	18d5      	adds	r5, r2, r3
 800d654:	42ac      	cmp	r4, r5
 800d656:	d101      	bne.n	800d65c <__sfputs_r+0x12>
 800d658:	2000      	movs	r0, #0
 800d65a:	e007      	b.n	800d66c <__sfputs_r+0x22>
 800d65c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d660:	463a      	mov	r2, r7
 800d662:	4630      	mov	r0, r6
 800d664:	f7ff ffda 	bl	800d61c <__sfputc_r>
 800d668:	1c43      	adds	r3, r0, #1
 800d66a:	d1f3      	bne.n	800d654 <__sfputs_r+0xa>
 800d66c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d670 <_vfiprintf_r>:
 800d670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d674:	460d      	mov	r5, r1
 800d676:	b09d      	sub	sp, #116	; 0x74
 800d678:	4614      	mov	r4, r2
 800d67a:	4698      	mov	r8, r3
 800d67c:	4606      	mov	r6, r0
 800d67e:	b118      	cbz	r0, 800d688 <_vfiprintf_r+0x18>
 800d680:	6a03      	ldr	r3, [r0, #32]
 800d682:	b90b      	cbnz	r3, 800d688 <_vfiprintf_r+0x18>
 800d684:	f7fe fa74 	bl	800bb70 <__sinit>
 800d688:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d68a:	07d9      	lsls	r1, r3, #31
 800d68c:	d405      	bmi.n	800d69a <_vfiprintf_r+0x2a>
 800d68e:	89ab      	ldrh	r3, [r5, #12]
 800d690:	059a      	lsls	r2, r3, #22
 800d692:	d402      	bmi.n	800d69a <_vfiprintf_r+0x2a>
 800d694:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d696:	f7fe fcba 	bl	800c00e <__retarget_lock_acquire_recursive>
 800d69a:	89ab      	ldrh	r3, [r5, #12]
 800d69c:	071b      	lsls	r3, r3, #28
 800d69e:	d501      	bpl.n	800d6a4 <_vfiprintf_r+0x34>
 800d6a0:	692b      	ldr	r3, [r5, #16]
 800d6a2:	b99b      	cbnz	r3, 800d6cc <_vfiprintf_r+0x5c>
 800d6a4:	4629      	mov	r1, r5
 800d6a6:	4630      	mov	r0, r6
 800d6a8:	f7fe fb86 	bl	800bdb8 <__swsetup_r>
 800d6ac:	b170      	cbz	r0, 800d6cc <_vfiprintf_r+0x5c>
 800d6ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d6b0:	07dc      	lsls	r4, r3, #31
 800d6b2:	d504      	bpl.n	800d6be <_vfiprintf_r+0x4e>
 800d6b4:	f04f 30ff 	mov.w	r0, #4294967295
 800d6b8:	b01d      	add	sp, #116	; 0x74
 800d6ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6be:	89ab      	ldrh	r3, [r5, #12]
 800d6c0:	0598      	lsls	r0, r3, #22
 800d6c2:	d4f7      	bmi.n	800d6b4 <_vfiprintf_r+0x44>
 800d6c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d6c6:	f7fe fca3 	bl	800c010 <__retarget_lock_release_recursive>
 800d6ca:	e7f3      	b.n	800d6b4 <_vfiprintf_r+0x44>
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	9309      	str	r3, [sp, #36]	; 0x24
 800d6d0:	2320      	movs	r3, #32
 800d6d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d6d6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d6da:	2330      	movs	r3, #48	; 0x30
 800d6dc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d890 <_vfiprintf_r+0x220>
 800d6e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d6e4:	f04f 0901 	mov.w	r9, #1
 800d6e8:	4623      	mov	r3, r4
 800d6ea:	469a      	mov	sl, r3
 800d6ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d6f0:	b10a      	cbz	r2, 800d6f6 <_vfiprintf_r+0x86>
 800d6f2:	2a25      	cmp	r2, #37	; 0x25
 800d6f4:	d1f9      	bne.n	800d6ea <_vfiprintf_r+0x7a>
 800d6f6:	ebba 0b04 	subs.w	fp, sl, r4
 800d6fa:	d00b      	beq.n	800d714 <_vfiprintf_r+0xa4>
 800d6fc:	465b      	mov	r3, fp
 800d6fe:	4622      	mov	r2, r4
 800d700:	4629      	mov	r1, r5
 800d702:	4630      	mov	r0, r6
 800d704:	f7ff ffa1 	bl	800d64a <__sfputs_r>
 800d708:	3001      	adds	r0, #1
 800d70a:	f000 80a9 	beq.w	800d860 <_vfiprintf_r+0x1f0>
 800d70e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d710:	445a      	add	r2, fp
 800d712:	9209      	str	r2, [sp, #36]	; 0x24
 800d714:	f89a 3000 	ldrb.w	r3, [sl]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	f000 80a1 	beq.w	800d860 <_vfiprintf_r+0x1f0>
 800d71e:	2300      	movs	r3, #0
 800d720:	f04f 32ff 	mov.w	r2, #4294967295
 800d724:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d728:	f10a 0a01 	add.w	sl, sl, #1
 800d72c:	9304      	str	r3, [sp, #16]
 800d72e:	9307      	str	r3, [sp, #28]
 800d730:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d734:	931a      	str	r3, [sp, #104]	; 0x68
 800d736:	4654      	mov	r4, sl
 800d738:	2205      	movs	r2, #5
 800d73a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d73e:	4854      	ldr	r0, [pc, #336]	; (800d890 <_vfiprintf_r+0x220>)
 800d740:	f7f2 fd4e 	bl	80001e0 <memchr>
 800d744:	9a04      	ldr	r2, [sp, #16]
 800d746:	b9d8      	cbnz	r0, 800d780 <_vfiprintf_r+0x110>
 800d748:	06d1      	lsls	r1, r2, #27
 800d74a:	bf44      	itt	mi
 800d74c:	2320      	movmi	r3, #32
 800d74e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d752:	0713      	lsls	r3, r2, #28
 800d754:	bf44      	itt	mi
 800d756:	232b      	movmi	r3, #43	; 0x2b
 800d758:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d75c:	f89a 3000 	ldrb.w	r3, [sl]
 800d760:	2b2a      	cmp	r3, #42	; 0x2a
 800d762:	d015      	beq.n	800d790 <_vfiprintf_r+0x120>
 800d764:	9a07      	ldr	r2, [sp, #28]
 800d766:	4654      	mov	r4, sl
 800d768:	2000      	movs	r0, #0
 800d76a:	f04f 0c0a 	mov.w	ip, #10
 800d76e:	4621      	mov	r1, r4
 800d770:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d774:	3b30      	subs	r3, #48	; 0x30
 800d776:	2b09      	cmp	r3, #9
 800d778:	d94d      	bls.n	800d816 <_vfiprintf_r+0x1a6>
 800d77a:	b1b0      	cbz	r0, 800d7aa <_vfiprintf_r+0x13a>
 800d77c:	9207      	str	r2, [sp, #28]
 800d77e:	e014      	b.n	800d7aa <_vfiprintf_r+0x13a>
 800d780:	eba0 0308 	sub.w	r3, r0, r8
 800d784:	fa09 f303 	lsl.w	r3, r9, r3
 800d788:	4313      	orrs	r3, r2
 800d78a:	9304      	str	r3, [sp, #16]
 800d78c:	46a2      	mov	sl, r4
 800d78e:	e7d2      	b.n	800d736 <_vfiprintf_r+0xc6>
 800d790:	9b03      	ldr	r3, [sp, #12]
 800d792:	1d19      	adds	r1, r3, #4
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	9103      	str	r1, [sp, #12]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	bfbb      	ittet	lt
 800d79c:	425b      	neglt	r3, r3
 800d79e:	f042 0202 	orrlt.w	r2, r2, #2
 800d7a2:	9307      	strge	r3, [sp, #28]
 800d7a4:	9307      	strlt	r3, [sp, #28]
 800d7a6:	bfb8      	it	lt
 800d7a8:	9204      	strlt	r2, [sp, #16]
 800d7aa:	7823      	ldrb	r3, [r4, #0]
 800d7ac:	2b2e      	cmp	r3, #46	; 0x2e
 800d7ae:	d10c      	bne.n	800d7ca <_vfiprintf_r+0x15a>
 800d7b0:	7863      	ldrb	r3, [r4, #1]
 800d7b2:	2b2a      	cmp	r3, #42	; 0x2a
 800d7b4:	d134      	bne.n	800d820 <_vfiprintf_r+0x1b0>
 800d7b6:	9b03      	ldr	r3, [sp, #12]
 800d7b8:	1d1a      	adds	r2, r3, #4
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	9203      	str	r2, [sp, #12]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	bfb8      	it	lt
 800d7c2:	f04f 33ff 	movlt.w	r3, #4294967295
 800d7c6:	3402      	adds	r4, #2
 800d7c8:	9305      	str	r3, [sp, #20]
 800d7ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d8a0 <_vfiprintf_r+0x230>
 800d7ce:	7821      	ldrb	r1, [r4, #0]
 800d7d0:	2203      	movs	r2, #3
 800d7d2:	4650      	mov	r0, sl
 800d7d4:	f7f2 fd04 	bl	80001e0 <memchr>
 800d7d8:	b138      	cbz	r0, 800d7ea <_vfiprintf_r+0x17a>
 800d7da:	9b04      	ldr	r3, [sp, #16]
 800d7dc:	eba0 000a 	sub.w	r0, r0, sl
 800d7e0:	2240      	movs	r2, #64	; 0x40
 800d7e2:	4082      	lsls	r2, r0
 800d7e4:	4313      	orrs	r3, r2
 800d7e6:	3401      	adds	r4, #1
 800d7e8:	9304      	str	r3, [sp, #16]
 800d7ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7ee:	4829      	ldr	r0, [pc, #164]	; (800d894 <_vfiprintf_r+0x224>)
 800d7f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d7f4:	2206      	movs	r2, #6
 800d7f6:	f7f2 fcf3 	bl	80001e0 <memchr>
 800d7fa:	2800      	cmp	r0, #0
 800d7fc:	d03f      	beq.n	800d87e <_vfiprintf_r+0x20e>
 800d7fe:	4b26      	ldr	r3, [pc, #152]	; (800d898 <_vfiprintf_r+0x228>)
 800d800:	bb1b      	cbnz	r3, 800d84a <_vfiprintf_r+0x1da>
 800d802:	9b03      	ldr	r3, [sp, #12]
 800d804:	3307      	adds	r3, #7
 800d806:	f023 0307 	bic.w	r3, r3, #7
 800d80a:	3308      	adds	r3, #8
 800d80c:	9303      	str	r3, [sp, #12]
 800d80e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d810:	443b      	add	r3, r7
 800d812:	9309      	str	r3, [sp, #36]	; 0x24
 800d814:	e768      	b.n	800d6e8 <_vfiprintf_r+0x78>
 800d816:	fb0c 3202 	mla	r2, ip, r2, r3
 800d81a:	460c      	mov	r4, r1
 800d81c:	2001      	movs	r0, #1
 800d81e:	e7a6      	b.n	800d76e <_vfiprintf_r+0xfe>
 800d820:	2300      	movs	r3, #0
 800d822:	3401      	adds	r4, #1
 800d824:	9305      	str	r3, [sp, #20]
 800d826:	4619      	mov	r1, r3
 800d828:	f04f 0c0a 	mov.w	ip, #10
 800d82c:	4620      	mov	r0, r4
 800d82e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d832:	3a30      	subs	r2, #48	; 0x30
 800d834:	2a09      	cmp	r2, #9
 800d836:	d903      	bls.n	800d840 <_vfiprintf_r+0x1d0>
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d0c6      	beq.n	800d7ca <_vfiprintf_r+0x15a>
 800d83c:	9105      	str	r1, [sp, #20]
 800d83e:	e7c4      	b.n	800d7ca <_vfiprintf_r+0x15a>
 800d840:	fb0c 2101 	mla	r1, ip, r1, r2
 800d844:	4604      	mov	r4, r0
 800d846:	2301      	movs	r3, #1
 800d848:	e7f0      	b.n	800d82c <_vfiprintf_r+0x1bc>
 800d84a:	ab03      	add	r3, sp, #12
 800d84c:	9300      	str	r3, [sp, #0]
 800d84e:	462a      	mov	r2, r5
 800d850:	4b12      	ldr	r3, [pc, #72]	; (800d89c <_vfiprintf_r+0x22c>)
 800d852:	a904      	add	r1, sp, #16
 800d854:	4630      	mov	r0, r6
 800d856:	f7fd fd39 	bl	800b2cc <_printf_float>
 800d85a:	4607      	mov	r7, r0
 800d85c:	1c78      	adds	r0, r7, #1
 800d85e:	d1d6      	bne.n	800d80e <_vfiprintf_r+0x19e>
 800d860:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d862:	07d9      	lsls	r1, r3, #31
 800d864:	d405      	bmi.n	800d872 <_vfiprintf_r+0x202>
 800d866:	89ab      	ldrh	r3, [r5, #12]
 800d868:	059a      	lsls	r2, r3, #22
 800d86a:	d402      	bmi.n	800d872 <_vfiprintf_r+0x202>
 800d86c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d86e:	f7fe fbcf 	bl	800c010 <__retarget_lock_release_recursive>
 800d872:	89ab      	ldrh	r3, [r5, #12]
 800d874:	065b      	lsls	r3, r3, #25
 800d876:	f53f af1d 	bmi.w	800d6b4 <_vfiprintf_r+0x44>
 800d87a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d87c:	e71c      	b.n	800d6b8 <_vfiprintf_r+0x48>
 800d87e:	ab03      	add	r3, sp, #12
 800d880:	9300      	str	r3, [sp, #0]
 800d882:	462a      	mov	r2, r5
 800d884:	4b05      	ldr	r3, [pc, #20]	; (800d89c <_vfiprintf_r+0x22c>)
 800d886:	a904      	add	r1, sp, #16
 800d888:	4630      	mov	r0, r6
 800d88a:	f7fd ffc3 	bl	800b814 <_printf_i>
 800d88e:	e7e4      	b.n	800d85a <_vfiprintf_r+0x1ea>
 800d890:	0800e034 	.word	0x0800e034
 800d894:	0800e03e 	.word	0x0800e03e
 800d898:	0800b2cd 	.word	0x0800b2cd
 800d89c:	0800d64b 	.word	0x0800d64b
 800d8a0:	0800e03a 	.word	0x0800e03a

0800d8a4 <__sflush_r>:
 800d8a4:	898a      	ldrh	r2, [r1, #12]
 800d8a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8aa:	4605      	mov	r5, r0
 800d8ac:	0710      	lsls	r0, r2, #28
 800d8ae:	460c      	mov	r4, r1
 800d8b0:	d458      	bmi.n	800d964 <__sflush_r+0xc0>
 800d8b2:	684b      	ldr	r3, [r1, #4]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	dc05      	bgt.n	800d8c4 <__sflush_r+0x20>
 800d8b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	dc02      	bgt.n	800d8c4 <__sflush_r+0x20>
 800d8be:	2000      	movs	r0, #0
 800d8c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d8c6:	2e00      	cmp	r6, #0
 800d8c8:	d0f9      	beq.n	800d8be <__sflush_r+0x1a>
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d8d0:	682f      	ldr	r7, [r5, #0]
 800d8d2:	6a21      	ldr	r1, [r4, #32]
 800d8d4:	602b      	str	r3, [r5, #0]
 800d8d6:	d032      	beq.n	800d93e <__sflush_r+0x9a>
 800d8d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d8da:	89a3      	ldrh	r3, [r4, #12]
 800d8dc:	075a      	lsls	r2, r3, #29
 800d8de:	d505      	bpl.n	800d8ec <__sflush_r+0x48>
 800d8e0:	6863      	ldr	r3, [r4, #4]
 800d8e2:	1ac0      	subs	r0, r0, r3
 800d8e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d8e6:	b10b      	cbz	r3, 800d8ec <__sflush_r+0x48>
 800d8e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d8ea:	1ac0      	subs	r0, r0, r3
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	4602      	mov	r2, r0
 800d8f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d8f2:	6a21      	ldr	r1, [r4, #32]
 800d8f4:	4628      	mov	r0, r5
 800d8f6:	47b0      	blx	r6
 800d8f8:	1c43      	adds	r3, r0, #1
 800d8fa:	89a3      	ldrh	r3, [r4, #12]
 800d8fc:	d106      	bne.n	800d90c <__sflush_r+0x68>
 800d8fe:	6829      	ldr	r1, [r5, #0]
 800d900:	291d      	cmp	r1, #29
 800d902:	d82b      	bhi.n	800d95c <__sflush_r+0xb8>
 800d904:	4a29      	ldr	r2, [pc, #164]	; (800d9ac <__sflush_r+0x108>)
 800d906:	410a      	asrs	r2, r1
 800d908:	07d6      	lsls	r6, r2, #31
 800d90a:	d427      	bmi.n	800d95c <__sflush_r+0xb8>
 800d90c:	2200      	movs	r2, #0
 800d90e:	6062      	str	r2, [r4, #4]
 800d910:	04d9      	lsls	r1, r3, #19
 800d912:	6922      	ldr	r2, [r4, #16]
 800d914:	6022      	str	r2, [r4, #0]
 800d916:	d504      	bpl.n	800d922 <__sflush_r+0x7e>
 800d918:	1c42      	adds	r2, r0, #1
 800d91a:	d101      	bne.n	800d920 <__sflush_r+0x7c>
 800d91c:	682b      	ldr	r3, [r5, #0]
 800d91e:	b903      	cbnz	r3, 800d922 <__sflush_r+0x7e>
 800d920:	6560      	str	r0, [r4, #84]	; 0x54
 800d922:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d924:	602f      	str	r7, [r5, #0]
 800d926:	2900      	cmp	r1, #0
 800d928:	d0c9      	beq.n	800d8be <__sflush_r+0x1a>
 800d92a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d92e:	4299      	cmp	r1, r3
 800d930:	d002      	beq.n	800d938 <__sflush_r+0x94>
 800d932:	4628      	mov	r0, r5
 800d934:	f7ff f9f6 	bl	800cd24 <_free_r>
 800d938:	2000      	movs	r0, #0
 800d93a:	6360      	str	r0, [r4, #52]	; 0x34
 800d93c:	e7c0      	b.n	800d8c0 <__sflush_r+0x1c>
 800d93e:	2301      	movs	r3, #1
 800d940:	4628      	mov	r0, r5
 800d942:	47b0      	blx	r6
 800d944:	1c41      	adds	r1, r0, #1
 800d946:	d1c8      	bne.n	800d8da <__sflush_r+0x36>
 800d948:	682b      	ldr	r3, [r5, #0]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d0c5      	beq.n	800d8da <__sflush_r+0x36>
 800d94e:	2b1d      	cmp	r3, #29
 800d950:	d001      	beq.n	800d956 <__sflush_r+0xb2>
 800d952:	2b16      	cmp	r3, #22
 800d954:	d101      	bne.n	800d95a <__sflush_r+0xb6>
 800d956:	602f      	str	r7, [r5, #0]
 800d958:	e7b1      	b.n	800d8be <__sflush_r+0x1a>
 800d95a:	89a3      	ldrh	r3, [r4, #12]
 800d95c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d960:	81a3      	strh	r3, [r4, #12]
 800d962:	e7ad      	b.n	800d8c0 <__sflush_r+0x1c>
 800d964:	690f      	ldr	r7, [r1, #16]
 800d966:	2f00      	cmp	r7, #0
 800d968:	d0a9      	beq.n	800d8be <__sflush_r+0x1a>
 800d96a:	0793      	lsls	r3, r2, #30
 800d96c:	680e      	ldr	r6, [r1, #0]
 800d96e:	bf08      	it	eq
 800d970:	694b      	ldreq	r3, [r1, #20]
 800d972:	600f      	str	r7, [r1, #0]
 800d974:	bf18      	it	ne
 800d976:	2300      	movne	r3, #0
 800d978:	eba6 0807 	sub.w	r8, r6, r7
 800d97c:	608b      	str	r3, [r1, #8]
 800d97e:	f1b8 0f00 	cmp.w	r8, #0
 800d982:	dd9c      	ble.n	800d8be <__sflush_r+0x1a>
 800d984:	6a21      	ldr	r1, [r4, #32]
 800d986:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d988:	4643      	mov	r3, r8
 800d98a:	463a      	mov	r2, r7
 800d98c:	4628      	mov	r0, r5
 800d98e:	47b0      	blx	r6
 800d990:	2800      	cmp	r0, #0
 800d992:	dc06      	bgt.n	800d9a2 <__sflush_r+0xfe>
 800d994:	89a3      	ldrh	r3, [r4, #12]
 800d996:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d99a:	81a3      	strh	r3, [r4, #12]
 800d99c:	f04f 30ff 	mov.w	r0, #4294967295
 800d9a0:	e78e      	b.n	800d8c0 <__sflush_r+0x1c>
 800d9a2:	4407      	add	r7, r0
 800d9a4:	eba8 0800 	sub.w	r8, r8, r0
 800d9a8:	e7e9      	b.n	800d97e <__sflush_r+0xda>
 800d9aa:	bf00      	nop
 800d9ac:	dfbffffe 	.word	0xdfbffffe

0800d9b0 <_fflush_r>:
 800d9b0:	b538      	push	{r3, r4, r5, lr}
 800d9b2:	690b      	ldr	r3, [r1, #16]
 800d9b4:	4605      	mov	r5, r0
 800d9b6:	460c      	mov	r4, r1
 800d9b8:	b913      	cbnz	r3, 800d9c0 <_fflush_r+0x10>
 800d9ba:	2500      	movs	r5, #0
 800d9bc:	4628      	mov	r0, r5
 800d9be:	bd38      	pop	{r3, r4, r5, pc}
 800d9c0:	b118      	cbz	r0, 800d9ca <_fflush_r+0x1a>
 800d9c2:	6a03      	ldr	r3, [r0, #32]
 800d9c4:	b90b      	cbnz	r3, 800d9ca <_fflush_r+0x1a>
 800d9c6:	f7fe f8d3 	bl	800bb70 <__sinit>
 800d9ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d0f3      	beq.n	800d9ba <_fflush_r+0xa>
 800d9d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d9d4:	07d0      	lsls	r0, r2, #31
 800d9d6:	d404      	bmi.n	800d9e2 <_fflush_r+0x32>
 800d9d8:	0599      	lsls	r1, r3, #22
 800d9da:	d402      	bmi.n	800d9e2 <_fflush_r+0x32>
 800d9dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d9de:	f7fe fb16 	bl	800c00e <__retarget_lock_acquire_recursive>
 800d9e2:	4628      	mov	r0, r5
 800d9e4:	4621      	mov	r1, r4
 800d9e6:	f7ff ff5d 	bl	800d8a4 <__sflush_r>
 800d9ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d9ec:	07da      	lsls	r2, r3, #31
 800d9ee:	4605      	mov	r5, r0
 800d9f0:	d4e4      	bmi.n	800d9bc <_fflush_r+0xc>
 800d9f2:	89a3      	ldrh	r3, [r4, #12]
 800d9f4:	059b      	lsls	r3, r3, #22
 800d9f6:	d4e1      	bmi.n	800d9bc <_fflush_r+0xc>
 800d9f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d9fa:	f7fe fb09 	bl	800c010 <__retarget_lock_release_recursive>
 800d9fe:	e7dd      	b.n	800d9bc <_fflush_r+0xc>

0800da00 <__swhatbuf_r>:
 800da00:	b570      	push	{r4, r5, r6, lr}
 800da02:	460c      	mov	r4, r1
 800da04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da08:	2900      	cmp	r1, #0
 800da0a:	b096      	sub	sp, #88	; 0x58
 800da0c:	4615      	mov	r5, r2
 800da0e:	461e      	mov	r6, r3
 800da10:	da0d      	bge.n	800da2e <__swhatbuf_r+0x2e>
 800da12:	89a3      	ldrh	r3, [r4, #12]
 800da14:	f013 0f80 	tst.w	r3, #128	; 0x80
 800da18:	f04f 0100 	mov.w	r1, #0
 800da1c:	bf0c      	ite	eq
 800da1e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800da22:	2340      	movne	r3, #64	; 0x40
 800da24:	2000      	movs	r0, #0
 800da26:	6031      	str	r1, [r6, #0]
 800da28:	602b      	str	r3, [r5, #0]
 800da2a:	b016      	add	sp, #88	; 0x58
 800da2c:	bd70      	pop	{r4, r5, r6, pc}
 800da2e:	466a      	mov	r2, sp
 800da30:	f000 f848 	bl	800dac4 <_fstat_r>
 800da34:	2800      	cmp	r0, #0
 800da36:	dbec      	blt.n	800da12 <__swhatbuf_r+0x12>
 800da38:	9901      	ldr	r1, [sp, #4]
 800da3a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800da3e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800da42:	4259      	negs	r1, r3
 800da44:	4159      	adcs	r1, r3
 800da46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da4a:	e7eb      	b.n	800da24 <__swhatbuf_r+0x24>

0800da4c <__smakebuf_r>:
 800da4c:	898b      	ldrh	r3, [r1, #12]
 800da4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800da50:	079d      	lsls	r5, r3, #30
 800da52:	4606      	mov	r6, r0
 800da54:	460c      	mov	r4, r1
 800da56:	d507      	bpl.n	800da68 <__smakebuf_r+0x1c>
 800da58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800da5c:	6023      	str	r3, [r4, #0]
 800da5e:	6123      	str	r3, [r4, #16]
 800da60:	2301      	movs	r3, #1
 800da62:	6163      	str	r3, [r4, #20]
 800da64:	b002      	add	sp, #8
 800da66:	bd70      	pop	{r4, r5, r6, pc}
 800da68:	ab01      	add	r3, sp, #4
 800da6a:	466a      	mov	r2, sp
 800da6c:	f7ff ffc8 	bl	800da00 <__swhatbuf_r>
 800da70:	9900      	ldr	r1, [sp, #0]
 800da72:	4605      	mov	r5, r0
 800da74:	4630      	mov	r0, r6
 800da76:	f7ff f9c9 	bl	800ce0c <_malloc_r>
 800da7a:	b948      	cbnz	r0, 800da90 <__smakebuf_r+0x44>
 800da7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da80:	059a      	lsls	r2, r3, #22
 800da82:	d4ef      	bmi.n	800da64 <__smakebuf_r+0x18>
 800da84:	f023 0303 	bic.w	r3, r3, #3
 800da88:	f043 0302 	orr.w	r3, r3, #2
 800da8c:	81a3      	strh	r3, [r4, #12]
 800da8e:	e7e3      	b.n	800da58 <__smakebuf_r+0xc>
 800da90:	89a3      	ldrh	r3, [r4, #12]
 800da92:	6020      	str	r0, [r4, #0]
 800da94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da98:	81a3      	strh	r3, [r4, #12]
 800da9a:	9b00      	ldr	r3, [sp, #0]
 800da9c:	6163      	str	r3, [r4, #20]
 800da9e:	9b01      	ldr	r3, [sp, #4]
 800daa0:	6120      	str	r0, [r4, #16]
 800daa2:	b15b      	cbz	r3, 800dabc <__smakebuf_r+0x70>
 800daa4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800daa8:	4630      	mov	r0, r6
 800daaa:	f000 f81d 	bl	800dae8 <_isatty_r>
 800daae:	b128      	cbz	r0, 800dabc <__smakebuf_r+0x70>
 800dab0:	89a3      	ldrh	r3, [r4, #12]
 800dab2:	f023 0303 	bic.w	r3, r3, #3
 800dab6:	f043 0301 	orr.w	r3, r3, #1
 800daba:	81a3      	strh	r3, [r4, #12]
 800dabc:	89a3      	ldrh	r3, [r4, #12]
 800dabe:	431d      	orrs	r5, r3
 800dac0:	81a5      	strh	r5, [r4, #12]
 800dac2:	e7cf      	b.n	800da64 <__smakebuf_r+0x18>

0800dac4 <_fstat_r>:
 800dac4:	b538      	push	{r3, r4, r5, lr}
 800dac6:	4d07      	ldr	r5, [pc, #28]	; (800dae4 <_fstat_r+0x20>)
 800dac8:	2300      	movs	r3, #0
 800daca:	4604      	mov	r4, r0
 800dacc:	4608      	mov	r0, r1
 800dace:	4611      	mov	r1, r2
 800dad0:	602b      	str	r3, [r5, #0]
 800dad2:	f7f5 fda8 	bl	8003626 <_fstat>
 800dad6:	1c43      	adds	r3, r0, #1
 800dad8:	d102      	bne.n	800dae0 <_fstat_r+0x1c>
 800dada:	682b      	ldr	r3, [r5, #0]
 800dadc:	b103      	cbz	r3, 800dae0 <_fstat_r+0x1c>
 800dade:	6023      	str	r3, [r4, #0]
 800dae0:	bd38      	pop	{r3, r4, r5, pc}
 800dae2:	bf00      	nop
 800dae4:	2000529c 	.word	0x2000529c

0800dae8 <_isatty_r>:
 800dae8:	b538      	push	{r3, r4, r5, lr}
 800daea:	4d06      	ldr	r5, [pc, #24]	; (800db04 <_isatty_r+0x1c>)
 800daec:	2300      	movs	r3, #0
 800daee:	4604      	mov	r4, r0
 800daf0:	4608      	mov	r0, r1
 800daf2:	602b      	str	r3, [r5, #0]
 800daf4:	f7f5 fda7 	bl	8003646 <_isatty>
 800daf8:	1c43      	adds	r3, r0, #1
 800dafa:	d102      	bne.n	800db02 <_isatty_r+0x1a>
 800dafc:	682b      	ldr	r3, [r5, #0]
 800dafe:	b103      	cbz	r3, 800db02 <_isatty_r+0x1a>
 800db00:	6023      	str	r3, [r4, #0]
 800db02:	bd38      	pop	{r3, r4, r5, pc}
 800db04:	2000529c 	.word	0x2000529c

0800db08 <_sbrk_r>:
 800db08:	b538      	push	{r3, r4, r5, lr}
 800db0a:	4d06      	ldr	r5, [pc, #24]	; (800db24 <_sbrk_r+0x1c>)
 800db0c:	2300      	movs	r3, #0
 800db0e:	4604      	mov	r4, r0
 800db10:	4608      	mov	r0, r1
 800db12:	602b      	str	r3, [r5, #0]
 800db14:	f7f5 fdb0 	bl	8003678 <_sbrk>
 800db18:	1c43      	adds	r3, r0, #1
 800db1a:	d102      	bne.n	800db22 <_sbrk_r+0x1a>
 800db1c:	682b      	ldr	r3, [r5, #0]
 800db1e:	b103      	cbz	r3, 800db22 <_sbrk_r+0x1a>
 800db20:	6023      	str	r3, [r4, #0]
 800db22:	bd38      	pop	{r3, r4, r5, pc}
 800db24:	2000529c 	.word	0x2000529c

0800db28 <__assert_func>:
 800db28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800db2a:	4614      	mov	r4, r2
 800db2c:	461a      	mov	r2, r3
 800db2e:	4b09      	ldr	r3, [pc, #36]	; (800db54 <__assert_func+0x2c>)
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	4605      	mov	r5, r0
 800db34:	68d8      	ldr	r0, [r3, #12]
 800db36:	b14c      	cbz	r4, 800db4c <__assert_func+0x24>
 800db38:	4b07      	ldr	r3, [pc, #28]	; (800db58 <__assert_func+0x30>)
 800db3a:	9100      	str	r1, [sp, #0]
 800db3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800db40:	4906      	ldr	r1, [pc, #24]	; (800db5c <__assert_func+0x34>)
 800db42:	462b      	mov	r3, r5
 800db44:	f000 f844 	bl	800dbd0 <fiprintf>
 800db48:	f000 f854 	bl	800dbf4 <abort>
 800db4c:	4b04      	ldr	r3, [pc, #16]	; (800db60 <__assert_func+0x38>)
 800db4e:	461c      	mov	r4, r3
 800db50:	e7f3      	b.n	800db3a <__assert_func+0x12>
 800db52:	bf00      	nop
 800db54:	20000068 	.word	0x20000068
 800db58:	0800e04f 	.word	0x0800e04f
 800db5c:	0800e05c 	.word	0x0800e05c
 800db60:	0800e08a 	.word	0x0800e08a

0800db64 <_calloc_r>:
 800db64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800db66:	fba1 2402 	umull	r2, r4, r1, r2
 800db6a:	b94c      	cbnz	r4, 800db80 <_calloc_r+0x1c>
 800db6c:	4611      	mov	r1, r2
 800db6e:	9201      	str	r2, [sp, #4]
 800db70:	f7ff f94c 	bl	800ce0c <_malloc_r>
 800db74:	9a01      	ldr	r2, [sp, #4]
 800db76:	4605      	mov	r5, r0
 800db78:	b930      	cbnz	r0, 800db88 <_calloc_r+0x24>
 800db7a:	4628      	mov	r0, r5
 800db7c:	b003      	add	sp, #12
 800db7e:	bd30      	pop	{r4, r5, pc}
 800db80:	220c      	movs	r2, #12
 800db82:	6002      	str	r2, [r0, #0]
 800db84:	2500      	movs	r5, #0
 800db86:	e7f8      	b.n	800db7a <_calloc_r+0x16>
 800db88:	4621      	mov	r1, r4
 800db8a:	f7fe f96d 	bl	800be68 <memset>
 800db8e:	e7f4      	b.n	800db7a <_calloc_r+0x16>

0800db90 <__ascii_mbtowc>:
 800db90:	b082      	sub	sp, #8
 800db92:	b901      	cbnz	r1, 800db96 <__ascii_mbtowc+0x6>
 800db94:	a901      	add	r1, sp, #4
 800db96:	b142      	cbz	r2, 800dbaa <__ascii_mbtowc+0x1a>
 800db98:	b14b      	cbz	r3, 800dbae <__ascii_mbtowc+0x1e>
 800db9a:	7813      	ldrb	r3, [r2, #0]
 800db9c:	600b      	str	r3, [r1, #0]
 800db9e:	7812      	ldrb	r2, [r2, #0]
 800dba0:	1e10      	subs	r0, r2, #0
 800dba2:	bf18      	it	ne
 800dba4:	2001      	movne	r0, #1
 800dba6:	b002      	add	sp, #8
 800dba8:	4770      	bx	lr
 800dbaa:	4610      	mov	r0, r2
 800dbac:	e7fb      	b.n	800dba6 <__ascii_mbtowc+0x16>
 800dbae:	f06f 0001 	mvn.w	r0, #1
 800dbb2:	e7f8      	b.n	800dba6 <__ascii_mbtowc+0x16>

0800dbb4 <__ascii_wctomb>:
 800dbb4:	b149      	cbz	r1, 800dbca <__ascii_wctomb+0x16>
 800dbb6:	2aff      	cmp	r2, #255	; 0xff
 800dbb8:	bf85      	ittet	hi
 800dbba:	238a      	movhi	r3, #138	; 0x8a
 800dbbc:	6003      	strhi	r3, [r0, #0]
 800dbbe:	700a      	strbls	r2, [r1, #0]
 800dbc0:	f04f 30ff 	movhi.w	r0, #4294967295
 800dbc4:	bf98      	it	ls
 800dbc6:	2001      	movls	r0, #1
 800dbc8:	4770      	bx	lr
 800dbca:	4608      	mov	r0, r1
 800dbcc:	4770      	bx	lr
	...

0800dbd0 <fiprintf>:
 800dbd0:	b40e      	push	{r1, r2, r3}
 800dbd2:	b503      	push	{r0, r1, lr}
 800dbd4:	4601      	mov	r1, r0
 800dbd6:	ab03      	add	r3, sp, #12
 800dbd8:	4805      	ldr	r0, [pc, #20]	; (800dbf0 <fiprintf+0x20>)
 800dbda:	f853 2b04 	ldr.w	r2, [r3], #4
 800dbde:	6800      	ldr	r0, [r0, #0]
 800dbe0:	9301      	str	r3, [sp, #4]
 800dbe2:	f7ff fd45 	bl	800d670 <_vfiprintf_r>
 800dbe6:	b002      	add	sp, #8
 800dbe8:	f85d eb04 	ldr.w	lr, [sp], #4
 800dbec:	b003      	add	sp, #12
 800dbee:	4770      	bx	lr
 800dbf0:	20000068 	.word	0x20000068

0800dbf4 <abort>:
 800dbf4:	b508      	push	{r3, lr}
 800dbf6:	2006      	movs	r0, #6
 800dbf8:	f000 f82c 	bl	800dc54 <raise>
 800dbfc:	2001      	movs	r0, #1
 800dbfe:	f7f5 fcc3 	bl	8003588 <_exit>

0800dc02 <_raise_r>:
 800dc02:	291f      	cmp	r1, #31
 800dc04:	b538      	push	{r3, r4, r5, lr}
 800dc06:	4604      	mov	r4, r0
 800dc08:	460d      	mov	r5, r1
 800dc0a:	d904      	bls.n	800dc16 <_raise_r+0x14>
 800dc0c:	2316      	movs	r3, #22
 800dc0e:	6003      	str	r3, [r0, #0]
 800dc10:	f04f 30ff 	mov.w	r0, #4294967295
 800dc14:	bd38      	pop	{r3, r4, r5, pc}
 800dc16:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800dc18:	b112      	cbz	r2, 800dc20 <_raise_r+0x1e>
 800dc1a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dc1e:	b94b      	cbnz	r3, 800dc34 <_raise_r+0x32>
 800dc20:	4620      	mov	r0, r4
 800dc22:	f000 f831 	bl	800dc88 <_getpid_r>
 800dc26:	462a      	mov	r2, r5
 800dc28:	4601      	mov	r1, r0
 800dc2a:	4620      	mov	r0, r4
 800dc2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc30:	f000 b818 	b.w	800dc64 <_kill_r>
 800dc34:	2b01      	cmp	r3, #1
 800dc36:	d00a      	beq.n	800dc4e <_raise_r+0x4c>
 800dc38:	1c59      	adds	r1, r3, #1
 800dc3a:	d103      	bne.n	800dc44 <_raise_r+0x42>
 800dc3c:	2316      	movs	r3, #22
 800dc3e:	6003      	str	r3, [r0, #0]
 800dc40:	2001      	movs	r0, #1
 800dc42:	e7e7      	b.n	800dc14 <_raise_r+0x12>
 800dc44:	2400      	movs	r4, #0
 800dc46:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dc4a:	4628      	mov	r0, r5
 800dc4c:	4798      	blx	r3
 800dc4e:	2000      	movs	r0, #0
 800dc50:	e7e0      	b.n	800dc14 <_raise_r+0x12>
	...

0800dc54 <raise>:
 800dc54:	4b02      	ldr	r3, [pc, #8]	; (800dc60 <raise+0xc>)
 800dc56:	4601      	mov	r1, r0
 800dc58:	6818      	ldr	r0, [r3, #0]
 800dc5a:	f7ff bfd2 	b.w	800dc02 <_raise_r>
 800dc5e:	bf00      	nop
 800dc60:	20000068 	.word	0x20000068

0800dc64 <_kill_r>:
 800dc64:	b538      	push	{r3, r4, r5, lr}
 800dc66:	4d07      	ldr	r5, [pc, #28]	; (800dc84 <_kill_r+0x20>)
 800dc68:	2300      	movs	r3, #0
 800dc6a:	4604      	mov	r4, r0
 800dc6c:	4608      	mov	r0, r1
 800dc6e:	4611      	mov	r1, r2
 800dc70:	602b      	str	r3, [r5, #0]
 800dc72:	f7f5 fc79 	bl	8003568 <_kill>
 800dc76:	1c43      	adds	r3, r0, #1
 800dc78:	d102      	bne.n	800dc80 <_kill_r+0x1c>
 800dc7a:	682b      	ldr	r3, [r5, #0]
 800dc7c:	b103      	cbz	r3, 800dc80 <_kill_r+0x1c>
 800dc7e:	6023      	str	r3, [r4, #0]
 800dc80:	bd38      	pop	{r3, r4, r5, pc}
 800dc82:	bf00      	nop
 800dc84:	2000529c 	.word	0x2000529c

0800dc88 <_getpid_r>:
 800dc88:	f7f5 bc66 	b.w	8003558 <_getpid>

0800dc8c <_init>:
 800dc8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc8e:	bf00      	nop
 800dc90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc92:	bc08      	pop	{r3}
 800dc94:	469e      	mov	lr, r3
 800dc96:	4770      	bx	lr

0800dc98 <_fini>:
 800dc98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc9a:	bf00      	nop
 800dc9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc9e:	bc08      	pop	{r3}
 800dca0:	469e      	mov	lr, r3
 800dca2:	4770      	bx	lr
