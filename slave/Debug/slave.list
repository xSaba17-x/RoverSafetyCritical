
slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d2e4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  0800d488  0800d488  0001d488  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d964  0800d964  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d964  0800d964  0001d964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d96c  0800d96c  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d96c  0800d96c  0001d96c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d970  0800d970  0001d970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800d974  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005014  200001d8  0800db4c  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200051ec  0800db4c  000251ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021fea  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004eda  00000000  00000000  00042235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b88  00000000  00000000  00047110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001564  00000000  00000000  00048c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cd50  00000000  00000000  0004a1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000232d1  00000000  00000000  00066f4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a9140  00000000  00000000  0008a21d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008340  00000000  00000000  00133360  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0013b6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d46c 	.word	0x0800d46c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800d46c 	.word	0x0800d46c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b970 	b.w	8000f90 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	460d      	mov	r5, r1
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	460f      	mov	r7, r1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d14a      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4694      	mov	ip, r2
 8000cdc:	d965      	bls.n	8000daa <__udivmoddi4+0xe2>
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	b143      	cbz	r3, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ce8:	f1c3 0220 	rsb	r2, r3, #32
 8000cec:	409f      	lsls	r7, r3
 8000cee:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf2:	4317      	orrs	r7, r2
 8000cf4:	409c      	lsls	r4, r3
 8000cf6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cfa:	fa1f f58c 	uxth.w	r5, ip
 8000cfe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d02:	0c22      	lsrs	r2, r4, #16
 8000d04:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d08:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d0c:	fb01 f005 	mul.w	r0, r1, r5
 8000d10:	4290      	cmp	r0, r2
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x62>
 8000d14:	eb1c 0202 	adds.w	r2, ip, r2
 8000d18:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d1c:	f080 811c 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d20:	4290      	cmp	r0, r2
 8000d22:	f240 8119 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d26:	3902      	subs	r1, #2
 8000d28:	4462      	add	r2, ip
 8000d2a:	1a12      	subs	r2, r2, r0
 8000d2c:	b2a4      	uxth	r4, r4
 8000d2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d36:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3a:	fb00 f505 	mul.w	r5, r0, r5
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	d90a      	bls.n	8000d58 <__udivmoddi4+0x90>
 8000d42:	eb1c 0404 	adds.w	r4, ip, r4
 8000d46:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d4a:	f080 8107 	bcs.w	8000f5c <__udivmoddi4+0x294>
 8000d4e:	42a5      	cmp	r5, r4
 8000d50:	f240 8104 	bls.w	8000f5c <__udivmoddi4+0x294>
 8000d54:	4464      	add	r4, ip
 8000d56:	3802      	subs	r0, #2
 8000d58:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d5c:	1b64      	subs	r4, r4, r5
 8000d5e:	2100      	movs	r1, #0
 8000d60:	b11e      	cbz	r6, 8000d6a <__udivmoddi4+0xa2>
 8000d62:	40dc      	lsrs	r4, r3
 8000d64:	2300      	movs	r3, #0
 8000d66:	e9c6 4300 	strd	r4, r3, [r6]
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0xbc>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80ed 	beq.w	8000f52 <__udivmoddi4+0x28a>
 8000d78:	2100      	movs	r1, #0
 8000d7a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d84:	fab3 f183 	clz	r1, r3
 8000d88:	2900      	cmp	r1, #0
 8000d8a:	d149      	bne.n	8000e20 <__udivmoddi4+0x158>
 8000d8c:	42ab      	cmp	r3, r5
 8000d8e:	d302      	bcc.n	8000d96 <__udivmoddi4+0xce>
 8000d90:	4282      	cmp	r2, r0
 8000d92:	f200 80f8 	bhi.w	8000f86 <__udivmoddi4+0x2be>
 8000d96:	1a84      	subs	r4, r0, r2
 8000d98:	eb65 0203 	sbc.w	r2, r5, r3
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	4617      	mov	r7, r2
 8000da0:	2e00      	cmp	r6, #0
 8000da2:	d0e2      	beq.n	8000d6a <__udivmoddi4+0xa2>
 8000da4:	e9c6 4700 	strd	r4, r7, [r6]
 8000da8:	e7df      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000daa:	b902      	cbnz	r2, 8000dae <__udivmoddi4+0xe6>
 8000dac:	deff      	udf	#255	; 0xff
 8000dae:	fab2 f382 	clz	r3, r2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000db8:	1a8a      	subs	r2, r1, r2
 8000dba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dbe:	fa1f fe8c 	uxth.w	lr, ip
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dc8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dcc:	0c22      	lsrs	r2, r4, #16
 8000dce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dd2:	fb0e f005 	mul.w	r0, lr, r5
 8000dd6:	4290      	cmp	r0, r2
 8000dd8:	d908      	bls.n	8000dec <__udivmoddi4+0x124>
 8000dda:	eb1c 0202 	adds.w	r2, ip, r2
 8000dde:	f105 38ff 	add.w	r8, r5, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4290      	cmp	r0, r2
 8000de6:	f200 80cb 	bhi.w	8000f80 <__udivmoddi4+0x2b8>
 8000dea:	4645      	mov	r5, r8
 8000dec:	1a12      	subs	r2, r2, r0
 8000dee:	b2a4      	uxth	r4, r4
 8000df0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000df4:	fb07 2210 	mls	r2, r7, r0, r2
 8000df8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000e00:	45a6      	cmp	lr, r4
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x14e>
 8000e04:	eb1c 0404 	adds.w	r4, ip, r4
 8000e08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e0c:	d202      	bcs.n	8000e14 <__udivmoddi4+0x14c>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f200 80bb 	bhi.w	8000f8a <__udivmoddi4+0x2c2>
 8000e14:	4610      	mov	r0, r2
 8000e16:	eba4 040e 	sub.w	r4, r4, lr
 8000e1a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e1e:	e79f      	b.n	8000d60 <__udivmoddi4+0x98>
 8000e20:	f1c1 0720 	rsb	r7, r1, #32
 8000e24:	408b      	lsls	r3, r1
 8000e26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e2e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e32:	fa20 f307 	lsr.w	r3, r0, r7
 8000e36:	40fd      	lsrs	r5, r7
 8000e38:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e3c:	4323      	orrs	r3, r4
 8000e3e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	fb09 5518 	mls	r5, r9, r8, r5
 8000e4a:	0c1c      	lsrs	r4, r3, #16
 8000e4c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e50:	fb08 f50e 	mul.w	r5, r8, lr
 8000e54:	42a5      	cmp	r5, r4
 8000e56:	fa02 f201 	lsl.w	r2, r2, r1
 8000e5a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e68:	f080 8088 	bcs.w	8000f7c <__udivmoddi4+0x2b4>
 8000e6c:	42a5      	cmp	r5, r4
 8000e6e:	f240 8085 	bls.w	8000f7c <__udivmoddi4+0x2b4>
 8000e72:	f1a8 0802 	sub.w	r8, r8, #2
 8000e76:	4464      	add	r4, ip
 8000e78:	1b64      	subs	r4, r4, r5
 8000e7a:	b29d      	uxth	r5, r3
 8000e7c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e80:	fb09 4413 	mls	r4, r9, r3, r4
 8000e84:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e88:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e98:	d26c      	bcs.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9a:	45a6      	cmp	lr, r4
 8000e9c:	d96a      	bls.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9e:	3b02      	subs	r3, #2
 8000ea0:	4464      	add	r4, ip
 8000ea2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ea6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	42ac      	cmp	r4, r5
 8000eb0:	46c8      	mov	r8, r9
 8000eb2:	46ae      	mov	lr, r5
 8000eb4:	d356      	bcc.n	8000f64 <__udivmoddi4+0x29c>
 8000eb6:	d053      	beq.n	8000f60 <__udivmoddi4+0x298>
 8000eb8:	b156      	cbz	r6, 8000ed0 <__udivmoddi4+0x208>
 8000eba:	ebb0 0208 	subs.w	r2, r0, r8
 8000ebe:	eb64 040e 	sbc.w	r4, r4, lr
 8000ec2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ec6:	40ca      	lsrs	r2, r1
 8000ec8:	40cc      	lsrs	r4, r1
 8000eca:	4317      	orrs	r7, r2
 8000ecc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed8:	f1c3 0120 	rsb	r1, r3, #32
 8000edc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ee0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ee4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ee8:	409d      	lsls	r5, r3
 8000eea:	432a      	orrs	r2, r5
 8000eec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef0:	fa1f fe8c 	uxth.w	lr, ip
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1510 	mls	r5, r7, r0, r1
 8000efc:	0c11      	lsrs	r1, r2, #16
 8000efe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f02:	fb00 f50e 	mul.w	r5, r0, lr
 8000f06:	428d      	cmp	r5, r1
 8000f08:	fa04 f403 	lsl.w	r4, r4, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x258>
 8000f0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f16:	d22f      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f18:	428d      	cmp	r5, r1
 8000f1a:	d92d      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4461      	add	r1, ip
 8000f20:	1b49      	subs	r1, r1, r5
 8000f22:	b292      	uxth	r2, r2
 8000f24:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f28:	fb07 1115 	mls	r1, r7, r5, r1
 8000f2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f30:	fb05 f10e 	mul.w	r1, r5, lr
 8000f34:	4291      	cmp	r1, r2
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x282>
 8000f38:	eb1c 0202 	adds.w	r2, ip, r2
 8000f3c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f40:	d216      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000f42:	4291      	cmp	r1, r2
 8000f44:	d914      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000f46:	3d02      	subs	r5, #2
 8000f48:	4462      	add	r2, ip
 8000f4a:	1a52      	subs	r2, r2, r1
 8000f4c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f50:	e738      	b.n	8000dc4 <__udivmoddi4+0xfc>
 8000f52:	4631      	mov	r1, r6
 8000f54:	4630      	mov	r0, r6
 8000f56:	e708      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000f58:	4639      	mov	r1, r7
 8000f5a:	e6e6      	b.n	8000d2a <__udivmoddi4+0x62>
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	e6fb      	b.n	8000d58 <__udivmoddi4+0x90>
 8000f60:	4548      	cmp	r0, r9
 8000f62:	d2a9      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f64:	ebb9 0802 	subs.w	r8, r9, r2
 8000f68:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	e7a3      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f70:	4645      	mov	r5, r8
 8000f72:	e7ea      	b.n	8000f4a <__udivmoddi4+0x282>
 8000f74:	462b      	mov	r3, r5
 8000f76:	e794      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f78:	4640      	mov	r0, r8
 8000f7a:	e7d1      	b.n	8000f20 <__udivmoddi4+0x258>
 8000f7c:	46d0      	mov	r8, sl
 8000f7e:	e77b      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f80:	3d02      	subs	r5, #2
 8000f82:	4462      	add	r2, ip
 8000f84:	e732      	b.n	8000dec <__udivmoddi4+0x124>
 8000f86:	4608      	mov	r0, r1
 8000f88:	e70a      	b.n	8000da0 <__udivmoddi4+0xd8>
 8000f8a:	4464      	add	r4, ip
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	e742      	b.n	8000e16 <__udivmoddi4+0x14e>

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <Encoder>:
TaskHandle_t xHandle4 = NULL; ///< Task handle for the Comunication task.
TaskHandle_t xHandle5 = NULL; ///< Task handle for the Execution task.


void Encoder( void *pvParameters )
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]

    #if(VERBOSE == 1)
        printf("Begin Encoder at %ld\r\n", pdMS_TO_TICKS(xTaskGetTickCount()));
    #endif

    panda_encoder_read(&EncoderFL);
 8000f9c:	4815      	ldr	r0, [pc, #84]	; (8000ff4 <Encoder+0x60>)
 8000f9e:	f000 fe43 	bl	8001c28 <panda_encoder_read>
    panda_encoder_read(&EncoderFR);
 8000fa2:	4815      	ldr	r0, [pc, #84]	; (8000ff8 <Encoder+0x64>)
 8000fa4:	f000 fe40 	bl	8001c28 <panda_encoder_read>
    panda_encoder_read(&EncoderBL);
 8000fa8:	4814      	ldr	r0, [pc, #80]	; (8000ffc <Encoder+0x68>)
 8000faa:	f000 fe3d 	bl	8001c28 <panda_encoder_read>
	panda_encoder_read(&EncoderBR);
 8000fae:	4814      	ldr	r0, [pc, #80]	; (8001000 <Encoder+0x6c>)
 8000fb0:	f000 fe3a 	bl	8001c28 <panda_encoder_read>

	Global_Struct_Slave[EncoderFLSpeed-(PANDA_STRUCT_MASTER_SIZE-1)] = panda_encoder_get_speed(&EncoderFL);
 8000fb4:	480f      	ldr	r0, [pc, #60]	; (8000ff4 <Encoder+0x60>)
 8000fb6:	f000 fea3 	bl	8001d00 <panda_encoder_get_speed>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	4b11      	ldr	r3, [pc, #68]	; (8001004 <Encoder+0x70>)
 8000fc0:	705a      	strb	r2, [r3, #1]
	Global_Struct_Slave[EncoderFRSpeed-(PANDA_STRUCT_MASTER_SIZE-1)] = panda_encoder_get_speed(&EncoderFR);
 8000fc2:	480d      	ldr	r0, [pc, #52]	; (8000ff8 <Encoder+0x64>)
 8000fc4:	f000 fe9c 	bl	8001d00 <panda_encoder_get_speed>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	461a      	mov	r2, r3
 8000fcc:	4b0d      	ldr	r3, [pc, #52]	; (8001004 <Encoder+0x70>)
 8000fce:	709a      	strb	r2, [r3, #2]
	Global_Struct_Slave[EncoderBLSpeed-(PANDA_STRUCT_MASTER_SIZE-1)] = panda_encoder_get_speed(&EncoderBL);
 8000fd0:	480a      	ldr	r0, [pc, #40]	; (8000ffc <Encoder+0x68>)
 8000fd2:	f000 fe95 	bl	8001d00 <panda_encoder_get_speed>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <Encoder+0x70>)
 8000fdc:	70da      	strb	r2, [r3, #3]
	Global_Struct_Slave[EncoderBRSpeed-(PANDA_STRUCT_MASTER_SIZE-1)] = panda_encoder_get_speed(&EncoderBR);
 8000fde:	4808      	ldr	r0, [pc, #32]	; (8001000 <Encoder+0x6c>)
 8000fe0:	f000 fe8e 	bl	8001d00 <panda_encoder_get_speed>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <Encoder+0x70>)
 8000fea:	711a      	strb	r2, [r3, #4]
    #if(VERBOSE == 1)
        printf("Exit Encoder at %ld. Encoder Value: %ld\r\n", pdMS_TO_TICKS(xTaskGetTickCount()), Global_Struct.Encoder_Steps);
    #endif


}
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	200002ec 	.word	0x200002ec
 8000ff8:	200002f8 	.word	0x200002f8
 8000ffc:	20000304 	.word	0x20000304
 8001000:	20000310 	.word	0x20000310
 8001004:	200002e4 	.word	0x200002e4

08001008 <Battery_Sensor>:


void Battery_Sensor( void *pvParameters )
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
    #if(VERBOSE == 1)
        printf("Exit Battery_Sensor at %ld. Battery Level: %d\r\n", pdMS_TO_TICKS(xTaskGetTickCount()), Global_Struct.Battery_Sensor);
    #endif


}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <Temperature_Sensor>:


void Temperature_Sensor( void *pvParameters )
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
    #if(VERBOSE == 1)
        printf("Begin Temperature_Sensor at %ld\r\n", pdMS_TO_TICKS(xTaskGetTickCount()));
    #endif


	HAL_ADC_PollForConversion(&hadc1, 3);
 8001024:	2103      	movs	r1, #3
 8001026:	4822      	ldr	r0, [pc, #136]	; (80010b0 <Temperature_Sensor+0x94>)
 8001028:	f002 f878 	bl	800311c <HAL_ADC_PollForConversion>

	rawValue = HAL_ADC_GetValue(&hadc1);
 800102c:	4820      	ldr	r0, [pc, #128]	; (80010b0 <Temperature_Sensor+0x94>)
 800102e:	f002 f900 	bl	8003232 <HAL_ADC_GetValue>
 8001032:	ee07 0a90 	vmov	s15, r0
 8001036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800103a:	4b1e      	ldr	r3, [pc, #120]	; (80010b4 <Temperature_Sensor+0x98>)
 800103c:	edc3 7a00 	vstr	s15, [r3]
	temp = (rawValue) / 4095 * 3300;
 8001040:	4b1c      	ldr	r3, [pc, #112]	; (80010b4 <Temperature_Sensor+0x98>)
 8001042:	ed93 7a00 	vldr	s14, [r3]
 8001046:	eddf 6a1c 	vldr	s13, [pc, #112]	; 80010b8 <Temperature_Sensor+0x9c>
 800104a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800104e:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80010bc <Temperature_Sensor+0xa0>
 8001052:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001056:	4b1a      	ldr	r3, [pc, #104]	; (80010c0 <Temperature_Sensor+0xa4>)
 8001058:	edc3 7a00 	vstr	s15, [r3]
	temp = ((temp - 760.0) / 2.5) + 25;
 800105c:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <Temperature_Sensor+0xa4>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fa79 	bl	8000558 <__aeabi_f2d>
 8001066:	f04f 0200 	mov.w	r2, #0
 800106a:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <Temperature_Sensor+0xa8>)
 800106c:	f7ff f914 	bl	8000298 <__aeabi_dsub>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	4610      	mov	r0, r2
 8001076:	4619      	mov	r1, r3
 8001078:	f04f 0200 	mov.w	r2, #0
 800107c:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <Temperature_Sensor+0xac>)
 800107e:	f7ff fbed 	bl	800085c <__aeabi_ddiv>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	4610      	mov	r0, r2
 8001088:	4619      	mov	r1, r3
 800108a:	f04f 0200 	mov.w	r2, #0
 800108e:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <Temperature_Sensor+0xb0>)
 8001090:	f7ff f904 	bl	800029c <__adddf3>
 8001094:	4602      	mov	r2, r0
 8001096:	460b      	mov	r3, r1
 8001098:	4610      	mov	r0, r2
 800109a:	4619      	mov	r1, r3
 800109c:	f7ff fdac 	bl	8000bf8 <__aeabi_d2f>
 80010a0:	4603      	mov	r3, r0
 80010a2:	4a07      	ldr	r2, [pc, #28]	; (80010c0 <Temperature_Sensor+0xa4>)
 80010a4:	6013      	str	r3, [r2, #0]

    #if(VERBOSE == 1)
        printf("Exit Temperature_Sensor at %ld\r\n", pdMS_TO_TICKS(xTaskGetTickCount()));
    #endif

}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000214 	.word	0x20000214
 80010b4:	200001fc 	.word	0x200001fc
 80010b8:	457ff000 	.word	0x457ff000
 80010bc:	454e4000 	.word	0x454e4000
 80010c0:	200001f8 	.word	0x200001f8
 80010c4:	4087c000 	.word	0x4087c000
 80010c8:	40040000 	.word	0x40040000
 80010cc:	40390000 	.word	0x40390000

080010d0 <Comunication>:


void Comunication( void *pvParameters )
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
    #if(VERBOSE == 1)
        printf("Begin Communication at %ld\r\n", pdMS_TO_TICKS(xTaskGetTickCount()));
    #endif

    counter_stop_master++;
 80010d8:	4b0c      	ldr	r3, [pc, #48]	; (800110c <Comunication+0x3c>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	3301      	adds	r3, #1
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	4b0a      	ldr	r3, [pc, #40]	; (800110c <Comunication+0x3c>)
 80010e2:	701a      	strb	r2, [r3, #0]
    if(counter_stop_master >= 4){ //Stop Master
 80010e4:	4b09      	ldr	r3, [pc, #36]	; (800110c <Comunication+0x3c>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2b03      	cmp	r3, #3
 80010ea:	d906      	bls.n	80010fa <Comunication+0x2a>
    	HAL_I2C_DisableListen_IT(&hi2c1);
 80010ec:	4808      	ldr	r0, [pc, #32]	; (8001110 <Comunication+0x40>)
 80010ee:	f003 f94f 	bl	8004390 <HAL_I2C_DisableListen_IT>
    	degradato = 1;
 80010f2:	4b08      	ldr	r3, [pc, #32]	; (8001114 <Comunication+0x44>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	701a      	strb	r2, [r3, #0]

	#if(VERBOSE == 1)
        printf("Exit Communication at %ld\r\n", pdMS_TO_TICKS(xTaskGetTickCount()));
    #endif

}
 80010f8:	e004      	b.n	8001104 <Comunication+0x34>
    	HAL_I2C_Slave_Receive_IT(&hi2c1, Global_Struct_From_Master, PANDA_STRUCT_MASTER_SIZE);
 80010fa:	2216      	movs	r2, #22
 80010fc:	4906      	ldr	r1, [pc, #24]	; (8001118 <Comunication+0x48>)
 80010fe:	4804      	ldr	r0, [pc, #16]	; (8001110 <Comunication+0x40>)
 8001100:	f003 f8d6 	bl	80042b0 <HAL_I2C_Slave_Receive_IT>
}
 8001104:	bf00      	nop
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	200001f4 	.word	0x200001f4
 8001110:	2000025c 	.word	0x2000025c
 8001114:	200001f5 	.word	0x200001f5
 8001118:	200002b0 	.word	0x200002b0

0800111c <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 800111c:	b5b0      	push	{r4, r5, r7, lr}
 800111e:	b08c      	sub	sp, #48	; 0x30
 8001120:	af02      	add	r7, sp, #8
 8001122:	6078      	str	r0, [r7, #4]
	uint8_t counter = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if(panda_comunication_validate_checksum(Global_Struct_From_Master) == HAL_OK){
 800112a:	4834      	ldr	r0, [pc, #208]	; (80011fc <HAL_I2C_SlaveRxCpltCallback+0xe0>)
 800112c:	f000 fd01 	bl	8001b32 <panda_comunication_validate_checksum>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d12c      	bne.n	8001190 <HAL_I2C_SlaveRxCpltCallback+0x74>

		panda_merge_structs(Global_Struct_From_Master, Global_Struct_Slave, Global_Struct);
 8001136:	4a32      	ldr	r2, [pc, #200]	; (8001200 <HAL_I2C_SlaveRxCpltCallback+0xe4>)
 8001138:	4932      	ldr	r1, [pc, #200]	; (8001204 <HAL_I2C_SlaveRxCpltCallback+0xe8>)
 800113a:	4830      	ldr	r0, [pc, #192]	; (80011fc <HAL_I2C_SlaveRxCpltCallback+0xe0>)
 800113c:	f000 fd20 	bl	8001b80 <panda_merge_structs>
		panda_comunication_init_checksum(Global_Struct);
 8001140:	482f      	ldr	r0, [pc, #188]	; (8001200 <HAL_I2C_SlaveRxCpltCallback+0xe4>)
 8001142:	f000 fcd3 	bl	8001aec <panda_comunication_init_checksum>
		while(counter < MAX_NUMBER_OF_ATTEMPTS && HAL_I2C_Master_Transmit(&hi2c1,(MASTER_ADDRESS<<1), Global_Struct, PANDA_STRUCT_GLOBAL_SIZE, HAL_MAX_DELAY) != HAL_OK){
 8001146:	e004      	b.n	8001152 <HAL_I2C_SlaveRxCpltCallback+0x36>
			counter++;
 8001148:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800114c:	3301      	adds	r3, #1
 800114e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		while(counter < MAX_NUMBER_OF_ATTEMPTS && HAL_I2C_Master_Transmit(&hi2c1,(MASTER_ADDRESS<<1), Global_Struct, PANDA_STRUCT_GLOBAL_SIZE, HAL_MAX_DELAY) != HAL_OK){
 8001152:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001156:	2b02      	cmp	r3, #2
 8001158:	d80b      	bhi.n	8001172 <HAL_I2C_SlaveRxCpltCallback+0x56>
 800115a:	f04f 33ff 	mov.w	r3, #4294967295
 800115e:	9300      	str	r3, [sp, #0]
 8001160:	231b      	movs	r3, #27
 8001162:	4a27      	ldr	r2, [pc, #156]	; (8001200 <HAL_I2C_SlaveRxCpltCallback+0xe4>)
 8001164:	2102      	movs	r1, #2
 8001166:	4828      	ldr	r0, [pc, #160]	; (8001208 <HAL_I2C_SlaveRxCpltCallback+0xec>)
 8001168:	f002 fe9a 	bl	8003ea0 <HAL_I2C_Master_Transmit>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d1ea      	bne.n	8001148 <HAL_I2C_SlaveRxCpltCallback+0x2c>
		}
		if(counter >= MAX_NUMBER_OF_ATTEMPTS){
 8001172:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001176:	2b02      	cmp	r3, #2
 8001178:	d906      	bls.n	8001188 <HAL_I2C_SlaveRxCpltCallback+0x6c>
			counter_stop_master++;
 800117a:	4b24      	ldr	r3, [pc, #144]	; (800120c <HAL_I2C_SlaveRxCpltCallback+0xf0>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	3301      	adds	r3, #1
 8001180:	b2da      	uxtb	r2, r3
 8001182:	4b22      	ldr	r3, [pc, #136]	; (800120c <HAL_I2C_SlaveRxCpltCallback+0xf0>)
 8001184:	701a      	strb	r2, [r3, #0]
			counter_stop_master=0;
		}

	}

}
 8001186:	e035      	b.n	80011f4 <HAL_I2C_SlaveRxCpltCallback+0xd8>
			counter_stop_master=0;
 8001188:	4b20      	ldr	r3, [pc, #128]	; (800120c <HAL_I2C_SlaveRxCpltCallback+0xf0>)
 800118a:	2200      	movs	r2, #0
 800118c:	701a      	strb	r2, [r3, #0]
}
 800118e:	e031      	b.n	80011f4 <HAL_I2C_SlaveRxCpltCallback+0xd8>
		Global_Struct_t Wrong[PANDA_STRUCT_GLOBAL_SIZE] = {255, 255, 255, 255, 255, 255,255, 255, 255,255, 255, 255,255, 255, 255,255, 255, 255,255, 255, 255,255, 255, 255,255, 255, 255,255, 255, 255, 255};
 8001190:	4b1f      	ldr	r3, [pc, #124]	; (8001210 <HAL_I2C_SlaveRxCpltCallback+0xf4>)
 8001192:	f107 040c 	add.w	r4, r7, #12
 8001196:	461d      	mov	r5, r3
 8001198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800119a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800119c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011a0:	c403      	stmia	r4!, {r0, r1}
 80011a2:	8022      	strh	r2, [r4, #0]
 80011a4:	3402      	adds	r4, #2
 80011a6:	0c13      	lsrs	r3, r2, #16
 80011a8:	7023      	strb	r3, [r4, #0]
		while(counter < MAX_NUMBER_OF_ATTEMPTS && HAL_I2C_Master_Transmit(&hi2c1,(MASTER_ADDRESS<<1), Wrong, PANDA_STRUCT_GLOBAL_SIZE, HAL_MAX_DELAY) != HAL_OK){
 80011aa:	e004      	b.n	80011b6 <HAL_I2C_SlaveRxCpltCallback+0x9a>
			counter++;
 80011ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011b0:	3301      	adds	r3, #1
 80011b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		while(counter < MAX_NUMBER_OF_ATTEMPTS && HAL_I2C_Master_Transmit(&hi2c1,(MASTER_ADDRESS<<1), Wrong, PANDA_STRUCT_GLOBAL_SIZE, HAL_MAX_DELAY) != HAL_OK){
 80011b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d80c      	bhi.n	80011d8 <HAL_I2C_SlaveRxCpltCallback+0xbc>
 80011be:	f107 020c 	add.w	r2, r7, #12
 80011c2:	f04f 33ff 	mov.w	r3, #4294967295
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	231b      	movs	r3, #27
 80011ca:	2102      	movs	r1, #2
 80011cc:	480e      	ldr	r0, [pc, #56]	; (8001208 <HAL_I2C_SlaveRxCpltCallback+0xec>)
 80011ce:	f002 fe67 	bl	8003ea0 <HAL_I2C_Master_Transmit>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d1e9      	bne.n	80011ac <HAL_I2C_SlaveRxCpltCallback+0x90>
		if(counter >= MAX_NUMBER_OF_ATTEMPTS){
 80011d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d906      	bls.n	80011ee <HAL_I2C_SlaveRxCpltCallback+0xd2>
			counter_stop_master++;
 80011e0:	4b0a      	ldr	r3, [pc, #40]	; (800120c <HAL_I2C_SlaveRxCpltCallback+0xf0>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	3301      	adds	r3, #1
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	4b08      	ldr	r3, [pc, #32]	; (800120c <HAL_I2C_SlaveRxCpltCallback+0xf0>)
 80011ea:	701a      	strb	r2, [r3, #0]
}
 80011ec:	e002      	b.n	80011f4 <HAL_I2C_SlaveRxCpltCallback+0xd8>
			counter_stop_master=0;
 80011ee:	4b07      	ldr	r3, [pc, #28]	; (800120c <HAL_I2C_SlaveRxCpltCallback+0xf0>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	701a      	strb	r2, [r3, #0]
}
 80011f4:	bf00      	nop
 80011f6:	3728      	adds	r7, #40	; 0x28
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bdb0      	pop	{r4, r5, r7, pc}
 80011fc:	200002b0 	.word	0x200002b0
 8001200:	200002c8 	.word	0x200002c8
 8001204:	200002e4 	.word	0x200002e4
 8001208:	2000025c 	.word	0x2000025c
 800120c:	200001f4 	.word	0x200001f4
 8001210:	0800d488 	.word	0x0800d488

08001214 <Execution>:


void Execution( void *pvParameters )
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
    #if(VERBOSE == 1)
        printf("Begin Execution at %ld\r\n", pdMS_TO_TICKS(xTaskGetTickCount()));
    #endif

    uint8_t led_sx_white = LED_SX_READ;
 800121c:	4b2b      	ldr	r3, [pc, #172]	; (80012cc <Execution+0xb8>)
 800121e:	7d1b      	ldrb	r3, [r3, #20]
 8001220:	f003 0301 	and.w	r3, r3, #1
 8001224:	73fb      	strb	r3, [r7, #15]
    uint8_t led_dx_white = LED_DX_READ;
 8001226:	4b29      	ldr	r3, [pc, #164]	; (80012cc <Execution+0xb8>)
 8001228:	7d1b      	ldrb	r3, [r3, #20]
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	73bb      	strb	r3, [r7, #14]
    uint8_t led_both_red = LED_BOTH_RED_READ;
 8001230:	4b26      	ldr	r3, [pc, #152]	; (80012cc <Execution+0xb8>)
 8001232:	7d1b      	ldrb	r3, [r3, #20]
 8001234:	f003 0308 	and.w	r3, r3, #8
 8001238:	737b      	strb	r3, [r7, #13]
    uint8_t led_both_white = LED_BOTH_WHITE_READ;
 800123a:	4b24      	ldr	r3, [pc, #144]	; (80012cc <Execution+0xb8>)
 800123c:	7d1b      	ldrb	r3, [r3, #20]
 800123e:	f003 0304 	and.w	r3, r3, #4
 8001242:	733b      	strb	r3, [r7, #12]


    //printf("%d - %d - %d\r\n", led_dx_white, led_both_white, led_both_red);

    if(led_dx_white > 0 || led_both_white > 0){
 8001244:	7bbb      	ldrb	r3, [r7, #14]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d102      	bne.n	8001250 <Execution+0x3c>
 800124a:	7b3b      	ldrb	r3, [r7, #12]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d006      	beq.n	800125e <Execution+0x4a>
    	HAL_GPIO_WritePin(LED1___2_WHITE_GPIO_Port, LED1___2_WHITE_Pin, GPIO_PIN_SET);
 8001250:	2201      	movs	r2, #1
 8001252:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001256:	481e      	ldr	r0, [pc, #120]	; (80012d0 <Execution+0xbc>)
 8001258:	f002 fcc4 	bl	8003be4 <HAL_GPIO_WritePin>
 800125c:	e005      	b.n	800126a <Execution+0x56>
    }else{
    	HAL_GPIO_WritePin(LED1___2_WHITE_GPIO_Port, LED1___2_WHITE_Pin, GPIO_PIN_RESET);
 800125e:	2200      	movs	r2, #0
 8001260:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001264:	481a      	ldr	r0, [pc, #104]	; (80012d0 <Execution+0xbc>)
 8001266:	f002 fcbd 	bl	8003be4 <HAL_GPIO_WritePin>
    }

    if(led_both_red > 0){
 800126a:	7b7b      	ldrb	r3, [r7, #13]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d006      	beq.n	800127e <Execution+0x6a>
    	HAL_GPIO_WritePin(LED_1___2_RED_GPIO_Port, LED_1___2_RED_Pin, GPIO_PIN_SET);
 8001270:	2201      	movs	r2, #1
 8001272:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001276:	4816      	ldr	r0, [pc, #88]	; (80012d0 <Execution+0xbc>)
 8001278:	f002 fcb4 	bl	8003be4 <HAL_GPIO_WritePin>
 800127c:	e005      	b.n	800128a <Execution+0x76>
    }else{
    	HAL_GPIO_WritePin(LED_1___2_RED_GPIO_Port, LED_1___2_RED_Pin, GPIO_PIN_RESET);
 800127e:	2200      	movs	r2, #0
 8001280:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001284:	4812      	ldr	r0, [pc, #72]	; (80012d0 <Execution+0xbc>)
 8001286:	f002 fcad 	bl	8003be4 <HAL_GPIO_WritePin>
    }



    if(degradato == 1 || temp > MAX_TEMPERATURE){
 800128a:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <Execution+0xc0>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d00a      	beq.n	80012a8 <Execution+0x94>
 8001292:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <Execution+0xc4>)
 8001294:	edd3 7a00 	vldr	s15, [r3]
 8001298:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80012dc <Execution+0xc8>
 800129c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a4:	dc00      	bgt.n	80012a8 <Execution+0x94>

    #if(VERBOSE == 1)
        printf("Exit Execution at %ld\r\n", pdMS_TO_TICKS(xTaskGetTickCount()));
    #endif

}
 80012a6:	e00c      	b.n	80012c2 <Execution+0xae>
    	HAL_GPIO_WritePin(Turn_Off_Master_GPIO_Port, Turn_Off_Master_Pin, GPIO_PIN_SET);
 80012a8:	2201      	movs	r2, #1
 80012aa:	2110      	movs	r1, #16
 80012ac:	4808      	ldr	r0, [pc, #32]	; (80012d0 <Execution+0xbc>)
 80012ae:	f002 fc99 	bl	8003be4 <HAL_GPIO_WritePin>
		motor_mixed_stop(&huart6, 128);
 80012b2:	2180      	movs	r1, #128	; 0x80
 80012b4:	480a      	ldr	r0, [pc, #40]	; (80012e0 <Execution+0xcc>)
 80012b6:	f000 fde1 	bl	8001e7c <motor_mixed_stop>
		motor_mixed_stop(&huart6, 129);
 80012ba:	2181      	movs	r1, #129	; 0x81
 80012bc:	4808      	ldr	r0, [pc, #32]	; (80012e0 <Execution+0xcc>)
 80012be:	f000 fddd 	bl	8001e7c <motor_mixed_stop>
}
 80012c2:	bf00      	nop
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	200002c8 	.word	0x200002c8
 80012d0:	40020800 	.word	0x40020800
 80012d4:	200001f5 	.word	0x200001f5
 80012d8:	200001f8 	.word	0x200001f8
 80012dc:	42a00000 	.word	0x42a00000
 80012e0:	20000668 	.word	0x20000668

080012e4 <FreeRTOS_Tasks_Init>:


void FreeRTOS_Tasks_Init(){
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af06      	add	r7, sp, #24

    /*
        Creation of both periodic tasks, Ultrasound and Check_Danger.
        Check the doc for more details.
    */
    vSchedulerPeriodicTaskCreate(Encoder, "Encoder", configMINIMAL_STACK_SIZE, NULL, 1, &xHandle2,
 80012ea:	2314      	movs	r3, #20
 80012ec:	9305      	str	r3, [sp, #20]
 80012ee:	230a      	movs	r3, #10
 80012f0:	9304      	str	r3, [sp, #16]
 80012f2:	232a      	movs	r3, #42	; 0x2a
 80012f4:	9303      	str	r3, [sp, #12]
 80012f6:	2300      	movs	r3, #0
 80012f8:	9302      	str	r3, [sp, #8]
 80012fa:	4b2a      	ldr	r3, [pc, #168]	; (80013a4 <FreeRTOS_Tasks_Init+0xc0>)
 80012fc:	9301      	str	r3, [sp, #4]
 80012fe:	2301      	movs	r3, #1
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	2300      	movs	r3, #0
 8001304:	2280      	movs	r2, #128	; 0x80
 8001306:	4928      	ldr	r1, [pc, #160]	; (80013a8 <FreeRTOS_Tasks_Init+0xc4>)
 8001308:	4828      	ldr	r0, [pc, #160]	; (80013ac <FreeRTOS_Tasks_Init+0xc8>)
 800130a:	f000 fe5d 	bl	8001fc8 <vSchedulerPeriodicTaskCreate>
            pdMS_TO_TICKS(0),   //phase
            pdMS_TO_TICKS(42), //period
            pdMS_TO_TICKS(10),  //WCET
            pdMS_TO_TICKS(20)); //Deadline
    vSchedulerPeriodicTaskCreate(Battery_Sensor, "Battery_Sensor", configMINIMAL_STACK_SIZE, NULL, 2, &xHandle1,
 800130e:	2314      	movs	r3, #20
 8001310:	9305      	str	r3, [sp, #20]
 8001312:	2302      	movs	r3, #2
 8001314:	9304      	str	r3, [sp, #16]
 8001316:	232a      	movs	r3, #42	; 0x2a
 8001318:	9303      	str	r3, [sp, #12]
 800131a:	230a      	movs	r3, #10
 800131c:	9302      	str	r3, [sp, #8]
 800131e:	4b24      	ldr	r3, [pc, #144]	; (80013b0 <FreeRTOS_Tasks_Init+0xcc>)
 8001320:	9301      	str	r3, [sp, #4]
 8001322:	2302      	movs	r3, #2
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	2300      	movs	r3, #0
 8001328:	2280      	movs	r2, #128	; 0x80
 800132a:	4922      	ldr	r1, [pc, #136]	; (80013b4 <FreeRTOS_Tasks_Init+0xd0>)
 800132c:	4822      	ldr	r0, [pc, #136]	; (80013b8 <FreeRTOS_Tasks_Init+0xd4>)
 800132e:	f000 fe4b 	bl	8001fc8 <vSchedulerPeriodicTaskCreate>
            pdMS_TO_TICKS(10),  //phase
            pdMS_TO_TICKS(42), //period
            pdMS_TO_TICKS(2),  //WCET
            pdMS_TO_TICKS(20)); //Deadline
    vSchedulerPeriodicTaskCreate(Temperature_Sensor, "Temperature_Sensor", configMINIMAL_STACK_SIZE, NULL, 3, &xHandle3,
 8001332:	2314      	movs	r3, #20
 8001334:	9305      	str	r3, [sp, #20]
 8001336:	2308      	movs	r3, #8
 8001338:	9304      	str	r3, [sp, #16]
 800133a:	232a      	movs	r3, #42	; 0x2a
 800133c:	9303      	str	r3, [sp, #12]
 800133e:	230a      	movs	r3, #10
 8001340:	9302      	str	r3, [sp, #8]
 8001342:	4b1e      	ldr	r3, [pc, #120]	; (80013bc <FreeRTOS_Tasks_Init+0xd8>)
 8001344:	9301      	str	r3, [sp, #4]
 8001346:	2303      	movs	r3, #3
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	2300      	movs	r3, #0
 800134c:	2280      	movs	r2, #128	; 0x80
 800134e:	491c      	ldr	r1, [pc, #112]	; (80013c0 <FreeRTOS_Tasks_Init+0xdc>)
 8001350:	481c      	ldr	r0, [pc, #112]	; (80013c4 <FreeRTOS_Tasks_Init+0xe0>)
 8001352:	f000 fe39 	bl	8001fc8 <vSchedulerPeriodicTaskCreate>
            pdMS_TO_TICKS(10),  //phase
            pdMS_TO_TICKS(42), //period
            pdMS_TO_TICKS(8),  //WCET
            pdMS_TO_TICKS(20)); //Deadline
    vSchedulerPeriodicTaskCreate(Comunication, "Comunication", configMINIMAL_STACK_SIZE, NULL, 4, &xHandle4,
 8001356:	2316      	movs	r3, #22
 8001358:	9305      	str	r3, [sp, #20]
 800135a:	2302      	movs	r3, #2
 800135c:	9304      	str	r3, [sp, #16]
 800135e:	232a      	movs	r3, #42	; 0x2a
 8001360:	9303      	str	r3, [sp, #12]
 8001362:	2314      	movs	r3, #20
 8001364:	9302      	str	r3, [sp, #8]
 8001366:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <FreeRTOS_Tasks_Init+0xe4>)
 8001368:	9301      	str	r3, [sp, #4]
 800136a:	2304      	movs	r3, #4
 800136c:	9300      	str	r3, [sp, #0]
 800136e:	2300      	movs	r3, #0
 8001370:	2280      	movs	r2, #128	; 0x80
 8001372:	4916      	ldr	r1, [pc, #88]	; (80013cc <FreeRTOS_Tasks_Init+0xe8>)
 8001374:	4816      	ldr	r0, [pc, #88]	; (80013d0 <FreeRTOS_Tasks_Init+0xec>)
 8001376:	f000 fe27 	bl	8001fc8 <vSchedulerPeriodicTaskCreate>
            pdMS_TO_TICKS(20),  //phase
            pdMS_TO_TICKS(42), //period
            pdMS_TO_TICKS(2),  //WCET
            pdMS_TO_TICKS(22));//Deadline
    vSchedulerPeriodicTaskCreate(Execution, "Execution", configMINIMAL_STACK_SIZE, NULL, 5, &xHandle5,
 800137a:	232a      	movs	r3, #42	; 0x2a
 800137c:	9305      	str	r3, [sp, #20]
 800137e:	2308      	movs	r3, #8
 8001380:	9304      	str	r3, [sp, #16]
 8001382:	232a      	movs	r3, #42	; 0x2a
 8001384:	9303      	str	r3, [sp, #12]
 8001386:	2322      	movs	r3, #34	; 0x22
 8001388:	9302      	str	r3, [sp, #8]
 800138a:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <FreeRTOS_Tasks_Init+0xf0>)
 800138c:	9301      	str	r3, [sp, #4]
 800138e:	2305      	movs	r3, #5
 8001390:	9300      	str	r3, [sp, #0]
 8001392:	2300      	movs	r3, #0
 8001394:	2280      	movs	r2, #128	; 0x80
 8001396:	4910      	ldr	r1, [pc, #64]	; (80013d8 <FreeRTOS_Tasks_Init+0xf4>)
 8001398:	4810      	ldr	r0, [pc, #64]	; (80013dc <FreeRTOS_Tasks_Init+0xf8>)
 800139a:	f000 fe15 	bl	8001fc8 <vSchedulerPeriodicTaskCreate>
            pdMS_TO_TICKS(8),  //WCET
            pdMS_TO_TICKS(42));//Deadline

    /* Initializes the mutex */

}
 800139e:	bf00      	nop
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000204 	.word	0x20000204
 80013a8:	0800d4a4 	.word	0x0800d4a4
 80013ac:	08000f95 	.word	0x08000f95
 80013b0:	20000200 	.word	0x20000200
 80013b4:	0800d4ac 	.word	0x0800d4ac
 80013b8:	08001009 	.word	0x08001009
 80013bc:	20000208 	.word	0x20000208
 80013c0:	0800d4bc 	.word	0x0800d4bc
 80013c4:	0800101d 	.word	0x0800101d
 80013c8:	2000020c 	.word	0x2000020c
 80013cc:	0800d4d0 	.word	0x0800d4d0
 80013d0:	080010d1 	.word	0x080010d1
 80013d4:	20000210 	.word	0x20000210
 80013d8:	0800d4e0 	.word	0x0800d4e0
 80013dc:	08001215 	.word	0x08001215

080013e0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013e6:	463b      	mov	r3, r7
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013f2:	4b21      	ldr	r3, [pc, #132]	; (8001478 <MX_ADC1_Init+0x98>)
 80013f4:	4a21      	ldr	r2, [pc, #132]	; (800147c <MX_ADC1_Init+0x9c>)
 80013f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013f8:	4b1f      	ldr	r3, [pc, #124]	; (8001478 <MX_ADC1_Init+0x98>)
 80013fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001400:	4b1d      	ldr	r3, [pc, #116]	; (8001478 <MX_ADC1_Init+0x98>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001406:	4b1c      	ldr	r3, [pc, #112]	; (8001478 <MX_ADC1_Init+0x98>)
 8001408:	2200      	movs	r2, #0
 800140a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800140c:	4b1a      	ldr	r3, [pc, #104]	; (8001478 <MX_ADC1_Init+0x98>)
 800140e:	2201      	movs	r2, #1
 8001410:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001412:	4b19      	ldr	r3, [pc, #100]	; (8001478 <MX_ADC1_Init+0x98>)
 8001414:	2200      	movs	r2, #0
 8001416:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800141a:	4b17      	ldr	r3, [pc, #92]	; (8001478 <MX_ADC1_Init+0x98>)
 800141c:	2200      	movs	r2, #0
 800141e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001420:	4b15      	ldr	r3, [pc, #84]	; (8001478 <MX_ADC1_Init+0x98>)
 8001422:	4a17      	ldr	r2, [pc, #92]	; (8001480 <MX_ADC1_Init+0xa0>)
 8001424:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001426:	4b14      	ldr	r3, [pc, #80]	; (8001478 <MX_ADC1_Init+0x98>)
 8001428:	2200      	movs	r2, #0
 800142a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800142c:	4b12      	ldr	r3, [pc, #72]	; (8001478 <MX_ADC1_Init+0x98>)
 800142e:	2201      	movs	r2, #1
 8001430:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001432:	4b11      	ldr	r3, [pc, #68]	; (8001478 <MX_ADC1_Init+0x98>)
 8001434:	2200      	movs	r2, #0
 8001436:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800143a:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <MX_ADC1_Init+0x98>)
 800143c:	2200      	movs	r2, #0
 800143e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001440:	480d      	ldr	r0, [pc, #52]	; (8001478 <MX_ADC1_Init+0x98>)
 8001442:	f001 fd73 	bl	8002f2c <HAL_ADC_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800144c:	f000 fa1c 	bl	8001888 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001450:	2310      	movs	r3, #16
 8001452:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001454:	2301      	movs	r3, #1
 8001456:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001458:	2300      	movs	r3, #0
 800145a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800145c:	463b      	mov	r3, r7
 800145e:	4619      	mov	r1, r3
 8001460:	4805      	ldr	r0, [pc, #20]	; (8001478 <MX_ADC1_Init+0x98>)
 8001462:	f001 fef3 	bl	800324c <HAL_ADC_ConfigChannel>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800146c:	f000 fa0c 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001470:	bf00      	nop
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20000214 	.word	0x20000214
 800147c:	40012000 	.word	0x40012000
 8001480:	0f000001 	.word	0x0f000001

08001484 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a0b      	ldr	r2, [pc, #44]	; (80014c0 <HAL_ADC_MspInit+0x3c>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d10d      	bne.n	80014b2 <HAL_ADC_MspInit+0x2e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <HAL_ADC_MspInit+0x40>)
 800149c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149e:	4a09      	ldr	r2, [pc, #36]	; (80014c4 <HAL_ADC_MspInit+0x40>)
 80014a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014a4:	6453      	str	r3, [r2, #68]	; 0x44
 80014a6:	4b07      	ldr	r3, [pc, #28]	; (80014c4 <HAL_ADC_MspInit+0x40>)
 80014a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80014b2:	bf00      	nop
 80014b4:	3714      	adds	r7, #20
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	40012000 	.word	0x40012000
 80014c4:	40023800 	.word	0x40023800

080014c8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	vSchedulerInit();
 80014cc:	f000 ffc2 	bl	8002454 <vSchedulerInit>
	printf("------------Hello From FreeRTOS------------\r\n");
 80014d0:	4804      	ldr	r0, [pc, #16]	; (80014e4 <MX_FREERTOS_Init+0x1c>)
 80014d2:	f009 ffd9 	bl	800b488 <puts>
	vSchedulerInit();
 80014d6:	f000 ffbd 	bl	8002454 <vSchedulerInit>
  /* creation of defaultTask */


  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  FreeRTOS_Tasks_Init();
 80014da:	f7ff ff03 	bl	80012e4 <FreeRTOS_Tasks_Init>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */

  /* USER CODE END RTOS_EVENTS */

}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	0800d4ec 	.word	0x0800d4ec

080014e8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b088      	sub	sp, #32
 80014ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ee:	f107 030c 	add.w	r3, r7, #12
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	60da      	str	r2, [r3, #12]
 80014fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	4b26      	ldr	r3, [pc, #152]	; (800159c <MX_GPIO_Init+0xb4>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	4a25      	ldr	r2, [pc, #148]	; (800159c <MX_GPIO_Init+0xb4>)
 8001508:	f043 0304 	orr.w	r3, r3, #4
 800150c:	6313      	str	r3, [r2, #48]	; 0x30
 800150e:	4b23      	ldr	r3, [pc, #140]	; (800159c <MX_GPIO_Init+0xb4>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	f003 0304 	and.w	r3, r3, #4
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	607b      	str	r3, [r7, #4]
 800151e:	4b1f      	ldr	r3, [pc, #124]	; (800159c <MX_GPIO_Init+0xb4>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	4a1e      	ldr	r2, [pc, #120]	; (800159c <MX_GPIO_Init+0xb4>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	6313      	str	r3, [r2, #48]	; 0x30
 800152a:	4b1c      	ldr	r3, [pc, #112]	; (800159c <MX_GPIO_Init+0xb4>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	607b      	str	r3, [r7, #4]
 8001534:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	603b      	str	r3, [r7, #0]
 800153a:	4b18      	ldr	r3, [pc, #96]	; (800159c <MX_GPIO_Init+0xb4>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	4a17      	ldr	r2, [pc, #92]	; (800159c <MX_GPIO_Init+0xb4>)
 8001540:	f043 0302 	orr.w	r3, r3, #2
 8001544:	6313      	str	r3, [r2, #48]	; 0x30
 8001546:	4b15      	ldr	r3, [pc, #84]	; (800159c <MX_GPIO_Init+0xb4>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	603b      	str	r3, [r7, #0]
 8001550:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Turn_Off_Master_Pin|LED1___2_WHITE_Pin|LED_1___2_RED_Pin, GPIO_PIN_RESET);
 8001552:	2200      	movs	r2, #0
 8001554:	f241 4110 	movw	r1, #5136	; 0x1410
 8001558:	4811      	ldr	r0, [pc, #68]	; (80015a0 <MX_GPIO_Init+0xb8>)
 800155a:	f002 fb43 	bl	8003be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Sync_Input_Pin;
 800155e:	2304      	movs	r3, #4
 8001560:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Sync_Input_GPIO_Port, &GPIO_InitStruct);
 800156a:	f107 030c 	add.w	r3, r7, #12
 800156e:	4619      	mov	r1, r3
 8001570:	480b      	ldr	r0, [pc, #44]	; (80015a0 <MX_GPIO_Init+0xb8>)
 8001572:	f002 f99b 	bl	80038ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Turn_Off_Master_Pin|LED1___2_WHITE_Pin|LED_1___2_RED_Pin;
 8001576:	f241 4310 	movw	r3, #5136	; 0x1410
 800157a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157c:	2301      	movs	r3, #1
 800157e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001584:	2300      	movs	r3, #0
 8001586:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001588:	f107 030c 	add.w	r3, r7, #12
 800158c:	4619      	mov	r1, r3
 800158e:	4804      	ldr	r0, [pc, #16]	; (80015a0 <MX_GPIO_Init+0xb8>)
 8001590:	f002 f98c 	bl	80038ac <HAL_GPIO_Init>

}
 8001594:	bf00      	nop
 8001596:	3720      	adds	r7, #32
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40023800 	.word	0x40023800
 80015a0:	40020800 	.word	0x40020800

080015a4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015a8:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <MX_I2C1_Init+0x50>)
 80015aa:	4a13      	ldr	r2, [pc, #76]	; (80015f8 <MX_I2C1_Init+0x54>)
 80015ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80015ae:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <MX_I2C1_Init+0x50>)
 80015b0:	4a12      	ldr	r2, [pc, #72]	; (80015fc <MX_I2C1_Init+0x58>)
 80015b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015b4:	4b0f      	ldr	r3, [pc, #60]	; (80015f4 <MX_I2C1_Init+0x50>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 178;
 80015ba:	4b0e      	ldr	r3, [pc, #56]	; (80015f4 <MX_I2C1_Init+0x50>)
 80015bc:	22b2      	movs	r2, #178	; 0xb2
 80015be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015c0:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <MX_I2C1_Init+0x50>)
 80015c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015c8:	4b0a      	ldr	r3, [pc, #40]	; (80015f4 <MX_I2C1_Init+0x50>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015ce:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <MX_I2C1_Init+0x50>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015d4:	4b07      	ldr	r3, [pc, #28]	; (80015f4 <MX_I2C1_Init+0x50>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015da:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <MX_I2C1_Init+0x50>)
 80015dc:	2200      	movs	r2, #0
 80015de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015e0:	4804      	ldr	r0, [pc, #16]	; (80015f4 <MX_I2C1_Init+0x50>)
 80015e2:	f002 fb19 	bl	8003c18 <HAL_I2C_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015ec:	f000 f94c 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015f0:	bf00      	nop
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	2000025c 	.word	0x2000025c
 80015f8:	40005400 	.word	0x40005400
 80015fc:	00061a80 	.word	0x00061a80

08001600 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	; 0x28
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a1d      	ldr	r2, [pc, #116]	; (8001694 <HAL_I2C_MspInit+0x94>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d134      	bne.n	800168c <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	4b1c      	ldr	r3, [pc, #112]	; (8001698 <HAL_I2C_MspInit+0x98>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	4a1b      	ldr	r2, [pc, #108]	; (8001698 <HAL_I2C_MspInit+0x98>)
 800162c:	f043 0302 	orr.w	r3, r3, #2
 8001630:	6313      	str	r3, [r2, #48]	; 0x30
 8001632:	4b19      	ldr	r3, [pc, #100]	; (8001698 <HAL_I2C_MspInit+0x98>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Comunication_SCL_Pin|Comunication_SDA_Pin;
 800163e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001642:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001644:	2312      	movs	r3, #18
 8001646:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001648:	2301      	movs	r3, #1
 800164a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164c:	2303      	movs	r3, #3
 800164e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001650:	2304      	movs	r3, #4
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001654:	f107 0314 	add.w	r3, r7, #20
 8001658:	4619      	mov	r1, r3
 800165a:	4810      	ldr	r0, [pc, #64]	; (800169c <HAL_I2C_MspInit+0x9c>)
 800165c:	f002 f926 	bl	80038ac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001660:	2300      	movs	r3, #0
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <HAL_I2C_MspInit+0x98>)
 8001666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001668:	4a0b      	ldr	r2, [pc, #44]	; (8001698 <HAL_I2C_MspInit+0x98>)
 800166a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800166e:	6413      	str	r3, [r2, #64]	; 0x40
 8001670:	4b09      	ldr	r3, [pc, #36]	; (8001698 <HAL_I2C_MspInit+0x98>)
 8001672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001674:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800167c:	2200      	movs	r2, #0
 800167e:	2105      	movs	r1, #5
 8001680:	201f      	movs	r0, #31
 8001682:	f002 f8b9 	bl	80037f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001686:	201f      	movs	r0, #31
 8001688:	f002 f8d2 	bl	8003830 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800168c:	bf00      	nop
 800168e:	3728      	adds	r7, #40	; 0x28
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40005400 	.word	0x40005400
 8001698:	40023800 	.word	0x40023800
 800169c:	40020400 	.word	0x40020400

080016a0 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80016a8:	1d39      	adds	r1, r7, #4
 80016aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016ae:	2201      	movs	r2, #1
 80016b0:	4803      	ldr	r0, [pc, #12]	; (80016c0 <__io_putchar+0x20>)
 80016b2:	f005 fe53 	bl	800735c <HAL_UART_Transmit>
  return ch;
 80016b6:	687b      	ldr	r3, [r7, #4]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20000624 	.word	0x20000624

080016c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016c8:	f001 fbee 	bl	8002ea8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016cc:	f000 f85e 	bl	800178c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016d0:	f7ff ff0a 	bl	80014e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80016d4:	f001 faec 	bl	8002cb0 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80016d8:	f001 fb14 	bl	8002d04 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 80016dc:	f001 f876 	bl	80027cc <MX_TIM2_Init>
  MX_TIM3_Init();
 80016e0:	f001 f8c8 	bl	8002874 <MX_TIM3_Init>
  MX_TIM4_Init();
 80016e4:	f001 f91a 	bl	800291c <MX_TIM4_Init>
  MX_TIM5_Init();
 80016e8:	f001 f96c 	bl	80029c4 <MX_TIM5_Init>
  MX_I2C1_Init();
 80016ec:	f7ff ff5a 	bl	80015a4 <MX_I2C1_Init>
  MX_ADC1_Init();
 80016f0:	f7ff fe76 	bl	80013e0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 80016f4:	4817      	ldr	r0, [pc, #92]	; (8001754 <main+0x90>)
 80016f6:	f001 fc5d 	bl	8002fb4 <HAL_ADC_Start>
  MX_USART2_UART_Init();
 80016fa:	f001 fad9 	bl	8002cb0 <MX_USART2_UART_Init>

  HAL_GPIO_WritePin(Turn_Off_Master_GPIO_Port, Turn_Off_Master_Pin, GPIO_PIN_RESET);
 80016fe:	2200      	movs	r2, #0
 8001700:	2110      	movs	r1, #16
 8001702:	4815      	ldr	r0, [pc, #84]	; (8001758 <main+0x94>)
 8001704:	f002 fa6e 	bl	8003be4 <HAL_GPIO_WritePin>

  Global_Struct_Slave_Init(Global_Struct_Slave);
 8001708:	4814      	ldr	r0, [pc, #80]	; (800175c <main+0x98>)
 800170a:	f000 f990 	bl	8001a2e <Global_Struct_Slave_Init>
  Global_Struct_Master_Init(Global_Struct_From_Master);
 800170e:	4814      	ldr	r0, [pc, #80]	; (8001760 <main+0x9c>)
 8001710:	f000 f8bf 	bl	8001892 <Global_Struct_Master_Init>
  Global_Struct_Init(Global_Struct);
 8001714:	4813      	ldr	r0, [pc, #76]	; (8001764 <main+0xa0>)
 8001716:	f000 f919 	bl	800194c <Global_Struct_Init>
  panda_encoder_init(&EncoderFL, &htim2);
 800171a:	4913      	ldr	r1, [pc, #76]	; (8001768 <main+0xa4>)
 800171c:	4813      	ldr	r0, [pc, #76]	; (800176c <main+0xa8>)
 800171e:	f000 fa5f 	bl	8001be0 <panda_encoder_init>
  panda_encoder_init(&EncoderFR, &htim3);
 8001722:	4913      	ldr	r1, [pc, #76]	; (8001770 <main+0xac>)
 8001724:	4813      	ldr	r0, [pc, #76]	; (8001774 <main+0xb0>)
 8001726:	f000 fa5b 	bl	8001be0 <panda_encoder_init>
  panda_encoder_init(&EncoderBL, &htim4);
 800172a:	4913      	ldr	r1, [pc, #76]	; (8001778 <main+0xb4>)
 800172c:	4813      	ldr	r0, [pc, #76]	; (800177c <main+0xb8>)
 800172e:	f000 fa57 	bl	8001be0 <panda_encoder_init>
  panda_encoder_init(&EncoderBR, &htim5);
 8001732:	4913      	ldr	r1, [pc, #76]	; (8001780 <main+0xbc>)
 8001734:	4813      	ldr	r0, [pc, #76]	; (8001784 <main+0xc0>)
 8001736:	f000 fa53 	bl	8001be0 <panda_encoder_init>
  panda_comunication_init_sync(&hi2c1, Sync_Input_GPIO_Port, Sync_Input_Pin);
 800173a:	2204      	movs	r2, #4
 800173c:	4906      	ldr	r1, [pc, #24]	; (8001758 <main+0x94>)
 800173e:	4812      	ldr	r0, [pc, #72]	; (8001788 <main+0xc4>)
 8001740:	f000 f992 	bl	8001a68 <panda_comunication_init_sync>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001744:	f006 f9c2 	bl	8007acc <osKernelInitialize>
  MX_FREERTOS_Init();
 8001748:	f7ff febe 	bl	80014c8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800174c:	f006 f9e2 	bl	8007b14 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001750:	e7fe      	b.n	8001750 <main+0x8c>
 8001752:	bf00      	nop
 8001754:	20000214 	.word	0x20000214
 8001758:	40020800 	.word	0x40020800
 800175c:	200002e4 	.word	0x200002e4
 8001760:	200002b0 	.word	0x200002b0
 8001764:	200002c8 	.word	0x200002c8
 8001768:	20000504 	.word	0x20000504
 800176c:	200002ec 	.word	0x200002ec
 8001770:	2000054c 	.word	0x2000054c
 8001774:	200002f8 	.word	0x200002f8
 8001778:	20000594 	.word	0x20000594
 800177c:	20000304 	.word	0x20000304
 8001780:	200005dc 	.word	0x200005dc
 8001784:	20000310 	.word	0x20000310
 8001788:	2000025c 	.word	0x2000025c

0800178c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b094      	sub	sp, #80	; 0x50
 8001790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001792:	f107 0320 	add.w	r3, r7, #32
 8001796:	2230      	movs	r2, #48	; 0x30
 8001798:	2100      	movs	r1, #0
 800179a:	4618      	mov	r0, r3
 800179c:	f009 ff54 	bl	800b648 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017a0:	f107 030c 	add.w	r3, r7, #12
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017b0:	2300      	movs	r3, #0
 80017b2:	60bb      	str	r3, [r7, #8]
 80017b4:	4b29      	ldr	r3, [pc, #164]	; (800185c <SystemClock_Config+0xd0>)
 80017b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b8:	4a28      	ldr	r2, [pc, #160]	; (800185c <SystemClock_Config+0xd0>)
 80017ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017be:	6413      	str	r3, [r2, #64]	; 0x40
 80017c0:	4b26      	ldr	r3, [pc, #152]	; (800185c <SystemClock_Config+0xd0>)
 80017c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c8:	60bb      	str	r3, [r7, #8]
 80017ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80017cc:	2300      	movs	r3, #0
 80017ce:	607b      	str	r3, [r7, #4]
 80017d0:	4b23      	ldr	r3, [pc, #140]	; (8001860 <SystemClock_Config+0xd4>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80017d8:	4a21      	ldr	r2, [pc, #132]	; (8001860 <SystemClock_Config+0xd4>)
 80017da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017de:	6013      	str	r3, [r2, #0]
 80017e0:	4b1f      	ldr	r3, [pc, #124]	; (8001860 <SystemClock_Config+0xd4>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017e8:	607b      	str	r3, [r7, #4]
 80017ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017ec:	2302      	movs	r3, #2
 80017ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017f0:	2301      	movs	r3, #1
 80017f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017f4:	2310      	movs	r3, #16
 80017f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017f8:	2302      	movs	r3, #2
 80017fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017fc:	2300      	movs	r3, #0
 80017fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001800:	2308      	movs	r3, #8
 8001802:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001804:	2354      	movs	r3, #84	; 0x54
 8001806:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001808:	2302      	movs	r3, #2
 800180a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800180c:	2304      	movs	r3, #4
 800180e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001810:	f107 0320 	add.w	r3, r7, #32
 8001814:	4618      	mov	r0, r3
 8001816:	f004 fc2d 	bl	8006074 <HAL_RCC_OscConfig>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001820:	f000 f832 	bl	8001888 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001824:	230f      	movs	r3, #15
 8001826:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001828:	2302      	movs	r3, #2
 800182a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001830:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001834:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001836:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800183a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800183c:	f107 030c 	add.w	r3, r7, #12
 8001840:	2102      	movs	r1, #2
 8001842:	4618      	mov	r0, r3
 8001844:	f004 fe8e 	bl	8006564 <HAL_RCC_ClockConfig>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800184e:	f000 f81b 	bl	8001888 <Error_Handler>
  }
}
 8001852:	bf00      	nop
 8001854:	3750      	adds	r7, #80	; 0x50
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40023800 	.word	0x40023800
 8001860:	40007000 	.word	0x40007000

08001864 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a04      	ldr	r2, [pc, #16]	; (8001884 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d101      	bne.n	800187a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001876:	f001 fb39 	bl	8002eec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40014800 	.word	0x40014800

08001888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800188c:	b672      	cpsid	i
}
 800188e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001890:	e7fe      	b.n	8001890 <Error_Handler+0x8>

08001892 <Global_Struct_Master_Init>:
#include "main.h"
#if (VERBOSE == 1)
	#include "usart.h"
#endif

void Global_Struct_Master_Init(Global_Struct_t* Global_Struct_Master){
 8001892:	b480      	push	{r7}
 8001894:	b083      	sub	sp, #12
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
	Global_Struct_Master[AccelerometerX_High] = 0;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	701a      	strb	r2, [r3, #0]
	Global_Struct_Master[AccelerometerX_Low] = 0;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3301      	adds	r3, #1
 80018a4:	2200      	movs	r2, #0
 80018a6:	701a      	strb	r2, [r3, #0]
	Global_Struct_Master[AccelerometerY_High] = 0;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3302      	adds	r3, #2
 80018ac:	2200      	movs	r2, #0
 80018ae:	701a      	strb	r2, [r3, #0]
	Global_Struct_Master[AccelerometerY_Low] = 0;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3303      	adds	r3, #3
 80018b4:	2200      	movs	r2, #0
 80018b6:	701a      	strb	r2, [r3, #0]
	Global_Struct_Master[AccelerometerZ_High] = 0;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3304      	adds	r3, #4
 80018bc:	2200      	movs	r2, #0
 80018be:	701a      	strb	r2, [r3, #0]
	Global_Struct_Master[AccelerometerZ_Low] = 0;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3305      	adds	r3, #5
 80018c4:	2200      	movs	r2, #0
 80018c6:	701a      	strb	r2, [r3, #0]
	Global_Struct_Master[GyroscopeX_High] = 0;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3306      	adds	r3, #6
 80018cc:	2200      	movs	r2, #0
 80018ce:	701a      	strb	r2, [r3, #0]
	Global_Struct_Master[GyroscopeX_Low] = 0;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3307      	adds	r3, #7
 80018d4:	2200      	movs	r2, #0
 80018d6:	701a      	strb	r2, [r3, #0]
	Global_Struct_Master[GyroscopeY_High] = 0;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3308      	adds	r3, #8
 80018dc:	2200      	movs	r2, #0
 80018de:	701a      	strb	r2, [r3, #0]
	Global_Struct_Master[GyroscopeY_Low] = 0;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3309      	adds	r3, #9
 80018e4:	2200      	movs	r2, #0
 80018e6:	701a      	strb	r2, [r3, #0]
	Global_Struct_Master[GyroscopeZ_High] = 0;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	330a      	adds	r3, #10
 80018ec:	2200      	movs	r2, #0
 80018ee:	701a      	strb	r2, [r3, #0]
	Global_Struct_Master[GyroscopeZ_Low] = 0;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	330b      	adds	r3, #11
 80018f4:	2200      	movs	r2, #0
 80018f6:	701a      	strb	r2, [r3, #0]
	Global_Struct_Master[DistanceMiddle_High] = 0;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	330c      	adds	r3, #12
 80018fc:	2200      	movs	r2, #0
 80018fe:	701a      	strb	r2, [r3, #0]
	Global_Struct_Master[DistanceMiddle_Low] = 127;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	330d      	adds	r3, #13
 8001904:	227f      	movs	r2, #127	; 0x7f
 8001906:	701a      	strb	r2, [r3, #0]
	Global_Struct_Master[DistanceLeft_High] = 0;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	330e      	adds	r3, #14
 800190c:	2200      	movs	r2, #0
 800190e:	701a      	strb	r2, [r3, #0]
	Global_Struct_Master[DistanceLeft_Low] = 127;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	330f      	adds	r3, #15
 8001914:	227f      	movs	r2, #127	; 0x7f
 8001916:	701a      	strb	r2, [r3, #0]
	Global_Struct_Master[DistanceRight_High] = 0;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3310      	adds	r3, #16
 800191c:	2200      	movs	r2, #0
 800191e:	701a      	strb	r2, [r3, #0]
	Global_Struct_Master[DistanceRight_Low] = 127;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3311      	adds	r3, #17
 8001924:	227f      	movs	r2, #127	; 0x7f
 8001926:	701a      	strb	r2, [r3, #0]
	Global_Struct_Master[DriveSpeed] = 128;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3312      	adds	r3, #18
 800192c:	2280      	movs	r2, #128	; 0x80
 800192e:	701a      	strb	r2, [r3, #0]
	Global_Struct_Master[TurnSpeed] = 128;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3313      	adds	r3, #19
 8001934:	2280      	movs	r2, #128	; 0x80
 8001936:	701a      	strb	r2, [r3, #0]
	Global_Struct_Master[BitVariables] = 0x00;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3314      	adds	r3, #20
 800193c:	2200      	movs	r2, #0
 800193e:	701a      	strb	r2, [r3, #0]
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <Global_Struct_Init>:

void Global_Struct_Init(Global_Struct_t* Global_Struct){
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
	Global_Struct[AccelerometerX_High] = 0;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	701a      	strb	r2, [r3, #0]
	Global_Struct[AccelerometerX_Low] = 0;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	3301      	adds	r3, #1
 800195e:	2200      	movs	r2, #0
 8001960:	701a      	strb	r2, [r3, #0]
	Global_Struct[AccelerometerY_High] = 0;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	3302      	adds	r3, #2
 8001966:	2200      	movs	r2, #0
 8001968:	701a      	strb	r2, [r3, #0]
	Global_Struct[AccelerometerY_Low] = 0;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	3303      	adds	r3, #3
 800196e:	2200      	movs	r2, #0
 8001970:	701a      	strb	r2, [r3, #0]
	Global_Struct[AccelerometerZ_High] = 0;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	3304      	adds	r3, #4
 8001976:	2200      	movs	r2, #0
 8001978:	701a      	strb	r2, [r3, #0]
	Global_Struct[AccelerometerZ_Low] = 0;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	3305      	adds	r3, #5
 800197e:	2200      	movs	r2, #0
 8001980:	701a      	strb	r2, [r3, #0]
	Global_Struct[GyroscopeX_High] = 0;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	3306      	adds	r3, #6
 8001986:	2200      	movs	r2, #0
 8001988:	701a      	strb	r2, [r3, #0]
	Global_Struct[GyroscopeX_Low] = 0;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	3307      	adds	r3, #7
 800198e:	2200      	movs	r2, #0
 8001990:	701a      	strb	r2, [r3, #0]
	Global_Struct[GyroscopeY_High] = 0;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	3308      	adds	r3, #8
 8001996:	2200      	movs	r2, #0
 8001998:	701a      	strb	r2, [r3, #0]
	Global_Struct[GyroscopeY_Low] = 0;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	3309      	adds	r3, #9
 800199e:	2200      	movs	r2, #0
 80019a0:	701a      	strb	r2, [r3, #0]
	Global_Struct[GyroscopeZ_High] = 0;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	330a      	adds	r3, #10
 80019a6:	2200      	movs	r2, #0
 80019a8:	701a      	strb	r2, [r3, #0]
	Global_Struct[GyroscopeZ_Low] = 0;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	330b      	adds	r3, #11
 80019ae:	2200      	movs	r2, #0
 80019b0:	701a      	strb	r2, [r3, #0]
	Global_Struct[DistanceMiddle_High] = 0;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	330c      	adds	r3, #12
 80019b6:	2200      	movs	r2, #0
 80019b8:	701a      	strb	r2, [r3, #0]
	Global_Struct[DistanceMiddle_Low] = 127;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	330d      	adds	r3, #13
 80019be:	227f      	movs	r2, #127	; 0x7f
 80019c0:	701a      	strb	r2, [r3, #0]
	Global_Struct[DistanceLeft_High] = 0;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	330e      	adds	r3, #14
 80019c6:	2200      	movs	r2, #0
 80019c8:	701a      	strb	r2, [r3, #0]
	Global_Struct[DistanceLeft_Low] = 127;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	330f      	adds	r3, #15
 80019ce:	227f      	movs	r2, #127	; 0x7f
 80019d0:	701a      	strb	r2, [r3, #0]
	Global_Struct[DistanceRight_High] = 0;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	3310      	adds	r3, #16
 80019d6:	2200      	movs	r2, #0
 80019d8:	701a      	strb	r2, [r3, #0]
	Global_Struct[DistanceRight_Low] = 127;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	3311      	adds	r3, #17
 80019de:	227f      	movs	r2, #127	; 0x7f
 80019e0:	701a      	strb	r2, [r3, #0]
	Global_Struct[DriveSpeed] = 128;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	3312      	adds	r3, #18
 80019e6:	2280      	movs	r2, #128	; 0x80
 80019e8:	701a      	strb	r2, [r3, #0]
	Global_Struct[TurnSpeed] = 128;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	3313      	adds	r3, #19
 80019ee:	2280      	movs	r2, #128	; 0x80
 80019f0:	701a      	strb	r2, [r3, #0]
	Global_Struct[BitVariables] = 0x00;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	3314      	adds	r3, #20
 80019f6:	2200      	movs	r2, #0
 80019f8:	701a      	strb	r2, [r3, #0]
	Global_Struct[BatterySensor] = 100;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	3315      	adds	r3, #21
 80019fe:	2264      	movs	r2, #100	; 0x64
 8001a00:	701a      	strb	r2, [r3, #0]
	Global_Struct[EncoderFLSpeed] = 0;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	3316      	adds	r3, #22
 8001a06:	2200      	movs	r2, #0
 8001a08:	701a      	strb	r2, [r3, #0]
	Global_Struct[EncoderFRSpeed] = 0;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	3317      	adds	r3, #23
 8001a0e:	2200      	movs	r2, #0
 8001a10:	701a      	strb	r2, [r3, #0]
	Global_Struct[EncoderBLSpeed] = 0;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	3318      	adds	r3, #24
 8001a16:	2200      	movs	r2, #0
 8001a18:	701a      	strb	r2, [r3, #0]
	Global_Struct[EncoderBRSpeed] = 0;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	3319      	adds	r3, #25
 8001a1e:	2200      	movs	r2, #0
 8001a20:	701a      	strb	r2, [r3, #0]
}
 8001a22:	bf00      	nop
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <Global_Struct_Slave_Init>:

void Global_Struct_Slave_Init(Global_Struct_t* Global_Struct){
 8001a2e:	b480      	push	{r7}
 8001a30:	b083      	sub	sp, #12
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
	Global_Struct[BatterySensor-(PANDA_STRUCT_MASTER_SIZE-1)] = 100;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2264      	movs	r2, #100	; 0x64
 8001a3a:	701a      	strb	r2, [r3, #0]
	Global_Struct[EncoderFLSpeed-(PANDA_STRUCT_MASTER_SIZE-1)] = 0;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	2200      	movs	r2, #0
 8001a42:	701a      	strb	r2, [r3, #0]
	Global_Struct[EncoderFRSpeed-(PANDA_STRUCT_MASTER_SIZE-1)] = 0;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3302      	adds	r3, #2
 8001a48:	2200      	movs	r2, #0
 8001a4a:	701a      	strb	r2, [r3, #0]
	Global_Struct[EncoderBLSpeed-(PANDA_STRUCT_MASTER_SIZE-1)] = 0;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3303      	adds	r3, #3
 8001a50:	2200      	movs	r2, #0
 8001a52:	701a      	strb	r2, [r3, #0]
	Global_Struct[EncoderBRSpeed-(PANDA_STRUCT_MASTER_SIZE-1)] = 0;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3304      	adds	r3, #4
 8001a58:	2200      	movs	r2, #0
 8001a5a:	701a      	strb	r2, [r3, #0]
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <panda_comunication_init_sync>:


HAL_StatusTypeDef panda_comunication_init_sync(I2C_HandleTypeDef* i2c, GPIO_TypeDef* sync_input_port, uint16_t sync_input_pin){
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08e      	sub	sp, #56	; 0x38
 8001a6c:	af02      	add	r7, sp, #8
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	4613      	mov	r3, r2
 8001a74:	80fb      	strh	r3, [r7, #6]
	#if (VERBOSE == 0)
		printf("Sono Slave NEW\r\n");
 8001a76:	4819      	ldr	r0, [pc, #100]	; (8001adc <panda_comunication_init_sync+0x74>)
 8001a78:	f009 fd06 	bl	800b488 <puts>

	uint8_t RX_Buffer[PANDA_STRUCT_MASTER_SIZE];

	do{

		HAL_I2C_Slave_Receive(i2c , RX_Buffer, PANDA_STRUCT_MASTER_SIZE, HAL_MAX_DELAY); //Receiving in Blocking mode
 8001a7c:	f107 0118 	add.w	r1, r7, #24
 8001a80:	f04f 33ff 	mov.w	r3, #4294967295
 8001a84:	2216      	movs	r2, #22
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f002 fb08 	bl	800409c <HAL_I2C_Slave_Receive>

	}while(RX_Buffer[BitVariables] != ALIVE_MASTER);
 8001a8c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a90:	2b0a      	cmp	r3, #10
 8001a92:	d1f3      	bne.n	8001a7c <panda_comunication_init_sync+0x14>

	#if (VERBOSE == 0)
		printf("Alive Ricevuto\r\n");
 8001a94:	4812      	ldr	r0, [pc, #72]	; (8001ae0 <panda_comunication_init_sync+0x78>)
 8001a96:	f009 fcf7 	bl	800b488 <puts>
	#endif
	
	HAL_I2C_Master_Transmit(i2c,(MASTER_ADDRESS<<1), (uint8_t[]) {ALIVE_SLAVE}, 1, HAL_MAX_DELAY);
 8001a9a:	230b      	movs	r3, #11
 8001a9c:	753b      	strb	r3, [r7, #20]
 8001a9e:	f107 0214 	add.w	r2, r7, #20
 8001aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa6:	9300      	str	r3, [sp, #0]
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	2102      	movs	r1, #2
 8001aac:	68f8      	ldr	r0, [r7, #12]
 8001aae:	f002 f9f7 	bl	8003ea0 <HAL_I2C_Master_Transmit>
	
	#if (VERBOSE == 0)
		printf("Alive Inviato\r\n");
 8001ab2:	480c      	ldr	r0, [pc, #48]	; (8001ae4 <panda_comunication_init_sync+0x7c>)
 8001ab4:	f009 fce8 	bl	800b488 <puts>
	#endif
	
	//Waiting for the pin from the master
	while(HAL_GPIO_ReadPin(sync_input_port, sync_input_pin) == GPIO_PIN_RESET);
 8001ab8:	bf00      	nop
 8001aba:	88fb      	ldrh	r3, [r7, #6]
 8001abc:	4619      	mov	r1, r3
 8001abe:	68b8      	ldr	r0, [r7, #8]
 8001ac0:	f002 f878 	bl	8003bb4 <HAL_GPIO_ReadPin>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d0f7      	beq.n	8001aba <panda_comunication_init_sync+0x52>

	#if (VERBOSE == 0)
		printf("Start Scheduler\r\n");
 8001aca:	4807      	ldr	r0, [pc, #28]	; (8001ae8 <panda_comunication_init_sync+0x80>)
 8001acc:	f009 fcdc 	bl	800b488 <puts>
	#endif
	return HAL_OK;
 8001ad0:	2300      	movs	r3, #0

}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3730      	adds	r7, #48	; 0x30
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	0800d51c 	.word	0x0800d51c
 8001ae0:	0800d52c 	.word	0x0800d52c
 8001ae4:	0800d53c 	.word	0x0800d53c
 8001ae8:	0800d54c 	.word	0x0800d54c

08001aec <panda_comunication_init_checksum>:


HAL_StatusTypeDef panda_comunication_init_checksum(Global_Struct_t *Global_Struct){
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
	uint16_t checksum = 0;
 8001af4:	2300      	movs	r3, #0
 8001af6:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i< PANDA_STRUCT_GLOBAL_SIZE-1; i++){
 8001af8:	2300      	movs	r3, #0
 8001afa:	60bb      	str	r3, [r7, #8]
 8001afc:	e00a      	b.n	8001b14 <panda_comunication_init_checksum+0x28>
		checksum += Global_Struct[i];
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	4413      	add	r3, r2
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	89fb      	ldrh	r3, [r7, #14]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i< PANDA_STRUCT_GLOBAL_SIZE-1; i++){
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	3301      	adds	r3, #1
 8001b12:	60bb      	str	r3, [r7, #8]
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	2b19      	cmp	r3, #25
 8001b18:	ddf1      	ble.n	8001afe <panda_comunication_init_checksum+0x12>
	}
	Global_Struct[PANDA_STRUCT_GLOBAL_SIZE-1] = (uint8_t)(checksum % 256);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	331a      	adds	r3, #26
 8001b1e:	89fa      	ldrh	r2, [r7, #14]
 8001b20:	b2d2      	uxtb	r2, r2
 8001b22:	701a      	strb	r2, [r3, #0]
	return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <panda_comunication_validate_checksum>:

HAL_StatusTypeDef panda_comunication_validate_checksum(Global_Struct_t *Global_Struct){
 8001b32:	b480      	push	{r7}
 8001b34:	b085      	sub	sp, #20
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
	uint16_t checksum = 0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i< PANDA_STRUCT_MASTER_SIZE-1; i++){
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60bb      	str	r3, [r7, #8]
 8001b42:	e00a      	b.n	8001b5a <panda_comunication_validate_checksum+0x28>
		checksum += Global_Struct[i];
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	4413      	add	r3, r2
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	89fb      	ldrh	r3, [r7, #14]
 8001b50:	4413      	add	r3, r2
 8001b52:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i< PANDA_STRUCT_MASTER_SIZE-1; i++){
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	3301      	adds	r3, #1
 8001b58:	60bb      	str	r3, [r7, #8]
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	2b14      	cmp	r3, #20
 8001b5e:	ddf1      	ble.n	8001b44 <panda_comunication_validate_checksum+0x12>
	}
	if (Global_Struct[PANDA_STRUCT_MASTER_SIZE-1] == (uint8_t)(checksum % 256)) return HAL_OK;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	3315      	adds	r3, #21
 8001b64:	781a      	ldrb	r2, [r3, #0]
 8001b66:	89fb      	ldrh	r3, [r7, #14]
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d101      	bne.n	8001b72 <panda_comunication_validate_checksum+0x40>
 8001b6e:	2300      	movs	r3, #0
 8001b70:	e000      	b.n	8001b74 <panda_comunication_validate_checksum+0x42>
	else return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3714      	adds	r7, #20
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <panda_merge_structs>:

void panda_merge_structs(Global_Struct_t *Global_Struct_From_Master, Global_Struct_t *Global_Struct_Slave, Global_Struct_t *Global_Struct){
 8001b80:	b480      	push	{r7}
 8001b82:	b087      	sub	sp, #28
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < PANDA_STRUCT_MASTER_SIZE-1; i++){
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]
 8001b90:	e00a      	b.n	8001ba8 <panda_merge_structs+0x28>
		Global_Struct[i] = Global_Struct_From_Master[i];
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	68fa      	ldr	r2, [r7, #12]
 8001b96:	441a      	add	r2, r3
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	440b      	add	r3, r1
 8001b9e:	7812      	ldrb	r2, [r2, #0]
 8001ba0:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < PANDA_STRUCT_MASTER_SIZE-1; i++){
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	617b      	str	r3, [r7, #20]
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	2b14      	cmp	r3, #20
 8001bac:	ddf1      	ble.n	8001b92 <panda_merge_structs+0x12>
	}
	for(int i = 0; i < PANDA_STRUCT_SLAVE_SIZE-1; i++){
 8001bae:	2300      	movs	r3, #0
 8001bb0:	613b      	str	r3, [r7, #16]
 8001bb2:	e00b      	b.n	8001bcc <panda_merge_structs+0x4c>
		Global_Struct[i+PANDA_STRUCT_MASTER_SIZE-1] = Global_Struct_Slave[i];
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	68ba      	ldr	r2, [r7, #8]
 8001bb8:	441a      	add	r2, r3
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	3315      	adds	r3, #21
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	440b      	add	r3, r1
 8001bc2:	7812      	ldrb	r2, [r2, #0]
 8001bc4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < PANDA_STRUCT_SLAVE_SIZE-1; i++){
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	3301      	adds	r3, #1
 8001bca:	613b      	str	r3, [r7, #16]
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	2b04      	cmp	r3, #4
 8001bd0:	ddf0      	ble.n	8001bb4 <panda_merge_structs+0x34>
	}
}
 8001bd2:	bf00      	nop
 8001bd4:	bf00      	nop
 8001bd6:	371c      	adds	r7, #28
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <panda_encoder_init>:
#include "panda_encoder.h"


ENCODER_StatusTypeDef panda_encoder_init(encoder_t *encoder, TIM_HandleTypeDef *htim){
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]

	if(encoder && htim){
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d014      	beq.n	8001c1a <panda_encoder_init+0x3a>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d011      	beq.n	8001c1a <panda_encoder_init+0x3a>
		encoder->timer=htim;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	601a      	str	r2, [r3, #0]
		encoder->diff=0;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	809a      	strh	r2, [r3, #4]
		encoder->rpm=0;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	719a      	strb	r2, [r3, #6]
		encoder->dir = 0;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	71da      	strb	r2, [r3, #7]
		HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_ALL);
 8001c0e:	213c      	movs	r1, #60	; 0x3c
 8001c10:	6838      	ldr	r0, [r7, #0]
 8001c12:	f005 f81b 	bl	8006c4c <HAL_TIM_Encoder_Start>
		return ENCODER_OK;
 8001c16:	2300      	movs	r3, #0
 8001c18:	e001      	b.n	8001c1e <panda_encoder_init+0x3e>
	}
	return ENCODER_ERROR;
 8001c1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
	...

08001c28 <panda_encoder_read>:

void panda_encoder_read(encoder_t *encoder){
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]

	encoder->cnt2 = __HAL_TIM_GET_COUNTER(encoder->timer);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c38:	b29a      	uxth	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	815a      	strh	r2, [r3, #10]

	if (__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder->timer)) {
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0310 	and.w	r3, r3, #16
 8001c4a:	2b10      	cmp	r3, #16
 8001c4c:	d108      	bne.n	8001c60 <panda_encoder_read+0x38>
		encoder->diff = encoder->cnt1 - encoder->cnt2;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	891a      	ldrh	r2, [r3, #8]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	895b      	ldrh	r3, [r3, #10]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	809a      	strh	r2, [r3, #4]
 8001c5e:	e007      	b.n	8001c70 <panda_encoder_read+0x48>
	} else {
		encoder->diff = encoder->cnt2 - encoder->cnt1;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	895a      	ldrh	r2, [r3, #10]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	891b      	ldrh	r3, [r3, #8]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	809a      	strh	r2, [r3, #4]
	}

	encoder->rpm = encoder->diff * 60 / 48 * (1/HYPERCYCLE) / 51;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	889b      	ldrh	r3, [r3, #4]
 8001c74:	461a      	mov	r2, r3
 8001c76:	4613      	mov	r3, r2
 8001c78:	011b      	lsls	r3, r3, #4
 8001c7a:	1a9b      	subs	r3, r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	4a1e      	ldr	r2, [pc, #120]	; (8001cf8 <panda_encoder_read+0xd0>)
 8001c80:	fb82 1203 	smull	r1, r2, r2, r3
 8001c84:	10d2      	asrs	r2, r2, #3
 8001c86:	17db      	asrs	r3, r3, #31
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7fe fc52 	bl	8000534 <__aeabi_i2d>
 8001c90:	a317      	add	r3, pc, #92	; (adr r3, 8001cf0 <panda_encoder_read+0xc8>)
 8001c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c96:	f7fe fcb7 	bl	8000608 <__aeabi_dmul>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	4610      	mov	r0, r2
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	f04f 0200 	mov.w	r2, #0
 8001ca6:	4b15      	ldr	r3, [pc, #84]	; (8001cfc <panda_encoder_read+0xd4>)
 8001ca8:	f7fe fdd8 	bl	800085c <__aeabi_ddiv>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	4610      	mov	r0, r2
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	f7fe ff80 	bl	8000bb8 <__aeabi_d2uiz>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	719a      	strb	r2, [r3, #6]
	encoder->dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(encoder->timer);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0310 	and.w	r3, r3, #16
 8001ccc:	2b10      	cmp	r3, #16
 8001cce:	bf0c      	ite	eq
 8001cd0:	2301      	moveq	r3, #1
 8001cd2:	2300      	movne	r3, #0
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	71da      	strb	r2, [r3, #7]
	encoder->cnt1 = encoder->cnt2;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	895a      	ldrh	r2, [r3, #10]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	811a      	strh	r2, [r3, #8]
}
 8001ce4:	bf00      	nop
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	f3af 8000 	nop.w
 8001cf0:	f3cf3cf3 	.word	0xf3cf3cf3
 8001cf4:	4037cf3c 	.word	0x4037cf3c
 8001cf8:	2aaaaaab 	.word	0x2aaaaaab
 8001cfc:	40498000 	.word	0x40498000

08001d00 <panda_encoder_get_speed>:

uint8_t panda_encoder_get_rpm(encoder_t *encoder){
	return encoder->rpm;
}

uint8_t panda_encoder_get_speed(encoder_t *encoder){
 8001d00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
	return 128 + encoder->dir * (encoder->rpm / 170.0) * 127 - (1 - encoder->dir) * (encoder->rpm / 170.0) * 128;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	79db      	ldrb	r3, [r3, #7]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7fe fc10 	bl	8000534 <__aeabi_i2d>
 8001d14:	4604      	mov	r4, r0
 8001d16:	460d      	mov	r5, r1
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	799b      	ldrb	r3, [r3, #6]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7fe fc09 	bl	8000534 <__aeabi_i2d>
 8001d22:	f04f 0200 	mov.w	r2, #0
 8001d26:	4b2c      	ldr	r3, [pc, #176]	; (8001dd8 <panda_encoder_get_speed+0xd8>)
 8001d28:	f7fe fd98 	bl	800085c <__aeabi_ddiv>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	460b      	mov	r3, r1
 8001d30:	4620      	mov	r0, r4
 8001d32:	4629      	mov	r1, r5
 8001d34:	f7fe fc68 	bl	8000608 <__aeabi_dmul>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	4610      	mov	r0, r2
 8001d3e:	4619      	mov	r1, r3
 8001d40:	a323      	add	r3, pc, #140	; (adr r3, 8001dd0 <panda_encoder_get_speed+0xd0>)
 8001d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d46:	f7fe fc5f 	bl	8000608 <__aeabi_dmul>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	4610      	mov	r0, r2
 8001d50:	4619      	mov	r1, r3
 8001d52:	f04f 0200 	mov.w	r2, #0
 8001d56:	4b21      	ldr	r3, [pc, #132]	; (8001ddc <panda_encoder_get_speed+0xdc>)
 8001d58:	f7fe faa0 	bl	800029c <__adddf3>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	4690      	mov	r8, r2
 8001d62:	4699      	mov	r9, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	79db      	ldrb	r3, [r3, #7]
 8001d68:	f1c3 0301 	rsb	r3, r3, #1
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7fe fbe1 	bl	8000534 <__aeabi_i2d>
 8001d72:	4604      	mov	r4, r0
 8001d74:	460d      	mov	r5, r1
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	799b      	ldrb	r3, [r3, #6]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7fe fbda 	bl	8000534 <__aeabi_i2d>
 8001d80:	f04f 0200 	mov.w	r2, #0
 8001d84:	4b14      	ldr	r3, [pc, #80]	; (8001dd8 <panda_encoder_get_speed+0xd8>)
 8001d86:	f7fe fd69 	bl	800085c <__aeabi_ddiv>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	4620      	mov	r0, r4
 8001d90:	4629      	mov	r1, r5
 8001d92:	f7fe fc39 	bl	8000608 <__aeabi_dmul>
 8001d96:	4602      	mov	r2, r0
 8001d98:	460b      	mov	r3, r1
 8001d9a:	4610      	mov	r0, r2
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	f04f 0200 	mov.w	r2, #0
 8001da2:	4b0e      	ldr	r3, [pc, #56]	; (8001ddc <panda_encoder_get_speed+0xdc>)
 8001da4:	f7fe fc30 	bl	8000608 <__aeabi_dmul>
 8001da8:	4602      	mov	r2, r0
 8001daa:	460b      	mov	r3, r1
 8001dac:	4640      	mov	r0, r8
 8001dae:	4649      	mov	r1, r9
 8001db0:	f7fe fa72 	bl	8000298 <__aeabi_dsub>
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	4610      	mov	r0, r2
 8001dba:	4619      	mov	r1, r3
 8001dbc:	f7fe fefc 	bl	8000bb8 <__aeabi_d2uiz>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	b2db      	uxtb	r3, r3
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3708      	adds	r7, #8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001dce:	bf00      	nop
 8001dd0:	00000000 	.word	0x00000000
 8001dd4:	405fc000 	.word	0x405fc000
 8001dd8:	40654000 	.word	0x40654000
 8001ddc:	40600000 	.word	0x40600000

08001de0 <motor_send_command>:
/** @brief Last direction of the motor */
uint8_t last_direction = 0;



void motor_send_command(UART_HandleTypeDef *huart, uint8_t address, uint8_t command, uint8_t speed){
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	4608      	mov	r0, r1
 8001dea:	4611      	mov	r1, r2
 8001dec:	461a      	mov	r2, r3
 8001dee:	4603      	mov	r3, r0
 8001df0:	70fb      	strb	r3, [r7, #3]
 8001df2:	460b      	mov	r3, r1
 8001df4:	70bb      	strb	r3, [r7, #2]
 8001df6:	4613      	mov	r3, r2
 8001df8:	707b      	strb	r3, [r7, #1]
	uint8_t checksum = (address+command+speed) & 127;
 8001dfa:	78fa      	ldrb	r2, [r7, #3]
 8001dfc:	78bb      	ldrb	r3, [r7, #2]
 8001dfe:	4413      	add	r3, r2
 8001e00:	b2da      	uxtb	r2, r3
 8001e02:	787b      	ldrb	r3, [r7, #1]
 8001e04:	4413      	add	r3, r2
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e0c:	73fb      	strb	r3, [r7, #15]
	uint8_t data[4] = {address, command, speed, checksum};
 8001e0e:	78fb      	ldrb	r3, [r7, #3]
 8001e10:	723b      	strb	r3, [r7, #8]
 8001e12:	78bb      	ldrb	r3, [r7, #2]
 8001e14:	727b      	strb	r3, [r7, #9]
 8001e16:	787b      	ldrb	r3, [r7, #1]
 8001e18:	72bb      	strb	r3, [r7, #10]
 8001e1a:	7bfb      	ldrb	r3, [r7, #15]
 8001e1c:	72fb      	strb	r3, [r7, #11]
	HAL_UART_Transmit(huart, data, 4, 10);
 8001e1e:	f107 0108 	add.w	r1, r7, #8
 8001e22:	230a      	movs	r3, #10
 8001e24:	2204      	movs	r2, #4
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f005 fa98 	bl	800735c <HAL_UART_Transmit>
}
 8001e2c:	bf00      	nop
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <motor_mixed_drive_forward>:
void motor_independent_drive_backward(UART_HandleTypeDef *huart, uint8_t address, uint8_t speed, Driver_MotorTypeDef motor){
	motor_send_command(huart, address, motor+1, speed);
}


void motor_mixed_drive_forward(UART_HandleTypeDef *huart, uint8_t address, uint8_t speed){
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	70fb      	strb	r3, [r7, #3]
 8001e40:	4613      	mov	r3, r2
 8001e42:	70bb      	strb	r3, [r7, #2]
	motor_send_command(huart, address, 8, speed);
 8001e44:	78bb      	ldrb	r3, [r7, #2]
 8001e46:	78f9      	ldrb	r1, [r7, #3]
 8001e48:	2208      	movs	r2, #8
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7ff ffc8 	bl	8001de0 <motor_send_command>
}
 8001e50:	bf00      	nop
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <motor_mixed_turn_right>:
void motor_mixed_drive_backward(UART_HandleTypeDef *huart, uint8_t address, uint8_t speed){
	motor_send_command(huart, address, 9, speed);
}


void motor_mixed_turn_right(UART_HandleTypeDef *huart, uint8_t address, uint8_t speed){
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	460b      	mov	r3, r1
 8001e62:	70fb      	strb	r3, [r7, #3]
 8001e64:	4613      	mov	r3, r2
 8001e66:	70bb      	strb	r3, [r7, #2]
	motor_send_command(huart, address, 10, speed);
 8001e68:	78bb      	ldrb	r3, [r7, #2]
 8001e6a:	78f9      	ldrb	r1, [r7, #3]
 8001e6c:	220a      	movs	r2, #10
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7ff ffb6 	bl	8001de0 <motor_send_command>
}
 8001e74:	bf00      	nop
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <motor_mixed_stop>:
void motor_independent_stop(UART_HandleTypeDef *huart, uint8_t address, Driver_MotorTypeDef motor){
	motor_independent_drive_forward(huart, address, 0, motor);
}


void motor_mixed_stop(UART_HandleTypeDef *huart, uint8_t address){
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	460b      	mov	r3, r1
 8001e86:	70fb      	strb	r3, [r7, #3]
	motor_mixed_drive_forward(huart, address, 0);
 8001e88:	78fb      	ldrb	r3, [r7, #3]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff ffd0 	bl	8001e34 <motor_mixed_drive_forward>
	motor_mixed_turn_right(huart, address, 0);
 8001e94:	78fb      	ldrb	r3, [r7, #3]
 8001e96:	2200      	movs	r2, #0
 8001e98:	4619      	mov	r1, r3
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff ffdc 	bl	8001e58 <motor_mixed_turn_right>
}
 8001ea0:	bf00      	nop
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <prvInitTCBArray>:
		return -1;
	}

	/* Initializes xTCBArray. */
	static void prvInitTCBArray( void )
	{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
	UBaseType_t uxIndex;
		for( uxIndex = 0; uxIndex < schedMAX_NUMBER_OF_PERIODIC_TASKS; uxIndex++)
 8001eae:	2300      	movs	r3, #0
 8001eb0:	607b      	str	r3, [r7, #4]
 8001eb2:	e00c      	b.n	8001ece <prvInitTCBArray+0x26>
		{
			xTCBArray[ uxIndex ].xInUse = pdFALSE;
 8001eb4:	490b      	ldr	r1, [pc, #44]	; (8001ee4 <prvInitTCBArray+0x3c>)
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	4413      	add	r3, r2
 8001ebe:	011b      	lsls	r3, r3, #4
 8001ec0:	440b      	add	r3, r1
 8001ec2:	333c      	adds	r3, #60	; 0x3c
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
		for( uxIndex = 0; uxIndex < schedMAX_NUMBER_OF_PERIODIC_TASKS; uxIndex++)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	607b      	str	r3, [r7, #4]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b04      	cmp	r3, #4
 8001ed2:	d9ef      	bls.n	8001eb4 <prvInitTCBArray+0xc>
		}
	}
 8001ed4:	bf00      	nop
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	20000320 	.word	0x20000320

08001ee8 <prvFindEmptyElementIndexTCB>:

	/* Find index for an empty entry in xTCBArray. Returns -1 if there is no empty entry. */
	static BaseType_t prvFindEmptyElementIndexTCB( void )
	{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
	BaseType_t xIndex;
		for( xIndex = 0; xIndex < schedMAX_NUMBER_OF_PERIODIC_TASKS; xIndex++ )
 8001eee:	2300      	movs	r3, #0
 8001ef0:	607b      	str	r3, [r7, #4]
 8001ef2:	e00f      	b.n	8001f14 <prvFindEmptyElementIndexTCB+0x2c>
		{
			if( pdFALSE == xTCBArray[ xIndex ].xInUse )
 8001ef4:	490d      	ldr	r1, [pc, #52]	; (8001f2c <prvFindEmptyElementIndexTCB+0x44>)
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	4413      	add	r3, r2
 8001efe:	011b      	lsls	r3, r3, #4
 8001f00:	440b      	add	r3, r1
 8001f02:	333c      	adds	r3, #60	; 0x3c
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <prvFindEmptyElementIndexTCB+0x26>
			{
				return xIndex;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	e007      	b.n	8001f1e <prvFindEmptyElementIndexTCB+0x36>
		for( xIndex = 0; xIndex < schedMAX_NUMBER_OF_PERIODIC_TASKS; xIndex++ )
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	3301      	adds	r3, #1
 8001f12:	607b      	str	r3, [r7, #4]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b04      	cmp	r3, #4
 8001f18:	ddec      	ble.n	8001ef4 <prvFindEmptyElementIndexTCB+0xc>
			}
		}

		return -1;
 8001f1a:	f04f 33ff 	mov.w	r3, #4294967295
	}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	20000320 	.word	0x20000320

08001f30 <prvPeriodicTaskCode>:
#endif /* schedSCHEDULING_POLICY_EDF */

/* The whole function code that is executed by every periodic task.
 * This function wraps the task code specified by the user. */
static void prvPeriodicTaskCode( void *pvParameters )
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
SchedTCB_t *pxThisTask = ( SchedTCB_t * ) pvTaskGetThreadLocalStoragePointer( xTaskGetCurrentTaskHandle(), schedTHREAD_LOCAL_STORAGE_POINTER_INDEX );
 8001f38:	f007 fc54 	bl	80097e4 <xTaskGetCurrentTaskHandle>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2100      	movs	r1, #0
 8001f40:	4618      	mov	r0, r3
 8001f42:	f007 fb67 	bl	8009614 <pvTaskGetThreadLocalStoragePointer>
 8001f46:	60f8      	str	r0, [r7, #12]
	configASSERT( NULL != pxThisTask );
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d10a      	bne.n	8001f64 <prvPeriodicTaskCode+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f52:	f383 8811 	msr	BASEPRI, r3
 8001f56:	f3bf 8f6f 	isb	sy
 8001f5a:	f3bf 8f4f 	dsb	sy
 8001f5e:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001f60:	bf00      	nop
 8001f62:	e7fe      	b.n	8001f62 <prvPeriodicTaskCode+0x32>

	if( 0 != pxThisTask->xReleaseTime )
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d008      	beq.n	8001f7e <prvPeriodicTaskCode+0x4e>
	{
		vTaskDelayUntil( &pxThisTask->xLastWakeTime, pxThisTask->xReleaseTime );
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	4619      	mov	r1, r3
 8001f78:	4610      	mov	r0, r2
 8001f7a:	f006 fdff 	bl	8008b7c <vTaskDelayUntil>
	}

	#if( schedUSE_TIMING_ERROR_DETECTION_DEADLINE == 1 )
		pxThisTask->xExecutedOnce = pdTRUE;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2201      	movs	r2, #1
 8001f82:	641a      	str	r2, [r3, #64]	; 0x40
	#endif /* schedUSE_TIMING_ERROR_DETECTION_DEADLINE */
	if( 0 == pxThisTask->xReleaseTime )
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d103      	bne.n	8001f94 <prvPeriodicTaskCode+0x64>
	{
		pxThisTask->xLastWakeTime = xSystemStartTime;
 8001f8c:	4b0d      	ldr	r3, [pc, #52]	; (8001fc4 <prvPeriodicTaskCode+0x94>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	629a      	str	r2, [r3, #40]	; 0x28
			#if( schedEDF_NAIVE == 1 )
				/* Wake up the scheduler task to update priorities of all periodic tasks. */
				prvWakeScheduler();
			#endif /* schedEDF_NAIVE */
		#endif /* schedSCHEDULING_POLICY_EDF */
		pxThisTask->xWorkIsDone = pdFALSE;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2200      	movs	r2, #0
 8001f98:	635a      	str	r2, [r3, #52]	; 0x34
		printf( "tickcount %d Task %s Abs deadline %d lastWakeTime %d prio %d Handle %x\r\n", xTaskGetTickCount(), pxThisTask->pcName, pxThisTask->xAbsoluteDeadline, pxThisTask->xLastWakeTime, uxTaskPriorityGet( NULL ), *pxThisTask->pxTaskHandle );
		taskEXIT_CRITICAL();
		*/

		/* Execute the task function specified by the user. */
		pxThisTask->pvTaskCode( pvParameters );
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	4798      	blx	r3

		pxThisTask->xWorkIsDone = pdTRUE;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	635a      	str	r2, [r3, #52]	; 0x34
		taskENTER_CRITICAL();
		printf( "execution time %d Task %s\r\n", pxThisTask->xExecTime, pxThisTask->pcName );
		taskEXIT_CRITICAL();
		*/

		pxThisTask->xExecTime = 0;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2200      	movs	r2, #0
 8001fac:	631a      	str	r2, [r3, #48]	; 0x30
				/* Wake up the scheduler task to update priorities of all periodic tasks. */
				prvWakeScheduler();
			#endif /* schedEDF_NAIVE */
		#endif /* schedSCHEDULING_POLICY_EDF */

		vTaskDelayUntil( &pxThisTask->xLastWakeTime, pxThisTask->xPeriod );
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4610      	mov	r0, r2
 8001fbc:	f006 fdde 	bl	8008b7c <vTaskDelayUntil>
		pxThisTask->xWorkIsDone = pdFALSE;
 8001fc0:	e7e8      	b.n	8001f94 <prvPeriodicTaskCode+0x64>
 8001fc2:	bf00      	nop
 8001fc4:	2000031c 	.word	0x2000031c

08001fc8 <vSchedulerPeriodicTaskCreate>:
}

/* Creates a periodic task. */
void vSchedulerPeriodicTaskCreate( TaskFunction_t pvTaskCode, const char *pcName, UBaseType_t uxStackDepth, void *pvParameters, UBaseType_t uxPriority,
		TaskHandle_t *pxCreatedTask, TickType_t xPhaseTick, TickType_t xPeriodTick, TickType_t xMaxExecTimeTick, TickType_t xDeadlineTick )
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b09c      	sub	sp, #112	; 0x70
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
 8001fd4:	603b      	str	r3, [r7, #0]
	taskENTER_CRITICAL();
 8001fd6:	f008 f9bd 	bl	800a354 <vPortEnterCritical>
SchedTCB_t *pxNewTCB;
	#if( schedUSE_TCB_ARRAY == 1 )
		BaseType_t xIndex = prvFindEmptyElementIndexTCB();
 8001fda:	f7ff ff85 	bl	8001ee8 <prvFindEmptyElementIndexTCB>
 8001fde:	66f8      	str	r0, [r7, #108]	; 0x6c
		configASSERT( xTaskCounter < schedMAX_NUMBER_OF_PERIODIC_TASKS );
 8001fe0:	4b35      	ldr	r3, [pc, #212]	; (80020b8 <vSchedulerPeriodicTaskCreate+0xf0>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2b04      	cmp	r3, #4
 8001fe6:	dd0a      	ble.n	8001ffe <vSchedulerPeriodicTaskCreate+0x36>
	__asm volatile
 8001fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fec:	f383 8811 	msr	BASEPRI, r3
 8001ff0:	f3bf 8f6f 	isb	sy
 8001ff4:	f3bf 8f4f 	dsb	sy
 8001ff8:	667b      	str	r3, [r7, #100]	; 0x64
}
 8001ffa:	bf00      	nop
 8001ffc:	e7fe      	b.n	8001ffc <vSchedulerPeriodicTaskCreate+0x34>
		configASSERT( xIndex != -1 );
 8001ffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002004:	d10a      	bne.n	800201c <vSchedulerPeriodicTaskCreate+0x54>
	__asm volatile
 8002006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800200a:	f383 8811 	msr	BASEPRI, r3
 800200e:	f3bf 8f6f 	isb	sy
 8002012:	f3bf 8f4f 	dsb	sy
 8002016:	663b      	str	r3, [r7, #96]	; 0x60
}
 8002018:	bf00      	nop
 800201a:	e7fe      	b.n	800201a <vSchedulerPeriodicTaskCreate+0x52>
		pxNewTCB = &xTCBArray[ xIndex ];
 800201c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800201e:	4613      	mov	r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	4413      	add	r3, r2
 8002024:	011b      	lsls	r3, r3, #4
 8002026:	4a25      	ldr	r2, [pc, #148]	; (80020bc <vSchedulerPeriodicTaskCreate+0xf4>)
 8002028:	4413      	add	r3, r2
 800202a:	66bb      	str	r3, [r7, #104]	; 0x68
		pxNewTCB = pvPortMalloc( sizeof( SchedTCB_t ) );
	#endif /* schedUSE_TCB_ARRAY */


	/* Intialize item. */
	*pxNewTCB = ( SchedTCB_t ) { .pvTaskCode = pvTaskCode, .pcName = pcName, .uxStackDepth = uxStackDepth, .pvParameters = pvParameters,
 800202c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800202e:	4618      	mov	r0, r3
 8002030:	2350      	movs	r3, #80	; 0x50
 8002032:	461a      	mov	r2, r3
 8002034:	2100      	movs	r1, #0
 8002036:	f009 fb07 	bl	800b648 <memset>
 800203a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002042:	68ba      	ldr	r2, [r7, #8]
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	60da      	str	r2, [r3, #12]
 8002052:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002054:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002056:	611a      	str	r2, [r3, #16]
 8002058:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800205a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800205c:	615a      	str	r2, [r3, #20]
 800205e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002060:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002064:	619a      	str	r2, [r3, #24]
 8002066:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002068:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800206c:	61da      	str	r2, [r3, #28]
 800206e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002070:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002074:	625a      	str	r2, [r3, #36]	; 0x24
 8002076:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002078:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800207c:	62da      	str	r2, [r3, #44]	; 0x2c
 800207e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002080:	2201      	movs	r2, #1
 8002082:	635a      	str	r2, [r3, #52]	; 0x34
		.uxPriority = uxPriority, .pxTaskHandle = pxCreatedTask, .xReleaseTime = xPhaseTick, .xPeriod = xPeriodTick, .xMaxExecTime = xMaxExecTimeTick,
		.xRelativeDeadline = xDeadlineTick, .xWorkIsDone = pdTRUE, .xExecTime = 0 };
	#if( schedUSE_TCB_ARRAY == 1 )
		pxNewTCB->xInUse = pdTRUE;
 8002084:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002086:	2201      	movs	r2, #1
 8002088:	63da      	str	r2, [r3, #60]	; 0x3c
	#endif /* schedUSE_TCB_ARRAY */
	
	#if( schedSCHEDULING_POLICY == schedSCHEDULING_POLICY_RMS || schedSCHEDULING_POLICY == schedSCHEDULING_POLICY_DMS )
		pxNewTCB->xPriorityIsSet = pdFALSE;
 800208a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800208c:	2200      	movs	r2, #0
 800208e:	639a      	str	r2, [r3, #56]	; 0x38
	#elif( schedSCHEDULING_POLICY == schedSCHEDULING_POLICY_EDF )
		pxNewTCB->xAbsoluteDeadline = pxNewTCB->xRelativeDeadline + pxNewTCB->xReleaseTime + xSystemStartTime;
		pxNewTCB->uxPriority = -1;
	#endif /* schedSCHEDULING_POLICY */
	#if( schedUSE_TIMING_ERROR_DETECTION_DEADLINE == 1 )
		pxNewTCB->xExecutedOnce = pdFALSE;
 8002090:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002092:	2200      	movs	r2, #0
 8002094:	641a      	str	r2, [r3, #64]	; 0x40
	#endif /* schedUSE_TIMING_ERROR_DETECTION_DEADLINE */
	#if( schedUSE_TIMING_ERROR_DETECTION_EXECUTION_TIME == 1 )
		pxNewTCB->xSuspended = pdFALSE;
 8002096:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002098:	2200      	movs	r2, #0
 800209a:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->xMaxExecTimeExceeded = pdFALSE;
 800209c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800209e:	2200      	movs	r2, #0
 80020a0:	64da      	str	r2, [r3, #76]	; 0x4c
	#if( schedUSE_POLLING_SERVER == 1)
		pxNewTCB->xIsPeriodicServer = pdFALSE;
	#endif /* schedUSE_POLLING_SERVER */

	#if( schedUSE_TCB_ARRAY == 1 )
		xTaskCounter++;
 80020a2:	4b05      	ldr	r3, [pc, #20]	; (80020b8 <vSchedulerPeriodicTaskCreate+0xf0>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	3301      	adds	r3, #1
 80020a8:	4a03      	ldr	r2, [pc, #12]	; (80020b8 <vSchedulerPeriodicTaskCreate+0xf0>)
 80020aa:	6013      	str	r3, [r2, #0]
		#if( schedEDF_EFFICIENT == 1 )
			pxNewTCB->uxPriority = schedPRIORITY_NOT_RUNNING;
		#endif /* schedEDF_EFFICIENT */
		prvAddTCBToList( pxNewTCB );
	#endif /* schedUSE_TCB_SORTED_LIST */
	taskEXIT_CRITICAL();
 80020ac:	f008 f982 	bl	800a3b4 <vPortExitCritical>
}
 80020b0:	bf00      	nop
 80020b2:	3770      	adds	r7, #112	; 0x70
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	200004b0 	.word	0x200004b0
 80020bc:	20000320 	.word	0x20000320

080020c0 <prvCreateAllTasks>:
	vTaskDelete( xTaskHandle );
}

/* Creates all periodic tasks stored in TCB array, or TCB list. */
static void prvCreateAllTasks( void )
{
 80020c0:	b590      	push	{r4, r7, lr}
 80020c2:	b087      	sub	sp, #28
 80020c4:	af02      	add	r7, sp, #8
SchedTCB_t *pxTCB;

	#if( schedUSE_TCB_ARRAY == 1 )
		BaseType_t xIndex;
		for( xIndex = 0; xIndex < xTaskCounter; xIndex++ )
 80020c6:	2300      	movs	r3, #0
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	e03e      	b.n	800214a <prvCreateAllTasks+0x8a>
		{
			configASSERT( pdTRUE == xTCBArray[ xIndex ].xInUse );
 80020cc:	4924      	ldr	r1, [pc, #144]	; (8002160 <prvCreateAllTasks+0xa0>)
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	4613      	mov	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	4413      	add	r3, r2
 80020d6:	011b      	lsls	r3, r3, #4
 80020d8:	440b      	add	r3, r1
 80020da:	333c      	adds	r3, #60	; 0x3c
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d00a      	beq.n	80020f8 <prvCreateAllTasks+0x38>
	__asm volatile
 80020e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020e6:	f383 8811 	msr	BASEPRI, r3
 80020ea:	f3bf 8f6f 	isb	sy
 80020ee:	f3bf 8f4f 	dsb	sy
 80020f2:	603b      	str	r3, [r7, #0]
}
 80020f4:	bf00      	nop
 80020f6:	e7fe      	b.n	80020f6 <prvCreateAllTasks+0x36>
			pxTCB = &xTCBArray[ xIndex ];
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	4613      	mov	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	4413      	add	r3, r2
 8002100:	011b      	lsls	r3, r3, #4
 8002102:	4a17      	ldr	r2, [pc, #92]	; (8002160 <prvCreateAllTasks+0xa0>)
 8002104:	4413      	add	r3, r2
 8002106:	60bb      	str	r3, [r7, #8]

			BaseType_t xReturnValue = xTaskCreate( prvPeriodicTaskCode, pxTCB->pcName, pxTCB->uxStackDepth, pxTCB->pvParameters, pxTCB->uxPriority, pxTCB->pxTaskHandle );
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	6859      	ldr	r1, [r3, #4]
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	b298      	uxth	r0, r3
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	68dc      	ldr	r4, [r3, #12]
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	68ba      	ldr	r2, [r7, #8]
 800211c:	6952      	ldr	r2, [r2, #20]
 800211e:	9201      	str	r2, [sp, #4]
 8002120:	9300      	str	r3, [sp, #0]
 8002122:	4623      	mov	r3, r4
 8002124:	4602      	mov	r2, r0
 8002126:	480f      	ldr	r0, [pc, #60]	; (8002164 <prvCreateAllTasks+0xa4>)
 8002128:	f006 fb4b 	bl	80087c2 <xTaskCreate>
 800212c:	6078      	str	r0, [r7, #4]

			if( pdPASS == xReturnValue )
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d107      	bne.n	8002144 <prvCreateAllTasks+0x84>
			{
				vTaskSetThreadLocalStoragePointer( *pxTCB->pxTaskHandle, schedTHREAD_LOCAL_STORAGE_POINTER_INDEX, pxTCB );
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	695b      	ldr	r3, [r3, #20]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	2100      	movs	r1, #0
 800213e:	4618      	mov	r0, r3
 8002140:	f007 fa3a 	bl	80095b8 <vTaskSetThreadLocalStoragePointer>
		for( xIndex = 0; xIndex < xTaskCounter; xIndex++ )
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	3301      	adds	r3, #1
 8002148:	60fb      	str	r3, [r7, #12]
 800214a:	4b07      	ldr	r3, [pc, #28]	; (8002168 <prvCreateAllTasks+0xa8>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	429a      	cmp	r2, r3
 8002152:	dbbb      	blt.n	80020cc <prvCreateAllTasks+0xc>
			}
			vTaskSetThreadLocalStoragePointer( *pxTCB->pxTaskHandle, schedTHREAD_LOCAL_STORAGE_POINTER_INDEX, pxTCB );
			pxTCBListItem = listGET_NEXT( pxTCBListItem );
		}	
	#endif /* schedUSE_TCB_ARRAY */
}
 8002154:	bf00      	nop
 8002156:	bf00      	nop
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	bd90      	pop	{r4, r7, pc}
 800215e:	bf00      	nop
 8002160:	20000320 	.word	0x20000320
 8002164:	08001f31 	.word	0x08001f31
 8002168:	200004b0 	.word	0x200004b0

0800216c <prvSetFixedPriorities>:

#if( schedSCHEDULING_POLICY == schedSCHEDULING_POLICY_RMS || schedSCHEDULING_POLICY == schedSCHEDULING_POLICY_DMS )
	/* Initiazes fixed priorities of all periodic tasks with respect to RMS or
	 * DMS policy. */
static void prvSetFixedPriorities( void )
{
 800216c:	b480      	push	{r7}
 800216e:	b08b      	sub	sp, #44	; 0x2c
 8002170:	af00      	add	r7, sp, #0
BaseType_t xIter, xIndex;
TickType_t xShortest, xPreviousShortest=0;
 8002172:	2300      	movs	r3, #0
 8002174:	61bb      	str	r3, [r7, #24]
SchedTCB_t *pxShortestTaskPointer, *pxTCB;

	#if( schedUSE_SCHEDULER_TASK == 1 )
		BaseType_t xHighestPriority = schedSCHEDULER_PRIORITY;
 8002176:	2337      	movs	r3, #55	; 0x37
 8002178:	613b      	str	r3, [r7, #16]
	#else
		BaseType_t xHighestPriority = configMAX_PRIORITIES;
	#endif /* schedUSE_SCHEDULER_TASK */

	for( xIter = 0; xIter < xTaskCounter; xIter++ )
 800217a:	2300      	movs	r3, #0
 800217c:	627b      	str	r3, [r7, #36]	; 0x24
 800217e:	e055      	b.n	800222c <prvSetFixedPriorities+0xc0>
	{
		xShortest = portMAX_DELAY;
 8002180:	f04f 33ff 	mov.w	r3, #4294967295
 8002184:	61fb      	str	r3, [r7, #28]

		/* search for shortest period/deadline */
		for( xIndex = 0; xIndex < xTaskCounter; xIndex++ )
 8002186:	2300      	movs	r3, #0
 8002188:	623b      	str	r3, [r7, #32]
 800218a:	e029      	b.n	80021e0 <prvSetFixedPriorities+0x74>
		{
			pxTCB = &xTCBArray[ xIndex ];
 800218c:	6a3a      	ldr	r2, [r7, #32]
 800218e:	4613      	mov	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4413      	add	r3, r2
 8002194:	011b      	lsls	r3, r3, #4
 8002196:	4a2b      	ldr	r2, [pc, #172]	; (8002244 <prvSetFixedPriorities+0xd8>)
 8002198:	4413      	add	r3, r2
 800219a:	60fb      	str	r3, [r7, #12]
			configASSERT( pdTRUE == pxTCB->xInUse );
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d00a      	beq.n	80021ba <prvSetFixedPriorities+0x4e>
	__asm volatile
 80021a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021a8:	f383 8811 	msr	BASEPRI, r3
 80021ac:	f3bf 8f6f 	isb	sy
 80021b0:	f3bf 8f4f 	dsb	sy
 80021b4:	60bb      	str	r3, [r7, #8]
}
 80021b6:	bf00      	nop
 80021b8:	e7fe      	b.n	80021b8 <prvSetFixedPriorities+0x4c>
			if(pdTRUE == pxTCB->xPriorityIsSet)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d00a      	beq.n	80021d8 <prvSetFixedPriorities+0x6c>
			{
				continue;
			}

			#if( schedSCHEDULING_POLICY == schedSCHEDULING_POLICY_RMS )
				if( pxTCB->xPeriod <= xShortest )
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c6:	69fa      	ldr	r2, [r7, #28]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d306      	bcc.n	80021da <prvSetFixedPriorities+0x6e>
				{
					xShortest = pxTCB->xPeriod;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d0:	61fb      	str	r3, [r7, #28]
					pxShortestTaskPointer = pxTCB;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	617b      	str	r3, [r7, #20]
 80021d6:	e000      	b.n	80021da <prvSetFixedPriorities+0x6e>
				continue;
 80021d8:	bf00      	nop
		for( xIndex = 0; xIndex < xTaskCounter; xIndex++ )
 80021da:	6a3b      	ldr	r3, [r7, #32]
 80021dc:	3301      	adds	r3, #1
 80021de:	623b      	str	r3, [r7, #32]
 80021e0:	4b19      	ldr	r3, [pc, #100]	; (8002248 <prvSetFixedPriorities+0xdc>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6a3a      	ldr	r2, [r7, #32]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	dbd0      	blt.n	800218c <prvSetFixedPriorities+0x20>
					xShortest = pxTCB->xRelativeDeadline;
					pxShortestTaskPointer = pxTCB;
				}
			#endif /* schedSCHEDULING_POLICY */
		}
		configASSERT( -1 <= xHighestPriority );
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f0:	da0a      	bge.n	8002208 <prvSetFixedPriorities+0x9c>
	__asm volatile
 80021f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021f6:	f383 8811 	msr	BASEPRI, r3
 80021fa:	f3bf 8f6f 	isb	sy
 80021fe:	f3bf 8f4f 	dsb	sy
 8002202:	607b      	str	r3, [r7, #4]
}
 8002204:	bf00      	nop
 8002206:	e7fe      	b.n	8002206 <prvSetFixedPriorities+0x9a>
		if( xPreviousShortest != xShortest )
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	429a      	cmp	r2, r3
 800220e:	d002      	beq.n	8002216 <prvSetFixedPriorities+0xaa>
		{
			xHighestPriority--;
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	3b01      	subs	r3, #1
 8002214:	613b      	str	r3, [r7, #16]
		}
		/* set highest priority to task with xShortest period (the highest priority is configMAX_PRIORITIES-1) */
		pxShortestTaskPointer->uxPriority = xHighestPriority;
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	611a      	str	r2, [r3, #16]
		pxShortestTaskPointer->xPriorityIsSet = pdTRUE;
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	2201      	movs	r2, #1
 8002220:	639a      	str	r2, [r3, #56]	; 0x38

		xPreviousShortest = xShortest;
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	61bb      	str	r3, [r7, #24]
	for( xIter = 0; xIter < xTaskCounter; xIter++ )
 8002226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002228:	3301      	adds	r3, #1
 800222a:	627b      	str	r3, [r7, #36]	; 0x24
 800222c:	4b06      	ldr	r3, [pc, #24]	; (8002248 <prvSetFixedPriorities+0xdc>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002232:	429a      	cmp	r2, r3
 8002234:	dba4      	blt.n	8002180 <prvSetFixedPriorities+0x14>
	}
}
 8002236:	bf00      	nop
 8002238:	bf00      	nop
 800223a:	372c      	adds	r7, #44	; 0x2c
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	20000320 	.word	0x20000320
 8002248:	200004b0 	.word	0x200004b0

0800224c <prvPeriodicTaskRecreate>:

#if( schedUSE_TIMING_ERROR_DETECTION_DEADLINE == 1 )

	/* Recreates a deleted task that still has its information left in the task array (or list). */
	static void prvPeriodicTaskRecreate( SchedTCB_t *pxTCB )
	{
 800224c:	b590      	push	{r4, r7, lr}
 800224e:	b087      	sub	sp, #28
 8002250:	af02      	add	r7, sp, #8
 8002252:	6078      	str	r0, [r7, #4]
	BaseType_t xReturnValue = xTaskCreate( prvPeriodicTaskCode, pxTCB->pcName, pxTCB->uxStackDepth, pxTCB->pvParameters, pxTCB->uxPriority, pxTCB->pxTaskHandle );
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6859      	ldr	r1, [r3, #4]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	b298      	uxth	r0, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	68dc      	ldr	r4, [r3, #12]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	6952      	ldr	r2, [r2, #20]
 800226a:	9201      	str	r2, [sp, #4]
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	4623      	mov	r3, r4
 8002270:	4602      	mov	r2, r0
 8002272:	480e      	ldr	r0, [pc, #56]	; (80022ac <prvPeriodicTaskRecreate+0x60>)
 8002274:	f006 faa5 	bl	80087c2 <xTaskCreate>
 8002278:	60f8      	str	r0, [r7, #12]
		if( pdPASS == xReturnValue )
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d110      	bne.n	80022a2 <prvPeriodicTaskRecreate+0x56>
		{
			vTaskSetThreadLocalStoragePointer( *pxTCB->pxTaskHandle, schedTHREAD_LOCAL_STORAGE_POINTER_INDEX, ( SchedTCB_t * ) pxTCB );
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	2100      	movs	r1, #0
 800228a:	4618      	mov	r0, r3
 800228c:	f007 f994 	bl	80095b8 <vTaskSetThreadLocalStoragePointer>

			/* This must be set to false so that the task does not miss the deadline immediately when it is created. */
			pxTCB->xExecutedOnce = pdFALSE;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	641a      	str	r2, [r3, #64]	; 0x40
			#if( schedUSE_TIMING_ERROR_DETECTION_EXECUTION_TIME == 1 )
				pxTCB->xSuspended = pdFALSE;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	649a      	str	r2, [r3, #72]	; 0x48
				pxTCB->xMaxExecTimeExceeded = pdFALSE;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	64da      	str	r2, [r3, #76]	; 0x4c
		}
		else
		{
			/* if task creation failed */
		}
	}
 80022a2:	bf00      	nop
 80022a4:	3714      	adds	r7, #20
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd90      	pop	{r4, r7, pc}
 80022aa:	bf00      	nop
 80022ac:	08001f31 	.word	0x08001f31

080022b0 <prvDeadlineMissedHook>:

	/* Called when a deadline of a periodic task is missed.
	 * Deletes the periodic task that has missed it's deadline and recreate it.
	 * The periodic task is released during next period. */
	static void prvDeadlineMissedHook( SchedTCB_t *pxTCB, TickType_t xTickCount )
	{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
		printf( "\r\ndeadline missed! %s tick %d\r\n", pxTCB->pcName, xTickCount );
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	4619      	mov	r1, r3
 80022c2:	4812      	ldr	r0, [pc, #72]	; (800230c <prvDeadlineMissedHook+0x5c>)
 80022c4:	f009 f87a 	bl	800b3bc <iprintf>

		/* Delete the pxTask and recreate it. */
		vTaskDelete( *pxTCB->pxTaskHandle );
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	695b      	ldr	r3, [r3, #20]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f006 fbe2 	bl	8008a98 <vTaskDelete>
		pxTCB->xExecTime = 0;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	631a      	str	r2, [r3, #48]	; 0x30
		prvPeriodicTaskRecreate( pxTCB );
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f7ff ffb6 	bl	800224c <prvPeriodicTaskRecreate>

		pxTCB->xReleaseTime = pxTCB->xLastWakeTime + pxTCB->xPeriod;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e8:	441a      	add	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	619a      	str	r2, [r3, #24]
		/* Need to reset lastWakeTime for correct release. */
		pxTCB->xLastWakeTime = 0;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	629a      	str	r2, [r3, #40]	; 0x28
		pxTCB->xAbsoluteDeadline = pxTCB->xRelativeDeadline + pxTCB->xReleaseTime;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	69da      	ldr	r2, [r3, #28]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	441a      	add	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	621a      	str	r2, [r3, #32]
		#if( schedEDF_EFFICIENT == 1 )
			listSET_LIST_ITEM_VALUE( &pxTCB->xTCBListItem, pxTCB->xAbsoluteDeadline );
		#endif /* schedEDF_EFFICIENT */
	}
 8002302:	bf00      	nop
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	0800d560 	.word	0x0800d560

08002310 <prvCheckDeadline>:

	/* Checks whether given task has missed deadline or not. */
	static void prvCheckDeadline( SchedTCB_t *pxTCB, TickType_t xTickCount )
	{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
		if( ( NULL != pxTCB ) && ( pdFALSE == pxTCB->xWorkIsDone ) && ( pdTRUE == pxTCB->xExecutedOnce ) )
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d018      	beq.n	8002352 <prvCheckDeadline+0x42>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002324:	2b00      	cmp	r3, #0
 8002326:	d114      	bne.n	8002352 <prvCheckDeadline+0x42>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232c:	2b01      	cmp	r3, #1
 800232e:	d110      	bne.n	8002352 <prvCheckDeadline+0x42>
		{
			/* Need to update absolute deadline if the scheduling policy is not EDF. */
			#if( schedSCHEDULING_POLICY != schedSCHEDULING_POLICY_EDF )
				pxTCB->xAbsoluteDeadline = pxTCB->xLastWakeTime + pxTCB->xRelativeDeadline;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	69db      	ldr	r3, [r3, #28]
 8002338:	441a      	add	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	621a      	str	r2, [r3, #32]
			#endif /* schedSCHEDULING_POLICY */

			/* Using ICTOH method proposed by Carlini and Buttazzo, to check whether deadline is missed. */
			if( ( signed ) ( pxTCB->xAbsoluteDeadline - xTickCount ) < 0 )
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a1a      	ldr	r2, [r3, #32]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	da03      	bge.n	8002352 <prvCheckDeadline+0x42>
			{
				/* Deadline is missed. */
				prvDeadlineMissedHook( pxTCB, xTickCount );
 800234a:	6839      	ldr	r1, [r7, #0]
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f7ff ffaf 	bl	80022b0 <prvDeadlineMissedHook>
			}
		}
	}
 8002352:	bf00      	nop
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <prvSchedulerCheckTimingError>:

#if( schedUSE_SCHEDULER_TASK == 1 )
	/* Called by the scheduler task. Checks all tasks for any enabled
	 * Timing Error Detection feature. */
	static void prvSchedulerCheckTimingError( TickType_t xTickCount, SchedTCB_t *pxTCB )
	{
 800235a:	b580      	push	{r7, lr}
 800235c:	b082      	sub	sp, #8
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
 8002362:	6039      	str	r1, [r7, #0]
		#if( schedUSE_TCB_ARRAY == 1 )
			if( pdFALSE == pxTCB->xInUse )
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002368:	2b00      	cmp	r3, #0
 800236a:	d030      	beq.n	80023ce <prvSchedulerCheckTimingError+0x74>
			#else
				/* Since lastWakeTime is updated to next wake time when the task is delayed, tickCount > lastWakeTime implies that
				 * the task has not finished it's job this period. */

				/* Using ICTOH method proposed by Carlini and Buttazzo, to check the condition unaffected by counter overflows. */
				if( ( signed ) ( xTickCount - pxTCB->xLastWakeTime ) > 0 )
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b00      	cmp	r3, #0
 8002376:	dd02      	ble.n	800237e <prvSchedulerCheckTimingError+0x24>
				{
					pxTCB->xWorkIsDone = pdFALSE;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	2200      	movs	r2, #0
 800237c:	635a      	str	r2, [r3, #52]	; 0x34
				}

				prvCheckDeadline( pxTCB, xTickCount );
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	6838      	ldr	r0, [r7, #0]
 8002382:	f7ff ffc5 	bl	8002310 <prvCheckDeadline>
			#endif /* schedUSE_POLLING_SERVER */
		#endif /* schedUSE_TIMING_ERROR_DETECTION_DEADLINE */
		

		#if( schedUSE_TIMING_ERROR_DETECTION_EXECUTION_TIME == 1 )
			if( pdTRUE == pxTCB->xMaxExecTimeExceeded )
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800238a:	2b01      	cmp	r3, #1
 800238c:	d108      	bne.n	80023a0 <prvSchedulerCheckTimingError+0x46>
			{
				pxTCB->xMaxExecTimeExceeded = pdFALSE;
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	2200      	movs	r2, #0
 8002392:	64da      	str	r2, [r3, #76]	; 0x4c
				vTaskSuspend( *pxTCB->pxTaskHandle );
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	695b      	ldr	r3, [r3, #20]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f006 fc6c 	bl	8008c78 <vTaskSuspend>
			}
			if( pdTRUE == pxTCB->xSuspended )
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d114      	bne.n	80023d2 <prvSchedulerCheckTimingError+0x78>
			{
				/* Using ICTOH method proposed by Carlini and Buttazzo, to check whether absolute unblock time is reached. */
				if( ( signed ) ( pxTCB->xAbsoluteUnblockTime - xTickCount ) <= 0 )
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	dc0e      	bgt.n	80023d2 <prvSchedulerCheckTimingError+0x78>
				{
					pxTCB->xSuspended = pdFALSE;
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	2200      	movs	r2, #0
 80023b8:	649a      	str	r2, [r3, #72]	; 0x48
					pxTCB->xLastWakeTime = xTickCount;
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	629a      	str	r2, [r3, #40]	; 0x28
					vTaskResume( *pxTCB->pxTaskHandle );
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	695b      	ldr	r3, [r3, #20]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f006 fcfe 	bl	8008dc8 <vTaskResume>
				}
			}
		#endif /* schedUSE_TIMING_ERROR_DETECTION_EXECUTION_TIME */

		return;
 80023cc:	e001      	b.n	80023d2 <prvSchedulerCheckTimingError+0x78>
				return;
 80023ce:	bf00      	nop
 80023d0:	e000      	b.n	80023d4 <prvSchedulerCheckTimingError+0x7a>
		return;
 80023d2:	bf00      	nop
	}
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
	...

080023dc <prvSchedulerFunction>:

	/* Function code for the scheduler task. */
	static void prvSchedulerFunction( void )
	{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
					}					
				#endif /* schedEDF_EFFICIENT */
			#endif /* schedSCHEDULING_POLICY_EDF */

			#if( schedUSE_TIMING_ERROR_DETECTION_DEADLINE == 1 || schedUSE_TIMING_ERROR_DETECTION_EXECUTION_TIME == 1 )
				TickType_t xTickCount = xTaskGetTickCount();
 80023e2:	f006 fe6b 	bl	80090bc <xTaskGetTickCount>
 80023e6:	60b8      	str	r0, [r7, #8]
				SchedTCB_t *pxTCB;

				#if( schedUSE_TCB_ARRAY == 1 )
					BaseType_t xIndex;
					for( xIndex = 0; xIndex < schedMAX_NUMBER_OF_PERIODIC_TASKS; xIndex++ )
 80023e8:	2300      	movs	r3, #0
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	e00e      	b.n	800240c <prvSchedulerFunction+0x30>
					{
						pxTCB = &xTCBArray[ xIndex ];
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	4613      	mov	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	4413      	add	r3, r2
 80023f6:	011b      	lsls	r3, r3, #4
 80023f8:	4a09      	ldr	r2, [pc, #36]	; (8002420 <prvSchedulerFunction+0x44>)
 80023fa:	4413      	add	r3, r2
 80023fc:	607b      	str	r3, [r7, #4]
						prvSchedulerCheckTimingError( xTickCount, pxTCB );
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	68b8      	ldr	r0, [r7, #8]
 8002402:	f7ff ffaa 	bl	800235a <prvSchedulerCheckTimingError>
					for( xIndex = 0; xIndex < schedMAX_NUMBER_OF_PERIODIC_TASKS; xIndex++ )
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	3301      	adds	r3, #1
 800240a:	60fb      	str	r3, [r7, #12]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2b04      	cmp	r3, #4
 8002410:	dded      	ble.n	80023ee <prvSchedulerFunction+0x12>
					}
				#endif /* schedUSE_TCB_SORTED_LIST */
			
			#endif /* schedUSE_TIMING_ERROR_DETECTION_DEADLINE || schedUSE_TIMING_ERROR_DETECTION_EXECUTION_TIME */

			ulTaskNotifyTake( pdTRUE, portMAX_DELAY );
 8002412:	f04f 31ff 	mov.w	r1, #4294967295
 8002416:	2001      	movs	r0, #1
 8002418:	f007 fa80 	bl	800991c <ulTaskNotifyTake>
		{
 800241c:	e7e1      	b.n	80023e2 <prvSchedulerFunction+0x6>
 800241e:	bf00      	nop
 8002420:	20000320 	.word	0x20000320

08002424 <prvCreateSchedulerTask>:
		}
	}

	/* Creates the scheduler task. */
	static void prvCreateSchedulerTask( void )
	{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af02      	add	r7, sp, #8
		xTaskCreate( (TaskFunction_t) prvSchedulerFunction, "Scheduler", schedSCHEDULER_TASK_STACK_SIZE, NULL, schedSCHEDULER_PRIORITY, &xSchedulerHandle );
 800242a:	4b07      	ldr	r3, [pc, #28]	; (8002448 <prvCreateSchedulerTask+0x24>)
 800242c:	9301      	str	r3, [sp, #4]
 800242e:	2337      	movs	r3, #55	; 0x37
 8002430:	9300      	str	r3, [sp, #0]
 8002432:	2300      	movs	r3, #0
 8002434:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002438:	4904      	ldr	r1, [pc, #16]	; (800244c <prvCreateSchedulerTask+0x28>)
 800243a:	4805      	ldr	r0, [pc, #20]	; (8002450 <prvCreateSchedulerTask+0x2c>)
 800243c:	f006 f9c1 	bl	80087c2 <xTaskCreate>
	}
 8002440:	bf00      	nop
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	200004b4 	.word	0x200004b4
 800244c:	0800d5b4 	.word	0x0800d5b4
 8002450:	080023dd 	.word	0x080023dd

08002454 <vSchedulerInit>:
	}
#endif /* schedUSE_SCHEDULER_TASK */

/* This function must be called before any other function call from this module. */
void vSchedulerInit( void )
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
	#if( schedUSE_TCB_ARRAY == 1 )
		prvInitTCBArray();
 8002458:	f7ff fd26 	bl	8001ea8 <prvInitTCBArray>
			pxTCBBlockedList = &xTCBBlockedList;
			pxTCBReadyList = &xTCBReadyList;
			pxTCBOverflowedReadyList = &xTCBOverflowedReadyList;
		#endif /* schedEDF_NAIVE */
	#endif /* schedUSE_TCB_ARRAY */
}
 800245c:	bf00      	nop
 800245e:	bd80      	pop	{r7, pc}

08002460 <vSchedulerStart>:

/* Starts scheduling tasks. All periodic tasks (including polling server) must
 * have been created with API function before calling this function. */
void vSchedulerStart( void )
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
	#if( schedUSE_POLLING_SERVER == 1 )
		prvPollingServerCreate();
	#endif /* schedUSE_POLLING_SERVER */

	#if( schedSCHEDULING_POLICY == schedSCHEDULING_POLICY_RMS || schedSCHEDULING_POLICY == schedSCHEDULING_POLICY_DMS )
		prvSetFixedPriorities();
 8002464:	f7ff fe82 	bl	800216c <prvSetFixedPriorities>
	#elif( schedSCHEDULING_POLICY == schedSCHEDULING_POLICY_EDF )
		prvInitEDF();
	#endif /* schedSCHEDULING_POLICY */

	#if( schedUSE_SCHEDULER_TASK == 1 )
		prvCreateSchedulerTask();
 8002468:	f7ff ffdc 	bl	8002424 <prvCreateSchedulerTask>
	#endif /* schedUSE_SCHEDULER_TASK */

	prvCreateAllTasks();
 800246c:	f7ff fe28 	bl	80020c0 <prvCreateAllTasks>

	xSystemStartTime = xTaskGetTickCount();
 8002470:	f006 fe24 	bl	80090bc <xTaskGetTickCount>
 8002474:	4603      	mov	r3, r0
 8002476:	4a03      	ldr	r2, [pc, #12]	; (8002484 <vSchedulerStart+0x24>)
 8002478:	6013      	str	r3, [r2, #0]
	vTaskStartScheduler();
 800247a:	f006 fd03 	bl	8008e84 <vTaskStartScheduler>
}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	2000031c 	.word	0x2000031c

08002488 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800248e:	2300      	movs	r3, #0
 8002490:	607b      	str	r3, [r7, #4]
 8002492:	4b12      	ldr	r3, [pc, #72]	; (80024dc <HAL_MspInit+0x54>)
 8002494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002496:	4a11      	ldr	r2, [pc, #68]	; (80024dc <HAL_MspInit+0x54>)
 8002498:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800249c:	6453      	str	r3, [r2, #68]	; 0x44
 800249e:	4b0f      	ldr	r3, [pc, #60]	; (80024dc <HAL_MspInit+0x54>)
 80024a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024a6:	607b      	str	r3, [r7, #4]
 80024a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	603b      	str	r3, [r7, #0]
 80024ae:	4b0b      	ldr	r3, [pc, #44]	; (80024dc <HAL_MspInit+0x54>)
 80024b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b2:	4a0a      	ldr	r2, [pc, #40]	; (80024dc <HAL_MspInit+0x54>)
 80024b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024b8:	6413      	str	r3, [r2, #64]	; 0x40
 80024ba:	4b08      	ldr	r3, [pc, #32]	; (80024dc <HAL_MspInit+0x54>)
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c2:	603b      	str	r3, [r7, #0]
 80024c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80024c6:	2200      	movs	r2, #0
 80024c8:	210f      	movs	r1, #15
 80024ca:	f06f 0001 	mvn.w	r0, #1
 80024ce:	f001 f993 	bl	80037f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024d2:	bf00      	nop
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	40023800 	.word	0x40023800

080024e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b08c      	sub	sp, #48	; 0x30
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80024e8:	2300      	movs	r3, #0
 80024ea:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 80024f0:	2300      	movs	r3, #0
 80024f2:	60bb      	str	r3, [r7, #8]
 80024f4:	4b2f      	ldr	r3, [pc, #188]	; (80025b4 <HAL_InitTick+0xd4>)
 80024f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f8:	4a2e      	ldr	r2, [pc, #184]	; (80025b4 <HAL_InitTick+0xd4>)
 80024fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024fe:	6453      	str	r3, [r2, #68]	; 0x44
 8002500:	4b2c      	ldr	r3, [pc, #176]	; (80025b4 <HAL_InitTick+0xd4>)
 8002502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002504:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002508:	60bb      	str	r3, [r7, #8]
 800250a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800250c:	f107 020c 	add.w	r2, r7, #12
 8002510:	f107 0310 	add.w	r3, r7, #16
 8002514:	4611      	mov	r1, r2
 8002516:	4618      	mov	r0, r3
 8002518:	f004 fa04 	bl	8006924 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800251c:	f004 f9ee 	bl	80068fc <HAL_RCC_GetPCLK2Freq>
 8002520:	4603      	mov	r3, r0
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002528:	4a23      	ldr	r2, [pc, #140]	; (80025b8 <HAL_InitTick+0xd8>)
 800252a:	fba2 2303 	umull	r2, r3, r2, r3
 800252e:	0c9b      	lsrs	r3, r3, #18
 8002530:	3b01      	subs	r3, #1
 8002532:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8002534:	4b21      	ldr	r3, [pc, #132]	; (80025bc <HAL_InitTick+0xdc>)
 8002536:	4a22      	ldr	r2, [pc, #136]	; (80025c0 <HAL_InitTick+0xe0>)
 8002538:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 800253a:	4b20      	ldr	r3, [pc, #128]	; (80025bc <HAL_InitTick+0xdc>)
 800253c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002540:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8002542:	4a1e      	ldr	r2, [pc, #120]	; (80025bc <HAL_InitTick+0xdc>)
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8002548:	4b1c      	ldr	r3, [pc, #112]	; (80025bc <HAL_InitTick+0xdc>)
 800254a:	2200      	movs	r2, #0
 800254c:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800254e:	4b1b      	ldr	r3, [pc, #108]	; (80025bc <HAL_InitTick+0xdc>)
 8002550:	2200      	movs	r2, #0
 8002552:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002554:	4b19      	ldr	r3, [pc, #100]	; (80025bc <HAL_InitTick+0xdc>)
 8002556:	2200      	movs	r2, #0
 8002558:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 800255a:	4818      	ldr	r0, [pc, #96]	; (80025bc <HAL_InitTick+0xdc>)
 800255c:	f004 fa14 	bl	8006988 <HAL_TIM_Base_Init>
 8002560:	4603      	mov	r3, r0
 8002562:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002566:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800256a:	2b00      	cmp	r3, #0
 800256c:	d11b      	bne.n	80025a6 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 800256e:	4813      	ldr	r0, [pc, #76]	; (80025bc <HAL_InitTick+0xdc>)
 8002570:	f004 fa64 	bl	8006a3c <HAL_TIM_Base_Start_IT>
 8002574:	4603      	mov	r3, r0
 8002576:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800257a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800257e:	2b00      	cmp	r3, #0
 8002580:	d111      	bne.n	80025a6 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002582:	201a      	movs	r0, #26
 8002584:	f001 f954 	bl	8003830 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b0f      	cmp	r3, #15
 800258c:	d808      	bhi.n	80025a0 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 800258e:	2200      	movs	r2, #0
 8002590:	6879      	ldr	r1, [r7, #4]
 8002592:	201a      	movs	r0, #26
 8002594:	f001 f930 	bl	80037f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002598:	4a0a      	ldr	r2, [pc, #40]	; (80025c4 <HAL_InitTick+0xe4>)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6013      	str	r3, [r2, #0]
 800259e:	e002      	b.n	80025a6 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80025a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3730      	adds	r7, #48	; 0x30
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40023800 	.word	0x40023800
 80025b8:	431bde83 	.word	0x431bde83
 80025bc:	200004b8 	.word	0x200004b8
 80025c0:	40014800 	.word	0x40014800
 80025c4:	20000004 	.word	0x20000004

080025c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025cc:	e7fe      	b.n	80025cc <NMI_Handler+0x4>

080025ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025ce:	b480      	push	{r7}
 80025d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025d2:	e7fe      	b.n	80025d2 <HardFault_Handler+0x4>

080025d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025d8:	e7fe      	b.n	80025d8 <MemManage_Handler+0x4>

080025da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025da:	b480      	push	{r7}
 80025dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025de:	e7fe      	b.n	80025de <BusFault_Handler+0x4>

080025e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025e4:	e7fe      	b.n	80025e4 <UsageFault_Handler+0x4>

080025e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025e6:	b480      	push	{r7}
 80025e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025ea:	bf00      	nop
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80025f8:	4802      	ldr	r0, [pc, #8]	; (8002604 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80025fa:	f004 fbb5 	bl	8006d68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80025fe:	bf00      	nop
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	200004b8 	.word	0x200004b8

08002608 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800260c:	4802      	ldr	r0, [pc, #8]	; (8002618 <I2C1_EV_IRQHandler+0x10>)
 800260e:	f001 fefa 	bl	8004406 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002612:	bf00      	nop
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	2000025c 	.word	0x2000025c

0800261c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  return 1;
 8002620:	2301      	movs	r3, #1
}
 8002622:	4618      	mov	r0, r3
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <_kill>:

int _kill(int pid, int sig)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002636:	f009 f8af 	bl	800b798 <__errno>
 800263a:	4603      	mov	r3, r0
 800263c:	2216      	movs	r2, #22
 800263e:	601a      	str	r2, [r3, #0]
  return -1;
 8002640:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002644:	4618      	mov	r0, r3
 8002646:	3708      	adds	r7, #8
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <_exit>:

void _exit (int status)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002654:	f04f 31ff 	mov.w	r1, #4294967295
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f7ff ffe7 	bl	800262c <_kill>
  while (1) {}    /* Make sure we hang here */
 800265e:	e7fe      	b.n	800265e <_exit+0x12>

08002660 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800266c:	2300      	movs	r3, #0
 800266e:	617b      	str	r3, [r7, #20]
 8002670:	e00a      	b.n	8002688 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002672:	f3af 8000 	nop.w
 8002676:	4601      	mov	r1, r0
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	1c5a      	adds	r2, r3, #1
 800267c:	60ba      	str	r2, [r7, #8]
 800267e:	b2ca      	uxtb	r2, r1
 8002680:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	3301      	adds	r3, #1
 8002686:	617b      	str	r3, [r7, #20]
 8002688:	697a      	ldr	r2, [r7, #20]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	429a      	cmp	r2, r3
 800268e:	dbf0      	blt.n	8002672 <_read+0x12>
  }

  return len;
 8002690:	687b      	ldr	r3, [r7, #4]
}
 8002692:	4618      	mov	r0, r3
 8002694:	3718      	adds	r7, #24
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b086      	sub	sp, #24
 800269e:	af00      	add	r7, sp, #0
 80026a0:	60f8      	str	r0, [r7, #12]
 80026a2:	60b9      	str	r1, [r7, #8]
 80026a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026a6:	2300      	movs	r3, #0
 80026a8:	617b      	str	r3, [r7, #20]
 80026aa:	e009      	b.n	80026c0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	1c5a      	adds	r2, r3, #1
 80026b0:	60ba      	str	r2, [r7, #8]
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7fe fff3 	bl	80016a0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	3301      	adds	r3, #1
 80026be:	617b      	str	r3, [r7, #20]
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	dbf1      	blt.n	80026ac <_write+0x12>
  }
  return len;
 80026c8:	687b      	ldr	r3, [r7, #4]
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3718      	adds	r7, #24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <_close>:

int _close(int file)
{
 80026d2:	b480      	push	{r7}
 80026d4:	b083      	sub	sp, #12
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026de:	4618      	mov	r0, r3
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr

080026ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026ea:	b480      	push	{r7}
 80026ec:	b083      	sub	sp, #12
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
 80026f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026fa:	605a      	str	r2, [r3, #4]
  return 0;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr

0800270a <_isatty>:

int _isatty(int file)
{
 800270a:	b480      	push	{r7}
 800270c:	b083      	sub	sp, #12
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002712:	2301      	movs	r3, #1
}
 8002714:	4618      	mov	r0, r3
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3714      	adds	r7, #20
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
	...

0800273c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002744:	4a14      	ldr	r2, [pc, #80]	; (8002798 <_sbrk+0x5c>)
 8002746:	4b15      	ldr	r3, [pc, #84]	; (800279c <_sbrk+0x60>)
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002750:	4b13      	ldr	r3, [pc, #76]	; (80027a0 <_sbrk+0x64>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d102      	bne.n	800275e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002758:	4b11      	ldr	r3, [pc, #68]	; (80027a0 <_sbrk+0x64>)
 800275a:	4a12      	ldr	r2, [pc, #72]	; (80027a4 <_sbrk+0x68>)
 800275c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800275e:	4b10      	ldr	r3, [pc, #64]	; (80027a0 <_sbrk+0x64>)
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4413      	add	r3, r2
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	429a      	cmp	r2, r3
 800276a:	d207      	bcs.n	800277c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800276c:	f009 f814 	bl	800b798 <__errno>
 8002770:	4603      	mov	r3, r0
 8002772:	220c      	movs	r2, #12
 8002774:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002776:	f04f 33ff 	mov.w	r3, #4294967295
 800277a:	e009      	b.n	8002790 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800277c:	4b08      	ldr	r3, [pc, #32]	; (80027a0 <_sbrk+0x64>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002782:	4b07      	ldr	r3, [pc, #28]	; (80027a0 <_sbrk+0x64>)
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4413      	add	r3, r2
 800278a:	4a05      	ldr	r2, [pc, #20]	; (80027a0 <_sbrk+0x64>)
 800278c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800278e:	68fb      	ldr	r3, [r7, #12]
}
 8002790:	4618      	mov	r0, r3
 8002792:	3718      	adds	r7, #24
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	20018000 	.word	0x20018000
 800279c:	00000400 	.word	0x00000400
 80027a0:	20000500 	.word	0x20000500
 80027a4:	200051f0 	.word	0x200051f0

080027a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027ac:	4b06      	ldr	r3, [pc, #24]	; (80027c8 <SystemInit+0x20>)
 80027ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b2:	4a05      	ldr	r2, [pc, #20]	; (80027c8 <SystemInit+0x20>)
 80027b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027bc:	bf00      	nop
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	e000ed00 	.word	0xe000ed00

080027cc <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b08c      	sub	sp, #48	; 0x30
 80027d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80027d2:	f107 030c 	add.w	r3, r7, #12
 80027d6:	2224      	movs	r2, #36	; 0x24
 80027d8:	2100      	movs	r1, #0
 80027da:	4618      	mov	r0, r3
 80027dc:	f008 ff34 	bl	800b648 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027e0:	1d3b      	adds	r3, r7, #4
 80027e2:	2200      	movs	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]
 80027e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80027e8:	4b21      	ldr	r3, [pc, #132]	; (8002870 <MX_TIM2_Init+0xa4>)
 80027ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80027f0:	4b1f      	ldr	r3, [pc, #124]	; (8002870 <MX_TIM2_Init+0xa4>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027f6:	4b1e      	ldr	r3, [pc, #120]	; (8002870 <MX_TIM2_Init+0xa4>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80027fc:	4b1c      	ldr	r3, [pc, #112]	; (8002870 <MX_TIM2_Init+0xa4>)
 80027fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002802:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002804:	4b1a      	ldr	r3, [pc, #104]	; (8002870 <MX_TIM2_Init+0xa4>)
 8002806:	2200      	movs	r2, #0
 8002808:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800280a:	4b19      	ldr	r3, [pc, #100]	; (8002870 <MX_TIM2_Init+0xa4>)
 800280c:	2200      	movs	r2, #0
 800280e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002810:	2303      	movs	r3, #3
 8002812:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002814:	2300      	movs	r3, #0
 8002816:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002818:	2301      	movs	r3, #1
 800281a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800281c:	2300      	movs	r3, #0
 800281e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002820:	2300      	movs	r3, #0
 8002822:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002824:	2300      	movs	r3, #0
 8002826:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002828:	2301      	movs	r3, #1
 800282a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800282c:	2300      	movs	r3, #0
 800282e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002830:	2300      	movs	r3, #0
 8002832:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002834:	f107 030c 	add.w	r3, r7, #12
 8002838:	4619      	mov	r1, r3
 800283a:	480d      	ldr	r0, [pc, #52]	; (8002870 <MX_TIM2_Init+0xa4>)
 800283c:	f004 f960 	bl	8006b00 <HAL_TIM_Encoder_Init>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002846:	f7ff f81f 	bl	8001888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800284a:	2300      	movs	r3, #0
 800284c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800284e:	2300      	movs	r3, #0
 8002850:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002852:	1d3b      	adds	r3, r7, #4
 8002854:	4619      	mov	r1, r3
 8002856:	4806      	ldr	r0, [pc, #24]	; (8002870 <MX_TIM2_Init+0xa4>)
 8002858:	f004 fc5c 	bl	8007114 <HAL_TIMEx_MasterConfigSynchronization>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002862:	f7ff f811 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002866:	bf00      	nop
 8002868:	3730      	adds	r7, #48	; 0x30
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	20000504 	.word	0x20000504

08002874 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b08c      	sub	sp, #48	; 0x30
 8002878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800287a:	f107 030c 	add.w	r3, r7, #12
 800287e:	2224      	movs	r2, #36	; 0x24
 8002880:	2100      	movs	r1, #0
 8002882:	4618      	mov	r0, r3
 8002884:	f008 fee0 	bl	800b648 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002888:	1d3b      	adds	r3, r7, #4
 800288a:	2200      	movs	r2, #0
 800288c:	601a      	str	r2, [r3, #0]
 800288e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002890:	4b20      	ldr	r3, [pc, #128]	; (8002914 <MX_TIM3_Init+0xa0>)
 8002892:	4a21      	ldr	r2, [pc, #132]	; (8002918 <MX_TIM3_Init+0xa4>)
 8002894:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002896:	4b1f      	ldr	r3, [pc, #124]	; (8002914 <MX_TIM3_Init+0xa0>)
 8002898:	2200      	movs	r2, #0
 800289a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800289c:	4b1d      	ldr	r3, [pc, #116]	; (8002914 <MX_TIM3_Init+0xa0>)
 800289e:	2200      	movs	r2, #0
 80028a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80028a2:	4b1c      	ldr	r3, [pc, #112]	; (8002914 <MX_TIM3_Init+0xa0>)
 80028a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028a8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028aa:	4b1a      	ldr	r3, [pc, #104]	; (8002914 <MX_TIM3_Init+0xa0>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028b0:	4b18      	ldr	r3, [pc, #96]	; (8002914 <MX_TIM3_Init+0xa0>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80028b6:	2303      	movs	r3, #3
 80028b8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80028ba:	2300      	movs	r3, #0
 80028bc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80028be:	2301      	movs	r3, #1
 80028c0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80028c2:	2300      	movs	r3, #0
 80028c4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80028c6:	2300      	movs	r3, #0
 80028c8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80028ca:	2300      	movs	r3, #0
 80028cc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80028ce:	2301      	movs	r3, #1
 80028d0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80028d2:	2300      	movs	r3, #0
 80028d4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80028d6:	2300      	movs	r3, #0
 80028d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80028da:	f107 030c 	add.w	r3, r7, #12
 80028de:	4619      	mov	r1, r3
 80028e0:	480c      	ldr	r0, [pc, #48]	; (8002914 <MX_TIM3_Init+0xa0>)
 80028e2:	f004 f90d 	bl	8006b00 <HAL_TIM_Encoder_Init>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80028ec:	f7fe ffcc 	bl	8001888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028f0:	2300      	movs	r3, #0
 80028f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028f4:	2300      	movs	r3, #0
 80028f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80028f8:	1d3b      	adds	r3, r7, #4
 80028fa:	4619      	mov	r1, r3
 80028fc:	4805      	ldr	r0, [pc, #20]	; (8002914 <MX_TIM3_Init+0xa0>)
 80028fe:	f004 fc09 	bl	8007114 <HAL_TIMEx_MasterConfigSynchronization>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002908:	f7fe ffbe 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800290c:	bf00      	nop
 800290e:	3730      	adds	r7, #48	; 0x30
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	2000054c 	.word	0x2000054c
 8002918:	40000400 	.word	0x40000400

0800291c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b08c      	sub	sp, #48	; 0x30
 8002920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002922:	f107 030c 	add.w	r3, r7, #12
 8002926:	2224      	movs	r2, #36	; 0x24
 8002928:	2100      	movs	r1, #0
 800292a:	4618      	mov	r0, r3
 800292c:	f008 fe8c 	bl	800b648 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002930:	1d3b      	adds	r3, r7, #4
 8002932:	2200      	movs	r2, #0
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002938:	4b20      	ldr	r3, [pc, #128]	; (80029bc <MX_TIM4_Init+0xa0>)
 800293a:	4a21      	ldr	r2, [pc, #132]	; (80029c0 <MX_TIM4_Init+0xa4>)
 800293c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800293e:	4b1f      	ldr	r3, [pc, #124]	; (80029bc <MX_TIM4_Init+0xa0>)
 8002940:	2200      	movs	r2, #0
 8002942:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002944:	4b1d      	ldr	r3, [pc, #116]	; (80029bc <MX_TIM4_Init+0xa0>)
 8002946:	2200      	movs	r2, #0
 8002948:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800294a:	4b1c      	ldr	r3, [pc, #112]	; (80029bc <MX_TIM4_Init+0xa0>)
 800294c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002950:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002952:	4b1a      	ldr	r3, [pc, #104]	; (80029bc <MX_TIM4_Init+0xa0>)
 8002954:	2200      	movs	r2, #0
 8002956:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002958:	4b18      	ldr	r3, [pc, #96]	; (80029bc <MX_TIM4_Init+0xa0>)
 800295a:	2200      	movs	r2, #0
 800295c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800295e:	2303      	movs	r3, #3
 8002960:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002962:	2300      	movs	r3, #0
 8002964:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002966:	2301      	movs	r3, #1
 8002968:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800296a:	2300      	movs	r3, #0
 800296c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800296e:	2300      	movs	r3, #0
 8002970:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002972:	2300      	movs	r3, #0
 8002974:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002976:	2301      	movs	r3, #1
 8002978:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800297a:	2300      	movs	r3, #0
 800297c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800297e:	2300      	movs	r3, #0
 8002980:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002982:	f107 030c 	add.w	r3, r7, #12
 8002986:	4619      	mov	r1, r3
 8002988:	480c      	ldr	r0, [pc, #48]	; (80029bc <MX_TIM4_Init+0xa0>)
 800298a:	f004 f8b9 	bl	8006b00 <HAL_TIM_Encoder_Init>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002994:	f7fe ff78 	bl	8001888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002998:	2300      	movs	r3, #0
 800299a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800299c:	2300      	movs	r3, #0
 800299e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80029a0:	1d3b      	adds	r3, r7, #4
 80029a2:	4619      	mov	r1, r3
 80029a4:	4805      	ldr	r0, [pc, #20]	; (80029bc <MX_TIM4_Init+0xa0>)
 80029a6:	f004 fbb5 	bl	8007114 <HAL_TIMEx_MasterConfigSynchronization>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80029b0:	f7fe ff6a 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80029b4:	bf00      	nop
 80029b6:	3730      	adds	r7, #48	; 0x30
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	20000594 	.word	0x20000594
 80029c0:	40000800 	.word	0x40000800

080029c4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b08c      	sub	sp, #48	; 0x30
 80029c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80029ca:	f107 030c 	add.w	r3, r7, #12
 80029ce:	2224      	movs	r2, #36	; 0x24
 80029d0:	2100      	movs	r1, #0
 80029d2:	4618      	mov	r0, r3
 80029d4:	f008 fe38 	bl	800b648 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029d8:	1d3b      	adds	r3, r7, #4
 80029da:	2200      	movs	r2, #0
 80029dc:	601a      	str	r2, [r3, #0]
 80029de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80029e0:	4b20      	ldr	r3, [pc, #128]	; (8002a64 <MX_TIM5_Init+0xa0>)
 80029e2:	4a21      	ldr	r2, [pc, #132]	; (8002a68 <MX_TIM5_Init+0xa4>)
 80029e4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80029e6:	4b1f      	ldr	r3, [pc, #124]	; (8002a64 <MX_TIM5_Init+0xa0>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029ec:	4b1d      	ldr	r3, [pc, #116]	; (8002a64 <MX_TIM5_Init+0xa0>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 80029f2:	4b1c      	ldr	r3, [pc, #112]	; (8002a64 <MX_TIM5_Init+0xa0>)
 80029f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029f8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029fa:	4b1a      	ldr	r3, [pc, #104]	; (8002a64 <MX_TIM5_Init+0xa0>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a00:	4b18      	ldr	r3, [pc, #96]	; (8002a64 <MX_TIM5_Init+0xa0>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002a06:	2303      	movs	r3, #3
 8002a08:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002a12:	2300      	movs	r3, #0
 8002a14:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002a16:	2300      	movs	r3, #0
 8002a18:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002a22:	2300      	movs	r3, #0
 8002a24:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002a26:	2300      	movs	r3, #0
 8002a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002a2a:	f107 030c 	add.w	r3, r7, #12
 8002a2e:	4619      	mov	r1, r3
 8002a30:	480c      	ldr	r0, [pc, #48]	; (8002a64 <MX_TIM5_Init+0xa0>)
 8002a32:	f004 f865 	bl	8006b00 <HAL_TIM_Encoder_Init>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8002a3c:	f7fe ff24 	bl	8001888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a40:	2300      	movs	r3, #0
 8002a42:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a44:	2300      	movs	r3, #0
 8002a46:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002a48:	1d3b      	adds	r3, r7, #4
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	4805      	ldr	r0, [pc, #20]	; (8002a64 <MX_TIM5_Init+0xa0>)
 8002a4e:	f004 fb61 	bl	8007114 <HAL_TIMEx_MasterConfigSynchronization>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8002a58:	f7fe ff16 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002a5c:	bf00      	nop
 8002a5e:	3730      	adds	r7, #48	; 0x30
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	200005dc 	.word	0x200005dc
 8002a68:	40000c00 	.word	0x40000c00

08002a6c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b092      	sub	sp, #72	; 0x48
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a74:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a78:	2200      	movs	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	605a      	str	r2, [r3, #4]
 8002a7e:	609a      	str	r2, [r3, #8]
 8002a80:	60da      	str	r2, [r3, #12]
 8002a82:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a8c:	d14b      	bne.n	8002b26 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a8e:	2300      	movs	r3, #0
 8002a90:	633b      	str	r3, [r7, #48]	; 0x30
 8002a92:	4b80      	ldr	r3, [pc, #512]	; (8002c94 <HAL_TIM_Encoder_MspInit+0x228>)
 8002a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a96:	4a7f      	ldr	r2, [pc, #508]	; (8002c94 <HAL_TIM_Encoder_MspInit+0x228>)
 8002a98:	f043 0301 	orr.w	r3, r3, #1
 8002a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a9e:	4b7d      	ldr	r3, [pc, #500]	; (8002c94 <HAL_TIM_Encoder_MspInit+0x228>)
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	633b      	str	r3, [r7, #48]	; 0x30
 8002aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aaa:	2300      	movs	r3, #0
 8002aac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002aae:	4b79      	ldr	r3, [pc, #484]	; (8002c94 <HAL_TIM_Encoder_MspInit+0x228>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab2:	4a78      	ldr	r2, [pc, #480]	; (8002c94 <HAL_TIM_Encoder_MspInit+0x228>)
 8002ab4:	f043 0301 	orr.w	r3, r3, #1
 8002ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aba:	4b76      	ldr	r3, [pc, #472]	; (8002c94 <HAL_TIM_Encoder_MspInit+0x228>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002aca:	4b72      	ldr	r3, [pc, #456]	; (8002c94 <HAL_TIM_Encoder_MspInit+0x228>)
 8002acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ace:	4a71      	ldr	r2, [pc, #452]	; (8002c94 <HAL_TIM_Encoder_MspInit+0x228>)
 8002ad0:	f043 0302 	orr.w	r3, r3, #2
 8002ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ad6:	4b6f      	ldr	r3, [pc, #444]	; (8002c94 <HAL_TIM_Encoder_MspInit+0x228>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = Encoder_ANT_SX1_Pin;
 8002ae2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ae6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae8:	2302      	movs	r3, #2
 8002aea:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aec:	2300      	movs	r3, #0
 8002aee:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af0:	2300      	movs	r3, #0
 8002af2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002af4:	2301      	movs	r3, #1
 8002af6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(Encoder_ANT_SX1_GPIO_Port, &GPIO_InitStruct);
 8002af8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002afc:	4619      	mov	r1, r3
 8002afe:	4866      	ldr	r0, [pc, #408]	; (8002c98 <HAL_TIM_Encoder_MspInit+0x22c>)
 8002b00:	f000 fed4 	bl	80038ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Encoder_ANT_SX2_Pin;
 8002b04:	2308      	movs	r3, #8
 8002b06:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b08:	2302      	movs	r3, #2
 8002b0a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b10:	2300      	movs	r3, #0
 8002b12:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b14:	2301      	movs	r3, #1
 8002b16:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(Encoder_ANT_SX2_GPIO_Port, &GPIO_InitStruct);
 8002b18:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	485f      	ldr	r0, [pc, #380]	; (8002c9c <HAL_TIM_Encoder_MspInit+0x230>)
 8002b20:	f000 fec4 	bl	80038ac <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002b24:	e0b2      	b.n	8002c8c <HAL_TIM_Encoder_MspInit+0x220>
  else if(tim_encoderHandle->Instance==TIM3)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a5d      	ldr	r2, [pc, #372]	; (8002ca0 <HAL_TIM_Encoder_MspInit+0x234>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d14a      	bne.n	8002bc6 <HAL_TIM_Encoder_MspInit+0x15a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b30:	2300      	movs	r3, #0
 8002b32:	627b      	str	r3, [r7, #36]	; 0x24
 8002b34:	4b57      	ldr	r3, [pc, #348]	; (8002c94 <HAL_TIM_Encoder_MspInit+0x228>)
 8002b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b38:	4a56      	ldr	r2, [pc, #344]	; (8002c94 <HAL_TIM_Encoder_MspInit+0x228>)
 8002b3a:	f043 0302 	orr.w	r3, r3, #2
 8002b3e:	6413      	str	r3, [r2, #64]	; 0x40
 8002b40:	4b54      	ldr	r3, [pc, #336]	; (8002c94 <HAL_TIM_Encoder_MspInit+0x228>)
 8002b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	627b      	str	r3, [r7, #36]	; 0x24
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	623b      	str	r3, [r7, #32]
 8002b50:	4b50      	ldr	r3, [pc, #320]	; (8002c94 <HAL_TIM_Encoder_MspInit+0x228>)
 8002b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b54:	4a4f      	ldr	r2, [pc, #316]	; (8002c94 <HAL_TIM_Encoder_MspInit+0x228>)
 8002b56:	f043 0304 	orr.w	r3, r3, #4
 8002b5a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b5c:	4b4d      	ldr	r3, [pc, #308]	; (8002c94 <HAL_TIM_Encoder_MspInit+0x228>)
 8002b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b60:	f003 0304 	and.w	r3, r3, #4
 8002b64:	623b      	str	r3, [r7, #32]
 8002b66:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b68:	2300      	movs	r3, #0
 8002b6a:	61fb      	str	r3, [r7, #28]
 8002b6c:	4b49      	ldr	r3, [pc, #292]	; (8002c94 <HAL_TIM_Encoder_MspInit+0x228>)
 8002b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b70:	4a48      	ldr	r2, [pc, #288]	; (8002c94 <HAL_TIM_Encoder_MspInit+0x228>)
 8002b72:	f043 0302 	orr.w	r3, r3, #2
 8002b76:	6313      	str	r3, [r2, #48]	; 0x30
 8002b78:	4b46      	ldr	r3, [pc, #280]	; (8002c94 <HAL_TIM_Encoder_MspInit+0x228>)
 8002b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	61fb      	str	r3, [r7, #28]
 8002b82:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = Encoder_ANT_DX2_Pin;
 8002b84:	2380      	movs	r3, #128	; 0x80
 8002b86:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b88:	2302      	movs	r3, #2
 8002b8a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b90:	2300      	movs	r3, #0
 8002b92:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b94:	2302      	movs	r3, #2
 8002b96:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(Encoder_ANT_DX2_GPIO_Port, &GPIO_InitStruct);
 8002b98:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4841      	ldr	r0, [pc, #260]	; (8002ca4 <HAL_TIM_Encoder_MspInit+0x238>)
 8002ba0:	f000 fe84 	bl	80038ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Encoder_ANT_DX1_Pin;
 8002ba4:	2310      	movs	r3, #16
 8002ba6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba8:	2302      	movs	r3, #2
 8002baa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bac:	2300      	movs	r3, #0
 8002bae:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(Encoder_ANT_DX1_GPIO_Port, &GPIO_InitStruct);
 8002bb8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	4837      	ldr	r0, [pc, #220]	; (8002c9c <HAL_TIM_Encoder_MspInit+0x230>)
 8002bc0:	f000 fe74 	bl	80038ac <HAL_GPIO_Init>
}
 8002bc4:	e062      	b.n	8002c8c <HAL_TIM_Encoder_MspInit+0x220>
  else if(tim_encoderHandle->Instance==TIM4)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a37      	ldr	r2, [pc, #220]	; (8002ca8 <HAL_TIM_Encoder_MspInit+0x23c>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d12c      	bne.n	8002c2a <HAL_TIM_Encoder_MspInit+0x1be>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	61bb      	str	r3, [r7, #24]
 8002bd4:	4b2f      	ldr	r3, [pc, #188]	; (8002c94 <HAL_TIM_Encoder_MspInit+0x228>)
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd8:	4a2e      	ldr	r2, [pc, #184]	; (8002c94 <HAL_TIM_Encoder_MspInit+0x228>)
 8002bda:	f043 0304 	orr.w	r3, r3, #4
 8002bde:	6413      	str	r3, [r2, #64]	; 0x40
 8002be0:	4b2c      	ldr	r3, [pc, #176]	; (8002c94 <HAL_TIM_Encoder_MspInit+0x228>)
 8002be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	61bb      	str	r3, [r7, #24]
 8002bea:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bec:	2300      	movs	r3, #0
 8002bee:	617b      	str	r3, [r7, #20]
 8002bf0:	4b28      	ldr	r3, [pc, #160]	; (8002c94 <HAL_TIM_Encoder_MspInit+0x228>)
 8002bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf4:	4a27      	ldr	r2, [pc, #156]	; (8002c94 <HAL_TIM_Encoder_MspInit+0x228>)
 8002bf6:	f043 0302 	orr.w	r3, r3, #2
 8002bfa:	6313      	str	r3, [r2, #48]	; 0x30
 8002bfc:	4b25      	ldr	r3, [pc, #148]	; (8002c94 <HAL_TIM_Encoder_MspInit+0x228>)
 8002bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	617b      	str	r3, [r7, #20]
 8002c06:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Encoder_POST_SX1_Pin|Encoder_POST_SX2_Pin;
 8002c08:	23c0      	movs	r3, #192	; 0xc0
 8002c0a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c10:	2300      	movs	r3, #0
 8002c12:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c14:	2300      	movs	r3, #0
 8002c16:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002c18:	2302      	movs	r3, #2
 8002c1a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c1c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c20:	4619      	mov	r1, r3
 8002c22:	481e      	ldr	r0, [pc, #120]	; (8002c9c <HAL_TIM_Encoder_MspInit+0x230>)
 8002c24:	f000 fe42 	bl	80038ac <HAL_GPIO_Init>
}
 8002c28:	e030      	b.n	8002c8c <HAL_TIM_Encoder_MspInit+0x220>
  else if(tim_encoderHandle->Instance==TIM5)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a1f      	ldr	r2, [pc, #124]	; (8002cac <HAL_TIM_Encoder_MspInit+0x240>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d12b      	bne.n	8002c8c <HAL_TIM_Encoder_MspInit+0x220>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002c34:	2300      	movs	r3, #0
 8002c36:	613b      	str	r3, [r7, #16]
 8002c38:	4b16      	ldr	r3, [pc, #88]	; (8002c94 <HAL_TIM_Encoder_MspInit+0x228>)
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3c:	4a15      	ldr	r2, [pc, #84]	; (8002c94 <HAL_TIM_Encoder_MspInit+0x228>)
 8002c3e:	f043 0308 	orr.w	r3, r3, #8
 8002c42:	6413      	str	r3, [r2, #64]	; 0x40
 8002c44:	4b13      	ldr	r3, [pc, #76]	; (8002c94 <HAL_TIM_Encoder_MspInit+0x228>)
 8002c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c48:	f003 0308 	and.w	r3, r3, #8
 8002c4c:	613b      	str	r3, [r7, #16]
 8002c4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c50:	2300      	movs	r3, #0
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	4b0f      	ldr	r3, [pc, #60]	; (8002c94 <HAL_TIM_Encoder_MspInit+0x228>)
 8002c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c58:	4a0e      	ldr	r2, [pc, #56]	; (8002c94 <HAL_TIM_Encoder_MspInit+0x228>)
 8002c5a:	f043 0301 	orr.w	r3, r3, #1
 8002c5e:	6313      	str	r3, [r2, #48]	; 0x30
 8002c60:	4b0c      	ldr	r3, [pc, #48]	; (8002c94 <HAL_TIM_Encoder_MspInit+0x228>)
 8002c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c64:	f003 0301 	and.w	r3, r3, #1
 8002c68:	60fb      	str	r3, [r7, #12]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder_POST_DX1_Pin|Encoder_POST_DX2_Pin;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c70:	2302      	movs	r3, #2
 8002c72:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c74:	2300      	movs	r3, #0
 8002c76:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c80:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c84:	4619      	mov	r1, r3
 8002c86:	4804      	ldr	r0, [pc, #16]	; (8002c98 <HAL_TIM_Encoder_MspInit+0x22c>)
 8002c88:	f000 fe10 	bl	80038ac <HAL_GPIO_Init>
}
 8002c8c:	bf00      	nop
 8002c8e:	3748      	adds	r7, #72	; 0x48
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40023800 	.word	0x40023800
 8002c98:	40020000 	.word	0x40020000
 8002c9c:	40020400 	.word	0x40020400
 8002ca0:	40000400 	.word	0x40000400
 8002ca4:	40020800 	.word	0x40020800
 8002ca8:	40000800 	.word	0x40000800
 8002cac:	40000c00 	.word	0x40000c00

08002cb0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart6;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002cb4:	4b11      	ldr	r3, [pc, #68]	; (8002cfc <MX_USART2_UART_Init+0x4c>)
 8002cb6:	4a12      	ldr	r2, [pc, #72]	; (8002d00 <MX_USART2_UART_Init+0x50>)
 8002cb8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002cba:	4b10      	ldr	r3, [pc, #64]	; (8002cfc <MX_USART2_UART_Init+0x4c>)
 8002cbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002cc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002cc2:	4b0e      	ldr	r3, [pc, #56]	; (8002cfc <MX_USART2_UART_Init+0x4c>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002cc8:	4b0c      	ldr	r3, [pc, #48]	; (8002cfc <MX_USART2_UART_Init+0x4c>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002cce:	4b0b      	ldr	r3, [pc, #44]	; (8002cfc <MX_USART2_UART_Init+0x4c>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002cd4:	4b09      	ldr	r3, [pc, #36]	; (8002cfc <MX_USART2_UART_Init+0x4c>)
 8002cd6:	220c      	movs	r2, #12
 8002cd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cda:	4b08      	ldr	r3, [pc, #32]	; (8002cfc <MX_USART2_UART_Init+0x4c>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ce0:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <MX_USART2_UART_Init+0x4c>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ce6:	4805      	ldr	r0, [pc, #20]	; (8002cfc <MX_USART2_UART_Init+0x4c>)
 8002ce8:	f004 fa96 	bl	8007218 <HAL_UART_Init>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002cf2:	f7fe fdc9 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002cf6:	bf00      	nop
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	20000624 	.word	0x20000624
 8002d00:	40004400 	.word	0x40004400

08002d04 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002d08:	4b11      	ldr	r3, [pc, #68]	; (8002d50 <MX_USART6_UART_Init+0x4c>)
 8002d0a:	4a12      	ldr	r2, [pc, #72]	; (8002d54 <MX_USART6_UART_Init+0x50>)
 8002d0c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 38400;
 8002d0e:	4b10      	ldr	r3, [pc, #64]	; (8002d50 <MX_USART6_UART_Init+0x4c>)
 8002d10:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002d14:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002d16:	4b0e      	ldr	r3, [pc, #56]	; (8002d50 <MX_USART6_UART_Init+0x4c>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002d1c:	4b0c      	ldr	r3, [pc, #48]	; (8002d50 <MX_USART6_UART_Init+0x4c>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002d22:	4b0b      	ldr	r3, [pc, #44]	; (8002d50 <MX_USART6_UART_Init+0x4c>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002d28:	4b09      	ldr	r3, [pc, #36]	; (8002d50 <MX_USART6_UART_Init+0x4c>)
 8002d2a:	220c      	movs	r2, #12
 8002d2c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d2e:	4b08      	ldr	r3, [pc, #32]	; (8002d50 <MX_USART6_UART_Init+0x4c>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d34:	4b06      	ldr	r3, [pc, #24]	; (8002d50 <MX_USART6_UART_Init+0x4c>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart6) != HAL_OK)
 8002d3a:	4805      	ldr	r0, [pc, #20]	; (8002d50 <MX_USART6_UART_Init+0x4c>)
 8002d3c:	f004 fab9 	bl	80072b2 <HAL_HalfDuplex_Init>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002d46:	f7fe fd9f 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002d4a:	bf00      	nop
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	20000668 	.word	0x20000668
 8002d54:	40011400 	.word	0x40011400

08002d58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b08c      	sub	sp, #48	; 0x30
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d60:	f107 031c 	add.w	r3, r7, #28
 8002d64:	2200      	movs	r2, #0
 8002d66:	601a      	str	r2, [r3, #0]
 8002d68:	605a      	str	r2, [r3, #4]
 8002d6a:	609a      	str	r2, [r3, #8]
 8002d6c:	60da      	str	r2, [r3, #12]
 8002d6e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a32      	ldr	r2, [pc, #200]	; (8002e40 <HAL_UART_MspInit+0xe8>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d12c      	bne.n	8002dd4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	61bb      	str	r3, [r7, #24]
 8002d7e:	4b31      	ldr	r3, [pc, #196]	; (8002e44 <HAL_UART_MspInit+0xec>)
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	4a30      	ldr	r2, [pc, #192]	; (8002e44 <HAL_UART_MspInit+0xec>)
 8002d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d88:	6413      	str	r3, [r2, #64]	; 0x40
 8002d8a:	4b2e      	ldr	r3, [pc, #184]	; (8002e44 <HAL_UART_MspInit+0xec>)
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d92:	61bb      	str	r3, [r7, #24]
 8002d94:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d96:	2300      	movs	r3, #0
 8002d98:	617b      	str	r3, [r7, #20]
 8002d9a:	4b2a      	ldr	r3, [pc, #168]	; (8002e44 <HAL_UART_MspInit+0xec>)
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9e:	4a29      	ldr	r2, [pc, #164]	; (8002e44 <HAL_UART_MspInit+0xec>)
 8002da0:	f043 0301 	orr.w	r3, r3, #1
 8002da4:	6313      	str	r3, [r2, #48]	; 0x30
 8002da6:	4b27      	ldr	r3, [pc, #156]	; (8002e44 <HAL_UART_MspInit+0xec>)
 8002da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	617b      	str	r3, [r7, #20]
 8002db0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002db2:	230c      	movs	r3, #12
 8002db4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db6:	2302      	movs	r3, #2
 8002db8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002dc2:	2307      	movs	r3, #7
 8002dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dc6:	f107 031c 	add.w	r3, r7, #28
 8002dca:	4619      	mov	r1, r3
 8002dcc:	481e      	ldr	r0, [pc, #120]	; (8002e48 <HAL_UART_MspInit+0xf0>)
 8002dce:	f000 fd6d 	bl	80038ac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002dd2:	e030      	b.n	8002e36 <HAL_UART_MspInit+0xde>
  else if(uartHandle->Instance==USART6)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a1c      	ldr	r2, [pc, #112]	; (8002e4c <HAL_UART_MspInit+0xf4>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d12b      	bne.n	8002e36 <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002dde:	2300      	movs	r3, #0
 8002de0:	613b      	str	r3, [r7, #16]
 8002de2:	4b18      	ldr	r3, [pc, #96]	; (8002e44 <HAL_UART_MspInit+0xec>)
 8002de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de6:	4a17      	ldr	r2, [pc, #92]	; (8002e44 <HAL_UART_MspInit+0xec>)
 8002de8:	f043 0320 	orr.w	r3, r3, #32
 8002dec:	6453      	str	r3, [r2, #68]	; 0x44
 8002dee:	4b15      	ldr	r3, [pc, #84]	; (8002e44 <HAL_UART_MspInit+0xec>)
 8002df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df2:	f003 0320 	and.w	r3, r3, #32
 8002df6:	613b      	str	r3, [r7, #16]
 8002df8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60fb      	str	r3, [r7, #12]
 8002dfe:	4b11      	ldr	r3, [pc, #68]	; (8002e44 <HAL_UART_MspInit+0xec>)
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	4a10      	ldr	r2, [pc, #64]	; (8002e44 <HAL_UART_MspInit+0xec>)
 8002e04:	f043 0304 	orr.w	r3, r3, #4
 8002e08:	6313      	str	r3, [r2, #48]	; 0x30
 8002e0a:	4b0e      	ldr	r3, [pc, #56]	; (8002e44 <HAL_UART_MspInit+0xec>)
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	f003 0304 	and.w	r3, r3, #4
 8002e12:	60fb      	str	r3, [r7, #12]
 8002e14:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MotorDriver_TX_Pin;
 8002e16:	2340      	movs	r3, #64	; 0x40
 8002e18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e1a:	2312      	movs	r3, #18
 8002e1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e22:	2303      	movs	r3, #3
 8002e24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002e26:	2308      	movs	r3, #8
 8002e28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MotorDriver_TX_GPIO_Port, &GPIO_InitStruct);
 8002e2a:	f107 031c 	add.w	r3, r7, #28
 8002e2e:	4619      	mov	r1, r3
 8002e30:	4807      	ldr	r0, [pc, #28]	; (8002e50 <HAL_UART_MspInit+0xf8>)
 8002e32:	f000 fd3b 	bl	80038ac <HAL_GPIO_Init>
}
 8002e36:	bf00      	nop
 8002e38:	3730      	adds	r7, #48	; 0x30
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40004400 	.word	0x40004400
 8002e44:	40023800 	.word	0x40023800
 8002e48:	40020000 	.word	0x40020000
 8002e4c:	40011400 	.word	0x40011400
 8002e50:	40020800 	.word	0x40020800

08002e54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e58:	480d      	ldr	r0, [pc, #52]	; (8002e90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e5a:	490e      	ldr	r1, [pc, #56]	; (8002e94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e5c:	4a0e      	ldr	r2, [pc, #56]	; (8002e98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e60:	e002      	b.n	8002e68 <LoopCopyDataInit>

08002e62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e66:	3304      	adds	r3, #4

08002e68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e6c:	d3f9      	bcc.n	8002e62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e6e:	4a0b      	ldr	r2, [pc, #44]	; (8002e9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e70:	4c0b      	ldr	r4, [pc, #44]	; (8002ea0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e74:	e001      	b.n	8002e7a <LoopFillZerobss>

08002e76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e78:	3204      	adds	r2, #4

08002e7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e7c:	d3fb      	bcc.n	8002e76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e7e:	f7ff fc93 	bl	80027a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e82:	f008 fc8f 	bl	800b7a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e86:	f7fe fc1d 	bl	80016c4 <main>
  bx  lr    
 8002e8a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e8c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002e90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e94:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002e98:	0800d974 	.word	0x0800d974
  ldr r2, =_sbss
 8002e9c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002ea0:	200051ec 	.word	0x200051ec

08002ea4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ea4:	e7fe      	b.n	8002ea4 <ADC_IRQHandler>
	...

08002ea8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002eac:	4b0e      	ldr	r3, [pc, #56]	; (8002ee8 <HAL_Init+0x40>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a0d      	ldr	r2, [pc, #52]	; (8002ee8 <HAL_Init+0x40>)
 8002eb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002eb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ee8 <HAL_Init+0x40>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a0a      	ldr	r2, [pc, #40]	; (8002ee8 <HAL_Init+0x40>)
 8002ebe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ec2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ec4:	4b08      	ldr	r3, [pc, #32]	; (8002ee8 <HAL_Init+0x40>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a07      	ldr	r2, [pc, #28]	; (8002ee8 <HAL_Init+0x40>)
 8002eca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ece:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ed0:	2003      	movs	r0, #3
 8002ed2:	f000 fc86 	bl	80037e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ed6:	200f      	movs	r0, #15
 8002ed8:	f7ff fb02 	bl	80024e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002edc:	f7ff fad4 	bl	8002488 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	40023c00 	.word	0x40023c00

08002eec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ef0:	4b06      	ldr	r3, [pc, #24]	; (8002f0c <HAL_IncTick+0x20>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	4b06      	ldr	r3, [pc, #24]	; (8002f10 <HAL_IncTick+0x24>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4413      	add	r3, r2
 8002efc:	4a04      	ldr	r2, [pc, #16]	; (8002f10 <HAL_IncTick+0x24>)
 8002efe:	6013      	str	r3, [r2, #0]
}
 8002f00:	bf00      	nop
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	20000008 	.word	0x20000008
 8002f10:	200006ac 	.word	0x200006ac

08002f14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  return uwTick;
 8002f18:	4b03      	ldr	r3, [pc, #12]	; (8002f28 <HAL_GetTick+0x14>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	200006ac 	.word	0x200006ac

08002f2c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f34:	2300      	movs	r3, #0
 8002f36:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e033      	b.n	8002faa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d109      	bne.n	8002f5e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f7fe fa9a 	bl	8001484 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f62:	f003 0310 	and.w	r3, r3, #16
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d118      	bne.n	8002f9c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f72:	f023 0302 	bic.w	r3, r3, #2
 8002f76:	f043 0202 	orr.w	r2, r3, #2
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 fa86 	bl	8003490 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8e:	f023 0303 	bic.w	r3, r3, #3
 8002f92:	f043 0201 	orr.w	r2, r3, #1
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	641a      	str	r2, [r3, #64]	; 0x40
 8002f9a:	e001      	b.n	8002fa0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
	...

08002fb4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d101      	bne.n	8002fce <HAL_ADC_Start+0x1a>
 8002fca:	2302      	movs	r3, #2
 8002fcc:	e097      	b.n	80030fe <HAL_ADC_Start+0x14a>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d018      	beq.n	8003016 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	689a      	ldr	r2, [r3, #8]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f042 0201 	orr.w	r2, r2, #1
 8002ff2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ff4:	4b45      	ldr	r3, [pc, #276]	; (800310c <HAL_ADC_Start+0x158>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a45      	ldr	r2, [pc, #276]	; (8003110 <HAL_ADC_Start+0x15c>)
 8002ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffe:	0c9a      	lsrs	r2, r3, #18
 8003000:	4613      	mov	r3, r2
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	4413      	add	r3, r2
 8003006:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003008:	e002      	b.n	8003010 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	3b01      	subs	r3, #1
 800300e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1f9      	bne.n	800300a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	2b01      	cmp	r3, #1
 8003022:	d15f      	bne.n	80030e4 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003028:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800302c:	f023 0301 	bic.w	r3, r3, #1
 8003030:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003042:	2b00      	cmp	r3, #0
 8003044:	d007      	beq.n	8003056 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800304e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800305e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003062:	d106      	bne.n	8003072 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003068:	f023 0206 	bic.w	r2, r3, #6
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	645a      	str	r2, [r3, #68]	; 0x44
 8003070:	e002      	b.n	8003078 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003080:	4b24      	ldr	r3, [pc, #144]	; (8003114 <HAL_ADC_Start+0x160>)
 8003082:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800308c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f003 031f 	and.w	r3, r3, #31
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10f      	bne.n	80030ba <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d129      	bne.n	80030fc <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689a      	ldr	r2, [r3, #8]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80030b6:	609a      	str	r2, [r3, #8]
 80030b8:	e020      	b.n	80030fc <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a16      	ldr	r2, [pc, #88]	; (8003118 <HAL_ADC_Start+0x164>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d11b      	bne.n	80030fc <HAL_ADC_Start+0x148>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d114      	bne.n	80030fc <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80030e0:	609a      	str	r2, [r3, #8]
 80030e2:	e00b      	b.n	80030fc <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e8:	f043 0210 	orr.w	r2, r3, #16
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f4:	f043 0201 	orr.w	r2, r3, #1
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3714      	adds	r7, #20
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	20000000 	.word	0x20000000
 8003110:	431bde83 	.word	0x431bde83
 8003114:	40012300 	.word	0x40012300
 8003118:	40012000 	.word	0x40012000

0800311c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003126:	2300      	movs	r3, #0
 8003128:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003134:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003138:	d113      	bne.n	8003162 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003144:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003148:	d10b      	bne.n	8003162 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	f043 0220 	orr.w	r2, r3, #32
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e063      	b.n	800322a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003162:	f7ff fed7 	bl	8002f14 <HAL_GetTick>
 8003166:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003168:	e021      	b.n	80031ae <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003170:	d01d      	beq.n	80031ae <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d007      	beq.n	8003188 <HAL_ADC_PollForConversion+0x6c>
 8003178:	f7ff fecc 	bl	8002f14 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	683a      	ldr	r2, [r7, #0]
 8003184:	429a      	cmp	r2, r3
 8003186:	d212      	bcs.n	80031ae <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b02      	cmp	r3, #2
 8003194:	d00b      	beq.n	80031ae <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	f043 0204 	orr.w	r2, r3, #4
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e03d      	b.n	800322a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d1d6      	bne.n	800316a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f06f 0212 	mvn.w	r2, #18
 80031c4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d123      	bne.n	8003228 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d11f      	bne.n	8003228 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d006      	beq.n	8003204 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003200:	2b00      	cmp	r3, #0
 8003202:	d111      	bne.n	8003228 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003208:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003214:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d105      	bne.n	8003228 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003220:	f043 0201 	orr.w	r2, r3, #1
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003232:	b480      	push	{r7}
 8003234:	b083      	sub	sp, #12
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003240:	4618      	mov	r0, r3
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003256:	2300      	movs	r3, #0
 8003258:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003260:	2b01      	cmp	r3, #1
 8003262:	d101      	bne.n	8003268 <HAL_ADC_ConfigChannel+0x1c>
 8003264:	2302      	movs	r3, #2
 8003266:	e105      	b.n	8003474 <HAL_ADC_ConfigChannel+0x228>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2b09      	cmp	r3, #9
 8003276:	d925      	bls.n	80032c4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68d9      	ldr	r1, [r3, #12]
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	b29b      	uxth	r3, r3
 8003284:	461a      	mov	r2, r3
 8003286:	4613      	mov	r3, r2
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	4413      	add	r3, r2
 800328c:	3b1e      	subs	r3, #30
 800328e:	2207      	movs	r2, #7
 8003290:	fa02 f303 	lsl.w	r3, r2, r3
 8003294:	43da      	mvns	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	400a      	ands	r2, r1
 800329c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68d9      	ldr	r1, [r3, #12]
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	689a      	ldr	r2, [r3, #8]
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	4618      	mov	r0, r3
 80032b0:	4603      	mov	r3, r0
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	4403      	add	r3, r0
 80032b6:	3b1e      	subs	r3, #30
 80032b8:	409a      	lsls	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	430a      	orrs	r2, r1
 80032c0:	60da      	str	r2, [r3, #12]
 80032c2:	e022      	b.n	800330a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6919      	ldr	r1, [r3, #16]
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	461a      	mov	r2, r3
 80032d2:	4613      	mov	r3, r2
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	4413      	add	r3, r2
 80032d8:	2207      	movs	r2, #7
 80032da:	fa02 f303 	lsl.w	r3, r2, r3
 80032de:	43da      	mvns	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	400a      	ands	r2, r1
 80032e6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	6919      	ldr	r1, [r3, #16]
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	689a      	ldr	r2, [r3, #8]
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	4618      	mov	r0, r3
 80032fa:	4603      	mov	r3, r0
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	4403      	add	r3, r0
 8003300:	409a      	lsls	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	2b06      	cmp	r3, #6
 8003310:	d824      	bhi.n	800335c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	4613      	mov	r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	4413      	add	r3, r2
 8003322:	3b05      	subs	r3, #5
 8003324:	221f      	movs	r2, #31
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	43da      	mvns	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	400a      	ands	r2, r1
 8003332:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	b29b      	uxth	r3, r3
 8003340:	4618      	mov	r0, r3
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685a      	ldr	r2, [r3, #4]
 8003346:	4613      	mov	r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	4413      	add	r3, r2
 800334c:	3b05      	subs	r3, #5
 800334e:	fa00 f203 	lsl.w	r2, r0, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	430a      	orrs	r2, r1
 8003358:	635a      	str	r2, [r3, #52]	; 0x34
 800335a:	e04c      	b.n	80033f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	2b0c      	cmp	r3, #12
 8003362:	d824      	bhi.n	80033ae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	4613      	mov	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4413      	add	r3, r2
 8003374:	3b23      	subs	r3, #35	; 0x23
 8003376:	221f      	movs	r2, #31
 8003378:	fa02 f303 	lsl.w	r3, r2, r3
 800337c:	43da      	mvns	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	400a      	ands	r2, r1
 8003384:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	b29b      	uxth	r3, r3
 8003392:	4618      	mov	r0, r3
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685a      	ldr	r2, [r3, #4]
 8003398:	4613      	mov	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4413      	add	r3, r2
 800339e:	3b23      	subs	r3, #35	; 0x23
 80033a0:	fa00 f203 	lsl.w	r2, r0, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	430a      	orrs	r2, r1
 80033aa:	631a      	str	r2, [r3, #48]	; 0x30
 80033ac:	e023      	b.n	80033f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	4613      	mov	r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4413      	add	r3, r2
 80033be:	3b41      	subs	r3, #65	; 0x41
 80033c0:	221f      	movs	r2, #31
 80033c2:	fa02 f303 	lsl.w	r3, r2, r3
 80033c6:	43da      	mvns	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	400a      	ands	r2, r1
 80033ce:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	b29b      	uxth	r3, r3
 80033dc:	4618      	mov	r0, r3
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685a      	ldr	r2, [r3, #4]
 80033e2:	4613      	mov	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4413      	add	r3, r2
 80033e8:	3b41      	subs	r3, #65	; 0x41
 80033ea:	fa00 f203 	lsl.w	r2, r0, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033f6:	4b22      	ldr	r3, [pc, #136]	; (8003480 <HAL_ADC_ConfigChannel+0x234>)
 80033f8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a21      	ldr	r2, [pc, #132]	; (8003484 <HAL_ADC_ConfigChannel+0x238>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d109      	bne.n	8003418 <HAL_ADC_ConfigChannel+0x1cc>
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2b12      	cmp	r3, #18
 800340a:	d105      	bne.n	8003418 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a19      	ldr	r2, [pc, #100]	; (8003484 <HAL_ADC_ConfigChannel+0x238>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d123      	bne.n	800346a <HAL_ADC_ConfigChannel+0x21e>
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2b10      	cmp	r3, #16
 8003428:	d003      	beq.n	8003432 <HAL_ADC_ConfigChannel+0x1e6>
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2b11      	cmp	r3, #17
 8003430:	d11b      	bne.n	800346a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2b10      	cmp	r3, #16
 8003444:	d111      	bne.n	800346a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003446:	4b10      	ldr	r3, [pc, #64]	; (8003488 <HAL_ADC_ConfigChannel+0x23c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a10      	ldr	r2, [pc, #64]	; (800348c <HAL_ADC_ConfigChannel+0x240>)
 800344c:	fba2 2303 	umull	r2, r3, r2, r3
 8003450:	0c9a      	lsrs	r2, r3, #18
 8003452:	4613      	mov	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	4413      	add	r3, r2
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800345c:	e002      	b.n	8003464 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	3b01      	subs	r3, #1
 8003462:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1f9      	bne.n	800345e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3714      	adds	r7, #20
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr
 8003480:	40012300 	.word	0x40012300
 8003484:	40012000 	.word	0x40012000
 8003488:	20000000 	.word	0x20000000
 800348c:	431bde83 	.word	0x431bde83

08003490 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003498:	4b79      	ldr	r3, [pc, #484]	; (8003680 <ADC_Init+0x1f0>)
 800349a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	431a      	orrs	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6859      	ldr	r1, [r3, #4]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	021a      	lsls	r2, r3, #8
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80034e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	6859      	ldr	r1, [r3, #4]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	430a      	orrs	r2, r1
 80034fa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689a      	ldr	r2, [r3, #8]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800350a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	6899      	ldr	r1, [r3, #8]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	68da      	ldr	r2, [r3, #12]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	430a      	orrs	r2, r1
 800351c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003522:	4a58      	ldr	r2, [pc, #352]	; (8003684 <ADC_Init+0x1f4>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d022      	beq.n	800356e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689a      	ldr	r2, [r3, #8]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003536:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6899      	ldr	r1, [r3, #8]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	430a      	orrs	r2, r1
 8003548:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003558:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	6899      	ldr	r1, [r3, #8]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	430a      	orrs	r2, r1
 800356a:	609a      	str	r2, [r3, #8]
 800356c:	e00f      	b.n	800358e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	689a      	ldr	r2, [r3, #8]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800357c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800358c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689a      	ldr	r2, [r3, #8]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 0202 	bic.w	r2, r2, #2
 800359c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	6899      	ldr	r1, [r3, #8]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	7e1b      	ldrb	r3, [r3, #24]
 80035a8:	005a      	lsls	r2, r3, #1
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d01b      	beq.n	80035f4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	685a      	ldr	r2, [r3, #4]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035ca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	685a      	ldr	r2, [r3, #4]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80035da:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	6859      	ldr	r1, [r3, #4]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e6:	3b01      	subs	r3, #1
 80035e8:	035a      	lsls	r2, r3, #13
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	605a      	str	r2, [r3, #4]
 80035f2:	e007      	b.n	8003604 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685a      	ldr	r2, [r3, #4]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003602:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003612:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	69db      	ldr	r3, [r3, #28]
 800361e:	3b01      	subs	r3, #1
 8003620:	051a      	lsls	r2, r3, #20
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	430a      	orrs	r2, r1
 8003628:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	689a      	ldr	r2, [r3, #8]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003638:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	6899      	ldr	r1, [r3, #8]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003646:	025a      	lsls	r2, r3, #9
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	430a      	orrs	r2, r1
 800364e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	689a      	ldr	r2, [r3, #8]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800365e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	6899      	ldr	r1, [r3, #8]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	029a      	lsls	r2, r3, #10
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	430a      	orrs	r2, r1
 8003672:	609a      	str	r2, [r3, #8]
}
 8003674:	bf00      	nop
 8003676:	3714      	adds	r7, #20
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr
 8003680:	40012300 	.word	0x40012300
 8003684:	0f000001 	.word	0x0f000001

08003688 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003688:	b480      	push	{r7}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f003 0307 	and.w	r3, r3, #7
 8003696:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003698:	4b0c      	ldr	r3, [pc, #48]	; (80036cc <__NVIC_SetPriorityGrouping+0x44>)
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800369e:	68ba      	ldr	r2, [r7, #8]
 80036a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036a4:	4013      	ands	r3, r2
 80036a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036ba:	4a04      	ldr	r2, [pc, #16]	; (80036cc <__NVIC_SetPriorityGrouping+0x44>)
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	60d3      	str	r3, [r2, #12]
}
 80036c0:	bf00      	nop
 80036c2:	3714      	adds	r7, #20
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr
 80036cc:	e000ed00 	.word	0xe000ed00

080036d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036d0:	b480      	push	{r7}
 80036d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036d4:	4b04      	ldr	r3, [pc, #16]	; (80036e8 <__NVIC_GetPriorityGrouping+0x18>)
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	0a1b      	lsrs	r3, r3, #8
 80036da:	f003 0307 	and.w	r3, r3, #7
}
 80036de:	4618      	mov	r0, r3
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr
 80036e8:	e000ed00 	.word	0xe000ed00

080036ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	4603      	mov	r3, r0
 80036f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	db0b      	blt.n	8003716 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036fe:	79fb      	ldrb	r3, [r7, #7]
 8003700:	f003 021f 	and.w	r2, r3, #31
 8003704:	4907      	ldr	r1, [pc, #28]	; (8003724 <__NVIC_EnableIRQ+0x38>)
 8003706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800370a:	095b      	lsrs	r3, r3, #5
 800370c:	2001      	movs	r0, #1
 800370e:	fa00 f202 	lsl.w	r2, r0, r2
 8003712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003716:	bf00      	nop
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	e000e100 	.word	0xe000e100

08003728 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	4603      	mov	r3, r0
 8003730:	6039      	str	r1, [r7, #0]
 8003732:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003738:	2b00      	cmp	r3, #0
 800373a:	db0a      	blt.n	8003752 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	b2da      	uxtb	r2, r3
 8003740:	490c      	ldr	r1, [pc, #48]	; (8003774 <__NVIC_SetPriority+0x4c>)
 8003742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003746:	0112      	lsls	r2, r2, #4
 8003748:	b2d2      	uxtb	r2, r2
 800374a:	440b      	add	r3, r1
 800374c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003750:	e00a      	b.n	8003768 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	b2da      	uxtb	r2, r3
 8003756:	4908      	ldr	r1, [pc, #32]	; (8003778 <__NVIC_SetPriority+0x50>)
 8003758:	79fb      	ldrb	r3, [r7, #7]
 800375a:	f003 030f 	and.w	r3, r3, #15
 800375e:	3b04      	subs	r3, #4
 8003760:	0112      	lsls	r2, r2, #4
 8003762:	b2d2      	uxtb	r2, r2
 8003764:	440b      	add	r3, r1
 8003766:	761a      	strb	r2, [r3, #24]
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr
 8003774:	e000e100 	.word	0xe000e100
 8003778:	e000ed00 	.word	0xe000ed00

0800377c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800377c:	b480      	push	{r7}
 800377e:	b089      	sub	sp, #36	; 0x24
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f003 0307 	and.w	r3, r3, #7
 800378e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	f1c3 0307 	rsb	r3, r3, #7
 8003796:	2b04      	cmp	r3, #4
 8003798:	bf28      	it	cs
 800379a:	2304      	movcs	r3, #4
 800379c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	3304      	adds	r3, #4
 80037a2:	2b06      	cmp	r3, #6
 80037a4:	d902      	bls.n	80037ac <NVIC_EncodePriority+0x30>
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	3b03      	subs	r3, #3
 80037aa:	e000      	b.n	80037ae <NVIC_EncodePriority+0x32>
 80037ac:	2300      	movs	r3, #0
 80037ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037b0:	f04f 32ff 	mov.w	r2, #4294967295
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ba:	43da      	mvns	r2, r3
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	401a      	ands	r2, r3
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037c4:	f04f 31ff 	mov.w	r1, #4294967295
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	fa01 f303 	lsl.w	r3, r1, r3
 80037ce:	43d9      	mvns	r1, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037d4:	4313      	orrs	r3, r2
         );
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3724      	adds	r7, #36	; 0x24
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr

080037e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b082      	sub	sp, #8
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f7ff ff4c 	bl	8003688 <__NVIC_SetPriorityGrouping>
}
 80037f0:	bf00      	nop
 80037f2:	3708      	adds	r7, #8
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	4603      	mov	r3, r0
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	607a      	str	r2, [r7, #4]
 8003804:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003806:	2300      	movs	r3, #0
 8003808:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800380a:	f7ff ff61 	bl	80036d0 <__NVIC_GetPriorityGrouping>
 800380e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	68b9      	ldr	r1, [r7, #8]
 8003814:	6978      	ldr	r0, [r7, #20]
 8003816:	f7ff ffb1 	bl	800377c <NVIC_EncodePriority>
 800381a:	4602      	mov	r2, r0
 800381c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003820:	4611      	mov	r1, r2
 8003822:	4618      	mov	r0, r3
 8003824:	f7ff ff80 	bl	8003728 <__NVIC_SetPriority>
}
 8003828:	bf00      	nop
 800382a:	3718      	adds	r7, #24
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	4603      	mov	r3, r0
 8003838:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800383a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800383e:	4618      	mov	r0, r3
 8003840:	f7ff ff54 	bl	80036ec <__NVIC_EnableIRQ>
}
 8003844:	bf00      	nop
 8003846:	3708      	adds	r7, #8
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b02      	cmp	r3, #2
 800385e:	d004      	beq.n	800386a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2280      	movs	r2, #128	; 0x80
 8003864:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e00c      	b.n	8003884 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2205      	movs	r2, #5
 800386e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f022 0201 	bic.w	r2, r2, #1
 8003880:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800389e:	b2db      	uxtb	r3, r3
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b089      	sub	sp, #36	; 0x24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038b6:	2300      	movs	r3, #0
 80038b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80038ba:	2300      	movs	r3, #0
 80038bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038be:	2300      	movs	r3, #0
 80038c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038c2:	2300      	movs	r3, #0
 80038c4:	61fb      	str	r3, [r7, #28]
 80038c6:	e159      	b.n	8003b7c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038c8:	2201      	movs	r2, #1
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	fa02 f303 	lsl.w	r3, r2, r3
 80038d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	4013      	ands	r3, r2
 80038da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	f040 8148 	bne.w	8003b76 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f003 0303 	and.w	r3, r3, #3
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d005      	beq.n	80038fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d130      	bne.n	8003960 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	2203      	movs	r2, #3
 800390a:	fa02 f303 	lsl.w	r3, r2, r3
 800390e:	43db      	mvns	r3, r3
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	4013      	ands	r3, r2
 8003914:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	68da      	ldr	r2, [r3, #12]
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	fa02 f303 	lsl.w	r3, r2, r3
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	4313      	orrs	r3, r2
 8003926:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003934:	2201      	movs	r2, #1
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	fa02 f303 	lsl.w	r3, r2, r3
 800393c:	43db      	mvns	r3, r3
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	4013      	ands	r3, r2
 8003942:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	091b      	lsrs	r3, r3, #4
 800394a:	f003 0201 	and.w	r2, r3, #1
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	fa02 f303 	lsl.w	r3, r2, r3
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	4313      	orrs	r3, r2
 8003958:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f003 0303 	and.w	r3, r3, #3
 8003968:	2b03      	cmp	r3, #3
 800396a:	d017      	beq.n	800399c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	2203      	movs	r2, #3
 8003978:	fa02 f303 	lsl.w	r3, r2, r3
 800397c:	43db      	mvns	r3, r3
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	4013      	ands	r3, r2
 8003982:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	689a      	ldr	r2, [r3, #8]
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	005b      	lsls	r3, r3, #1
 800398c:	fa02 f303 	lsl.w	r3, r2, r3
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	4313      	orrs	r3, r2
 8003994:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f003 0303 	and.w	r3, r3, #3
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d123      	bne.n	80039f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	08da      	lsrs	r2, r3, #3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	3208      	adds	r2, #8
 80039b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	f003 0307 	and.w	r3, r3, #7
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	220f      	movs	r2, #15
 80039c0:	fa02 f303 	lsl.w	r3, r2, r3
 80039c4:	43db      	mvns	r3, r3
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	4013      	ands	r3, r2
 80039ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	691a      	ldr	r2, [r3, #16]
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	f003 0307 	and.w	r3, r3, #7
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	fa02 f303 	lsl.w	r3, r2, r3
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	4313      	orrs	r3, r2
 80039e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	08da      	lsrs	r2, r3, #3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	3208      	adds	r2, #8
 80039ea:	69b9      	ldr	r1, [r7, #24]
 80039ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	005b      	lsls	r3, r3, #1
 80039fa:	2203      	movs	r2, #3
 80039fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003a00:	43db      	mvns	r3, r3
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	4013      	ands	r3, r2
 8003a06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f003 0203 	and.w	r2, r3, #3
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	fa02 f303 	lsl.w	r3, r2, r3
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f000 80a2 	beq.w	8003b76 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a32:	2300      	movs	r3, #0
 8003a34:	60fb      	str	r3, [r7, #12]
 8003a36:	4b57      	ldr	r3, [pc, #348]	; (8003b94 <HAL_GPIO_Init+0x2e8>)
 8003a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3a:	4a56      	ldr	r2, [pc, #344]	; (8003b94 <HAL_GPIO_Init+0x2e8>)
 8003a3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a40:	6453      	str	r3, [r2, #68]	; 0x44
 8003a42:	4b54      	ldr	r3, [pc, #336]	; (8003b94 <HAL_GPIO_Init+0x2e8>)
 8003a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a4a:	60fb      	str	r3, [r7, #12]
 8003a4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a4e:	4a52      	ldr	r2, [pc, #328]	; (8003b98 <HAL_GPIO_Init+0x2ec>)
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	089b      	lsrs	r3, r3, #2
 8003a54:	3302      	adds	r3, #2
 8003a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	f003 0303 	and.w	r3, r3, #3
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	220f      	movs	r2, #15
 8003a66:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6a:	43db      	mvns	r3, r3
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	4013      	ands	r3, r2
 8003a70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a49      	ldr	r2, [pc, #292]	; (8003b9c <HAL_GPIO_Init+0x2f0>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d019      	beq.n	8003aae <HAL_GPIO_Init+0x202>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a48      	ldr	r2, [pc, #288]	; (8003ba0 <HAL_GPIO_Init+0x2f4>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d013      	beq.n	8003aaa <HAL_GPIO_Init+0x1fe>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a47      	ldr	r2, [pc, #284]	; (8003ba4 <HAL_GPIO_Init+0x2f8>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d00d      	beq.n	8003aa6 <HAL_GPIO_Init+0x1fa>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a46      	ldr	r2, [pc, #280]	; (8003ba8 <HAL_GPIO_Init+0x2fc>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d007      	beq.n	8003aa2 <HAL_GPIO_Init+0x1f6>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a45      	ldr	r2, [pc, #276]	; (8003bac <HAL_GPIO_Init+0x300>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d101      	bne.n	8003a9e <HAL_GPIO_Init+0x1f2>
 8003a9a:	2304      	movs	r3, #4
 8003a9c:	e008      	b.n	8003ab0 <HAL_GPIO_Init+0x204>
 8003a9e:	2307      	movs	r3, #7
 8003aa0:	e006      	b.n	8003ab0 <HAL_GPIO_Init+0x204>
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e004      	b.n	8003ab0 <HAL_GPIO_Init+0x204>
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	e002      	b.n	8003ab0 <HAL_GPIO_Init+0x204>
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e000      	b.n	8003ab0 <HAL_GPIO_Init+0x204>
 8003aae:	2300      	movs	r3, #0
 8003ab0:	69fa      	ldr	r2, [r7, #28]
 8003ab2:	f002 0203 	and.w	r2, r2, #3
 8003ab6:	0092      	lsls	r2, r2, #2
 8003ab8:	4093      	lsls	r3, r2
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ac0:	4935      	ldr	r1, [pc, #212]	; (8003b98 <HAL_GPIO_Init+0x2ec>)
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	089b      	lsrs	r3, r3, #2
 8003ac6:	3302      	adds	r3, #2
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ace:	4b38      	ldr	r3, [pc, #224]	; (8003bb0 <HAL_GPIO_Init+0x304>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	43db      	mvns	r3, r3
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	4013      	ands	r3, r2
 8003adc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003af2:	4a2f      	ldr	r2, [pc, #188]	; (8003bb0 <HAL_GPIO_Init+0x304>)
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003af8:	4b2d      	ldr	r3, [pc, #180]	; (8003bb0 <HAL_GPIO_Init+0x304>)
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	43db      	mvns	r3, r3
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	4013      	ands	r3, r2
 8003b06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d003      	beq.n	8003b1c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b1c:	4a24      	ldr	r2, [pc, #144]	; (8003bb0 <HAL_GPIO_Init+0x304>)
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b22:	4b23      	ldr	r3, [pc, #140]	; (8003bb0 <HAL_GPIO_Init+0x304>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	43db      	mvns	r3, r3
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	4013      	ands	r3, r2
 8003b30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b46:	4a1a      	ldr	r2, [pc, #104]	; (8003bb0 <HAL_GPIO_Init+0x304>)
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b4c:	4b18      	ldr	r3, [pc, #96]	; (8003bb0 <HAL_GPIO_Init+0x304>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	43db      	mvns	r3, r3
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d003      	beq.n	8003b70 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003b68:	69ba      	ldr	r2, [r7, #24]
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b70:	4a0f      	ldr	r2, [pc, #60]	; (8003bb0 <HAL_GPIO_Init+0x304>)
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	3301      	adds	r3, #1
 8003b7a:	61fb      	str	r3, [r7, #28]
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	2b0f      	cmp	r3, #15
 8003b80:	f67f aea2 	bls.w	80038c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b84:	bf00      	nop
 8003b86:	bf00      	nop
 8003b88:	3724      	adds	r7, #36	; 0x24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	40023800 	.word	0x40023800
 8003b98:	40013800 	.word	0x40013800
 8003b9c:	40020000 	.word	0x40020000
 8003ba0:	40020400 	.word	0x40020400
 8003ba4:	40020800 	.word	0x40020800
 8003ba8:	40020c00 	.word	0x40020c00
 8003bac:	40021000 	.word	0x40021000
 8003bb0:	40013c00 	.word	0x40013c00

08003bb4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b085      	sub	sp, #20
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	691a      	ldr	r2, [r3, #16]
 8003bc4:	887b      	ldrh	r3, [r7, #2]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d002      	beq.n	8003bd2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	73fb      	strb	r3, [r7, #15]
 8003bd0:	e001      	b.n	8003bd6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3714      	adds	r7, #20
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	460b      	mov	r3, r1
 8003bee:	807b      	strh	r3, [r7, #2]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bf4:	787b      	ldrb	r3, [r7, #1]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d003      	beq.n	8003c02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bfa:	887a      	ldrh	r2, [r7, #2]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c00:	e003      	b.n	8003c0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c02:	887b      	ldrh	r3, [r7, #2]
 8003c04:	041a      	lsls	r2, r3, #16
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	619a      	str	r2, [r3, #24]
}
 8003c0a:	bf00      	nop
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
	...

08003c18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e12b      	b.n	8003e82 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d106      	bne.n	8003c44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f7fd fcde 	bl	8001600 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2224      	movs	r2, #36	; 0x24
 8003c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f022 0201 	bic.w	r2, r2, #1
 8003c5a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c6a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c7c:	f002 fe2a 	bl	80068d4 <HAL_RCC_GetPCLK1Freq>
 8003c80:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	4a81      	ldr	r2, [pc, #516]	; (8003e8c <HAL_I2C_Init+0x274>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d807      	bhi.n	8003c9c <HAL_I2C_Init+0x84>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	4a80      	ldr	r2, [pc, #512]	; (8003e90 <HAL_I2C_Init+0x278>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	bf94      	ite	ls
 8003c94:	2301      	movls	r3, #1
 8003c96:	2300      	movhi	r3, #0
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	e006      	b.n	8003caa <HAL_I2C_Init+0x92>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	4a7d      	ldr	r2, [pc, #500]	; (8003e94 <HAL_I2C_Init+0x27c>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	bf94      	ite	ls
 8003ca4:	2301      	movls	r3, #1
 8003ca6:	2300      	movhi	r3, #0
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e0e7      	b.n	8003e82 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	4a78      	ldr	r2, [pc, #480]	; (8003e98 <HAL_I2C_Init+0x280>)
 8003cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cba:	0c9b      	lsrs	r3, r3, #18
 8003cbc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	4a6a      	ldr	r2, [pc, #424]	; (8003e8c <HAL_I2C_Init+0x274>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d802      	bhi.n	8003cec <HAL_I2C_Init+0xd4>
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	3301      	adds	r3, #1
 8003cea:	e009      	b.n	8003d00 <HAL_I2C_Init+0xe8>
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003cf2:	fb02 f303 	mul.w	r3, r2, r3
 8003cf6:	4a69      	ldr	r2, [pc, #420]	; (8003e9c <HAL_I2C_Init+0x284>)
 8003cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cfc:	099b      	lsrs	r3, r3, #6
 8003cfe:	3301      	adds	r3, #1
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	6812      	ldr	r2, [r2, #0]
 8003d04:	430b      	orrs	r3, r1
 8003d06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	69db      	ldr	r3, [r3, #28]
 8003d0e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003d12:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	495c      	ldr	r1, [pc, #368]	; (8003e8c <HAL_I2C_Init+0x274>)
 8003d1c:	428b      	cmp	r3, r1
 8003d1e:	d819      	bhi.n	8003d54 <HAL_I2C_Init+0x13c>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	1e59      	subs	r1, r3, #1
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	005b      	lsls	r3, r3, #1
 8003d2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d2e:	1c59      	adds	r1, r3, #1
 8003d30:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d34:	400b      	ands	r3, r1
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00a      	beq.n	8003d50 <HAL_I2C_Init+0x138>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	1e59      	subs	r1, r3, #1
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	005b      	lsls	r3, r3, #1
 8003d44:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d48:	3301      	adds	r3, #1
 8003d4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d4e:	e051      	b.n	8003df4 <HAL_I2C_Init+0x1dc>
 8003d50:	2304      	movs	r3, #4
 8003d52:	e04f      	b.n	8003df4 <HAL_I2C_Init+0x1dc>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d111      	bne.n	8003d80 <HAL_I2C_Init+0x168>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	1e58      	subs	r0, r3, #1
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6859      	ldr	r1, [r3, #4]
 8003d64:	460b      	mov	r3, r1
 8003d66:	005b      	lsls	r3, r3, #1
 8003d68:	440b      	add	r3, r1
 8003d6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d6e:	3301      	adds	r3, #1
 8003d70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	bf0c      	ite	eq
 8003d78:	2301      	moveq	r3, #1
 8003d7a:	2300      	movne	r3, #0
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	e012      	b.n	8003da6 <HAL_I2C_Init+0x18e>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	1e58      	subs	r0, r3, #1
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6859      	ldr	r1, [r3, #4]
 8003d88:	460b      	mov	r3, r1
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	440b      	add	r3, r1
 8003d8e:	0099      	lsls	r1, r3, #2
 8003d90:	440b      	add	r3, r1
 8003d92:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d96:	3301      	adds	r3, #1
 8003d98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	bf0c      	ite	eq
 8003da0:	2301      	moveq	r3, #1
 8003da2:	2300      	movne	r3, #0
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <HAL_I2C_Init+0x196>
 8003daa:	2301      	movs	r3, #1
 8003dac:	e022      	b.n	8003df4 <HAL_I2C_Init+0x1dc>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10e      	bne.n	8003dd4 <HAL_I2C_Init+0x1bc>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	1e58      	subs	r0, r3, #1
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6859      	ldr	r1, [r3, #4]
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	440b      	add	r3, r1
 8003dc4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dc8:	3301      	adds	r3, #1
 8003dca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dd2:	e00f      	b.n	8003df4 <HAL_I2C_Init+0x1dc>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	1e58      	subs	r0, r3, #1
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6859      	ldr	r1, [r3, #4]
 8003ddc:	460b      	mov	r3, r1
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	440b      	add	r3, r1
 8003de2:	0099      	lsls	r1, r3, #2
 8003de4:	440b      	add	r3, r1
 8003de6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dea:	3301      	adds	r3, #1
 8003dec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003df0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003df4:	6879      	ldr	r1, [r7, #4]
 8003df6:	6809      	ldr	r1, [r1, #0]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	69da      	ldr	r2, [r3, #28]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	431a      	orrs	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	430a      	orrs	r2, r1
 8003e16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	6911      	ldr	r1, [r2, #16]
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	68d2      	ldr	r2, [r2, #12]
 8003e2e:	4311      	orrs	r1, r2
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	6812      	ldr	r2, [r2, #0]
 8003e34:	430b      	orrs	r3, r1
 8003e36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	695a      	ldr	r2, [r3, #20]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	431a      	orrs	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	430a      	orrs	r2, r1
 8003e52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f042 0201 	orr.w	r2, r2, #1
 8003e62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2220      	movs	r2, #32
 8003e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	000186a0 	.word	0x000186a0
 8003e90:	001e847f 	.word	0x001e847f
 8003e94:	003d08ff 	.word	0x003d08ff
 8003e98:	431bde83 	.word	0x431bde83
 8003e9c:	10624dd3 	.word	0x10624dd3

08003ea0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b088      	sub	sp, #32
 8003ea4:	af02      	add	r7, sp, #8
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	607a      	str	r2, [r7, #4]
 8003eaa:	461a      	mov	r2, r3
 8003eac:	460b      	mov	r3, r1
 8003eae:	817b      	strh	r3, [r7, #10]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003eb4:	f7ff f82e 	bl	8002f14 <HAL_GetTick>
 8003eb8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b20      	cmp	r3, #32
 8003ec4:	f040 80e0 	bne.w	8004088 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	9300      	str	r3, [sp, #0]
 8003ecc:	2319      	movs	r3, #25
 8003ece:	2201      	movs	r2, #1
 8003ed0:	4970      	ldr	r1, [pc, #448]	; (8004094 <HAL_I2C_Master_Transmit+0x1f4>)
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	f001 fe66 	bl	8005ba4 <I2C_WaitOnFlagUntilTimeout>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d001      	beq.n	8003ee2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003ede:	2302      	movs	r3, #2
 8003ee0:	e0d3      	b.n	800408a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d101      	bne.n	8003ef0 <HAL_I2C_Master_Transmit+0x50>
 8003eec:	2302      	movs	r3, #2
 8003eee:	e0cc      	b.n	800408a <HAL_I2C_Master_Transmit+0x1ea>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d007      	beq.n	8003f16 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f042 0201 	orr.w	r2, r2, #1
 8003f14:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f24:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2221      	movs	r2, #33	; 0x21
 8003f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2210      	movs	r2, #16
 8003f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	893a      	ldrh	r2, [r7, #8]
 8003f46:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f4c:	b29a      	uxth	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	4a50      	ldr	r2, [pc, #320]	; (8004098 <HAL_I2C_Master_Transmit+0x1f8>)
 8003f56:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003f58:	8979      	ldrh	r1, [r7, #10]
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	6a3a      	ldr	r2, [r7, #32]
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f001 fcf6 	bl	8005950 <I2C_MasterRequestWrite>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e08d      	b.n	800408a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f6e:	2300      	movs	r3, #0
 8003f70:	613b      	str	r3, [r7, #16]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	613b      	str	r3, [r7, #16]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	613b      	str	r3, [r7, #16]
 8003f82:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003f84:	e066      	b.n	8004054 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	6a39      	ldr	r1, [r7, #32]
 8003f8a:	68f8      	ldr	r0, [r7, #12]
 8003f8c:	f001 fee0 	bl	8005d50 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00d      	beq.n	8003fb2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9a:	2b04      	cmp	r3, #4
 8003f9c:	d107      	bne.n	8003fae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e06b      	b.n	800408a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb6:	781a      	ldrb	r2, [r3, #0]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc2:	1c5a      	adds	r2, r3, #1
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	b29a      	uxth	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	f003 0304 	and.w	r3, r3, #4
 8003fec:	2b04      	cmp	r3, #4
 8003fee:	d11b      	bne.n	8004028 <HAL_I2C_Master_Transmit+0x188>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d017      	beq.n	8004028 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffc:	781a      	ldrb	r2, [r3, #0]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004008:	1c5a      	adds	r2, r3, #1
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004012:	b29b      	uxth	r3, r3
 8004014:	3b01      	subs	r3, #1
 8004016:	b29a      	uxth	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004020:	3b01      	subs	r3, #1
 8004022:	b29a      	uxth	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	6a39      	ldr	r1, [r7, #32]
 800402c:	68f8      	ldr	r0, [r7, #12]
 800402e:	f001 fed0 	bl	8005dd2 <I2C_WaitOnBTFFlagUntilTimeout>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00d      	beq.n	8004054 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403c:	2b04      	cmp	r3, #4
 800403e:	d107      	bne.n	8004050 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800404e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e01a      	b.n	800408a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004058:	2b00      	cmp	r3, #0
 800405a:	d194      	bne.n	8003f86 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800406a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2220      	movs	r2, #32
 8004070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004084:	2300      	movs	r3, #0
 8004086:	e000      	b.n	800408a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004088:	2302      	movs	r3, #2
  }
}
 800408a:	4618      	mov	r0, r3
 800408c:	3718      	adds	r7, #24
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	00100002 	.word	0x00100002
 8004098:	ffff0000 	.word	0xffff0000

0800409c <HAL_I2C_Slave_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b08a      	sub	sp, #40	; 0x28
 80040a0:	af02      	add	r7, sp, #8
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	603b      	str	r3, [r7, #0]
 80040a8:	4613      	mov	r3, r2
 80040aa:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040ac:	f7fe ff32 	bl	8002f14 <HAL_GetTick>
 80040b0:	61f8      	str	r0, [r7, #28]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b20      	cmp	r3, #32
 80040bc:	f040 80ee 	bne.w	800429c <HAL_I2C_Slave_Receive+0x200>
  {
    if ((pData == NULL) || (Size == (uint16_t)0))
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d002      	beq.n	80040cc <HAL_I2C_Slave_Receive+0x30>
 80040c6:	88fb      	ldrh	r3, [r7, #6]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d101      	bne.n	80040d0 <HAL_I2C_Slave_Receive+0x34>
    {
      return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e0e6      	b.n	800429e <HAL_I2C_Slave_Receive+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d101      	bne.n	80040de <HAL_I2C_Slave_Receive+0x42>
 80040da:	2302      	movs	r3, #2
 80040dc:	e0df      	b.n	800429e <HAL_I2C_Slave_Receive+0x202>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0301 	and.w	r3, r3, #1
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d007      	beq.n	8004104 <HAL_I2C_Slave_Receive+0x68>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f042 0201 	orr.w	r2, r2, #1
 8004102:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004112:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2222      	movs	r2, #34	; 0x22
 8004118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2220      	movs	r2, #32
 8004120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	68ba      	ldr	r2, [r7, #8]
 800412e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	88fa      	ldrh	r2, [r7, #6]
 8004134:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800413a:	b29a      	uxth	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	4a59      	ldr	r2, [pc, #356]	; (80042a8 <HAL_I2C_Slave_Receive+0x20c>)
 8004144:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004154:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	9300      	str	r3, [sp, #0]
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	2200      	movs	r2, #0
 800415e:	4953      	ldr	r1, [pc, #332]	; (80042ac <HAL_I2C_Slave_Receive+0x210>)
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f001 fd1f 	bl	8005ba4 <I2C_WaitOnFlagUntilTimeout>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <HAL_I2C_Slave_Receive+0xd4>
    {
      return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e096      	b.n	800429e <HAL_I2C_Slave_Receive+0x202>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004170:	2300      	movs	r3, #0
 8004172:	61bb      	str	r3, [r7, #24]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	61bb      	str	r3, [r7, #24]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	61bb      	str	r3, [r7, #24]
 8004184:	69bb      	ldr	r3, [r7, #24]

    while (hi2c->XferSize > 0U)
 8004186:	e04e      	b.n	8004226 <HAL_I2C_Slave_Receive+0x18a>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004188:	69fa      	ldr	r2, [r7, #28]
 800418a:	6839      	ldr	r1, [r7, #0]
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f001 fed1 	bl	8005f34 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d009      	beq.n	80041ac <HAL_I2C_Slave_Receive+0x110>
      {
        /* Disable Address Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041a6:	601a      	str	r2, [r3, #0]

        return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e078      	b.n	800429e <HAL_I2C_Slave_Receive+0x202>
      }

      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	691a      	ldr	r2, [r3, #16]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b6:	b2d2      	uxtb	r2, r2
 80041b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041be:	1c5a      	adds	r2, r3, #1
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c8:	3b01      	subs	r3, #1
 80041ca:	b29a      	uxth	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	3b01      	subs	r3, #1
 80041d8:	b29a      	uxth	r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	f003 0304 	and.w	r3, r3, #4
 80041e8:	2b04      	cmp	r3, #4
 80041ea:	d11c      	bne.n	8004226 <HAL_I2C_Slave_Receive+0x18a>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d018      	beq.n	8004226 <HAL_I2C_Slave_Receive+0x18a>
      {
        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	691a      	ldr	r2, [r3, #16]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fe:	b2d2      	uxtb	r2, r2
 8004200:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004206:	1c5a      	adds	r2, r3, #1
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004210:	3b01      	subs	r3, #1
 8004212:	b29a      	uxth	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800421c:	b29b      	uxth	r3, r3
 800421e:	3b01      	subs	r3, #1
 8004220:	b29a      	uxth	r2, r3
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1ac      	bne.n	8004188 <HAL_I2C_Slave_Receive+0xec>
      }
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800422e:	69fa      	ldr	r2, [r7, #28]
 8004230:	6839      	ldr	r1, [r7, #0]
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f001 fe0e 	bl	8005e54 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d009      	beq.n	8004252 <HAL_I2C_Slave_Receive+0x1b6>
    {
      /* Disable Address Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800424c:	601a      	str	r2, [r3, #0]

      return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e025      	b.n	800429e <HAL_I2C_Slave_Receive+0x202>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004252:	2300      	movs	r3, #0
 8004254:	617b      	str	r3, [r7, #20]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	695b      	ldr	r3, [r3, #20]
 800425c:	617b      	str	r3, [r7, #20]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f042 0201 	orr.w	r2, r2, #1
 800426c:	601a      	str	r2, [r3, #0]
 800426e:	697b      	ldr	r3, [r7, #20]

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800427e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2220      	movs	r2, #32
 8004284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004298:	2300      	movs	r3, #0
 800429a:	e000      	b.n	800429e <HAL_I2C_Slave_Receive+0x202>
  }
  else
  {
    return HAL_BUSY;
 800429c:	2302      	movs	r3, #2
  }
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3720      	adds	r7, #32
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	ffff0000 	.word	0xffff0000
 80042ac:	00010002 	.word	0x00010002

080042b0 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	4613      	mov	r3, r2
 80042bc:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	2b20      	cmp	r3, #32
 80042c8:	d158      	bne.n	800437c <HAL_I2C_Slave_Receive_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d002      	beq.n	80042d6 <HAL_I2C_Slave_Receive_IT+0x26>
 80042d0:	88fb      	ldrh	r3, [r7, #6]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d101      	bne.n	80042da <HAL_I2C_Slave_Receive_IT+0x2a>
    {
      return  HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e051      	b.n	800437e <HAL_I2C_Slave_Receive_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d101      	bne.n	80042e8 <HAL_I2C_Slave_Receive_IT+0x38>
 80042e4:	2302      	movs	r3, #2
 80042e6:	e04a      	b.n	800437e <HAL_I2C_Slave_Receive_IT+0xce>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d007      	beq.n	800430e <HAL_I2C_Slave_Receive_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f042 0201 	orr.w	r2, r2, #1
 800430c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800431c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2222      	movs	r2, #34	; 0x22
 8004322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2220      	movs	r2, #32
 800432a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	68ba      	ldr	r2, [r7, #8]
 8004338:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	88fa      	ldrh	r2, [r7, #6]
 800433e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004344:	b29a      	uxth	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	4a0f      	ldr	r2, [pc, #60]	; (800438c <HAL_I2C_Slave_Receive_IT+0xdc>)
 800434e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800435e:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	685a      	ldr	r2, [r3, #4]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004376:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004378:	2300      	movs	r3, #0
 800437a:	e000      	b.n	800437e <HAL_I2C_Slave_Receive_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 800437c:	2302      	movs	r3, #2
  }
}
 800437e:	4618      	mov	r0, r3
 8004380:	3714      	adds	r7, #20
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	ffff0000 	.word	0xffff0000

08004390 <HAL_I2C_DisableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DisableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp;

  /* Disable Address listen mode only if a transfer is not ongoing */
  if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2b28      	cmp	r3, #40	; 0x28
 80043a2:	d129      	bne.n	80043f8 <HAL_I2C_DisableListen_IT+0x68>
  {
    tmp = (uint32_t)(hi2c->State) & I2C_STATE_MSK;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	f003 0303 	and.w	r3, r3, #3
 80043b0:	60fb      	str	r3, [r7, #12]
    hi2c->PreviousState = tmp | (uint32_t)(hi2c->Mode);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	461a      	mov	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	431a      	orrs	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2220      	movs	r2, #32
 80043c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043e2:	601a      	str	r2, [r3, #0]

    /* Disable EVT and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	685a      	ldr	r2, [r3, #4]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80043f2:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80043f4:	2300      	movs	r3, #0
 80043f6:	e000      	b.n	80043fa <HAL_I2C_DisableListen_IT+0x6a>
  }
  else
  {
    return HAL_BUSY;
 80043f8:	2302      	movs	r3, #2
  }
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3714      	adds	r7, #20
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr

08004406 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004406:	b580      	push	{r7, lr}
 8004408:	b088      	sub	sp, #32
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800440e:	2300      	movs	r3, #0
 8004410:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441e:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004426:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800442e:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004430:	7bfb      	ldrb	r3, [r7, #15]
 8004432:	2b10      	cmp	r3, #16
 8004434:	d003      	beq.n	800443e <HAL_I2C_EV_IRQHandler+0x38>
 8004436:	7bfb      	ldrb	r3, [r7, #15]
 8004438:	2b40      	cmp	r3, #64	; 0x40
 800443a:	f040 80b1 	bne.w	80045a0 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	695b      	ldr	r3, [r3, #20]
 800444c:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	f003 0301 	and.w	r3, r3, #1
 8004454:	2b00      	cmp	r3, #0
 8004456:	d10d      	bne.n	8004474 <HAL_I2C_EV_IRQHandler+0x6e>
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800445e:	d003      	beq.n	8004468 <HAL_I2C_EV_IRQHandler+0x62>
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004466:	d101      	bne.n	800446c <HAL_I2C_EV_IRQHandler+0x66>
 8004468:	2301      	movs	r3, #1
 800446a:	e000      	b.n	800446e <HAL_I2C_EV_IRQHandler+0x68>
 800446c:	2300      	movs	r3, #0
 800446e:	2b01      	cmp	r3, #1
 8004470:	f000 8114 	beq.w	800469c <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00b      	beq.n	8004496 <HAL_I2C_EV_IRQHandler+0x90>
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004484:	2b00      	cmp	r3, #0
 8004486:	d006      	beq.n	8004496 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f001 fdd8 	bl	800603e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 fcb5 	bl	8004dfe <I2C_Master_SB>
 8004494:	e083      	b.n	800459e <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	f003 0308 	and.w	r3, r3, #8
 800449c:	2b00      	cmp	r3, #0
 800449e:	d008      	beq.n	80044b2 <HAL_I2C_EV_IRQHandler+0xac>
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d003      	beq.n	80044b2 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 fd2d 	bl	8004f0a <I2C_Master_ADD10>
 80044b0:	e075      	b.n	800459e <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d008      	beq.n	80044ce <HAL_I2C_EV_IRQHandler+0xc8>
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d003      	beq.n	80044ce <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 fd49 	bl	8004f5e <I2C_Master_ADDR>
 80044cc:	e067      	b.n	800459e <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	f003 0304 	and.w	r3, r3, #4
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d036      	beq.n	8004546 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044e6:	f000 80db 	beq.w	80046a0 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00d      	beq.n	8004510 <HAL_I2C_EV_IRQHandler+0x10a>
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d008      	beq.n	8004510 <HAL_I2C_EV_IRQHandler+0x10a>
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	f003 0304 	and.w	r3, r3, #4
 8004504:	2b00      	cmp	r3, #0
 8004506:	d103      	bne.n	8004510 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 f92d 	bl	8004768 <I2C_MasterTransmit_TXE>
 800450e:	e046      	b.n	800459e <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	f003 0304 	and.w	r3, r3, #4
 8004516:	2b00      	cmp	r3, #0
 8004518:	f000 80c2 	beq.w	80046a0 <HAL_I2C_EV_IRQHandler+0x29a>
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004522:	2b00      	cmp	r3, #0
 8004524:	f000 80bc 	beq.w	80046a0 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004528:	7bbb      	ldrb	r3, [r7, #14]
 800452a:	2b21      	cmp	r3, #33	; 0x21
 800452c:	d103      	bne.n	8004536 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 f9b6 	bl	80048a0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004534:	e0b4      	b.n	80046a0 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004536:	7bfb      	ldrb	r3, [r7, #15]
 8004538:	2b40      	cmp	r3, #64	; 0x40
 800453a:	f040 80b1 	bne.w	80046a0 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 fa24 	bl	800498c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004544:	e0ac      	b.n	80046a0 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004550:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004554:	f000 80a4 	beq.w	80046a0 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00d      	beq.n	800457e <HAL_I2C_EV_IRQHandler+0x178>
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004568:	2b00      	cmp	r3, #0
 800456a:	d008      	beq.n	800457e <HAL_I2C_EV_IRQHandler+0x178>
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	f003 0304 	and.w	r3, r3, #4
 8004572:	2b00      	cmp	r3, #0
 8004574:	d103      	bne.n	800457e <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 fa9c 	bl	8004ab4 <I2C_MasterReceive_RXNE>
 800457c:	e00f      	b.n	800459e <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	f003 0304 	and.w	r3, r3, #4
 8004584:	2b00      	cmp	r3, #0
 8004586:	f000 808b 	beq.w	80046a0 <HAL_I2C_EV_IRQHandler+0x29a>
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004590:	2b00      	cmp	r3, #0
 8004592:	f000 8085 	beq.w	80046a0 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 fb47 	bl	8004c2a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800459c:	e080      	b.n	80046a0 <HAL_I2C_EV_IRQHandler+0x29a>
 800459e:	e07f      	b.n	80046a0 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d004      	beq.n	80045b2 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	61fb      	str	r3, [r7, #28]
 80045b0:	e007      	b.n	80045c2 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	695b      	ldr	r3, [r3, #20]
 80045c0:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	f003 0302 	and.w	r3, r3, #2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d011      	beq.n	80045f0 <HAL_I2C_EV_IRQHandler+0x1ea>
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00c      	beq.n	80045f0 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d003      	beq.n	80045e6 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	699b      	ldr	r3, [r3, #24]
 80045e4:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80045e6:	69b9      	ldr	r1, [r7, #24]
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f000 ff07 	bl	80053fc <I2C_Slave_ADDR>
 80045ee:	e05a      	b.n	80046a6 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	f003 0310 	and.w	r3, r3, #16
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d008      	beq.n	800460c <HAL_I2C_EV_IRQHandler+0x206>
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004600:	2b00      	cmp	r3, #0
 8004602:	d003      	beq.n	800460c <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f000 ff41 	bl	800548c <I2C_Slave_STOPF>
 800460a:	e04c      	b.n	80046a6 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800460c:	7bbb      	ldrb	r3, [r7, #14]
 800460e:	2b21      	cmp	r3, #33	; 0x21
 8004610:	d002      	beq.n	8004618 <HAL_I2C_EV_IRQHandler+0x212>
 8004612:	7bbb      	ldrb	r3, [r7, #14]
 8004614:	2b29      	cmp	r3, #41	; 0x29
 8004616:	d120      	bne.n	800465a <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00d      	beq.n	800463e <HAL_I2C_EV_IRQHandler+0x238>
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004628:	2b00      	cmp	r3, #0
 800462a:	d008      	beq.n	800463e <HAL_I2C_EV_IRQHandler+0x238>
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	f003 0304 	and.w	r3, r3, #4
 8004632:	2b00      	cmp	r3, #0
 8004634:	d103      	bne.n	800463e <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 fe22 	bl	8005280 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800463c:	e032      	b.n	80046a4 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	f003 0304 	and.w	r3, r3, #4
 8004644:	2b00      	cmp	r3, #0
 8004646:	d02d      	beq.n	80046a4 <HAL_I2C_EV_IRQHandler+0x29e>
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800464e:	2b00      	cmp	r3, #0
 8004650:	d028      	beq.n	80046a4 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 fe51 	bl	80052fa <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004658:	e024      	b.n	80046a4 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00d      	beq.n	8004680 <HAL_I2C_EV_IRQHandler+0x27a>
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800466a:	2b00      	cmp	r3, #0
 800466c:	d008      	beq.n	8004680 <HAL_I2C_EV_IRQHandler+0x27a>
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	f003 0304 	and.w	r3, r3, #4
 8004674:	2b00      	cmp	r3, #0
 8004676:	d103      	bne.n	8004680 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 fe5f 	bl	800533c <I2C_SlaveReceive_RXNE>
 800467e:	e012      	b.n	80046a6 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	f003 0304 	and.w	r3, r3, #4
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00d      	beq.n	80046a6 <HAL_I2C_EV_IRQHandler+0x2a0>
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004690:	2b00      	cmp	r3, #0
 8004692:	d008      	beq.n	80046a6 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 fe8f 	bl	80053b8 <I2C_SlaveReceive_BTF>
 800469a:	e004      	b.n	80046a6 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800469c:	bf00      	nop
 800469e:	e002      	b.n	80046a6 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046a0:	bf00      	nop
 80046a2:	e000      	b.n	80046a6 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046a4:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80046a6:	3720      	adds	r7, #32
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80046dc:	bf00      	nop
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	460b      	mov	r3, r1
 80046f2:	70fb      	strb	r3, [r7, #3]
 80046f4:	4613      	mov	r3, r2
 80046f6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800470c:	bf00      	nop
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004720:	bf00      	nop
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004734:	bf00      	nop
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004748:	bf00      	nop
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800475c:	bf00      	nop
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004776:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800477e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004784:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800478a:	2b00      	cmp	r3, #0
 800478c:	d150      	bne.n	8004830 <I2C_MasterTransmit_TXE+0xc8>
 800478e:	7bfb      	ldrb	r3, [r7, #15]
 8004790:	2b21      	cmp	r3, #33	; 0x21
 8004792:	d14d      	bne.n	8004830 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	2b08      	cmp	r3, #8
 8004798:	d01d      	beq.n	80047d6 <I2C_MasterTransmit_TXE+0x6e>
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	2b20      	cmp	r3, #32
 800479e:	d01a      	beq.n	80047d6 <I2C_MasterTransmit_TXE+0x6e>
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80047a6:	d016      	beq.n	80047d6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685a      	ldr	r2, [r3, #4]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047b6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2211      	movs	r2, #17
 80047bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2220      	movs	r2, #32
 80047ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f7ff ff6c 	bl	80046ac <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80047d4:	e060      	b.n	8004898 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	685a      	ldr	r2, [r3, #4]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047e4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047f4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2220      	movs	r2, #32
 8004800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800480a:	b2db      	uxtb	r3, r3
 800480c:	2b40      	cmp	r3, #64	; 0x40
 800480e:	d107      	bne.n	8004820 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f7ff ff7d 	bl	8004718 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800481e:	e03b      	b.n	8004898 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f7ff ff3f 	bl	80046ac <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800482e:	e033      	b.n	8004898 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004830:	7bfb      	ldrb	r3, [r7, #15]
 8004832:	2b21      	cmp	r3, #33	; 0x21
 8004834:	d005      	beq.n	8004842 <I2C_MasterTransmit_TXE+0xda>
 8004836:	7bbb      	ldrb	r3, [r7, #14]
 8004838:	2b40      	cmp	r3, #64	; 0x40
 800483a:	d12d      	bne.n	8004898 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800483c:	7bfb      	ldrb	r3, [r7, #15]
 800483e:	2b22      	cmp	r3, #34	; 0x22
 8004840:	d12a      	bne.n	8004898 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004846:	b29b      	uxth	r3, r3
 8004848:	2b00      	cmp	r3, #0
 800484a:	d108      	bne.n	800485e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	685a      	ldr	r2, [r3, #4]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800485a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800485c:	e01c      	b.n	8004898 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b40      	cmp	r3, #64	; 0x40
 8004868:	d103      	bne.n	8004872 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 f88e 	bl	800498c <I2C_MemoryTransmit_TXE_BTF>
}
 8004870:	e012      	b.n	8004898 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004876:	781a      	ldrb	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004882:	1c5a      	adds	r2, r3, #1
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800488c:	b29b      	uxth	r3, r3
 800488e:	3b01      	subs	r3, #1
 8004890:	b29a      	uxth	r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004896:	e7ff      	b.n	8004898 <I2C_MasterTransmit_TXE+0x130>
 8004898:	bf00      	nop
 800489a:	3710      	adds	r7, #16
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ac:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	2b21      	cmp	r3, #33	; 0x21
 80048b8:	d164      	bne.n	8004984 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048be:	b29b      	uxth	r3, r3
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d012      	beq.n	80048ea <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c8:	781a      	ldrb	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d4:	1c5a      	adds	r2, r3, #1
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048de:	b29b      	uxth	r3, r3
 80048e0:	3b01      	subs	r3, #1
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80048e8:	e04c      	b.n	8004984 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2b08      	cmp	r3, #8
 80048ee:	d01d      	beq.n	800492c <I2C_MasterTransmit_BTF+0x8c>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2b20      	cmp	r3, #32
 80048f4:	d01a      	beq.n	800492c <I2C_MasterTransmit_BTF+0x8c>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80048fc:	d016      	beq.n	800492c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	685a      	ldr	r2, [r3, #4]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800490c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2211      	movs	r2, #17
 8004912:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2220      	movs	r2, #32
 8004920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f7ff fec1 	bl	80046ac <HAL_I2C_MasterTxCpltCallback>
}
 800492a:	e02b      	b.n	8004984 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	685a      	ldr	r2, [r3, #4]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800493a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800494a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2220      	movs	r2, #32
 8004956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b40      	cmp	r3, #64	; 0x40
 8004964:	d107      	bne.n	8004976 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f7ff fed2 	bl	8004718 <HAL_I2C_MemTxCpltCallback>
}
 8004974:	e006      	b.n	8004984 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f7ff fe94 	bl	80046ac <HAL_I2C_MasterTxCpltCallback>
}
 8004984:	bf00      	nop
 8004986:	3710      	adds	r7, #16
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800499a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d11d      	bne.n	80049e0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d10b      	bne.n	80049c4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049b0:	b2da      	uxtb	r2, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049bc:	1c9a      	adds	r2, r3, #2
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80049c2:	e073      	b.n	8004aac <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	121b      	asrs	r3, r3, #8
 80049cc:	b2da      	uxtb	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049d8:	1c5a      	adds	r2, r3, #1
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80049de:	e065      	b.n	8004aac <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d10b      	bne.n	8004a00 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049ec:	b2da      	uxtb	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049f8:	1c5a      	adds	r2, r3, #1
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80049fe:	e055      	b.n	8004aac <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d151      	bne.n	8004aac <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004a08:	7bfb      	ldrb	r3, [r7, #15]
 8004a0a:	2b22      	cmp	r3, #34	; 0x22
 8004a0c:	d10d      	bne.n	8004a2a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a1c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a22:	1c5a      	adds	r2, r3, #1
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004a28:	e040      	b.n	8004aac <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d015      	beq.n	8004a60 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004a34:	7bfb      	ldrb	r3, [r7, #15]
 8004a36:	2b21      	cmp	r3, #33	; 0x21
 8004a38:	d112      	bne.n	8004a60 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3e:	781a      	ldrb	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4a:	1c5a      	adds	r2, r3, #1
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	3b01      	subs	r3, #1
 8004a58:	b29a      	uxth	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004a5e:	e025      	b.n	8004aac <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d120      	bne.n	8004aac <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004a6a:	7bfb      	ldrb	r3, [r7, #15]
 8004a6c:	2b21      	cmp	r3, #33	; 0x21
 8004a6e:	d11d      	bne.n	8004aac <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	685a      	ldr	r2, [r3, #4]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a7e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a8e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2220      	movs	r2, #32
 8004a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f7ff fe36 	bl	8004718 <HAL_I2C_MemTxCpltCallback>
}
 8004aac:	bf00      	nop
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	2b22      	cmp	r3, #34	; 0x22
 8004ac6:	f040 80ac 	bne.w	8004c22 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2b03      	cmp	r3, #3
 8004ad6:	d921      	bls.n	8004b1c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	691a      	ldr	r2, [r3, #16]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae2:	b2d2      	uxtb	r2, r2
 8004ae4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aea:	1c5a      	adds	r2, r3, #1
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	3b01      	subs	r3, #1
 8004af8:	b29a      	uxth	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	2b03      	cmp	r3, #3
 8004b06:	f040 808c 	bne.w	8004c22 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	685a      	ldr	r2, [r3, #4]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b18:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004b1a:	e082      	b.n	8004c22 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d075      	beq.n	8004c10 <I2C_MasterReceive_RXNE+0x15c>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d002      	beq.n	8004b30 <I2C_MasterReceive_RXNE+0x7c>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d16f      	bne.n	8004c10 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f001 f9cd 	bl	8005ed0 <I2C_WaitOnSTOPRequestThroughIT>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d142      	bne.n	8004bc2 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b4a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	685a      	ldr	r2, [r3, #4]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b5a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	691a      	ldr	r2, [r3, #16]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b66:	b2d2      	uxtb	r2, r2
 8004b68:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6e:	1c5a      	adds	r2, r3, #1
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2220      	movs	r2, #32
 8004b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	2b40      	cmp	r3, #64	; 0x40
 8004b94:	d10a      	bne.n	8004bac <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f7ff fdc1 	bl	800472c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004baa:	e03a      	b.n	8004c22 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2212      	movs	r2, #18
 8004bb8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f7ff fd80 	bl	80046c0 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004bc0:	e02f      	b.n	8004c22 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	685a      	ldr	r2, [r3, #4]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004bd0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	691a      	ldr	r2, [r3, #16]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bdc:	b2d2      	uxtb	r2, r2
 8004bde:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be4:	1c5a      	adds	r2, r3, #1
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	b29a      	uxth	r2, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2220      	movs	r2, #32
 8004bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f7ff fd99 	bl	8004740 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004c0e:	e008      	b.n	8004c22 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	685a      	ldr	r2, [r3, #4]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c1e:	605a      	str	r2, [r3, #4]
}
 8004c20:	e7ff      	b.n	8004c22 <I2C_MasterReceive_RXNE+0x16e>
 8004c22:	bf00      	nop
 8004c24:	3710      	adds	r7, #16
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}

08004c2a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	b084      	sub	sp, #16
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c36:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	2b04      	cmp	r3, #4
 8004c40:	d11b      	bne.n	8004c7a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	685a      	ldr	r2, [r3, #4]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c50:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	691a      	ldr	r2, [r3, #16]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5c:	b2d2      	uxtb	r2, r2
 8004c5e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c64:	1c5a      	adds	r2, r3, #1
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	3b01      	subs	r3, #1
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004c78:	e0bd      	b.n	8004df6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	2b03      	cmp	r3, #3
 8004c82:	d129      	bne.n	8004cd8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	685a      	ldr	r2, [r3, #4]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c92:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2b04      	cmp	r3, #4
 8004c98:	d00a      	beq.n	8004cb0 <I2C_MasterReceive_BTF+0x86>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d007      	beq.n	8004cb0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cae:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	691a      	ldr	r2, [r3, #16]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cba:	b2d2      	uxtb	r2, r2
 8004cbc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc2:	1c5a      	adds	r2, r3, #1
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	b29a      	uxth	r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004cd6:	e08e      	b.n	8004df6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d176      	bne.n	8004dd0 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d002      	beq.n	8004cee <I2C_MasterReceive_BTF+0xc4>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2b10      	cmp	r3, #16
 8004cec:	d108      	bne.n	8004d00 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cfc:	601a      	str	r2, [r3, #0]
 8004cfe:	e019      	b.n	8004d34 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2b04      	cmp	r3, #4
 8004d04:	d002      	beq.n	8004d0c <I2C_MasterReceive_BTF+0xe2>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d108      	bne.n	8004d1e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d1a:	601a      	str	r2, [r3, #0]
 8004d1c:	e00a      	b.n	8004d34 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2b10      	cmp	r3, #16
 8004d22:	d007      	beq.n	8004d34 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d32:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	691a      	ldr	r2, [r3, #16]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3e:	b2d2      	uxtb	r2, r2
 8004d40:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d46:	1c5a      	adds	r2, r3, #1
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	3b01      	subs	r3, #1
 8004d54:	b29a      	uxth	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	691a      	ldr	r2, [r3, #16]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d64:	b2d2      	uxtb	r2, r2
 8004d66:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6c:	1c5a      	adds	r2, r3, #1
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	685a      	ldr	r2, [r3, #4]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004d8e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2220      	movs	r2, #32
 8004d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b40      	cmp	r3, #64	; 0x40
 8004da2:	d10a      	bne.n	8004dba <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f7ff fcba 	bl	800472c <HAL_I2C_MemRxCpltCallback>
}
 8004db8:	e01d      	b.n	8004df6 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2212      	movs	r2, #18
 8004dc6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f7ff fc79 	bl	80046c0 <HAL_I2C_MasterRxCpltCallback>
}
 8004dce:	e012      	b.n	8004df6 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	691a      	ldr	r2, [r3, #16]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dda:	b2d2      	uxtb	r2, r2
 8004ddc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de2:	1c5a      	adds	r2, r3, #1
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	3b01      	subs	r3, #1
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004df6:	bf00      	nop
 8004df8:	3710      	adds	r7, #16
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}

08004dfe <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004dfe:	b480      	push	{r7}
 8004e00:	b083      	sub	sp, #12
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b40      	cmp	r3, #64	; 0x40
 8004e10:	d117      	bne.n	8004e42 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d109      	bne.n	8004e2e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	461a      	mov	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e2a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004e2c:	e067      	b.n	8004efe <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	f043 0301 	orr.w	r3, r3, #1
 8004e38:	b2da      	uxtb	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	611a      	str	r2, [r3, #16]
}
 8004e40:	e05d      	b.n	8004efe <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e4a:	d133      	bne.n	8004eb4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	2b21      	cmp	r3, #33	; 0x21
 8004e56:	d109      	bne.n	8004e6c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	461a      	mov	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e68:	611a      	str	r2, [r3, #16]
 8004e6a:	e008      	b.n	8004e7e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	f043 0301 	orr.w	r3, r3, #1
 8004e76:	b2da      	uxtb	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d004      	beq.n	8004e90 <I2C_Master_SB+0x92>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d108      	bne.n	8004ea2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d032      	beq.n	8004efe <I2C_Master_SB+0x100>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d02d      	beq.n	8004efe <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	685a      	ldr	r2, [r3, #4]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004eb0:	605a      	str	r2, [r3, #4]
}
 8004eb2:	e024      	b.n	8004efe <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d10e      	bne.n	8004eda <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	11db      	asrs	r3, r3, #7
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	f003 0306 	and.w	r3, r3, #6
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	f063 030f 	orn	r3, r3, #15
 8004ed0:	b2da      	uxtb	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	611a      	str	r2, [r3, #16]
}
 8004ed8:	e011      	b.n	8004efe <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d10d      	bne.n	8004efe <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	11db      	asrs	r3, r3, #7
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	f003 0306 	and.w	r3, r3, #6
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	f063 030e 	orn	r3, r3, #14
 8004ef6:	b2da      	uxtb	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	611a      	str	r2, [r3, #16]
}
 8004efe:	bf00      	nop
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr

08004f0a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b083      	sub	sp, #12
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f16:	b2da      	uxtb	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d004      	beq.n	8004f30 <I2C_Master_ADD10+0x26>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d108      	bne.n	8004f42 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d00c      	beq.n	8004f52 <I2C_Master_ADD10+0x48>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d007      	beq.n	8004f52 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	685a      	ldr	r2, [r3, #4]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f50:	605a      	str	r2, [r3, #4]
  }
}
 8004f52:	bf00      	nop
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004f5e:	b480      	push	{r7}
 8004f60:	b091      	sub	sp, #68	; 0x44
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f6c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f74:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	2b22      	cmp	r3, #34	; 0x22
 8004f86:	f040 8169 	bne.w	800525c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d10f      	bne.n	8004fb2 <I2C_Master_ADDR+0x54>
 8004f92:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004f96:	2b40      	cmp	r3, #64	; 0x40
 8004f98:	d10b      	bne.n	8004fb2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	633b      	str	r3, [r7, #48]	; 0x30
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	695b      	ldr	r3, [r3, #20]
 8004fa4:	633b      	str	r3, [r7, #48]	; 0x30
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	633b      	str	r3, [r7, #48]	; 0x30
 8004fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb0:	e160      	b.n	8005274 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d11d      	bne.n	8004ff6 <I2C_Master_ADDR+0x98>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004fc2:	d118      	bne.n	8004ff6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fe8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fee:	1c5a      	adds	r2, r3, #1
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	651a      	str	r2, [r3, #80]	; 0x50
 8004ff4:	e13e      	b.n	8005274 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d113      	bne.n	8005028 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005000:	2300      	movs	r3, #0
 8005002:	62bb      	str	r3, [r7, #40]	; 0x28
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	62bb      	str	r3, [r7, #40]	; 0x28
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	62bb      	str	r3, [r7, #40]	; 0x28
 8005014:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005024:	601a      	str	r2, [r3, #0]
 8005026:	e115      	b.n	8005254 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800502c:	b29b      	uxth	r3, r3
 800502e:	2b01      	cmp	r3, #1
 8005030:	f040 808a 	bne.w	8005148 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005036:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800503a:	d137      	bne.n	80050ac <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800504a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005056:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800505a:	d113      	bne.n	8005084 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800506a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800506c:	2300      	movs	r3, #0
 800506e:	627b      	str	r3, [r7, #36]	; 0x24
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	627b      	str	r3, [r7, #36]	; 0x24
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	627b      	str	r3, [r7, #36]	; 0x24
 8005080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005082:	e0e7      	b.n	8005254 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005084:	2300      	movs	r3, #0
 8005086:	623b      	str	r3, [r7, #32]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	623b      	str	r3, [r7, #32]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	623b      	str	r3, [r7, #32]
 8005098:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050a8:	601a      	str	r2, [r3, #0]
 80050aa:	e0d3      	b.n	8005254 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80050ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ae:	2b08      	cmp	r3, #8
 80050b0:	d02e      	beq.n	8005110 <I2C_Master_ADDR+0x1b2>
 80050b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b4:	2b20      	cmp	r3, #32
 80050b6:	d02b      	beq.n	8005110 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80050b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ba:	2b12      	cmp	r3, #18
 80050bc:	d102      	bne.n	80050c4 <I2C_Master_ADDR+0x166>
 80050be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d125      	bne.n	8005110 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80050c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c6:	2b04      	cmp	r3, #4
 80050c8:	d00e      	beq.n	80050e8 <I2C_Master_ADDR+0x18a>
 80050ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d00b      	beq.n	80050e8 <I2C_Master_ADDR+0x18a>
 80050d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d2:	2b10      	cmp	r3, #16
 80050d4:	d008      	beq.n	80050e8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050e4:	601a      	str	r2, [r3, #0]
 80050e6:	e007      	b.n	80050f8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050f6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050f8:	2300      	movs	r3, #0
 80050fa:	61fb      	str	r3, [r7, #28]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	695b      	ldr	r3, [r3, #20]
 8005102:	61fb      	str	r3, [r7, #28]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	61fb      	str	r3, [r7, #28]
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	e0a1      	b.n	8005254 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800511e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005120:	2300      	movs	r3, #0
 8005122:	61bb      	str	r3, [r7, #24]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	695b      	ldr	r3, [r3, #20]
 800512a:	61bb      	str	r3, [r7, #24]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	699b      	ldr	r3, [r3, #24]
 8005132:	61bb      	str	r3, [r7, #24]
 8005134:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005144:	601a      	str	r2, [r3, #0]
 8005146:	e085      	b.n	8005254 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800514c:	b29b      	uxth	r3, r3
 800514e:	2b02      	cmp	r3, #2
 8005150:	d14d      	bne.n	80051ee <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005154:	2b04      	cmp	r3, #4
 8005156:	d016      	beq.n	8005186 <I2C_Master_ADDR+0x228>
 8005158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800515a:	2b02      	cmp	r3, #2
 800515c:	d013      	beq.n	8005186 <I2C_Master_ADDR+0x228>
 800515e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005160:	2b10      	cmp	r3, #16
 8005162:	d010      	beq.n	8005186 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005172:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005182:	601a      	str	r2, [r3, #0]
 8005184:	e007      	b.n	8005196 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005194:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051a4:	d117      	bne.n	80051d6 <I2C_Master_ADDR+0x278>
 80051a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80051ac:	d00b      	beq.n	80051c6 <I2C_Master_ADDR+0x268>
 80051ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d008      	beq.n	80051c6 <I2C_Master_ADDR+0x268>
 80051b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b6:	2b08      	cmp	r3, #8
 80051b8:	d005      	beq.n	80051c6 <I2C_Master_ADDR+0x268>
 80051ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051bc:	2b10      	cmp	r3, #16
 80051be:	d002      	beq.n	80051c6 <I2C_Master_ADDR+0x268>
 80051c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c2:	2b20      	cmp	r3, #32
 80051c4:	d107      	bne.n	80051d6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80051d4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051d6:	2300      	movs	r3, #0
 80051d8:	617b      	str	r3, [r7, #20]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	695b      	ldr	r3, [r3, #20]
 80051e0:	617b      	str	r3, [r7, #20]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	699b      	ldr	r3, [r3, #24]
 80051e8:	617b      	str	r3, [r7, #20]
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	e032      	b.n	8005254 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051fc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005208:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800520c:	d117      	bne.n	800523e <I2C_Master_ADDR+0x2e0>
 800520e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005210:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005214:	d00b      	beq.n	800522e <I2C_Master_ADDR+0x2d0>
 8005216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005218:	2b01      	cmp	r3, #1
 800521a:	d008      	beq.n	800522e <I2C_Master_ADDR+0x2d0>
 800521c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800521e:	2b08      	cmp	r3, #8
 8005220:	d005      	beq.n	800522e <I2C_Master_ADDR+0x2d0>
 8005222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005224:	2b10      	cmp	r3, #16
 8005226:	d002      	beq.n	800522e <I2C_Master_ADDR+0x2d0>
 8005228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800522a:	2b20      	cmp	r3, #32
 800522c:	d107      	bne.n	800523e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	685a      	ldr	r2, [r3, #4]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800523c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800523e:	2300      	movs	r3, #0
 8005240:	613b      	str	r3, [r7, #16]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	695b      	ldr	r3, [r3, #20]
 8005248:	613b      	str	r3, [r7, #16]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	613b      	str	r3, [r7, #16]
 8005252:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800525a:	e00b      	b.n	8005274 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800525c:	2300      	movs	r3, #0
 800525e:	60fb      	str	r3, [r7, #12]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	60fb      	str	r3, [r7, #12]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	60fb      	str	r3, [r7, #12]
 8005270:	68fb      	ldr	r3, [r7, #12]
}
 8005272:	e7ff      	b.n	8005274 <I2C_Master_ADDR+0x316>
 8005274:	bf00      	nop
 8005276:	3744      	adds	r7, #68	; 0x44
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800528e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005294:	b29b      	uxth	r3, r3
 8005296:	2b00      	cmp	r3, #0
 8005298:	d02b      	beq.n	80052f2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529e:	781a      	ldrb	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052aa:	1c5a      	adds	r2, r3, #1
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	3b01      	subs	r3, #1
 80052b8:	b29a      	uxth	r2, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d114      	bne.n	80052f2 <I2C_SlaveTransmit_TXE+0x72>
 80052c8:	7bfb      	ldrb	r3, [r7, #15]
 80052ca:	2b29      	cmp	r3, #41	; 0x29
 80052cc:	d111      	bne.n	80052f2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	685a      	ldr	r2, [r3, #4]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052dc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2221      	movs	r2, #33	; 0x21
 80052e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2228      	movs	r2, #40	; 0x28
 80052e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f7ff f9f1 	bl	80046d4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80052f2:	bf00      	nop
 80052f4:	3710      	adds	r7, #16
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80052fa:	b480      	push	{r7}
 80052fc:	b083      	sub	sp, #12
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005306:	b29b      	uxth	r3, r3
 8005308:	2b00      	cmp	r3, #0
 800530a:	d011      	beq.n	8005330 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005310:	781a      	ldrb	r2, [r3, #0]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531c:	1c5a      	adds	r2, r3, #1
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005326:	b29b      	uxth	r3, r3
 8005328:	3b01      	subs	r3, #1
 800532a:	b29a      	uxth	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005330:	bf00      	nop
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800534a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005350:	b29b      	uxth	r3, r3
 8005352:	2b00      	cmp	r3, #0
 8005354:	d02c      	beq.n	80053b0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	691a      	ldr	r2, [r3, #16]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005360:	b2d2      	uxtb	r2, r2
 8005362:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005368:	1c5a      	adds	r2, r3, #1
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005372:	b29b      	uxth	r3, r3
 8005374:	3b01      	subs	r3, #1
 8005376:	b29a      	uxth	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005380:	b29b      	uxth	r3, r3
 8005382:	2b00      	cmp	r3, #0
 8005384:	d114      	bne.n	80053b0 <I2C_SlaveReceive_RXNE+0x74>
 8005386:	7bfb      	ldrb	r3, [r7, #15]
 8005388:	2b2a      	cmp	r3, #42	; 0x2a
 800538a:	d111      	bne.n	80053b0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	685a      	ldr	r2, [r3, #4]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800539a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2222      	movs	r2, #34	; 0x22
 80053a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2228      	movs	r2, #40	; 0x28
 80053a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f7fb feb6 	bl	800111c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80053b0:	bf00      	nop
 80053b2:	3710      	adds	r7, #16
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d012      	beq.n	80053f0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	691a      	ldr	r2, [r3, #16]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d4:	b2d2      	uxtb	r2, r2
 80053d6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053dc:	1c5a      	adds	r2, r3, #1
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	3b01      	subs	r3, #1
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005406:	2300      	movs	r3, #0
 8005408:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005410:	b2db      	uxtb	r3, r3
 8005412:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005416:	2b28      	cmp	r3, #40	; 0x28
 8005418:	d125      	bne.n	8005466 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	685a      	ldr	r2, [r3, #4]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005428:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	f003 0304 	and.w	r3, r3, #4
 8005430:	2b00      	cmp	r3, #0
 8005432:	d101      	bne.n	8005438 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005434:	2301      	movs	r3, #1
 8005436:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800543e:	2b00      	cmp	r3, #0
 8005440:	d103      	bne.n	800544a <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	81bb      	strh	r3, [r7, #12]
 8005448:	e002      	b.n	8005450 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005458:	89ba      	ldrh	r2, [r7, #12]
 800545a:	7bfb      	ldrb	r3, [r7, #15]
 800545c:	4619      	mov	r1, r3
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f7ff f942 	bl	80046e8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005464:	e00e      	b.n	8005484 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005466:	2300      	movs	r3, #0
 8005468:	60bb      	str	r3, [r7, #8]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	695b      	ldr	r3, [r3, #20]
 8005470:	60bb      	str	r3, [r7, #8]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	60bb      	str	r3, [r7, #8]
 800547a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005484:	bf00      	nop
 8005486:	3710      	adds	r7, #16
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800549a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	685a      	ldr	r2, [r3, #4]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80054aa:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80054ac:	2300      	movs	r3, #0
 80054ae:	60bb      	str	r3, [r7, #8]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	60bb      	str	r3, [r7, #8]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f042 0201 	orr.w	r2, r2, #1
 80054c6:	601a      	str	r2, [r3, #0]
 80054c8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054d8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054e8:	d172      	bne.n	80055d0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80054ea:	7bfb      	ldrb	r3, [r7, #15]
 80054ec:	2b22      	cmp	r3, #34	; 0x22
 80054ee:	d002      	beq.n	80054f6 <I2C_Slave_STOPF+0x6a>
 80054f0:	7bfb      	ldrb	r3, [r7, #15]
 80054f2:	2b2a      	cmp	r3, #42	; 0x2a
 80054f4:	d135      	bne.n	8005562 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	b29a      	uxth	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005508:	b29b      	uxth	r3, r3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d005      	beq.n	800551a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005512:	f043 0204 	orr.w	r2, r3, #4
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	685a      	ldr	r2, [r3, #4]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005528:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552e:	4618      	mov	r0, r3
 8005530:	f7fe f9ae 	bl	8003890 <HAL_DMA_GetState>
 8005534:	4603      	mov	r3, r0
 8005536:	2b01      	cmp	r3, #1
 8005538:	d049      	beq.n	80055ce <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800553e:	4a69      	ldr	r2, [pc, #420]	; (80056e4 <I2C_Slave_STOPF+0x258>)
 8005540:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005546:	4618      	mov	r0, r3
 8005548:	f7fe f980 	bl	800384c <HAL_DMA_Abort_IT>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d03d      	beq.n	80055ce <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800555c:	4610      	mov	r0, r2
 800555e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005560:	e035      	b.n	80055ce <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	b29a      	uxth	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005574:	b29b      	uxth	r3, r3
 8005576:	2b00      	cmp	r3, #0
 8005578:	d005      	beq.n	8005586 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557e:	f043 0204 	orr.w	r2, r3, #4
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	685a      	ldr	r2, [r3, #4]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005594:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800559a:	4618      	mov	r0, r3
 800559c:	f7fe f978 	bl	8003890 <HAL_DMA_GetState>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d014      	beq.n	80055d0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055aa:	4a4e      	ldr	r2, [pc, #312]	; (80056e4 <I2C_Slave_STOPF+0x258>)
 80055ac:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7fe f94a 	bl	800384c <HAL_DMA_Abort_IT>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d008      	beq.n	80055d0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80055c8:	4610      	mov	r0, r2
 80055ca:	4798      	blx	r3
 80055cc:	e000      	b.n	80055d0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80055ce:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d03e      	beq.n	8005658 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	695b      	ldr	r3, [r3, #20]
 80055e0:	f003 0304 	and.w	r3, r3, #4
 80055e4:	2b04      	cmp	r3, #4
 80055e6:	d112      	bne.n	800560e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	691a      	ldr	r2, [r3, #16]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f2:	b2d2      	uxtb	r2, r2
 80055f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fa:	1c5a      	adds	r2, r3, #1
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005604:	b29b      	uxth	r3, r3
 8005606:	3b01      	subs	r3, #1
 8005608:	b29a      	uxth	r2, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	695b      	ldr	r3, [r3, #20]
 8005614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005618:	2b40      	cmp	r3, #64	; 0x40
 800561a:	d112      	bne.n	8005642 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	691a      	ldr	r2, [r3, #16]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005626:	b2d2      	uxtb	r2, r2
 8005628:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562e:	1c5a      	adds	r2, r3, #1
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005638:	b29b      	uxth	r3, r3
 800563a:	3b01      	subs	r3, #1
 800563c:	b29a      	uxth	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005646:	b29b      	uxth	r3, r3
 8005648:	2b00      	cmp	r3, #0
 800564a:	d005      	beq.n	8005658 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005650:	f043 0204 	orr.w	r2, r3, #4
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565c:	2b00      	cmp	r3, #0
 800565e:	d003      	beq.n	8005668 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f000 f843 	bl	80056ec <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005666:	e039      	b.n	80056dc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005668:	7bfb      	ldrb	r3, [r7, #15]
 800566a:	2b2a      	cmp	r3, #42	; 0x2a
 800566c:	d109      	bne.n	8005682 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2228      	movs	r2, #40	; 0x28
 8005678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f7fb fd4d 	bl	800111c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b28      	cmp	r3, #40	; 0x28
 800568c:	d111      	bne.n	80056b2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a15      	ldr	r2, [pc, #84]	; (80056e8 <I2C_Slave_STOPF+0x25c>)
 8005692:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2220      	movs	r2, #32
 800569e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f7ff f82a 	bl	8004704 <HAL_I2C_ListenCpltCallback>
}
 80056b0:	e014      	b.n	80056dc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b6:	2b22      	cmp	r3, #34	; 0x22
 80056b8:	d002      	beq.n	80056c0 <I2C_Slave_STOPF+0x234>
 80056ba:	7bfb      	ldrb	r3, [r7, #15]
 80056bc:	2b22      	cmp	r3, #34	; 0x22
 80056be:	d10d      	bne.n	80056dc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2220      	movs	r2, #32
 80056ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f7fb fd20 	bl	800111c <HAL_I2C_SlaveRxCpltCallback>
}
 80056dc:	bf00      	nop
 80056de:	3710      	adds	r7, #16
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	08005a55 	.word	0x08005a55
 80056e8:	ffff0000 	.word	0xffff0000

080056ec <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056fa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005702:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005704:	7bbb      	ldrb	r3, [r7, #14]
 8005706:	2b10      	cmp	r3, #16
 8005708:	d002      	beq.n	8005710 <I2C_ITError+0x24>
 800570a:	7bbb      	ldrb	r3, [r7, #14]
 800570c:	2b40      	cmp	r3, #64	; 0x40
 800570e:	d10a      	bne.n	8005726 <I2C_ITError+0x3a>
 8005710:	7bfb      	ldrb	r3, [r7, #15]
 8005712:	2b22      	cmp	r3, #34	; 0x22
 8005714:	d107      	bne.n	8005726 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005724:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005726:	7bfb      	ldrb	r3, [r7, #15]
 8005728:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800572c:	2b28      	cmp	r3, #40	; 0x28
 800572e:	d107      	bne.n	8005740 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2228      	movs	r2, #40	; 0x28
 800573a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800573e:	e015      	b.n	800576c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800574a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800574e:	d00a      	beq.n	8005766 <I2C_ITError+0x7a>
 8005750:	7bfb      	ldrb	r3, [r7, #15]
 8005752:	2b60      	cmp	r3, #96	; 0x60
 8005754:	d007      	beq.n	8005766 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2220      	movs	r2, #32
 800575a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005776:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800577a:	d162      	bne.n	8005842 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	685a      	ldr	r2, [r3, #4]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800578a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005790:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2b01      	cmp	r3, #1
 8005798:	d020      	beq.n	80057dc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800579e:	4a6a      	ldr	r2, [pc, #424]	; (8005948 <I2C_ITError+0x25c>)
 80057a0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7fe f850 	bl	800384c <HAL_DMA_Abort_IT>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	f000 8089 	beq.w	80058c6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f022 0201 	bic.w	r2, r2, #1
 80057c2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2220      	movs	r2, #32
 80057c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80057d6:	4610      	mov	r0, r2
 80057d8:	4798      	blx	r3
 80057da:	e074      	b.n	80058c6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e0:	4a59      	ldr	r2, [pc, #356]	; (8005948 <I2C_ITError+0x25c>)
 80057e2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e8:	4618      	mov	r0, r3
 80057ea:	f7fe f82f 	bl	800384c <HAL_DMA_Abort_IT>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d068      	beq.n	80058c6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	695b      	ldr	r3, [r3, #20]
 80057fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057fe:	2b40      	cmp	r3, #64	; 0x40
 8005800:	d10b      	bne.n	800581a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	691a      	ldr	r2, [r3, #16]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580c:	b2d2      	uxtb	r2, r2
 800580e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005814:	1c5a      	adds	r2, r3, #1
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f022 0201 	bic.w	r2, r2, #1
 8005828:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2220      	movs	r2, #32
 800582e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800583c:	4610      	mov	r0, r2
 800583e:	4798      	blx	r3
 8005840:	e041      	b.n	80058c6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005848:	b2db      	uxtb	r3, r3
 800584a:	2b60      	cmp	r3, #96	; 0x60
 800584c:	d125      	bne.n	800589a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2220      	movs	r2, #32
 8005852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	695b      	ldr	r3, [r3, #20]
 8005862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005866:	2b40      	cmp	r3, #64	; 0x40
 8005868:	d10b      	bne.n	8005882 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	691a      	ldr	r2, [r3, #16]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005874:	b2d2      	uxtb	r2, r2
 8005876:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587c:	1c5a      	adds	r2, r3, #1
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f022 0201 	bic.w	r2, r2, #1
 8005890:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f7fe ff5e 	bl	8004754 <HAL_I2C_AbortCpltCallback>
 8005898:	e015      	b.n	80058c6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	695b      	ldr	r3, [r3, #20]
 80058a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a4:	2b40      	cmp	r3, #64	; 0x40
 80058a6:	d10b      	bne.n	80058c0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	691a      	ldr	r2, [r3, #16]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b2:	b2d2      	uxtb	r2, r2
 80058b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ba:	1c5a      	adds	r2, r3, #1
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f7fe ff3d 	bl	8004740 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ca:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	f003 0301 	and.w	r3, r3, #1
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d10e      	bne.n	80058f4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d109      	bne.n	80058f4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d104      	bne.n	80058f4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d007      	beq.n	8005904 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	685a      	ldr	r2, [r3, #4]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005902:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800590a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005910:	f003 0304 	and.w	r3, r3, #4
 8005914:	2b04      	cmp	r3, #4
 8005916:	d113      	bne.n	8005940 <I2C_ITError+0x254>
 8005918:	7bfb      	ldrb	r3, [r7, #15]
 800591a:	2b28      	cmp	r3, #40	; 0x28
 800591c:	d110      	bne.n	8005940 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a0a      	ldr	r2, [pc, #40]	; (800594c <I2C_ITError+0x260>)
 8005922:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2220      	movs	r2, #32
 800592e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f7fe fee2 	bl	8004704 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005940:	bf00      	nop
 8005942:	3710      	adds	r7, #16
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	08005a55 	.word	0x08005a55
 800594c:	ffff0000 	.word	0xffff0000

08005950 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b088      	sub	sp, #32
 8005954:	af02      	add	r7, sp, #8
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	607a      	str	r2, [r7, #4]
 800595a:	603b      	str	r3, [r7, #0]
 800595c:	460b      	mov	r3, r1
 800595e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005964:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	2b08      	cmp	r3, #8
 800596a:	d006      	beq.n	800597a <I2C_MasterRequestWrite+0x2a>
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	2b01      	cmp	r3, #1
 8005970:	d003      	beq.n	800597a <I2C_MasterRequestWrite+0x2a>
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005978:	d108      	bne.n	800598c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005988:	601a      	str	r2, [r3, #0]
 800598a:	e00b      	b.n	80059a4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005990:	2b12      	cmp	r3, #18
 8005992:	d107      	bne.n	80059a4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059a2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	9300      	str	r3, [sp, #0]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80059b0:	68f8      	ldr	r0, [r7, #12]
 80059b2:	f000 f8f7 	bl	8005ba4 <I2C_WaitOnFlagUntilTimeout>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d00d      	beq.n	80059d8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059ca:	d103      	bne.n	80059d4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e035      	b.n	8005a44 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059e0:	d108      	bne.n	80059f4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80059e2:	897b      	ldrh	r3, [r7, #10]
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	461a      	mov	r2, r3
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80059f0:	611a      	str	r2, [r3, #16]
 80059f2:	e01b      	b.n	8005a2c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80059f4:	897b      	ldrh	r3, [r7, #10]
 80059f6:	11db      	asrs	r3, r3, #7
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	f003 0306 	and.w	r3, r3, #6
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	f063 030f 	orn	r3, r3, #15
 8005a04:	b2da      	uxtb	r2, r3
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	490e      	ldr	r1, [pc, #56]	; (8005a4c <I2C_MasterRequestWrite+0xfc>)
 8005a12:	68f8      	ldr	r0, [r7, #12]
 8005a14:	f000 f91d 	bl	8005c52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d001      	beq.n	8005a22 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e010      	b.n	8005a44 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005a22:	897b      	ldrh	r3, [r7, #10]
 8005a24:	b2da      	uxtb	r2, r3
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	4907      	ldr	r1, [pc, #28]	; (8005a50 <I2C_MasterRequestWrite+0x100>)
 8005a32:	68f8      	ldr	r0, [r7, #12]
 8005a34:	f000 f90d 	bl	8005c52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d001      	beq.n	8005a42 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e000      	b.n	8005a44 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005a42:	2300      	movs	r3, #0
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3718      	adds	r7, #24
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	00010008 	.word	0x00010008
 8005a50:	00010002 	.word	0x00010002

08005a54 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b086      	sub	sp, #24
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a64:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a6c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005a6e:	4b4b      	ldr	r3, [pc, #300]	; (8005b9c <I2C_DMAAbort+0x148>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	08db      	lsrs	r3, r3, #3
 8005a74:	4a4a      	ldr	r2, [pc, #296]	; (8005ba0 <I2C_DMAAbort+0x14c>)
 8005a76:	fba2 2303 	umull	r2, r3, r2, r3
 8005a7a:	0a1a      	lsrs	r2, r3, #8
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	4413      	add	r3, r2
 8005a82:	00da      	lsls	r2, r3, #3
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d106      	bne.n	8005a9c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a92:	f043 0220 	orr.w	r2, r3, #32
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005a9a:	e00a      	b.n	8005ab2 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005aac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ab0:	d0ea      	beq.n	8005a88 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d003      	beq.n	8005ac2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005abe:	2200      	movs	r2, #0
 8005ac0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d003      	beq.n	8005ad2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ace:	2200      	movs	r2, #0
 8005ad0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ae0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d003      	beq.n	8005af8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005af4:	2200      	movs	r2, #0
 8005af6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d003      	beq.n	8005b08 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b04:	2200      	movs	r2, #0
 8005b06:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f022 0201 	bic.w	r2, r2, #1
 8005b16:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	2b60      	cmp	r3, #96	; 0x60
 8005b22:	d10e      	bne.n	8005b42 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	2220      	movs	r2, #32
 8005b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	2200      	movs	r2, #0
 8005b38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005b3a:	6978      	ldr	r0, [r7, #20]
 8005b3c:	f7fe fe0a 	bl	8004754 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005b40:	e027      	b.n	8005b92 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005b42:	7cfb      	ldrb	r3, [r7, #19]
 8005b44:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005b48:	2b28      	cmp	r3, #40	; 0x28
 8005b4a:	d117      	bne.n	8005b7c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f042 0201 	orr.w	r2, r2, #1
 8005b5a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b6a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	2228      	movs	r2, #40	; 0x28
 8005b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005b7a:	e007      	b.n	8005b8c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	2220      	movs	r2, #32
 8005b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005b8c:	6978      	ldr	r0, [r7, #20]
 8005b8e:	f7fe fdd7 	bl	8004740 <HAL_I2C_ErrorCallback>
}
 8005b92:	bf00      	nop
 8005b94:	3718      	adds	r7, #24
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	20000000 	.word	0x20000000
 8005ba0:	14f8b589 	.word	0x14f8b589

08005ba4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	603b      	str	r3, [r7, #0]
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005bb4:	e025      	b.n	8005c02 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bbc:	d021      	beq.n	8005c02 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bbe:	f7fd f9a9 	bl	8002f14 <HAL_GetTick>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	683a      	ldr	r2, [r7, #0]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d302      	bcc.n	8005bd4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d116      	bne.n	8005c02 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2220      	movs	r2, #32
 8005bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bee:	f043 0220 	orr.w	r2, r3, #32
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e023      	b.n	8005c4a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	0c1b      	lsrs	r3, r3, #16
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d10d      	bne.n	8005c28 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	43da      	mvns	r2, r3
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	4013      	ands	r3, r2
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	bf0c      	ite	eq
 8005c1e:	2301      	moveq	r3, #1
 8005c20:	2300      	movne	r3, #0
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	461a      	mov	r2, r3
 8005c26:	e00c      	b.n	8005c42 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	699b      	ldr	r3, [r3, #24]
 8005c2e:	43da      	mvns	r2, r3
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	4013      	ands	r3, r2
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	bf0c      	ite	eq
 8005c3a:	2301      	moveq	r3, #1
 8005c3c:	2300      	movne	r3, #0
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	461a      	mov	r2, r3
 8005c42:	79fb      	ldrb	r3, [r7, #7]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d0b6      	beq.n	8005bb6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3710      	adds	r7, #16
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}

08005c52 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005c52:	b580      	push	{r7, lr}
 8005c54:	b084      	sub	sp, #16
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	60f8      	str	r0, [r7, #12]
 8005c5a:	60b9      	str	r1, [r7, #8]
 8005c5c:	607a      	str	r2, [r7, #4]
 8005c5e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c60:	e051      	b.n	8005d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	695b      	ldr	r3, [r3, #20]
 8005c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c70:	d123      	bne.n	8005cba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c80:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c8a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2220      	movs	r2, #32
 8005c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca6:	f043 0204 	orr.w	r2, r3, #4
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e046      	b.n	8005d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc0:	d021      	beq.n	8005d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cc2:	f7fd f927 	bl	8002f14 <HAL_GetTick>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d302      	bcc.n	8005cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d116      	bne.n	8005d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2220      	movs	r2, #32
 8005ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf2:	f043 0220 	orr.w	r2, r3, #32
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e020      	b.n	8005d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	0c1b      	lsrs	r3, r3, #16
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d10c      	bne.n	8005d2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	43da      	mvns	r2, r3
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	bf14      	ite	ne
 8005d22:	2301      	movne	r3, #1
 8005d24:	2300      	moveq	r3, #0
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	e00b      	b.n	8005d42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	699b      	ldr	r3, [r3, #24]
 8005d30:	43da      	mvns	r2, r3
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	4013      	ands	r3, r2
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	bf14      	ite	ne
 8005d3c:	2301      	movne	r3, #1
 8005d3e:	2300      	moveq	r3, #0
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d18d      	bne.n	8005c62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005d46:	2300      	movs	r3, #0
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3710      	adds	r7, #16
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d5c:	e02d      	b.n	8005dba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d5e:	68f8      	ldr	r0, [r7, #12]
 8005d60:	f000 f93e 	bl	8005fe0 <I2C_IsAcknowledgeFailed>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d001      	beq.n	8005d6e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e02d      	b.n	8005dca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d74:	d021      	beq.n	8005dba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d76:	f7fd f8cd 	bl	8002f14 <HAL_GetTick>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	68ba      	ldr	r2, [r7, #8]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d302      	bcc.n	8005d8c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d116      	bne.n	8005dba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2220      	movs	r2, #32
 8005d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da6:	f043 0220 	orr.w	r2, r3, #32
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e007      	b.n	8005dca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	695b      	ldr	r3, [r3, #20]
 8005dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dc4:	2b80      	cmp	r3, #128	; 0x80
 8005dc6:	d1ca      	bne.n	8005d5e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3710      	adds	r7, #16
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}

08005dd2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005dd2:	b580      	push	{r7, lr}
 8005dd4:	b084      	sub	sp, #16
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	60f8      	str	r0, [r7, #12]
 8005dda:	60b9      	str	r1, [r7, #8]
 8005ddc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005dde:	e02d      	b.n	8005e3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005de0:	68f8      	ldr	r0, [r7, #12]
 8005de2:	f000 f8fd 	bl	8005fe0 <I2C_IsAcknowledgeFailed>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d001      	beq.n	8005df0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e02d      	b.n	8005e4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df6:	d021      	beq.n	8005e3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005df8:	f7fd f88c 	bl	8002f14 <HAL_GetTick>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	68ba      	ldr	r2, [r7, #8]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d302      	bcc.n	8005e0e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d116      	bne.n	8005e3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2200      	movs	r2, #0
 8005e12:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2220      	movs	r2, #32
 8005e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e28:	f043 0220 	orr.w	r2, r3, #32
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e007      	b.n	8005e4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	695b      	ldr	r3, [r3, #20]
 8005e42:	f003 0304 	and.w	r3, r3, #4
 8005e46:	2b04      	cmp	r3, #4
 8005e48:	d1ca      	bne.n	8005de0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e4a:	2300      	movs	r3, #0
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3710      	adds	r7, #16
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e60:	e029      	b.n	8005eb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e62:	68f8      	ldr	r0, [r7, #12]
 8005e64:	f000 f8bc 	bl	8005fe0 <I2C_IsAcknowledgeFailed>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d001      	beq.n	8005e72 <I2C_WaitOnSTOPFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e029      	b.n	8005ec6 <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e72:	f7fd f84f 	bl	8002f14 <HAL_GetTick>
 8005e76:	4602      	mov	r2, r0
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	1ad3      	subs	r3, r2, r3
 8005e7c:	68ba      	ldr	r2, [r7, #8]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d302      	bcc.n	8005e88 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d116      	bne.n	8005eb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x62>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2220      	movs	r2, #32
 8005e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea2:	f043 0220 	orr.w	r2, r3, #32
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e007      	b.n	8005ec6 <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	695b      	ldr	r3, [r3, #20]
 8005ebc:	f003 0310 	and.w	r3, r3, #16
 8005ec0:	2b10      	cmp	r3, #16
 8005ec2:	d1ce      	bne.n	8005e62 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3710      	adds	r7, #16
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
	...

08005ed0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005edc:	4b13      	ldr	r3, [pc, #76]	; (8005f2c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	08db      	lsrs	r3, r3, #3
 8005ee2:	4a13      	ldr	r2, [pc, #76]	; (8005f30 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee8:	0a1a      	lsrs	r2, r3, #8
 8005eea:	4613      	mov	r3, r2
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	4413      	add	r3, r2
 8005ef0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	3b01      	subs	r3, #1
 8005ef6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d107      	bne.n	8005f0e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f02:	f043 0220 	orr.w	r2, r3, #32
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e008      	b.n	8005f20 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f1c:	d0e9      	beq.n	8005ef2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3714      	adds	r7, #20
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr
 8005f2c:	20000000 	.word	0x20000000
 8005f30:	14f8b589 	.word	0x14f8b589

08005f34 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f40:	e042      	b.n	8005fc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	695b      	ldr	r3, [r3, #20]
 8005f48:	f003 0310 	and.w	r3, r3, #16
 8005f4c:	2b10      	cmp	r3, #16
 8005f4e:	d119      	bne.n	8005f84 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f06f 0210 	mvn.w	r2, #16
 8005f58:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2220      	movs	r2, #32
 8005f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e029      	b.n	8005fd8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f84:	f7fc ffc6 	bl	8002f14 <HAL_GetTick>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	68ba      	ldr	r2, [r7, #8]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d302      	bcc.n	8005f9a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d116      	bne.n	8005fc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2220      	movs	r2, #32
 8005fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb4:	f043 0220 	orr.w	r2, r3, #32
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e007      	b.n	8005fd8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	695b      	ldr	r3, [r3, #20]
 8005fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd2:	2b40      	cmp	r3, #64	; 0x40
 8005fd4:	d1b5      	bne.n	8005f42 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3710      	adds	r7, #16
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ff2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ff6:	d11b      	bne.n	8006030 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006000:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2220      	movs	r2, #32
 800600c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601c:	f043 0204 	orr.w	r2, r3, #4
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	e000      	b.n	8006032 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	370c      	adds	r7, #12
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr

0800603e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800603e:	b480      	push	{r7}
 8006040:	b083      	sub	sp, #12
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800604e:	d103      	bne.n	8006058 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006056:	e007      	b.n	8006068 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800605c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006060:	d102      	bne.n	8006068 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2208      	movs	r2, #8
 8006066:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006068:	bf00      	nop
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b086      	sub	sp, #24
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d101      	bne.n	8006086 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e267      	b.n	8006556 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 0301 	and.w	r3, r3, #1
 800608e:	2b00      	cmp	r3, #0
 8006090:	d075      	beq.n	800617e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006092:	4b88      	ldr	r3, [pc, #544]	; (80062b4 <HAL_RCC_OscConfig+0x240>)
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	f003 030c 	and.w	r3, r3, #12
 800609a:	2b04      	cmp	r3, #4
 800609c:	d00c      	beq.n	80060b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800609e:	4b85      	ldr	r3, [pc, #532]	; (80062b4 <HAL_RCC_OscConfig+0x240>)
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80060a6:	2b08      	cmp	r3, #8
 80060a8:	d112      	bne.n	80060d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80060aa:	4b82      	ldr	r3, [pc, #520]	; (80062b4 <HAL_RCC_OscConfig+0x240>)
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060b6:	d10b      	bne.n	80060d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060b8:	4b7e      	ldr	r3, [pc, #504]	; (80062b4 <HAL_RCC_OscConfig+0x240>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d05b      	beq.n	800617c <HAL_RCC_OscConfig+0x108>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d157      	bne.n	800617c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	e242      	b.n	8006556 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060d8:	d106      	bne.n	80060e8 <HAL_RCC_OscConfig+0x74>
 80060da:	4b76      	ldr	r3, [pc, #472]	; (80062b4 <HAL_RCC_OscConfig+0x240>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a75      	ldr	r2, [pc, #468]	; (80062b4 <HAL_RCC_OscConfig+0x240>)
 80060e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060e4:	6013      	str	r3, [r2, #0]
 80060e6:	e01d      	b.n	8006124 <HAL_RCC_OscConfig+0xb0>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80060f0:	d10c      	bne.n	800610c <HAL_RCC_OscConfig+0x98>
 80060f2:	4b70      	ldr	r3, [pc, #448]	; (80062b4 <HAL_RCC_OscConfig+0x240>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a6f      	ldr	r2, [pc, #444]	; (80062b4 <HAL_RCC_OscConfig+0x240>)
 80060f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80060fc:	6013      	str	r3, [r2, #0]
 80060fe:	4b6d      	ldr	r3, [pc, #436]	; (80062b4 <HAL_RCC_OscConfig+0x240>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a6c      	ldr	r2, [pc, #432]	; (80062b4 <HAL_RCC_OscConfig+0x240>)
 8006104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006108:	6013      	str	r3, [r2, #0]
 800610a:	e00b      	b.n	8006124 <HAL_RCC_OscConfig+0xb0>
 800610c:	4b69      	ldr	r3, [pc, #420]	; (80062b4 <HAL_RCC_OscConfig+0x240>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a68      	ldr	r2, [pc, #416]	; (80062b4 <HAL_RCC_OscConfig+0x240>)
 8006112:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006116:	6013      	str	r3, [r2, #0]
 8006118:	4b66      	ldr	r3, [pc, #408]	; (80062b4 <HAL_RCC_OscConfig+0x240>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a65      	ldr	r2, [pc, #404]	; (80062b4 <HAL_RCC_OscConfig+0x240>)
 800611e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006122:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d013      	beq.n	8006154 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800612c:	f7fc fef2 	bl	8002f14 <HAL_GetTick>
 8006130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006132:	e008      	b.n	8006146 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006134:	f7fc feee 	bl	8002f14 <HAL_GetTick>
 8006138:	4602      	mov	r2, r0
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	2b64      	cmp	r3, #100	; 0x64
 8006140:	d901      	bls.n	8006146 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006142:	2303      	movs	r3, #3
 8006144:	e207      	b.n	8006556 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006146:	4b5b      	ldr	r3, [pc, #364]	; (80062b4 <HAL_RCC_OscConfig+0x240>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800614e:	2b00      	cmp	r3, #0
 8006150:	d0f0      	beq.n	8006134 <HAL_RCC_OscConfig+0xc0>
 8006152:	e014      	b.n	800617e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006154:	f7fc fede 	bl	8002f14 <HAL_GetTick>
 8006158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800615a:	e008      	b.n	800616e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800615c:	f7fc feda 	bl	8002f14 <HAL_GetTick>
 8006160:	4602      	mov	r2, r0
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	2b64      	cmp	r3, #100	; 0x64
 8006168:	d901      	bls.n	800616e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800616a:	2303      	movs	r3, #3
 800616c:	e1f3      	b.n	8006556 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800616e:	4b51      	ldr	r3, [pc, #324]	; (80062b4 <HAL_RCC_OscConfig+0x240>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006176:	2b00      	cmp	r3, #0
 8006178:	d1f0      	bne.n	800615c <HAL_RCC_OscConfig+0xe8>
 800617a:	e000      	b.n	800617e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800617c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 0302 	and.w	r3, r3, #2
 8006186:	2b00      	cmp	r3, #0
 8006188:	d063      	beq.n	8006252 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800618a:	4b4a      	ldr	r3, [pc, #296]	; (80062b4 <HAL_RCC_OscConfig+0x240>)
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	f003 030c 	and.w	r3, r3, #12
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00b      	beq.n	80061ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006196:	4b47      	ldr	r3, [pc, #284]	; (80062b4 <HAL_RCC_OscConfig+0x240>)
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800619e:	2b08      	cmp	r3, #8
 80061a0:	d11c      	bne.n	80061dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80061a2:	4b44      	ldr	r3, [pc, #272]	; (80062b4 <HAL_RCC_OscConfig+0x240>)
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d116      	bne.n	80061dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061ae:	4b41      	ldr	r3, [pc, #260]	; (80062b4 <HAL_RCC_OscConfig+0x240>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 0302 	and.w	r3, r3, #2
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d005      	beq.n	80061c6 <HAL_RCC_OscConfig+0x152>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d001      	beq.n	80061c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e1c7      	b.n	8006556 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061c6:	4b3b      	ldr	r3, [pc, #236]	; (80062b4 <HAL_RCC_OscConfig+0x240>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	00db      	lsls	r3, r3, #3
 80061d4:	4937      	ldr	r1, [pc, #220]	; (80062b4 <HAL_RCC_OscConfig+0x240>)
 80061d6:	4313      	orrs	r3, r2
 80061d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061da:	e03a      	b.n	8006252 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d020      	beq.n	8006226 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80061e4:	4b34      	ldr	r3, [pc, #208]	; (80062b8 <HAL_RCC_OscConfig+0x244>)
 80061e6:	2201      	movs	r2, #1
 80061e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061ea:	f7fc fe93 	bl	8002f14 <HAL_GetTick>
 80061ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061f0:	e008      	b.n	8006204 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061f2:	f7fc fe8f 	bl	8002f14 <HAL_GetTick>
 80061f6:	4602      	mov	r2, r0
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	1ad3      	subs	r3, r2, r3
 80061fc:	2b02      	cmp	r3, #2
 80061fe:	d901      	bls.n	8006204 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006200:	2303      	movs	r3, #3
 8006202:	e1a8      	b.n	8006556 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006204:	4b2b      	ldr	r3, [pc, #172]	; (80062b4 <HAL_RCC_OscConfig+0x240>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f003 0302 	and.w	r3, r3, #2
 800620c:	2b00      	cmp	r3, #0
 800620e:	d0f0      	beq.n	80061f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006210:	4b28      	ldr	r3, [pc, #160]	; (80062b4 <HAL_RCC_OscConfig+0x240>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	00db      	lsls	r3, r3, #3
 800621e:	4925      	ldr	r1, [pc, #148]	; (80062b4 <HAL_RCC_OscConfig+0x240>)
 8006220:	4313      	orrs	r3, r2
 8006222:	600b      	str	r3, [r1, #0]
 8006224:	e015      	b.n	8006252 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006226:	4b24      	ldr	r3, [pc, #144]	; (80062b8 <HAL_RCC_OscConfig+0x244>)
 8006228:	2200      	movs	r2, #0
 800622a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800622c:	f7fc fe72 	bl	8002f14 <HAL_GetTick>
 8006230:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006232:	e008      	b.n	8006246 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006234:	f7fc fe6e 	bl	8002f14 <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	2b02      	cmp	r3, #2
 8006240:	d901      	bls.n	8006246 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006242:	2303      	movs	r3, #3
 8006244:	e187      	b.n	8006556 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006246:	4b1b      	ldr	r3, [pc, #108]	; (80062b4 <HAL_RCC_OscConfig+0x240>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f003 0302 	and.w	r3, r3, #2
 800624e:	2b00      	cmp	r3, #0
 8006250:	d1f0      	bne.n	8006234 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 0308 	and.w	r3, r3, #8
 800625a:	2b00      	cmp	r3, #0
 800625c:	d036      	beq.n	80062cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	695b      	ldr	r3, [r3, #20]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d016      	beq.n	8006294 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006266:	4b15      	ldr	r3, [pc, #84]	; (80062bc <HAL_RCC_OscConfig+0x248>)
 8006268:	2201      	movs	r2, #1
 800626a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800626c:	f7fc fe52 	bl	8002f14 <HAL_GetTick>
 8006270:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006272:	e008      	b.n	8006286 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006274:	f7fc fe4e 	bl	8002f14 <HAL_GetTick>
 8006278:	4602      	mov	r2, r0
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	2b02      	cmp	r3, #2
 8006280:	d901      	bls.n	8006286 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	e167      	b.n	8006556 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006286:	4b0b      	ldr	r3, [pc, #44]	; (80062b4 <HAL_RCC_OscConfig+0x240>)
 8006288:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800628a:	f003 0302 	and.w	r3, r3, #2
 800628e:	2b00      	cmp	r3, #0
 8006290:	d0f0      	beq.n	8006274 <HAL_RCC_OscConfig+0x200>
 8006292:	e01b      	b.n	80062cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006294:	4b09      	ldr	r3, [pc, #36]	; (80062bc <HAL_RCC_OscConfig+0x248>)
 8006296:	2200      	movs	r2, #0
 8006298:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800629a:	f7fc fe3b 	bl	8002f14 <HAL_GetTick>
 800629e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062a0:	e00e      	b.n	80062c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80062a2:	f7fc fe37 	bl	8002f14 <HAL_GetTick>
 80062a6:	4602      	mov	r2, r0
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	1ad3      	subs	r3, r2, r3
 80062ac:	2b02      	cmp	r3, #2
 80062ae:	d907      	bls.n	80062c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80062b0:	2303      	movs	r3, #3
 80062b2:	e150      	b.n	8006556 <HAL_RCC_OscConfig+0x4e2>
 80062b4:	40023800 	.word	0x40023800
 80062b8:	42470000 	.word	0x42470000
 80062bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062c0:	4b88      	ldr	r3, [pc, #544]	; (80064e4 <HAL_RCC_OscConfig+0x470>)
 80062c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062c4:	f003 0302 	and.w	r3, r3, #2
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d1ea      	bne.n	80062a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 0304 	and.w	r3, r3, #4
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	f000 8097 	beq.w	8006408 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062da:	2300      	movs	r3, #0
 80062dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062de:	4b81      	ldr	r3, [pc, #516]	; (80064e4 <HAL_RCC_OscConfig+0x470>)
 80062e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d10f      	bne.n	800630a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062ea:	2300      	movs	r3, #0
 80062ec:	60bb      	str	r3, [r7, #8]
 80062ee:	4b7d      	ldr	r3, [pc, #500]	; (80064e4 <HAL_RCC_OscConfig+0x470>)
 80062f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f2:	4a7c      	ldr	r2, [pc, #496]	; (80064e4 <HAL_RCC_OscConfig+0x470>)
 80062f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062f8:	6413      	str	r3, [r2, #64]	; 0x40
 80062fa:	4b7a      	ldr	r3, [pc, #488]	; (80064e4 <HAL_RCC_OscConfig+0x470>)
 80062fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006302:	60bb      	str	r3, [r7, #8]
 8006304:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006306:	2301      	movs	r3, #1
 8006308:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800630a:	4b77      	ldr	r3, [pc, #476]	; (80064e8 <HAL_RCC_OscConfig+0x474>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006312:	2b00      	cmp	r3, #0
 8006314:	d118      	bne.n	8006348 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006316:	4b74      	ldr	r3, [pc, #464]	; (80064e8 <HAL_RCC_OscConfig+0x474>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a73      	ldr	r2, [pc, #460]	; (80064e8 <HAL_RCC_OscConfig+0x474>)
 800631c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006320:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006322:	f7fc fdf7 	bl	8002f14 <HAL_GetTick>
 8006326:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006328:	e008      	b.n	800633c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800632a:	f7fc fdf3 	bl	8002f14 <HAL_GetTick>
 800632e:	4602      	mov	r2, r0
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	2b02      	cmp	r3, #2
 8006336:	d901      	bls.n	800633c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006338:	2303      	movs	r3, #3
 800633a:	e10c      	b.n	8006556 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800633c:	4b6a      	ldr	r3, [pc, #424]	; (80064e8 <HAL_RCC_OscConfig+0x474>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006344:	2b00      	cmp	r3, #0
 8006346:	d0f0      	beq.n	800632a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	2b01      	cmp	r3, #1
 800634e:	d106      	bne.n	800635e <HAL_RCC_OscConfig+0x2ea>
 8006350:	4b64      	ldr	r3, [pc, #400]	; (80064e4 <HAL_RCC_OscConfig+0x470>)
 8006352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006354:	4a63      	ldr	r2, [pc, #396]	; (80064e4 <HAL_RCC_OscConfig+0x470>)
 8006356:	f043 0301 	orr.w	r3, r3, #1
 800635a:	6713      	str	r3, [r2, #112]	; 0x70
 800635c:	e01c      	b.n	8006398 <HAL_RCC_OscConfig+0x324>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	2b05      	cmp	r3, #5
 8006364:	d10c      	bne.n	8006380 <HAL_RCC_OscConfig+0x30c>
 8006366:	4b5f      	ldr	r3, [pc, #380]	; (80064e4 <HAL_RCC_OscConfig+0x470>)
 8006368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800636a:	4a5e      	ldr	r2, [pc, #376]	; (80064e4 <HAL_RCC_OscConfig+0x470>)
 800636c:	f043 0304 	orr.w	r3, r3, #4
 8006370:	6713      	str	r3, [r2, #112]	; 0x70
 8006372:	4b5c      	ldr	r3, [pc, #368]	; (80064e4 <HAL_RCC_OscConfig+0x470>)
 8006374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006376:	4a5b      	ldr	r2, [pc, #364]	; (80064e4 <HAL_RCC_OscConfig+0x470>)
 8006378:	f043 0301 	orr.w	r3, r3, #1
 800637c:	6713      	str	r3, [r2, #112]	; 0x70
 800637e:	e00b      	b.n	8006398 <HAL_RCC_OscConfig+0x324>
 8006380:	4b58      	ldr	r3, [pc, #352]	; (80064e4 <HAL_RCC_OscConfig+0x470>)
 8006382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006384:	4a57      	ldr	r2, [pc, #348]	; (80064e4 <HAL_RCC_OscConfig+0x470>)
 8006386:	f023 0301 	bic.w	r3, r3, #1
 800638a:	6713      	str	r3, [r2, #112]	; 0x70
 800638c:	4b55      	ldr	r3, [pc, #340]	; (80064e4 <HAL_RCC_OscConfig+0x470>)
 800638e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006390:	4a54      	ldr	r2, [pc, #336]	; (80064e4 <HAL_RCC_OscConfig+0x470>)
 8006392:	f023 0304 	bic.w	r3, r3, #4
 8006396:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d015      	beq.n	80063cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063a0:	f7fc fdb8 	bl	8002f14 <HAL_GetTick>
 80063a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063a6:	e00a      	b.n	80063be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063a8:	f7fc fdb4 	bl	8002f14 <HAL_GetTick>
 80063ac:	4602      	mov	r2, r0
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	1ad3      	subs	r3, r2, r3
 80063b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d901      	bls.n	80063be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80063ba:	2303      	movs	r3, #3
 80063bc:	e0cb      	b.n	8006556 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063be:	4b49      	ldr	r3, [pc, #292]	; (80064e4 <HAL_RCC_OscConfig+0x470>)
 80063c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063c2:	f003 0302 	and.w	r3, r3, #2
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d0ee      	beq.n	80063a8 <HAL_RCC_OscConfig+0x334>
 80063ca:	e014      	b.n	80063f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063cc:	f7fc fda2 	bl	8002f14 <HAL_GetTick>
 80063d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063d2:	e00a      	b.n	80063ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063d4:	f7fc fd9e 	bl	8002f14 <HAL_GetTick>
 80063d8:	4602      	mov	r2, r0
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	f241 3288 	movw	r2, #5000	; 0x1388
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d901      	bls.n	80063ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80063e6:	2303      	movs	r3, #3
 80063e8:	e0b5      	b.n	8006556 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063ea:	4b3e      	ldr	r3, [pc, #248]	; (80064e4 <HAL_RCC_OscConfig+0x470>)
 80063ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ee:	f003 0302 	and.w	r3, r3, #2
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d1ee      	bne.n	80063d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80063f6:	7dfb      	ldrb	r3, [r7, #23]
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d105      	bne.n	8006408 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063fc:	4b39      	ldr	r3, [pc, #228]	; (80064e4 <HAL_RCC_OscConfig+0x470>)
 80063fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006400:	4a38      	ldr	r2, [pc, #224]	; (80064e4 <HAL_RCC_OscConfig+0x470>)
 8006402:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006406:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	699b      	ldr	r3, [r3, #24]
 800640c:	2b00      	cmp	r3, #0
 800640e:	f000 80a1 	beq.w	8006554 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006412:	4b34      	ldr	r3, [pc, #208]	; (80064e4 <HAL_RCC_OscConfig+0x470>)
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	f003 030c 	and.w	r3, r3, #12
 800641a:	2b08      	cmp	r3, #8
 800641c:	d05c      	beq.n	80064d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	2b02      	cmp	r3, #2
 8006424:	d141      	bne.n	80064aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006426:	4b31      	ldr	r3, [pc, #196]	; (80064ec <HAL_RCC_OscConfig+0x478>)
 8006428:	2200      	movs	r2, #0
 800642a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800642c:	f7fc fd72 	bl	8002f14 <HAL_GetTick>
 8006430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006432:	e008      	b.n	8006446 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006434:	f7fc fd6e 	bl	8002f14 <HAL_GetTick>
 8006438:	4602      	mov	r2, r0
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	1ad3      	subs	r3, r2, r3
 800643e:	2b02      	cmp	r3, #2
 8006440:	d901      	bls.n	8006446 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006442:	2303      	movs	r3, #3
 8006444:	e087      	b.n	8006556 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006446:	4b27      	ldr	r3, [pc, #156]	; (80064e4 <HAL_RCC_OscConfig+0x470>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800644e:	2b00      	cmp	r3, #0
 8006450:	d1f0      	bne.n	8006434 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	69da      	ldr	r2, [r3, #28]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a1b      	ldr	r3, [r3, #32]
 800645a:	431a      	orrs	r2, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006460:	019b      	lsls	r3, r3, #6
 8006462:	431a      	orrs	r2, r3
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006468:	085b      	lsrs	r3, r3, #1
 800646a:	3b01      	subs	r3, #1
 800646c:	041b      	lsls	r3, r3, #16
 800646e:	431a      	orrs	r2, r3
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006474:	061b      	lsls	r3, r3, #24
 8006476:	491b      	ldr	r1, [pc, #108]	; (80064e4 <HAL_RCC_OscConfig+0x470>)
 8006478:	4313      	orrs	r3, r2
 800647a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800647c:	4b1b      	ldr	r3, [pc, #108]	; (80064ec <HAL_RCC_OscConfig+0x478>)
 800647e:	2201      	movs	r2, #1
 8006480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006482:	f7fc fd47 	bl	8002f14 <HAL_GetTick>
 8006486:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006488:	e008      	b.n	800649c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800648a:	f7fc fd43 	bl	8002f14 <HAL_GetTick>
 800648e:	4602      	mov	r2, r0
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	1ad3      	subs	r3, r2, r3
 8006494:	2b02      	cmp	r3, #2
 8006496:	d901      	bls.n	800649c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006498:	2303      	movs	r3, #3
 800649a:	e05c      	b.n	8006556 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800649c:	4b11      	ldr	r3, [pc, #68]	; (80064e4 <HAL_RCC_OscConfig+0x470>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d0f0      	beq.n	800648a <HAL_RCC_OscConfig+0x416>
 80064a8:	e054      	b.n	8006554 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064aa:	4b10      	ldr	r3, [pc, #64]	; (80064ec <HAL_RCC_OscConfig+0x478>)
 80064ac:	2200      	movs	r2, #0
 80064ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064b0:	f7fc fd30 	bl	8002f14 <HAL_GetTick>
 80064b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064b6:	e008      	b.n	80064ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064b8:	f7fc fd2c 	bl	8002f14 <HAL_GetTick>
 80064bc:	4602      	mov	r2, r0
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	d901      	bls.n	80064ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80064c6:	2303      	movs	r3, #3
 80064c8:	e045      	b.n	8006556 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064ca:	4b06      	ldr	r3, [pc, #24]	; (80064e4 <HAL_RCC_OscConfig+0x470>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d1f0      	bne.n	80064b8 <HAL_RCC_OscConfig+0x444>
 80064d6:	e03d      	b.n	8006554 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	699b      	ldr	r3, [r3, #24]
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d107      	bne.n	80064f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e038      	b.n	8006556 <HAL_RCC_OscConfig+0x4e2>
 80064e4:	40023800 	.word	0x40023800
 80064e8:	40007000 	.word	0x40007000
 80064ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80064f0:	4b1b      	ldr	r3, [pc, #108]	; (8006560 <HAL_RCC_OscConfig+0x4ec>)
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	699b      	ldr	r3, [r3, #24]
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d028      	beq.n	8006550 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006508:	429a      	cmp	r2, r3
 800650a:	d121      	bne.n	8006550 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006516:	429a      	cmp	r2, r3
 8006518:	d11a      	bne.n	8006550 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800651a:	68fa      	ldr	r2, [r7, #12]
 800651c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006520:	4013      	ands	r3, r2
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006526:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006528:	4293      	cmp	r3, r2
 800652a:	d111      	bne.n	8006550 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006536:	085b      	lsrs	r3, r3, #1
 8006538:	3b01      	subs	r3, #1
 800653a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800653c:	429a      	cmp	r2, r3
 800653e:	d107      	bne.n	8006550 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800654a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800654c:	429a      	cmp	r2, r3
 800654e:	d001      	beq.n	8006554 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e000      	b.n	8006556 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	3718      	adds	r7, #24
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop
 8006560:	40023800 	.word	0x40023800

08006564 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d101      	bne.n	8006578 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	e0cc      	b.n	8006712 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006578:	4b68      	ldr	r3, [pc, #416]	; (800671c <HAL_RCC_ClockConfig+0x1b8>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0307 	and.w	r3, r3, #7
 8006580:	683a      	ldr	r2, [r7, #0]
 8006582:	429a      	cmp	r2, r3
 8006584:	d90c      	bls.n	80065a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006586:	4b65      	ldr	r3, [pc, #404]	; (800671c <HAL_RCC_ClockConfig+0x1b8>)
 8006588:	683a      	ldr	r2, [r7, #0]
 800658a:	b2d2      	uxtb	r2, r2
 800658c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800658e:	4b63      	ldr	r3, [pc, #396]	; (800671c <HAL_RCC_ClockConfig+0x1b8>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f003 0307 	and.w	r3, r3, #7
 8006596:	683a      	ldr	r2, [r7, #0]
 8006598:	429a      	cmp	r2, r3
 800659a:	d001      	beq.n	80065a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e0b8      	b.n	8006712 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 0302 	and.w	r3, r3, #2
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d020      	beq.n	80065ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 0304 	and.w	r3, r3, #4
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d005      	beq.n	80065c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80065b8:	4b59      	ldr	r3, [pc, #356]	; (8006720 <HAL_RCC_ClockConfig+0x1bc>)
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	4a58      	ldr	r2, [pc, #352]	; (8006720 <HAL_RCC_ClockConfig+0x1bc>)
 80065be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80065c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 0308 	and.w	r3, r3, #8
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d005      	beq.n	80065dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80065d0:	4b53      	ldr	r3, [pc, #332]	; (8006720 <HAL_RCC_ClockConfig+0x1bc>)
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	4a52      	ldr	r2, [pc, #328]	; (8006720 <HAL_RCC_ClockConfig+0x1bc>)
 80065d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80065da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065dc:	4b50      	ldr	r3, [pc, #320]	; (8006720 <HAL_RCC_ClockConfig+0x1bc>)
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	494d      	ldr	r1, [pc, #308]	; (8006720 <HAL_RCC_ClockConfig+0x1bc>)
 80065ea:	4313      	orrs	r3, r2
 80065ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 0301 	and.w	r3, r3, #1
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d044      	beq.n	8006684 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d107      	bne.n	8006612 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006602:	4b47      	ldr	r3, [pc, #284]	; (8006720 <HAL_RCC_ClockConfig+0x1bc>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800660a:	2b00      	cmp	r3, #0
 800660c:	d119      	bne.n	8006642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	e07f      	b.n	8006712 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	2b02      	cmp	r3, #2
 8006618:	d003      	beq.n	8006622 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800661e:	2b03      	cmp	r3, #3
 8006620:	d107      	bne.n	8006632 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006622:	4b3f      	ldr	r3, [pc, #252]	; (8006720 <HAL_RCC_ClockConfig+0x1bc>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800662a:	2b00      	cmp	r3, #0
 800662c:	d109      	bne.n	8006642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800662e:	2301      	movs	r3, #1
 8006630:	e06f      	b.n	8006712 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006632:	4b3b      	ldr	r3, [pc, #236]	; (8006720 <HAL_RCC_ClockConfig+0x1bc>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 0302 	and.w	r3, r3, #2
 800663a:	2b00      	cmp	r3, #0
 800663c:	d101      	bne.n	8006642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	e067      	b.n	8006712 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006642:	4b37      	ldr	r3, [pc, #220]	; (8006720 <HAL_RCC_ClockConfig+0x1bc>)
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	f023 0203 	bic.w	r2, r3, #3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	4934      	ldr	r1, [pc, #208]	; (8006720 <HAL_RCC_ClockConfig+0x1bc>)
 8006650:	4313      	orrs	r3, r2
 8006652:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006654:	f7fc fc5e 	bl	8002f14 <HAL_GetTick>
 8006658:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800665a:	e00a      	b.n	8006672 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800665c:	f7fc fc5a 	bl	8002f14 <HAL_GetTick>
 8006660:	4602      	mov	r2, r0
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	1ad3      	subs	r3, r2, r3
 8006666:	f241 3288 	movw	r2, #5000	; 0x1388
 800666a:	4293      	cmp	r3, r2
 800666c:	d901      	bls.n	8006672 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800666e:	2303      	movs	r3, #3
 8006670:	e04f      	b.n	8006712 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006672:	4b2b      	ldr	r3, [pc, #172]	; (8006720 <HAL_RCC_ClockConfig+0x1bc>)
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	f003 020c 	and.w	r2, r3, #12
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	429a      	cmp	r2, r3
 8006682:	d1eb      	bne.n	800665c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006684:	4b25      	ldr	r3, [pc, #148]	; (800671c <HAL_RCC_ClockConfig+0x1b8>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 0307 	and.w	r3, r3, #7
 800668c:	683a      	ldr	r2, [r7, #0]
 800668e:	429a      	cmp	r2, r3
 8006690:	d20c      	bcs.n	80066ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006692:	4b22      	ldr	r3, [pc, #136]	; (800671c <HAL_RCC_ClockConfig+0x1b8>)
 8006694:	683a      	ldr	r2, [r7, #0]
 8006696:	b2d2      	uxtb	r2, r2
 8006698:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800669a:	4b20      	ldr	r3, [pc, #128]	; (800671c <HAL_RCC_ClockConfig+0x1b8>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 0307 	and.w	r3, r3, #7
 80066a2:	683a      	ldr	r2, [r7, #0]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d001      	beq.n	80066ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	e032      	b.n	8006712 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 0304 	and.w	r3, r3, #4
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d008      	beq.n	80066ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80066b8:	4b19      	ldr	r3, [pc, #100]	; (8006720 <HAL_RCC_ClockConfig+0x1bc>)
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	4916      	ldr	r1, [pc, #88]	; (8006720 <HAL_RCC_ClockConfig+0x1bc>)
 80066c6:	4313      	orrs	r3, r2
 80066c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f003 0308 	and.w	r3, r3, #8
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d009      	beq.n	80066ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80066d6:	4b12      	ldr	r3, [pc, #72]	; (8006720 <HAL_RCC_ClockConfig+0x1bc>)
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	00db      	lsls	r3, r3, #3
 80066e4:	490e      	ldr	r1, [pc, #56]	; (8006720 <HAL_RCC_ClockConfig+0x1bc>)
 80066e6:	4313      	orrs	r3, r2
 80066e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80066ea:	f000 f821 	bl	8006730 <HAL_RCC_GetSysClockFreq>
 80066ee:	4602      	mov	r2, r0
 80066f0:	4b0b      	ldr	r3, [pc, #44]	; (8006720 <HAL_RCC_ClockConfig+0x1bc>)
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	091b      	lsrs	r3, r3, #4
 80066f6:	f003 030f 	and.w	r3, r3, #15
 80066fa:	490a      	ldr	r1, [pc, #40]	; (8006724 <HAL_RCC_ClockConfig+0x1c0>)
 80066fc:	5ccb      	ldrb	r3, [r1, r3]
 80066fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006702:	4a09      	ldr	r2, [pc, #36]	; (8006728 <HAL_RCC_ClockConfig+0x1c4>)
 8006704:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006706:	4b09      	ldr	r3, [pc, #36]	; (800672c <HAL_RCC_ClockConfig+0x1c8>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4618      	mov	r0, r3
 800670c:	f7fb fee8 	bl	80024e0 <HAL_InitTick>

  return HAL_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3710      	adds	r7, #16
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	40023c00 	.word	0x40023c00
 8006720:	40023800 	.word	0x40023800
 8006724:	0800d5d8 	.word	0x0800d5d8
 8006728:	20000000 	.word	0x20000000
 800672c:	20000004 	.word	0x20000004

08006730 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006730:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006734:	b090      	sub	sp, #64	; 0x40
 8006736:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006738:	2300      	movs	r3, #0
 800673a:	637b      	str	r3, [r7, #52]	; 0x34
 800673c:	2300      	movs	r3, #0
 800673e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006740:	2300      	movs	r3, #0
 8006742:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006744:	2300      	movs	r3, #0
 8006746:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006748:	4b59      	ldr	r3, [pc, #356]	; (80068b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	f003 030c 	and.w	r3, r3, #12
 8006750:	2b08      	cmp	r3, #8
 8006752:	d00d      	beq.n	8006770 <HAL_RCC_GetSysClockFreq+0x40>
 8006754:	2b08      	cmp	r3, #8
 8006756:	f200 80a1 	bhi.w	800689c <HAL_RCC_GetSysClockFreq+0x16c>
 800675a:	2b00      	cmp	r3, #0
 800675c:	d002      	beq.n	8006764 <HAL_RCC_GetSysClockFreq+0x34>
 800675e:	2b04      	cmp	r3, #4
 8006760:	d003      	beq.n	800676a <HAL_RCC_GetSysClockFreq+0x3a>
 8006762:	e09b      	b.n	800689c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006764:	4b53      	ldr	r3, [pc, #332]	; (80068b4 <HAL_RCC_GetSysClockFreq+0x184>)
 8006766:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006768:	e09b      	b.n	80068a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800676a:	4b53      	ldr	r3, [pc, #332]	; (80068b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800676c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800676e:	e098      	b.n	80068a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006770:	4b4f      	ldr	r3, [pc, #316]	; (80068b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006778:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800677a:	4b4d      	ldr	r3, [pc, #308]	; (80068b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006782:	2b00      	cmp	r3, #0
 8006784:	d028      	beq.n	80067d8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006786:	4b4a      	ldr	r3, [pc, #296]	; (80068b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	099b      	lsrs	r3, r3, #6
 800678c:	2200      	movs	r2, #0
 800678e:	623b      	str	r3, [r7, #32]
 8006790:	627a      	str	r2, [r7, #36]	; 0x24
 8006792:	6a3b      	ldr	r3, [r7, #32]
 8006794:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006798:	2100      	movs	r1, #0
 800679a:	4b47      	ldr	r3, [pc, #284]	; (80068b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800679c:	fb03 f201 	mul.w	r2, r3, r1
 80067a0:	2300      	movs	r3, #0
 80067a2:	fb00 f303 	mul.w	r3, r0, r3
 80067a6:	4413      	add	r3, r2
 80067a8:	4a43      	ldr	r2, [pc, #268]	; (80068b8 <HAL_RCC_GetSysClockFreq+0x188>)
 80067aa:	fba0 1202 	umull	r1, r2, r0, r2
 80067ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067b0:	460a      	mov	r2, r1
 80067b2:	62ba      	str	r2, [r7, #40]	; 0x28
 80067b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067b6:	4413      	add	r3, r2
 80067b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067bc:	2200      	movs	r2, #0
 80067be:	61bb      	str	r3, [r7, #24]
 80067c0:	61fa      	str	r2, [r7, #28]
 80067c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80067ca:	f7fa fa65 	bl	8000c98 <__aeabi_uldivmod>
 80067ce:	4602      	mov	r2, r0
 80067d0:	460b      	mov	r3, r1
 80067d2:	4613      	mov	r3, r2
 80067d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067d6:	e053      	b.n	8006880 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067d8:	4b35      	ldr	r3, [pc, #212]	; (80068b0 <HAL_RCC_GetSysClockFreq+0x180>)
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	099b      	lsrs	r3, r3, #6
 80067de:	2200      	movs	r2, #0
 80067e0:	613b      	str	r3, [r7, #16]
 80067e2:	617a      	str	r2, [r7, #20]
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80067ea:	f04f 0b00 	mov.w	fp, #0
 80067ee:	4652      	mov	r2, sl
 80067f0:	465b      	mov	r3, fp
 80067f2:	f04f 0000 	mov.w	r0, #0
 80067f6:	f04f 0100 	mov.w	r1, #0
 80067fa:	0159      	lsls	r1, r3, #5
 80067fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006800:	0150      	lsls	r0, r2, #5
 8006802:	4602      	mov	r2, r0
 8006804:	460b      	mov	r3, r1
 8006806:	ebb2 080a 	subs.w	r8, r2, sl
 800680a:	eb63 090b 	sbc.w	r9, r3, fp
 800680e:	f04f 0200 	mov.w	r2, #0
 8006812:	f04f 0300 	mov.w	r3, #0
 8006816:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800681a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800681e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006822:	ebb2 0408 	subs.w	r4, r2, r8
 8006826:	eb63 0509 	sbc.w	r5, r3, r9
 800682a:	f04f 0200 	mov.w	r2, #0
 800682e:	f04f 0300 	mov.w	r3, #0
 8006832:	00eb      	lsls	r3, r5, #3
 8006834:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006838:	00e2      	lsls	r2, r4, #3
 800683a:	4614      	mov	r4, r2
 800683c:	461d      	mov	r5, r3
 800683e:	eb14 030a 	adds.w	r3, r4, sl
 8006842:	603b      	str	r3, [r7, #0]
 8006844:	eb45 030b 	adc.w	r3, r5, fp
 8006848:	607b      	str	r3, [r7, #4]
 800684a:	f04f 0200 	mov.w	r2, #0
 800684e:	f04f 0300 	mov.w	r3, #0
 8006852:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006856:	4629      	mov	r1, r5
 8006858:	028b      	lsls	r3, r1, #10
 800685a:	4621      	mov	r1, r4
 800685c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006860:	4621      	mov	r1, r4
 8006862:	028a      	lsls	r2, r1, #10
 8006864:	4610      	mov	r0, r2
 8006866:	4619      	mov	r1, r3
 8006868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800686a:	2200      	movs	r2, #0
 800686c:	60bb      	str	r3, [r7, #8]
 800686e:	60fa      	str	r2, [r7, #12]
 8006870:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006874:	f7fa fa10 	bl	8000c98 <__aeabi_uldivmod>
 8006878:	4602      	mov	r2, r0
 800687a:	460b      	mov	r3, r1
 800687c:	4613      	mov	r3, r2
 800687e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006880:	4b0b      	ldr	r3, [pc, #44]	; (80068b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	0c1b      	lsrs	r3, r3, #16
 8006886:	f003 0303 	and.w	r3, r3, #3
 800688a:	3301      	adds	r3, #1
 800688c:	005b      	lsls	r3, r3, #1
 800688e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006890:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006894:	fbb2 f3f3 	udiv	r3, r2, r3
 8006898:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800689a:	e002      	b.n	80068a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800689c:	4b05      	ldr	r3, [pc, #20]	; (80068b4 <HAL_RCC_GetSysClockFreq+0x184>)
 800689e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80068a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80068a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3740      	adds	r7, #64	; 0x40
 80068a8:	46bd      	mov	sp, r7
 80068aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068ae:	bf00      	nop
 80068b0:	40023800 	.word	0x40023800
 80068b4:	00f42400 	.word	0x00f42400
 80068b8:	017d7840 	.word	0x017d7840

080068bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068bc:	b480      	push	{r7}
 80068be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80068c0:	4b03      	ldr	r3, [pc, #12]	; (80068d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80068c2:	681b      	ldr	r3, [r3, #0]
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr
 80068ce:	bf00      	nop
 80068d0:	20000000 	.word	0x20000000

080068d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80068d8:	f7ff fff0 	bl	80068bc <HAL_RCC_GetHCLKFreq>
 80068dc:	4602      	mov	r2, r0
 80068de:	4b05      	ldr	r3, [pc, #20]	; (80068f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	0a9b      	lsrs	r3, r3, #10
 80068e4:	f003 0307 	and.w	r3, r3, #7
 80068e8:	4903      	ldr	r1, [pc, #12]	; (80068f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80068ea:	5ccb      	ldrb	r3, [r1, r3]
 80068ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	40023800 	.word	0x40023800
 80068f8:	0800d5e8 	.word	0x0800d5e8

080068fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006900:	f7ff ffdc 	bl	80068bc <HAL_RCC_GetHCLKFreq>
 8006904:	4602      	mov	r2, r0
 8006906:	4b05      	ldr	r3, [pc, #20]	; (800691c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	0b5b      	lsrs	r3, r3, #13
 800690c:	f003 0307 	and.w	r3, r3, #7
 8006910:	4903      	ldr	r1, [pc, #12]	; (8006920 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006912:	5ccb      	ldrb	r3, [r1, r3]
 8006914:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006918:	4618      	mov	r0, r3
 800691a:	bd80      	pop	{r7, pc}
 800691c:	40023800 	.word	0x40023800
 8006920:	0800d5e8 	.word	0x0800d5e8

08006924 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	220f      	movs	r2, #15
 8006932:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006934:	4b12      	ldr	r3, [pc, #72]	; (8006980 <HAL_RCC_GetClockConfig+0x5c>)
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	f003 0203 	and.w	r2, r3, #3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006940:	4b0f      	ldr	r3, [pc, #60]	; (8006980 <HAL_RCC_GetClockConfig+0x5c>)
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800694c:	4b0c      	ldr	r3, [pc, #48]	; (8006980 <HAL_RCC_GetClockConfig+0x5c>)
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006958:	4b09      	ldr	r3, [pc, #36]	; (8006980 <HAL_RCC_GetClockConfig+0x5c>)
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	08db      	lsrs	r3, r3, #3
 800695e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006966:	4b07      	ldr	r3, [pc, #28]	; (8006984 <HAL_RCC_GetClockConfig+0x60>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 0207 	and.w	r2, r3, #7
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	601a      	str	r2, [r3, #0]
}
 8006972:	bf00      	nop
 8006974:	370c      	adds	r7, #12
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr
 800697e:	bf00      	nop
 8006980:	40023800 	.word	0x40023800
 8006984:	40023c00 	.word	0x40023c00

08006988 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b082      	sub	sp, #8
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d101      	bne.n	800699a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	e041      	b.n	8006a1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d106      	bne.n	80069b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 f839 	bl	8006a26 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2202      	movs	r2, #2
 80069b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	3304      	adds	r3, #4
 80069c4:	4619      	mov	r1, r3
 80069c6:	4610      	mov	r0, r2
 80069c8:	f000 fafe 	bl	8006fc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2201      	movs	r2, #1
 8006a08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a1c:	2300      	movs	r3, #0
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3708      	adds	r7, #8
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}

08006a26 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006a26:	b480      	push	{r7}
 8006a28:	b083      	sub	sp, #12
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006a2e:	bf00      	nop
 8006a30:	370c      	adds	r7, #12
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr
	...

08006a3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b085      	sub	sp, #20
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d001      	beq.n	8006a54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	e044      	b.n	8006ade <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2202      	movs	r2, #2
 8006a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	68da      	ldr	r2, [r3, #12]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f042 0201 	orr.w	r2, r2, #1
 8006a6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a1e      	ldr	r2, [pc, #120]	; (8006aec <HAL_TIM_Base_Start_IT+0xb0>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d018      	beq.n	8006aa8 <HAL_TIM_Base_Start_IT+0x6c>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a7e:	d013      	beq.n	8006aa8 <HAL_TIM_Base_Start_IT+0x6c>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a1a      	ldr	r2, [pc, #104]	; (8006af0 <HAL_TIM_Base_Start_IT+0xb4>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d00e      	beq.n	8006aa8 <HAL_TIM_Base_Start_IT+0x6c>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a19      	ldr	r2, [pc, #100]	; (8006af4 <HAL_TIM_Base_Start_IT+0xb8>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d009      	beq.n	8006aa8 <HAL_TIM_Base_Start_IT+0x6c>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a17      	ldr	r2, [pc, #92]	; (8006af8 <HAL_TIM_Base_Start_IT+0xbc>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d004      	beq.n	8006aa8 <HAL_TIM_Base_Start_IT+0x6c>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a16      	ldr	r2, [pc, #88]	; (8006afc <HAL_TIM_Base_Start_IT+0xc0>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d111      	bne.n	8006acc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	f003 0307 	and.w	r3, r3, #7
 8006ab2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2b06      	cmp	r3, #6
 8006ab8:	d010      	beq.n	8006adc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f042 0201 	orr.w	r2, r2, #1
 8006ac8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aca:	e007      	b.n	8006adc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f042 0201 	orr.w	r2, r2, #1
 8006ada:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3714      	adds	r7, #20
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr
 8006aea:	bf00      	nop
 8006aec:	40010000 	.word	0x40010000
 8006af0:	40000400 	.word	0x40000400
 8006af4:	40000800 	.word	0x40000800
 8006af8:	40000c00 	.word	0x40000c00
 8006afc:	40014000 	.word	0x40014000

08006b00 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b086      	sub	sp, #24
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d101      	bne.n	8006b14 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	e097      	b.n	8006c44 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d106      	bne.n	8006b2e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f7fb ff9f 	bl	8002a6c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2202      	movs	r2, #2
 8006b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	6812      	ldr	r2, [r2, #0]
 8006b40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b44:	f023 0307 	bic.w	r3, r3, #7
 8006b48:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	3304      	adds	r3, #4
 8006b52:	4619      	mov	r1, r3
 8006b54:	4610      	mov	r0, r2
 8006b56:	f000 fa37 	bl	8006fc8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	699b      	ldr	r3, [r3, #24]
 8006b68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	6a1b      	ldr	r3, [r3, #32]
 8006b70:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	697a      	ldr	r2, [r7, #20]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b82:	f023 0303 	bic.w	r3, r3, #3
 8006b86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	689a      	ldr	r2, [r3, #8]
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	699b      	ldr	r3, [r3, #24]
 8006b90:	021b      	lsls	r3, r3, #8
 8006b92:	4313      	orrs	r3, r2
 8006b94:	693a      	ldr	r2, [r7, #16]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006ba0:	f023 030c 	bic.w	r3, r3, #12
 8006ba4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006bac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bb0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	68da      	ldr	r2, [r3, #12]
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	69db      	ldr	r3, [r3, #28]
 8006bba:	021b      	lsls	r3, r3, #8
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	693a      	ldr	r2, [r7, #16]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	691b      	ldr	r3, [r3, #16]
 8006bc8:	011a      	lsls	r2, r3, #4
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	6a1b      	ldr	r3, [r3, #32]
 8006bce:	031b      	lsls	r3, r3, #12
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	693a      	ldr	r2, [r7, #16]
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006bde:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006be6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	685a      	ldr	r2, [r3, #4]
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	695b      	ldr	r3, [r3, #20]
 8006bf0:	011b      	lsls	r3, r3, #4
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	697a      	ldr	r2, [r7, #20]
 8006c00:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	693a      	ldr	r2, [r7, #16]
 8006c08:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	68fa      	ldr	r2, [r7, #12]
 8006c10:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2201      	movs	r2, #1
 8006c16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2201      	movs	r2, #1
 8006c26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2201      	movs	r2, #1
 8006c36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c42:	2300      	movs	r3, #0
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3718      	adds	r7, #24
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c5c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006c64:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006c6c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006c74:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d110      	bne.n	8006c9e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c7c:	7bfb      	ldrb	r3, [r7, #15]
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d102      	bne.n	8006c88 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c82:	7b7b      	ldrb	r3, [r7, #13]
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d001      	beq.n	8006c8c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e069      	b.n	8006d60 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2202      	movs	r2, #2
 8006c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2202      	movs	r2, #2
 8006c98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c9c:	e031      	b.n	8006d02 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	2b04      	cmp	r3, #4
 8006ca2:	d110      	bne.n	8006cc6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ca4:	7bbb      	ldrb	r3, [r7, #14]
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d102      	bne.n	8006cb0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006caa:	7b3b      	ldrb	r3, [r7, #12]
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d001      	beq.n	8006cb4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e055      	b.n	8006d60 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2202      	movs	r2, #2
 8006cb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2202      	movs	r2, #2
 8006cc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006cc4:	e01d      	b.n	8006d02 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006cc6:	7bfb      	ldrb	r3, [r7, #15]
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d108      	bne.n	8006cde <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ccc:	7bbb      	ldrb	r3, [r7, #14]
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d105      	bne.n	8006cde <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006cd2:	7b7b      	ldrb	r3, [r7, #13]
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d102      	bne.n	8006cde <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006cd8:	7b3b      	ldrb	r3, [r7, #12]
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d001      	beq.n	8006ce2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e03e      	b.n	8006d60 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2202      	movs	r2, #2
 8006ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2202      	movs	r2, #2
 8006cee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2202      	movs	r2, #2
 8006cf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2202      	movs	r2, #2
 8006cfe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d003      	beq.n	8006d10 <HAL_TIM_Encoder_Start+0xc4>
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	2b04      	cmp	r3, #4
 8006d0c:	d008      	beq.n	8006d20 <HAL_TIM_Encoder_Start+0xd4>
 8006d0e:	e00f      	b.n	8006d30 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	2201      	movs	r2, #1
 8006d16:	2100      	movs	r1, #0
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f000 f9d5 	bl	80070c8 <TIM_CCxChannelCmd>
      break;
 8006d1e:	e016      	b.n	8006d4e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2201      	movs	r2, #1
 8006d26:	2104      	movs	r1, #4
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f000 f9cd 	bl	80070c8 <TIM_CCxChannelCmd>
      break;
 8006d2e:	e00e      	b.n	8006d4e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2201      	movs	r2, #1
 8006d36:	2100      	movs	r1, #0
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f000 f9c5 	bl	80070c8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2201      	movs	r2, #1
 8006d44:	2104      	movs	r1, #4
 8006d46:	4618      	mov	r0, r3
 8006d48:	f000 f9be 	bl	80070c8 <TIM_CCxChannelCmd>
      break;
 8006d4c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f042 0201 	orr.w	r2, r2, #1
 8006d5c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006d5e:	2300      	movs	r3, #0
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3710      	adds	r7, #16
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	f003 0302 	and.w	r3, r3, #2
 8006d7a:	2b02      	cmp	r3, #2
 8006d7c:	d122      	bne.n	8006dc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	f003 0302 	and.w	r3, r3, #2
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	d11b      	bne.n	8006dc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f06f 0202 	mvn.w	r2, #2
 8006d94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	699b      	ldr	r3, [r3, #24]
 8006da2:	f003 0303 	and.w	r3, r3, #3
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d003      	beq.n	8006db2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 f8ee 	bl	8006f8c <HAL_TIM_IC_CaptureCallback>
 8006db0:	e005      	b.n	8006dbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 f8e0 	bl	8006f78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 f8f1 	bl	8006fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	f003 0304 	and.w	r3, r3, #4
 8006dce:	2b04      	cmp	r3, #4
 8006dd0:	d122      	bne.n	8006e18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	f003 0304 	and.w	r3, r3, #4
 8006ddc:	2b04      	cmp	r3, #4
 8006dde:	d11b      	bne.n	8006e18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f06f 0204 	mvn.w	r2, #4
 8006de8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2202      	movs	r2, #2
 8006dee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	699b      	ldr	r3, [r3, #24]
 8006df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d003      	beq.n	8006e06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 f8c4 	bl	8006f8c <HAL_TIM_IC_CaptureCallback>
 8006e04:	e005      	b.n	8006e12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 f8b6 	bl	8006f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 f8c7 	bl	8006fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	f003 0308 	and.w	r3, r3, #8
 8006e22:	2b08      	cmp	r3, #8
 8006e24:	d122      	bne.n	8006e6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	f003 0308 	and.w	r3, r3, #8
 8006e30:	2b08      	cmp	r3, #8
 8006e32:	d11b      	bne.n	8006e6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f06f 0208 	mvn.w	r2, #8
 8006e3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2204      	movs	r2, #4
 8006e42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	69db      	ldr	r3, [r3, #28]
 8006e4a:	f003 0303 	and.w	r3, r3, #3
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d003      	beq.n	8006e5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 f89a 	bl	8006f8c <HAL_TIM_IC_CaptureCallback>
 8006e58:	e005      	b.n	8006e66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 f88c 	bl	8006f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 f89d 	bl	8006fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	691b      	ldr	r3, [r3, #16]
 8006e72:	f003 0310 	and.w	r3, r3, #16
 8006e76:	2b10      	cmp	r3, #16
 8006e78:	d122      	bne.n	8006ec0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	f003 0310 	and.w	r3, r3, #16
 8006e84:	2b10      	cmp	r3, #16
 8006e86:	d11b      	bne.n	8006ec0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f06f 0210 	mvn.w	r2, #16
 8006e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2208      	movs	r2, #8
 8006e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	69db      	ldr	r3, [r3, #28]
 8006e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d003      	beq.n	8006eae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 f870 	bl	8006f8c <HAL_TIM_IC_CaptureCallback>
 8006eac:	e005      	b.n	8006eba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 f862 	bl	8006f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 f873 	bl	8006fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	691b      	ldr	r3, [r3, #16]
 8006ec6:	f003 0301 	and.w	r3, r3, #1
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d10e      	bne.n	8006eec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	f003 0301 	and.w	r3, r3, #1
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d107      	bne.n	8006eec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f06f 0201 	mvn.w	r2, #1
 8006ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f7fa fcbc 	bl	8001864 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ef6:	2b80      	cmp	r3, #128	; 0x80
 8006ef8:	d10e      	bne.n	8006f18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f04:	2b80      	cmp	r3, #128	; 0x80
 8006f06:	d107      	bne.n	8006f18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 f976 	bl	8007204 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f22:	2b40      	cmp	r3, #64	; 0x40
 8006f24:	d10e      	bne.n	8006f44 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f30:	2b40      	cmp	r3, #64	; 0x40
 8006f32:	d107      	bne.n	8006f44 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 f838 	bl	8006fb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	691b      	ldr	r3, [r3, #16]
 8006f4a:	f003 0320 	and.w	r3, r3, #32
 8006f4e:	2b20      	cmp	r3, #32
 8006f50:	d10e      	bne.n	8006f70 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	f003 0320 	and.w	r3, r3, #32
 8006f5c:	2b20      	cmp	r3, #32
 8006f5e:	d107      	bne.n	8006f70 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f06f 0220 	mvn.w	r2, #32
 8006f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 f940 	bl	80071f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f70:	bf00      	nop
 8006f72:	3708      	adds	r7, #8
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f80:	bf00      	nop
 8006f82:	370c      	adds	r7, #12
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr

08006f8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f94:	bf00      	nop
 8006f96:	370c      	adds	r7, #12
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr

08006fa0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006fa8:	bf00      	nop
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006fbc:	bf00      	nop
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b085      	sub	sp, #20
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4a34      	ldr	r2, [pc, #208]	; (80070ac <TIM_Base_SetConfig+0xe4>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d00f      	beq.n	8007000 <TIM_Base_SetConfig+0x38>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fe6:	d00b      	beq.n	8007000 <TIM_Base_SetConfig+0x38>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	4a31      	ldr	r2, [pc, #196]	; (80070b0 <TIM_Base_SetConfig+0xe8>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d007      	beq.n	8007000 <TIM_Base_SetConfig+0x38>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	4a30      	ldr	r2, [pc, #192]	; (80070b4 <TIM_Base_SetConfig+0xec>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d003      	beq.n	8007000 <TIM_Base_SetConfig+0x38>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	4a2f      	ldr	r2, [pc, #188]	; (80070b8 <TIM_Base_SetConfig+0xf0>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d108      	bne.n	8007012 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007006:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	4313      	orrs	r3, r2
 8007010:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a25      	ldr	r2, [pc, #148]	; (80070ac <TIM_Base_SetConfig+0xe4>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d01b      	beq.n	8007052 <TIM_Base_SetConfig+0x8a>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007020:	d017      	beq.n	8007052 <TIM_Base_SetConfig+0x8a>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a22      	ldr	r2, [pc, #136]	; (80070b0 <TIM_Base_SetConfig+0xe8>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d013      	beq.n	8007052 <TIM_Base_SetConfig+0x8a>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a21      	ldr	r2, [pc, #132]	; (80070b4 <TIM_Base_SetConfig+0xec>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d00f      	beq.n	8007052 <TIM_Base_SetConfig+0x8a>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4a20      	ldr	r2, [pc, #128]	; (80070b8 <TIM_Base_SetConfig+0xf0>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d00b      	beq.n	8007052 <TIM_Base_SetConfig+0x8a>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4a1f      	ldr	r2, [pc, #124]	; (80070bc <TIM_Base_SetConfig+0xf4>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d007      	beq.n	8007052 <TIM_Base_SetConfig+0x8a>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a1e      	ldr	r2, [pc, #120]	; (80070c0 <TIM_Base_SetConfig+0xf8>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d003      	beq.n	8007052 <TIM_Base_SetConfig+0x8a>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a1d      	ldr	r2, [pc, #116]	; (80070c4 <TIM_Base_SetConfig+0xfc>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d108      	bne.n	8007064 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007058:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	68fa      	ldr	r2, [r7, #12]
 8007060:	4313      	orrs	r3, r2
 8007062:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	695b      	ldr	r3, [r3, #20]
 800706e:	4313      	orrs	r3, r2
 8007070:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	689a      	ldr	r2, [r3, #8]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	4a08      	ldr	r2, [pc, #32]	; (80070ac <TIM_Base_SetConfig+0xe4>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d103      	bne.n	8007098 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	691a      	ldr	r2, [r3, #16]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	615a      	str	r2, [r3, #20]
}
 800709e:	bf00      	nop
 80070a0:	3714      	adds	r7, #20
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr
 80070aa:	bf00      	nop
 80070ac:	40010000 	.word	0x40010000
 80070b0:	40000400 	.word	0x40000400
 80070b4:	40000800 	.word	0x40000800
 80070b8:	40000c00 	.word	0x40000c00
 80070bc:	40014000 	.word	0x40014000
 80070c0:	40014400 	.word	0x40014400
 80070c4:	40014800 	.word	0x40014800

080070c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b087      	sub	sp, #28
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	60b9      	str	r1, [r7, #8]
 80070d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	f003 031f 	and.w	r3, r3, #31
 80070da:	2201      	movs	r2, #1
 80070dc:	fa02 f303 	lsl.w	r3, r2, r3
 80070e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	6a1a      	ldr	r2, [r3, #32]
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	43db      	mvns	r3, r3
 80070ea:	401a      	ands	r2, r3
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	6a1a      	ldr	r2, [r3, #32]
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	f003 031f 	and.w	r3, r3, #31
 80070fa:	6879      	ldr	r1, [r7, #4]
 80070fc:	fa01 f303 	lsl.w	r3, r1, r3
 8007100:	431a      	orrs	r2, r3
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	621a      	str	r2, [r3, #32]
}
 8007106:	bf00      	nop
 8007108:	371c      	adds	r7, #28
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
	...

08007114 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007114:	b480      	push	{r7}
 8007116:	b085      	sub	sp, #20
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007124:	2b01      	cmp	r3, #1
 8007126:	d101      	bne.n	800712c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007128:	2302      	movs	r3, #2
 800712a:	e050      	b.n	80071ce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2202      	movs	r2, #2
 8007138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007152:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68fa      	ldr	r2, [r7, #12]
 800715a:	4313      	orrs	r3, r2
 800715c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	68fa      	ldr	r2, [r7, #12]
 8007164:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a1c      	ldr	r2, [pc, #112]	; (80071dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d018      	beq.n	80071a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007178:	d013      	beq.n	80071a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a18      	ldr	r2, [pc, #96]	; (80071e0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d00e      	beq.n	80071a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a16      	ldr	r2, [pc, #88]	; (80071e4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d009      	beq.n	80071a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a15      	ldr	r2, [pc, #84]	; (80071e8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d004      	beq.n	80071a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a13      	ldr	r2, [pc, #76]	; (80071ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d10c      	bne.n	80071bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	68ba      	ldr	r2, [r7, #8]
 80071b0:	4313      	orrs	r3, r2
 80071b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	68ba      	ldr	r2, [r7, #8]
 80071ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071cc:	2300      	movs	r3, #0
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3714      	adds	r7, #20
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr
 80071da:	bf00      	nop
 80071dc:	40010000 	.word	0x40010000
 80071e0:	40000400 	.word	0x40000400
 80071e4:	40000800 	.word	0x40000800
 80071e8:	40000c00 	.word	0x40000c00
 80071ec:	40014000 	.word	0x40014000

080071f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80071f8:	bf00      	nop
 80071fa:	370c      	adds	r7, #12
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800720c:	bf00      	nop
 800720e:	370c      	adds	r7, #12
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr

08007218 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b082      	sub	sp, #8
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d101      	bne.n	800722a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	e03f      	b.n	80072aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007230:	b2db      	uxtb	r3, r3
 8007232:	2b00      	cmp	r3, #0
 8007234:	d106      	bne.n	8007244 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f7fb fd8a 	bl	8002d58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2224      	movs	r2, #36	; 0x24
 8007248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	68da      	ldr	r2, [r3, #12]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800725a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 f97d 	bl	800755c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	691a      	ldr	r2, [r3, #16]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007270:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	695a      	ldr	r2, [r3, #20]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007280:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	68da      	ldr	r2, [r3, #12]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007290:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2220      	movs	r2, #32
 800729c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2220      	movs	r2, #32
 80072a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3708      	adds	r7, #8
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b082      	sub	sp, #8
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d101      	bne.n	80072c4 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80072c0:	2301      	movs	r3, #1
 80072c2:	e047      	b.n	8007354 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d106      	bne.n	80072de <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f7fb fd3d 	bl	8002d58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2224      	movs	r2, #36	; 0x24
 80072e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	68da      	ldr	r2, [r3, #12]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80072f4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 f930 	bl	800755c <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	691a      	ldr	r2, [r3, #16]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800730a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	695a      	ldr	r2, [r3, #20]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800731a:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	695a      	ldr	r2, [r3, #20]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f042 0208 	orr.w	r2, r2, #8
 800732a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	68da      	ldr	r2, [r3, #12]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800733a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2220      	movs	r2, #32
 8007346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2220      	movs	r2, #32
 800734e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007352:	2300      	movs	r3, #0
}
 8007354:	4618      	mov	r0, r3
 8007356:	3708      	adds	r7, #8
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b08a      	sub	sp, #40	; 0x28
 8007360:	af02      	add	r7, sp, #8
 8007362:	60f8      	str	r0, [r7, #12]
 8007364:	60b9      	str	r1, [r7, #8]
 8007366:	603b      	str	r3, [r7, #0]
 8007368:	4613      	mov	r3, r2
 800736a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800736c:	2300      	movs	r3, #0
 800736e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007376:	b2db      	uxtb	r3, r3
 8007378:	2b20      	cmp	r3, #32
 800737a:	d17c      	bne.n	8007476 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d002      	beq.n	8007388 <HAL_UART_Transmit+0x2c>
 8007382:	88fb      	ldrh	r3, [r7, #6]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d101      	bne.n	800738c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007388:	2301      	movs	r3, #1
 800738a:	e075      	b.n	8007478 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007392:	2b01      	cmp	r3, #1
 8007394:	d101      	bne.n	800739a <HAL_UART_Transmit+0x3e>
 8007396:	2302      	movs	r3, #2
 8007398:	e06e      	b.n	8007478 <HAL_UART_Transmit+0x11c>
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2201      	movs	r2, #1
 800739e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2200      	movs	r2, #0
 80073a6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2221      	movs	r2, #33	; 0x21
 80073ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80073b0:	f7fb fdb0 	bl	8002f14 <HAL_GetTick>
 80073b4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	88fa      	ldrh	r2, [r7, #6]
 80073ba:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	88fa      	ldrh	r2, [r7, #6]
 80073c0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073ca:	d108      	bne.n	80073de <HAL_UART_Transmit+0x82>
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	691b      	ldr	r3, [r3, #16]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d104      	bne.n	80073de <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80073d4:	2300      	movs	r3, #0
 80073d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	61bb      	str	r3, [r7, #24]
 80073dc:	e003      	b.n	80073e6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80073e2:	2300      	movs	r3, #0
 80073e4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2200      	movs	r2, #0
 80073ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80073ee:	e02a      	b.n	8007446 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	9300      	str	r3, [sp, #0]
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	2200      	movs	r2, #0
 80073f8:	2180      	movs	r1, #128	; 0x80
 80073fa:	68f8      	ldr	r0, [r7, #12]
 80073fc:	f000 f840 	bl	8007480 <UART_WaitOnFlagUntilTimeout>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d001      	beq.n	800740a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007406:	2303      	movs	r3, #3
 8007408:	e036      	b.n	8007478 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d10b      	bne.n	8007428 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007410:	69bb      	ldr	r3, [r7, #24]
 8007412:	881b      	ldrh	r3, [r3, #0]
 8007414:	461a      	mov	r2, r3
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800741e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007420:	69bb      	ldr	r3, [r7, #24]
 8007422:	3302      	adds	r3, #2
 8007424:	61bb      	str	r3, [r7, #24]
 8007426:	e007      	b.n	8007438 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007428:	69fb      	ldr	r3, [r7, #28]
 800742a:	781a      	ldrb	r2, [r3, #0]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007432:	69fb      	ldr	r3, [r7, #28]
 8007434:	3301      	adds	r3, #1
 8007436:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800743c:	b29b      	uxth	r3, r3
 800743e:	3b01      	subs	r3, #1
 8007440:	b29a      	uxth	r2, r3
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800744a:	b29b      	uxth	r3, r3
 800744c:	2b00      	cmp	r3, #0
 800744e:	d1cf      	bne.n	80073f0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	9300      	str	r3, [sp, #0]
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	2200      	movs	r2, #0
 8007458:	2140      	movs	r1, #64	; 0x40
 800745a:	68f8      	ldr	r0, [r7, #12]
 800745c:	f000 f810 	bl	8007480 <UART_WaitOnFlagUntilTimeout>
 8007460:	4603      	mov	r3, r0
 8007462:	2b00      	cmp	r3, #0
 8007464:	d001      	beq.n	800746a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007466:	2303      	movs	r3, #3
 8007468:	e006      	b.n	8007478 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2220      	movs	r2, #32
 800746e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007472:	2300      	movs	r3, #0
 8007474:	e000      	b.n	8007478 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007476:	2302      	movs	r3, #2
  }
}
 8007478:	4618      	mov	r0, r3
 800747a:	3720      	adds	r7, #32
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b090      	sub	sp, #64	; 0x40
 8007484:	af00      	add	r7, sp, #0
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	603b      	str	r3, [r7, #0]
 800748c:	4613      	mov	r3, r2
 800748e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007490:	e050      	b.n	8007534 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007492:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007498:	d04c      	beq.n	8007534 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800749a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800749c:	2b00      	cmp	r3, #0
 800749e:	d007      	beq.n	80074b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80074a0:	f7fb fd38 	bl	8002f14 <HAL_GetTick>
 80074a4:	4602      	mov	r2, r0
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	1ad3      	subs	r3, r2, r3
 80074aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d241      	bcs.n	8007534 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	330c      	adds	r3, #12
 80074b6:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ba:	e853 3f00 	ldrex	r3, [r3]
 80074be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80074c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80074c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	330c      	adds	r3, #12
 80074ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80074d0:	637a      	str	r2, [r7, #52]	; 0x34
 80074d2:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80074d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074d8:	e841 2300 	strex	r3, r2, [r1]
 80074dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80074de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d1e5      	bne.n	80074b0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	3314      	adds	r3, #20
 80074ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	e853 3f00 	ldrex	r3, [r3]
 80074f2:	613b      	str	r3, [r7, #16]
   return(result);
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	f023 0301 	bic.w	r3, r3, #1
 80074fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	3314      	adds	r3, #20
 8007502:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007504:	623a      	str	r2, [r7, #32]
 8007506:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007508:	69f9      	ldr	r1, [r7, #28]
 800750a:	6a3a      	ldr	r2, [r7, #32]
 800750c:	e841 2300 	strex	r3, r2, [r1]
 8007510:	61bb      	str	r3, [r7, #24]
   return(result);
 8007512:	69bb      	ldr	r3, [r7, #24]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d1e5      	bne.n	80074e4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2220      	movs	r2, #32
 800751c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2220      	movs	r2, #32
 8007524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2200      	movs	r2, #0
 800752c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007530:	2303      	movs	r3, #3
 8007532:	e00f      	b.n	8007554 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	681a      	ldr	r2, [r3, #0]
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	4013      	ands	r3, r2
 800753e:	68ba      	ldr	r2, [r7, #8]
 8007540:	429a      	cmp	r2, r3
 8007542:	bf0c      	ite	eq
 8007544:	2301      	moveq	r3, #1
 8007546:	2300      	movne	r3, #0
 8007548:	b2db      	uxtb	r3, r3
 800754a:	461a      	mov	r2, r3
 800754c:	79fb      	ldrb	r3, [r7, #7]
 800754e:	429a      	cmp	r2, r3
 8007550:	d09f      	beq.n	8007492 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007552:	2300      	movs	r3, #0
}
 8007554:	4618      	mov	r0, r3
 8007556:	3740      	adds	r7, #64	; 0x40
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800755c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007560:	b0c0      	sub	sp, #256	; 0x100
 8007562:	af00      	add	r7, sp, #0
 8007564:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	691b      	ldr	r3, [r3, #16]
 8007570:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007578:	68d9      	ldr	r1, [r3, #12]
 800757a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	ea40 0301 	orr.w	r3, r0, r1
 8007584:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800758a:	689a      	ldr	r2, [r3, #8]
 800758c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007590:	691b      	ldr	r3, [r3, #16]
 8007592:	431a      	orrs	r2, r3
 8007594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007598:	695b      	ldr	r3, [r3, #20]
 800759a:	431a      	orrs	r2, r3
 800759c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075a0:	69db      	ldr	r3, [r3, #28]
 80075a2:	4313      	orrs	r3, r2
 80075a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80075a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	68db      	ldr	r3, [r3, #12]
 80075b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80075b4:	f021 010c 	bic.w	r1, r1, #12
 80075b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80075c2:	430b      	orrs	r3, r1
 80075c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80075c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	695b      	ldr	r3, [r3, #20]
 80075ce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80075d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075d6:	6999      	ldr	r1, [r3, #24]
 80075d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	ea40 0301 	orr.w	r3, r0, r1
 80075e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80075e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	4b8f      	ldr	r3, [pc, #572]	; (8007828 <UART_SetConfig+0x2cc>)
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d005      	beq.n	80075fc <UART_SetConfig+0xa0>
 80075f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	4b8d      	ldr	r3, [pc, #564]	; (800782c <UART_SetConfig+0x2d0>)
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d104      	bne.n	8007606 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80075fc:	f7ff f97e 	bl	80068fc <HAL_RCC_GetPCLK2Freq>
 8007600:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007604:	e003      	b.n	800760e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007606:	f7ff f965 	bl	80068d4 <HAL_RCC_GetPCLK1Freq>
 800760a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800760e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007612:	69db      	ldr	r3, [r3, #28]
 8007614:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007618:	f040 810c 	bne.w	8007834 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800761c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007620:	2200      	movs	r2, #0
 8007622:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007626:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800762a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800762e:	4622      	mov	r2, r4
 8007630:	462b      	mov	r3, r5
 8007632:	1891      	adds	r1, r2, r2
 8007634:	65b9      	str	r1, [r7, #88]	; 0x58
 8007636:	415b      	adcs	r3, r3
 8007638:	65fb      	str	r3, [r7, #92]	; 0x5c
 800763a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800763e:	4621      	mov	r1, r4
 8007640:	eb12 0801 	adds.w	r8, r2, r1
 8007644:	4629      	mov	r1, r5
 8007646:	eb43 0901 	adc.w	r9, r3, r1
 800764a:	f04f 0200 	mov.w	r2, #0
 800764e:	f04f 0300 	mov.w	r3, #0
 8007652:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007656:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800765a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800765e:	4690      	mov	r8, r2
 8007660:	4699      	mov	r9, r3
 8007662:	4623      	mov	r3, r4
 8007664:	eb18 0303 	adds.w	r3, r8, r3
 8007668:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800766c:	462b      	mov	r3, r5
 800766e:	eb49 0303 	adc.w	r3, r9, r3
 8007672:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007682:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007686:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800768a:	460b      	mov	r3, r1
 800768c:	18db      	adds	r3, r3, r3
 800768e:	653b      	str	r3, [r7, #80]	; 0x50
 8007690:	4613      	mov	r3, r2
 8007692:	eb42 0303 	adc.w	r3, r2, r3
 8007696:	657b      	str	r3, [r7, #84]	; 0x54
 8007698:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800769c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80076a0:	f7f9 fafa 	bl	8000c98 <__aeabi_uldivmod>
 80076a4:	4602      	mov	r2, r0
 80076a6:	460b      	mov	r3, r1
 80076a8:	4b61      	ldr	r3, [pc, #388]	; (8007830 <UART_SetConfig+0x2d4>)
 80076aa:	fba3 2302 	umull	r2, r3, r3, r2
 80076ae:	095b      	lsrs	r3, r3, #5
 80076b0:	011c      	lsls	r4, r3, #4
 80076b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076b6:	2200      	movs	r2, #0
 80076b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80076bc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80076c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80076c4:	4642      	mov	r2, r8
 80076c6:	464b      	mov	r3, r9
 80076c8:	1891      	adds	r1, r2, r2
 80076ca:	64b9      	str	r1, [r7, #72]	; 0x48
 80076cc:	415b      	adcs	r3, r3
 80076ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80076d4:	4641      	mov	r1, r8
 80076d6:	eb12 0a01 	adds.w	sl, r2, r1
 80076da:	4649      	mov	r1, r9
 80076dc:	eb43 0b01 	adc.w	fp, r3, r1
 80076e0:	f04f 0200 	mov.w	r2, #0
 80076e4:	f04f 0300 	mov.w	r3, #0
 80076e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80076ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80076f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80076f4:	4692      	mov	sl, r2
 80076f6:	469b      	mov	fp, r3
 80076f8:	4643      	mov	r3, r8
 80076fa:	eb1a 0303 	adds.w	r3, sl, r3
 80076fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007702:	464b      	mov	r3, r9
 8007704:	eb4b 0303 	adc.w	r3, fp, r3
 8007708:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800770c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007718:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800771c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007720:	460b      	mov	r3, r1
 8007722:	18db      	adds	r3, r3, r3
 8007724:	643b      	str	r3, [r7, #64]	; 0x40
 8007726:	4613      	mov	r3, r2
 8007728:	eb42 0303 	adc.w	r3, r2, r3
 800772c:	647b      	str	r3, [r7, #68]	; 0x44
 800772e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007732:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007736:	f7f9 faaf 	bl	8000c98 <__aeabi_uldivmod>
 800773a:	4602      	mov	r2, r0
 800773c:	460b      	mov	r3, r1
 800773e:	4611      	mov	r1, r2
 8007740:	4b3b      	ldr	r3, [pc, #236]	; (8007830 <UART_SetConfig+0x2d4>)
 8007742:	fba3 2301 	umull	r2, r3, r3, r1
 8007746:	095b      	lsrs	r3, r3, #5
 8007748:	2264      	movs	r2, #100	; 0x64
 800774a:	fb02 f303 	mul.w	r3, r2, r3
 800774e:	1acb      	subs	r3, r1, r3
 8007750:	00db      	lsls	r3, r3, #3
 8007752:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007756:	4b36      	ldr	r3, [pc, #216]	; (8007830 <UART_SetConfig+0x2d4>)
 8007758:	fba3 2302 	umull	r2, r3, r3, r2
 800775c:	095b      	lsrs	r3, r3, #5
 800775e:	005b      	lsls	r3, r3, #1
 8007760:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007764:	441c      	add	r4, r3
 8007766:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800776a:	2200      	movs	r2, #0
 800776c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007770:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007774:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007778:	4642      	mov	r2, r8
 800777a:	464b      	mov	r3, r9
 800777c:	1891      	adds	r1, r2, r2
 800777e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007780:	415b      	adcs	r3, r3
 8007782:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007784:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007788:	4641      	mov	r1, r8
 800778a:	1851      	adds	r1, r2, r1
 800778c:	6339      	str	r1, [r7, #48]	; 0x30
 800778e:	4649      	mov	r1, r9
 8007790:	414b      	adcs	r3, r1
 8007792:	637b      	str	r3, [r7, #52]	; 0x34
 8007794:	f04f 0200 	mov.w	r2, #0
 8007798:	f04f 0300 	mov.w	r3, #0
 800779c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80077a0:	4659      	mov	r1, fp
 80077a2:	00cb      	lsls	r3, r1, #3
 80077a4:	4651      	mov	r1, sl
 80077a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80077aa:	4651      	mov	r1, sl
 80077ac:	00ca      	lsls	r2, r1, #3
 80077ae:	4610      	mov	r0, r2
 80077b0:	4619      	mov	r1, r3
 80077b2:	4603      	mov	r3, r0
 80077b4:	4642      	mov	r2, r8
 80077b6:	189b      	adds	r3, r3, r2
 80077b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80077bc:	464b      	mov	r3, r9
 80077be:	460a      	mov	r2, r1
 80077c0:	eb42 0303 	adc.w	r3, r2, r3
 80077c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80077c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	2200      	movs	r2, #0
 80077d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80077d4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80077d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80077dc:	460b      	mov	r3, r1
 80077de:	18db      	adds	r3, r3, r3
 80077e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80077e2:	4613      	mov	r3, r2
 80077e4:	eb42 0303 	adc.w	r3, r2, r3
 80077e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80077ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80077f2:	f7f9 fa51 	bl	8000c98 <__aeabi_uldivmod>
 80077f6:	4602      	mov	r2, r0
 80077f8:	460b      	mov	r3, r1
 80077fa:	4b0d      	ldr	r3, [pc, #52]	; (8007830 <UART_SetConfig+0x2d4>)
 80077fc:	fba3 1302 	umull	r1, r3, r3, r2
 8007800:	095b      	lsrs	r3, r3, #5
 8007802:	2164      	movs	r1, #100	; 0x64
 8007804:	fb01 f303 	mul.w	r3, r1, r3
 8007808:	1ad3      	subs	r3, r2, r3
 800780a:	00db      	lsls	r3, r3, #3
 800780c:	3332      	adds	r3, #50	; 0x32
 800780e:	4a08      	ldr	r2, [pc, #32]	; (8007830 <UART_SetConfig+0x2d4>)
 8007810:	fba2 2303 	umull	r2, r3, r2, r3
 8007814:	095b      	lsrs	r3, r3, #5
 8007816:	f003 0207 	and.w	r2, r3, #7
 800781a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4422      	add	r2, r4
 8007822:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007824:	e106      	b.n	8007a34 <UART_SetConfig+0x4d8>
 8007826:	bf00      	nop
 8007828:	40011000 	.word	0x40011000
 800782c:	40011400 	.word	0x40011400
 8007830:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007834:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007838:	2200      	movs	r2, #0
 800783a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800783e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007842:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007846:	4642      	mov	r2, r8
 8007848:	464b      	mov	r3, r9
 800784a:	1891      	adds	r1, r2, r2
 800784c:	6239      	str	r1, [r7, #32]
 800784e:	415b      	adcs	r3, r3
 8007850:	627b      	str	r3, [r7, #36]	; 0x24
 8007852:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007856:	4641      	mov	r1, r8
 8007858:	1854      	adds	r4, r2, r1
 800785a:	4649      	mov	r1, r9
 800785c:	eb43 0501 	adc.w	r5, r3, r1
 8007860:	f04f 0200 	mov.w	r2, #0
 8007864:	f04f 0300 	mov.w	r3, #0
 8007868:	00eb      	lsls	r3, r5, #3
 800786a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800786e:	00e2      	lsls	r2, r4, #3
 8007870:	4614      	mov	r4, r2
 8007872:	461d      	mov	r5, r3
 8007874:	4643      	mov	r3, r8
 8007876:	18e3      	adds	r3, r4, r3
 8007878:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800787c:	464b      	mov	r3, r9
 800787e:	eb45 0303 	adc.w	r3, r5, r3
 8007882:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007892:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007896:	f04f 0200 	mov.w	r2, #0
 800789a:	f04f 0300 	mov.w	r3, #0
 800789e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80078a2:	4629      	mov	r1, r5
 80078a4:	008b      	lsls	r3, r1, #2
 80078a6:	4621      	mov	r1, r4
 80078a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80078ac:	4621      	mov	r1, r4
 80078ae:	008a      	lsls	r2, r1, #2
 80078b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80078b4:	f7f9 f9f0 	bl	8000c98 <__aeabi_uldivmod>
 80078b8:	4602      	mov	r2, r0
 80078ba:	460b      	mov	r3, r1
 80078bc:	4b60      	ldr	r3, [pc, #384]	; (8007a40 <UART_SetConfig+0x4e4>)
 80078be:	fba3 2302 	umull	r2, r3, r3, r2
 80078c2:	095b      	lsrs	r3, r3, #5
 80078c4:	011c      	lsls	r4, r3, #4
 80078c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078ca:	2200      	movs	r2, #0
 80078cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80078d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80078d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80078d8:	4642      	mov	r2, r8
 80078da:	464b      	mov	r3, r9
 80078dc:	1891      	adds	r1, r2, r2
 80078de:	61b9      	str	r1, [r7, #24]
 80078e0:	415b      	adcs	r3, r3
 80078e2:	61fb      	str	r3, [r7, #28]
 80078e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80078e8:	4641      	mov	r1, r8
 80078ea:	1851      	adds	r1, r2, r1
 80078ec:	6139      	str	r1, [r7, #16]
 80078ee:	4649      	mov	r1, r9
 80078f0:	414b      	adcs	r3, r1
 80078f2:	617b      	str	r3, [r7, #20]
 80078f4:	f04f 0200 	mov.w	r2, #0
 80078f8:	f04f 0300 	mov.w	r3, #0
 80078fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007900:	4659      	mov	r1, fp
 8007902:	00cb      	lsls	r3, r1, #3
 8007904:	4651      	mov	r1, sl
 8007906:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800790a:	4651      	mov	r1, sl
 800790c:	00ca      	lsls	r2, r1, #3
 800790e:	4610      	mov	r0, r2
 8007910:	4619      	mov	r1, r3
 8007912:	4603      	mov	r3, r0
 8007914:	4642      	mov	r2, r8
 8007916:	189b      	adds	r3, r3, r2
 8007918:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800791c:	464b      	mov	r3, r9
 800791e:	460a      	mov	r2, r1
 8007920:	eb42 0303 	adc.w	r3, r2, r3
 8007924:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	67bb      	str	r3, [r7, #120]	; 0x78
 8007932:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007934:	f04f 0200 	mov.w	r2, #0
 8007938:	f04f 0300 	mov.w	r3, #0
 800793c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007940:	4649      	mov	r1, r9
 8007942:	008b      	lsls	r3, r1, #2
 8007944:	4641      	mov	r1, r8
 8007946:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800794a:	4641      	mov	r1, r8
 800794c:	008a      	lsls	r2, r1, #2
 800794e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007952:	f7f9 f9a1 	bl	8000c98 <__aeabi_uldivmod>
 8007956:	4602      	mov	r2, r0
 8007958:	460b      	mov	r3, r1
 800795a:	4611      	mov	r1, r2
 800795c:	4b38      	ldr	r3, [pc, #224]	; (8007a40 <UART_SetConfig+0x4e4>)
 800795e:	fba3 2301 	umull	r2, r3, r3, r1
 8007962:	095b      	lsrs	r3, r3, #5
 8007964:	2264      	movs	r2, #100	; 0x64
 8007966:	fb02 f303 	mul.w	r3, r2, r3
 800796a:	1acb      	subs	r3, r1, r3
 800796c:	011b      	lsls	r3, r3, #4
 800796e:	3332      	adds	r3, #50	; 0x32
 8007970:	4a33      	ldr	r2, [pc, #204]	; (8007a40 <UART_SetConfig+0x4e4>)
 8007972:	fba2 2303 	umull	r2, r3, r2, r3
 8007976:	095b      	lsrs	r3, r3, #5
 8007978:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800797c:	441c      	add	r4, r3
 800797e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007982:	2200      	movs	r2, #0
 8007984:	673b      	str	r3, [r7, #112]	; 0x70
 8007986:	677a      	str	r2, [r7, #116]	; 0x74
 8007988:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800798c:	4642      	mov	r2, r8
 800798e:	464b      	mov	r3, r9
 8007990:	1891      	adds	r1, r2, r2
 8007992:	60b9      	str	r1, [r7, #8]
 8007994:	415b      	adcs	r3, r3
 8007996:	60fb      	str	r3, [r7, #12]
 8007998:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800799c:	4641      	mov	r1, r8
 800799e:	1851      	adds	r1, r2, r1
 80079a0:	6039      	str	r1, [r7, #0]
 80079a2:	4649      	mov	r1, r9
 80079a4:	414b      	adcs	r3, r1
 80079a6:	607b      	str	r3, [r7, #4]
 80079a8:	f04f 0200 	mov.w	r2, #0
 80079ac:	f04f 0300 	mov.w	r3, #0
 80079b0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80079b4:	4659      	mov	r1, fp
 80079b6:	00cb      	lsls	r3, r1, #3
 80079b8:	4651      	mov	r1, sl
 80079ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80079be:	4651      	mov	r1, sl
 80079c0:	00ca      	lsls	r2, r1, #3
 80079c2:	4610      	mov	r0, r2
 80079c4:	4619      	mov	r1, r3
 80079c6:	4603      	mov	r3, r0
 80079c8:	4642      	mov	r2, r8
 80079ca:	189b      	adds	r3, r3, r2
 80079cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80079ce:	464b      	mov	r3, r9
 80079d0:	460a      	mov	r2, r1
 80079d2:	eb42 0303 	adc.w	r3, r2, r3
 80079d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80079d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	2200      	movs	r2, #0
 80079e0:	663b      	str	r3, [r7, #96]	; 0x60
 80079e2:	667a      	str	r2, [r7, #100]	; 0x64
 80079e4:	f04f 0200 	mov.w	r2, #0
 80079e8:	f04f 0300 	mov.w	r3, #0
 80079ec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80079f0:	4649      	mov	r1, r9
 80079f2:	008b      	lsls	r3, r1, #2
 80079f4:	4641      	mov	r1, r8
 80079f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80079fa:	4641      	mov	r1, r8
 80079fc:	008a      	lsls	r2, r1, #2
 80079fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007a02:	f7f9 f949 	bl	8000c98 <__aeabi_uldivmod>
 8007a06:	4602      	mov	r2, r0
 8007a08:	460b      	mov	r3, r1
 8007a0a:	4b0d      	ldr	r3, [pc, #52]	; (8007a40 <UART_SetConfig+0x4e4>)
 8007a0c:	fba3 1302 	umull	r1, r3, r3, r2
 8007a10:	095b      	lsrs	r3, r3, #5
 8007a12:	2164      	movs	r1, #100	; 0x64
 8007a14:	fb01 f303 	mul.w	r3, r1, r3
 8007a18:	1ad3      	subs	r3, r2, r3
 8007a1a:	011b      	lsls	r3, r3, #4
 8007a1c:	3332      	adds	r3, #50	; 0x32
 8007a1e:	4a08      	ldr	r2, [pc, #32]	; (8007a40 <UART_SetConfig+0x4e4>)
 8007a20:	fba2 2303 	umull	r2, r3, r2, r3
 8007a24:	095b      	lsrs	r3, r3, #5
 8007a26:	f003 020f 	and.w	r2, r3, #15
 8007a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4422      	add	r2, r4
 8007a32:	609a      	str	r2, [r3, #8]
}
 8007a34:	bf00      	nop
 8007a36:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a40:	51eb851f 	.word	0x51eb851f

08007a44 <__NVIC_SetPriority>:
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	6039      	str	r1, [r7, #0]
 8007a4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	db0a      	blt.n	8007a6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	b2da      	uxtb	r2, r3
 8007a5c:	490c      	ldr	r1, [pc, #48]	; (8007a90 <__NVIC_SetPriority+0x4c>)
 8007a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a62:	0112      	lsls	r2, r2, #4
 8007a64:	b2d2      	uxtb	r2, r2
 8007a66:	440b      	add	r3, r1
 8007a68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007a6c:	e00a      	b.n	8007a84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	b2da      	uxtb	r2, r3
 8007a72:	4908      	ldr	r1, [pc, #32]	; (8007a94 <__NVIC_SetPriority+0x50>)
 8007a74:	79fb      	ldrb	r3, [r7, #7]
 8007a76:	f003 030f 	and.w	r3, r3, #15
 8007a7a:	3b04      	subs	r3, #4
 8007a7c:	0112      	lsls	r2, r2, #4
 8007a7e:	b2d2      	uxtb	r2, r2
 8007a80:	440b      	add	r3, r1
 8007a82:	761a      	strb	r2, [r3, #24]
}
 8007a84:	bf00      	nop
 8007a86:	370c      	adds	r7, #12
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr
 8007a90:	e000e100 	.word	0xe000e100
 8007a94:	e000ed00 	.word	0xe000ed00

08007a98 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007a9c:	4b05      	ldr	r3, [pc, #20]	; (8007ab4 <SysTick_Handler+0x1c>)
 8007a9e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007aa0:	f001 feb0 	bl	8009804 <xTaskGetSchedulerState>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d001      	beq.n	8007aae <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007aaa:	f002 fce5 	bl	800a478 <xPortSysTickHandler>
  }
}
 8007aae:	bf00      	nop
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	e000e010 	.word	0xe000e010

08007ab8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007abc:	2100      	movs	r1, #0
 8007abe:	f06f 0004 	mvn.w	r0, #4
 8007ac2:	f7ff ffbf 	bl	8007a44 <__NVIC_SetPriority>
#endif
}
 8007ac6:	bf00      	nop
 8007ac8:	bd80      	pop	{r7, pc}
	...

08007acc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ad2:	f3ef 8305 	mrs	r3, IPSR
 8007ad6:	603b      	str	r3, [r7, #0]
  return(result);
 8007ad8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d003      	beq.n	8007ae6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007ade:	f06f 0305 	mvn.w	r3, #5
 8007ae2:	607b      	str	r3, [r7, #4]
 8007ae4:	e00c      	b.n	8007b00 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007ae6:	4b0a      	ldr	r3, [pc, #40]	; (8007b10 <osKernelInitialize+0x44>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d105      	bne.n	8007afa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007aee:	4b08      	ldr	r3, [pc, #32]	; (8007b10 <osKernelInitialize+0x44>)
 8007af0:	2201      	movs	r2, #1
 8007af2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007af4:	2300      	movs	r3, #0
 8007af6:	607b      	str	r3, [r7, #4]
 8007af8:	e002      	b.n	8007b00 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007afa:	f04f 33ff 	mov.w	r3, #4294967295
 8007afe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007b00:	687b      	ldr	r3, [r7, #4]
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	370c      	adds	r7, #12
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr
 8007b0e:	bf00      	nop
 8007b10:	200006b0 	.word	0x200006b0

08007b14 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b1a:	f3ef 8305 	mrs	r3, IPSR
 8007b1e:	603b      	str	r3, [r7, #0]
  return(result);
 8007b20:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d003      	beq.n	8007b2e <osKernelStart+0x1a>
    stat = osErrorISR;
 8007b26:	f06f 0305 	mvn.w	r3, #5
 8007b2a:	607b      	str	r3, [r7, #4]
 8007b2c:	e010      	b.n	8007b50 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007b2e:	4b0b      	ldr	r3, [pc, #44]	; (8007b5c <osKernelStart+0x48>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d109      	bne.n	8007b4a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007b36:	f7ff ffbf 	bl	8007ab8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007b3a:	4b08      	ldr	r3, [pc, #32]	; (8007b5c <osKernelStart+0x48>)
 8007b3c:	2202      	movs	r2, #2
 8007b3e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      //vTaskStartScheduler();
	  vSchedulerStart();  //ADDED
 8007b40:	f7fa fc8e 	bl	8002460 <vSchedulerStart>
      stat = osOK;
 8007b44:	2300      	movs	r3, #0
 8007b46:	607b      	str	r3, [r7, #4]
 8007b48:	e002      	b.n	8007b50 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8007b4e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007b50:	687b      	ldr	r3, [r7, #4]
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3708      	adds	r7, #8
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop
 8007b5c:	200006b0 	.word	0x200006b0

08007b60 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007b60:	b480      	push	{r7}
 8007b62:	b085      	sub	sp, #20
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	4a07      	ldr	r2, [pc, #28]	; (8007b8c <vApplicationGetIdleTaskMemory+0x2c>)
 8007b70:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	4a06      	ldr	r2, [pc, #24]	; (8007b90 <vApplicationGetIdleTaskMemory+0x30>)
 8007b76:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2280      	movs	r2, #128	; 0x80
 8007b7c:	601a      	str	r2, [r3, #0]
}
 8007b7e:	bf00      	nop
 8007b80:	3714      	adds	r7, #20
 8007b82:	46bd      	mov	sp, r7
 8007b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b88:	4770      	bx	lr
 8007b8a:	bf00      	nop
 8007b8c:	200006b4 	.word	0x200006b4
 8007b90:	20000760 	.word	0x20000760

08007b94 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007b94:	b480      	push	{r7}
 8007b96:	b085      	sub	sp, #20
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	60f8      	str	r0, [r7, #12]
 8007b9c:	60b9      	str	r1, [r7, #8]
 8007b9e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	4a07      	ldr	r2, [pc, #28]	; (8007bc0 <vApplicationGetTimerTaskMemory+0x2c>)
 8007ba4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	4a06      	ldr	r2, [pc, #24]	; (8007bc4 <vApplicationGetTimerTaskMemory+0x30>)
 8007baa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007bb2:	601a      	str	r2, [r3, #0]
}
 8007bb4:	bf00      	nop
 8007bb6:	3714      	adds	r7, #20
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr
 8007bc0:	20000960 	.word	0x20000960
 8007bc4:	20000a0c 	.word	0x20000a0c

08007bc8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b083      	sub	sp, #12
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f103 0208 	add.w	r2, r3, #8
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8007be0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f103 0208 	add.w	r2, r3, #8
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f103 0208 	add.w	r2, r3, #8
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007bfc:	bf00      	nop
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2200      	movs	r2, #0
 8007c14:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007c16:	bf00      	nop
 8007c18:	370c      	adds	r7, #12
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr

08007c22 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c22:	b480      	push	{r7}
 8007c24:	b085      	sub	sp, #20
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
 8007c2a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	68fa      	ldr	r2, [r7, #12]
 8007c36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	689a      	ldr	r2, [r3, #8]
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	683a      	ldr	r2, [r7, #0]
 8007c46:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	683a      	ldr	r2, [r7, #0]
 8007c4c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	1c5a      	adds	r2, r3, #1
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	601a      	str	r2, [r3, #0]
}
 8007c5e:	bf00      	nop
 8007c60:	3714      	adds	r7, #20
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr

08007c6a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c6a:	b480      	push	{r7}
 8007c6c:	b085      	sub	sp, #20
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
 8007c72:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c80:	d103      	bne.n	8007c8a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	691b      	ldr	r3, [r3, #16]
 8007c86:	60fb      	str	r3, [r7, #12]
 8007c88:	e00c      	b.n	8007ca4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	3308      	adds	r3, #8
 8007c8e:	60fb      	str	r3, [r7, #12]
 8007c90:	e002      	b.n	8007c98 <vListInsert+0x2e>
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	60fb      	str	r3, [r7, #12]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	68ba      	ldr	r2, [r7, #8]
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d2f6      	bcs.n	8007c92 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	685a      	ldr	r2, [r3, #4]
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	683a      	ldr	r2, [r7, #0]
 8007cb2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	68fa      	ldr	r2, [r7, #12]
 8007cb8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	683a      	ldr	r2, [r7, #0]
 8007cbe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	687a      	ldr	r2, [r7, #4]
 8007cc4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	1c5a      	adds	r2, r3, #1
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	601a      	str	r2, [r3, #0]
}
 8007cd0:	bf00      	nop
 8007cd2:	3714      	adds	r7, #20
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr

08007cdc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b085      	sub	sp, #20
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	691b      	ldr	r3, [r3, #16]
 8007ce8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	6892      	ldr	r2, [r2, #8]
 8007cf2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	6852      	ldr	r2, [r2, #4]
 8007cfc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	687a      	ldr	r2, [r7, #4]
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d103      	bne.n	8007d10 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	689a      	ldr	r2, [r3, #8]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2200      	movs	r2, #0
 8007d14:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	1e5a      	subs	r2, r3, #1
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3714      	adds	r7, #20
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr

08007d30 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b084      	sub	sp, #16
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d10a      	bne.n	8007d5a <xQueueGenericReset+0x2a>
	__asm volatile
 8007d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d48:	f383 8811 	msr	BASEPRI, r3
 8007d4c:	f3bf 8f6f 	isb	sy
 8007d50:	f3bf 8f4f 	dsb	sy
 8007d54:	60bb      	str	r3, [r7, #8]
}
 8007d56:	bf00      	nop
 8007d58:	e7fe      	b.n	8007d58 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007d5a:	f002 fafb 	bl	800a354 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d66:	68f9      	ldr	r1, [r7, #12]
 8007d68:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007d6a:	fb01 f303 	mul.w	r3, r1, r3
 8007d6e:	441a      	add	r2, r3
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2200      	movs	r2, #0
 8007d78:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d8a:	3b01      	subs	r3, #1
 8007d8c:	68f9      	ldr	r1, [r7, #12]
 8007d8e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007d90:	fb01 f303 	mul.w	r3, r1, r3
 8007d94:	441a      	add	r2, r3
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	22ff      	movs	r2, #255	; 0xff
 8007d9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	22ff      	movs	r2, #255	; 0xff
 8007da6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d114      	bne.n	8007dda <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	691b      	ldr	r3, [r3, #16]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d01a      	beq.n	8007dee <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	3310      	adds	r3, #16
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f001 fafb 	bl	80093b8 <xTaskRemoveFromEventList>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d012      	beq.n	8007dee <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007dc8:	4b0c      	ldr	r3, [pc, #48]	; (8007dfc <xQueueGenericReset+0xcc>)
 8007dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dce:	601a      	str	r2, [r3, #0]
 8007dd0:	f3bf 8f4f 	dsb	sy
 8007dd4:	f3bf 8f6f 	isb	sy
 8007dd8:	e009      	b.n	8007dee <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	3310      	adds	r3, #16
 8007dde:	4618      	mov	r0, r3
 8007de0:	f7ff fef2 	bl	8007bc8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	3324      	adds	r3, #36	; 0x24
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7ff feed 	bl	8007bc8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007dee:	f002 fae1 	bl	800a3b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007df2:	2301      	movs	r3, #1
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3710      	adds	r7, #16
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}
 8007dfc:	e000ed04 	.word	0xe000ed04

08007e00 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b08e      	sub	sp, #56	; 0x38
 8007e04:	af02      	add	r7, sp, #8
 8007e06:	60f8      	str	r0, [r7, #12]
 8007e08:	60b9      	str	r1, [r7, #8]
 8007e0a:	607a      	str	r2, [r7, #4]
 8007e0c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d10a      	bne.n	8007e2a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e18:	f383 8811 	msr	BASEPRI, r3
 8007e1c:	f3bf 8f6f 	isb	sy
 8007e20:	f3bf 8f4f 	dsb	sy
 8007e24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007e26:	bf00      	nop
 8007e28:	e7fe      	b.n	8007e28 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d10a      	bne.n	8007e46 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e34:	f383 8811 	msr	BASEPRI, r3
 8007e38:	f3bf 8f6f 	isb	sy
 8007e3c:	f3bf 8f4f 	dsb	sy
 8007e40:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007e42:	bf00      	nop
 8007e44:	e7fe      	b.n	8007e44 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d002      	beq.n	8007e52 <xQueueGenericCreateStatic+0x52>
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d001      	beq.n	8007e56 <xQueueGenericCreateStatic+0x56>
 8007e52:	2301      	movs	r3, #1
 8007e54:	e000      	b.n	8007e58 <xQueueGenericCreateStatic+0x58>
 8007e56:	2300      	movs	r3, #0
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d10a      	bne.n	8007e72 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e60:	f383 8811 	msr	BASEPRI, r3
 8007e64:	f3bf 8f6f 	isb	sy
 8007e68:	f3bf 8f4f 	dsb	sy
 8007e6c:	623b      	str	r3, [r7, #32]
}
 8007e6e:	bf00      	nop
 8007e70:	e7fe      	b.n	8007e70 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d102      	bne.n	8007e7e <xQueueGenericCreateStatic+0x7e>
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d101      	bne.n	8007e82 <xQueueGenericCreateStatic+0x82>
 8007e7e:	2301      	movs	r3, #1
 8007e80:	e000      	b.n	8007e84 <xQueueGenericCreateStatic+0x84>
 8007e82:	2300      	movs	r3, #0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d10a      	bne.n	8007e9e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e8c:	f383 8811 	msr	BASEPRI, r3
 8007e90:	f3bf 8f6f 	isb	sy
 8007e94:	f3bf 8f4f 	dsb	sy
 8007e98:	61fb      	str	r3, [r7, #28]
}
 8007e9a:	bf00      	nop
 8007e9c:	e7fe      	b.n	8007e9c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007e9e:	2350      	movs	r3, #80	; 0x50
 8007ea0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	2b50      	cmp	r3, #80	; 0x50
 8007ea6:	d00a      	beq.n	8007ebe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eac:	f383 8811 	msr	BASEPRI, r3
 8007eb0:	f3bf 8f6f 	isb	sy
 8007eb4:	f3bf 8f4f 	dsb	sy
 8007eb8:	61bb      	str	r3, [r7, #24]
}
 8007eba:	bf00      	nop
 8007ebc:	e7fe      	b.n	8007ebc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007ebe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d00d      	beq.n	8007ee6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ecc:	2201      	movs	r2, #1
 8007ece:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007ed2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed8:	9300      	str	r3, [sp, #0]
 8007eda:	4613      	mov	r3, r2
 8007edc:	687a      	ldr	r2, [r7, #4]
 8007ede:	68b9      	ldr	r1, [r7, #8]
 8007ee0:	68f8      	ldr	r0, [r7, #12]
 8007ee2:	f000 f805 	bl	8007ef0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3730      	adds	r7, #48	; 0x30
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	60b9      	str	r1, [r7, #8]
 8007efa:	607a      	str	r2, [r7, #4]
 8007efc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d103      	bne.n	8007f0c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	69ba      	ldr	r2, [r7, #24]
 8007f08:	601a      	str	r2, [r3, #0]
 8007f0a:	e002      	b.n	8007f12 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007f0c:	69bb      	ldr	r3, [r7, #24]
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007f12:	69bb      	ldr	r3, [r7, #24]
 8007f14:	68fa      	ldr	r2, [r7, #12]
 8007f16:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007f18:	69bb      	ldr	r3, [r7, #24]
 8007f1a:	68ba      	ldr	r2, [r7, #8]
 8007f1c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007f1e:	2101      	movs	r1, #1
 8007f20:	69b8      	ldr	r0, [r7, #24]
 8007f22:	f7ff ff05 	bl	8007d30 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007f26:	69bb      	ldr	r3, [r7, #24]
 8007f28:	78fa      	ldrb	r2, [r7, #3]
 8007f2a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007f2e:	bf00      	nop
 8007f30:	3710      	adds	r7, #16
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
	...

08007f38 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b08e      	sub	sp, #56	; 0x38
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	60f8      	str	r0, [r7, #12]
 8007f40:	60b9      	str	r1, [r7, #8]
 8007f42:	607a      	str	r2, [r7, #4]
 8007f44:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007f46:	2300      	movs	r3, #0
 8007f48:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d10a      	bne.n	8007f6a <xQueueGenericSend+0x32>
	__asm volatile
 8007f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f58:	f383 8811 	msr	BASEPRI, r3
 8007f5c:	f3bf 8f6f 	isb	sy
 8007f60:	f3bf 8f4f 	dsb	sy
 8007f64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007f66:	bf00      	nop
 8007f68:	e7fe      	b.n	8007f68 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d103      	bne.n	8007f78 <xQueueGenericSend+0x40>
 8007f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d101      	bne.n	8007f7c <xQueueGenericSend+0x44>
 8007f78:	2301      	movs	r3, #1
 8007f7a:	e000      	b.n	8007f7e <xQueueGenericSend+0x46>
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d10a      	bne.n	8007f98 <xQueueGenericSend+0x60>
	__asm volatile
 8007f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f86:	f383 8811 	msr	BASEPRI, r3
 8007f8a:	f3bf 8f6f 	isb	sy
 8007f8e:	f3bf 8f4f 	dsb	sy
 8007f92:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007f94:	bf00      	nop
 8007f96:	e7fe      	b.n	8007f96 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	2b02      	cmp	r3, #2
 8007f9c:	d103      	bne.n	8007fa6 <xQueueGenericSend+0x6e>
 8007f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d101      	bne.n	8007faa <xQueueGenericSend+0x72>
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e000      	b.n	8007fac <xQueueGenericSend+0x74>
 8007faa:	2300      	movs	r3, #0
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d10a      	bne.n	8007fc6 <xQueueGenericSend+0x8e>
	__asm volatile
 8007fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb4:	f383 8811 	msr	BASEPRI, r3
 8007fb8:	f3bf 8f6f 	isb	sy
 8007fbc:	f3bf 8f4f 	dsb	sy
 8007fc0:	623b      	str	r3, [r7, #32]
}
 8007fc2:	bf00      	nop
 8007fc4:	e7fe      	b.n	8007fc4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007fc6:	f001 fc1d 	bl	8009804 <xTaskGetSchedulerState>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d102      	bne.n	8007fd6 <xQueueGenericSend+0x9e>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d101      	bne.n	8007fda <xQueueGenericSend+0xa2>
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	e000      	b.n	8007fdc <xQueueGenericSend+0xa4>
 8007fda:	2300      	movs	r3, #0
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d10a      	bne.n	8007ff6 <xQueueGenericSend+0xbe>
	__asm volatile
 8007fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe4:	f383 8811 	msr	BASEPRI, r3
 8007fe8:	f3bf 8f6f 	isb	sy
 8007fec:	f3bf 8f4f 	dsb	sy
 8007ff0:	61fb      	str	r3, [r7, #28]
}
 8007ff2:	bf00      	nop
 8007ff4:	e7fe      	b.n	8007ff4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007ff6:	f002 f9ad 	bl	800a354 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008002:	429a      	cmp	r2, r3
 8008004:	d302      	bcc.n	800800c <xQueueGenericSend+0xd4>
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	2b02      	cmp	r3, #2
 800800a:	d129      	bne.n	8008060 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800800c:	683a      	ldr	r2, [r7, #0]
 800800e:	68b9      	ldr	r1, [r7, #8]
 8008010:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008012:	f000 fa0b 	bl	800842c <prvCopyDataToQueue>
 8008016:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800801c:	2b00      	cmp	r3, #0
 800801e:	d010      	beq.n	8008042 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008022:	3324      	adds	r3, #36	; 0x24
 8008024:	4618      	mov	r0, r3
 8008026:	f001 f9c7 	bl	80093b8 <xTaskRemoveFromEventList>
 800802a:	4603      	mov	r3, r0
 800802c:	2b00      	cmp	r3, #0
 800802e:	d013      	beq.n	8008058 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008030:	4b3f      	ldr	r3, [pc, #252]	; (8008130 <xQueueGenericSend+0x1f8>)
 8008032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008036:	601a      	str	r2, [r3, #0]
 8008038:	f3bf 8f4f 	dsb	sy
 800803c:	f3bf 8f6f 	isb	sy
 8008040:	e00a      	b.n	8008058 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008044:	2b00      	cmp	r3, #0
 8008046:	d007      	beq.n	8008058 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008048:	4b39      	ldr	r3, [pc, #228]	; (8008130 <xQueueGenericSend+0x1f8>)
 800804a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800804e:	601a      	str	r2, [r3, #0]
 8008050:	f3bf 8f4f 	dsb	sy
 8008054:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008058:	f002 f9ac 	bl	800a3b4 <vPortExitCritical>
				return pdPASS;
 800805c:	2301      	movs	r3, #1
 800805e:	e063      	b.n	8008128 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d103      	bne.n	800806e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008066:	f002 f9a5 	bl	800a3b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800806a:	2300      	movs	r3, #0
 800806c:	e05c      	b.n	8008128 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800806e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008070:	2b00      	cmp	r3, #0
 8008072:	d106      	bne.n	8008082 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008074:	f107 0314 	add.w	r3, r7, #20
 8008078:	4618      	mov	r0, r3
 800807a:	f001 fa01 	bl	8009480 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800807e:	2301      	movs	r3, #1
 8008080:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008082:	f002 f997 	bl	800a3b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008086:	f000 ff6d 	bl	8008f64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800808a:	f002 f963 	bl	800a354 <vPortEnterCritical>
 800808e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008090:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008094:	b25b      	sxtb	r3, r3
 8008096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800809a:	d103      	bne.n	80080a4 <xQueueGenericSend+0x16c>
 800809c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800809e:	2200      	movs	r2, #0
 80080a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80080aa:	b25b      	sxtb	r3, r3
 80080ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080b0:	d103      	bne.n	80080ba <xQueueGenericSend+0x182>
 80080b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b4:	2200      	movs	r2, #0
 80080b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80080ba:	f002 f97b 	bl	800a3b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80080be:	1d3a      	adds	r2, r7, #4
 80080c0:	f107 0314 	add.w	r3, r7, #20
 80080c4:	4611      	mov	r1, r2
 80080c6:	4618      	mov	r0, r3
 80080c8:	f001 f9f0 	bl	80094ac <xTaskCheckForTimeOut>
 80080cc:	4603      	mov	r3, r0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d124      	bne.n	800811c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80080d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080d4:	f000 faa2 	bl	800861c <prvIsQueueFull>
 80080d8:	4603      	mov	r3, r0
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d018      	beq.n	8008110 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80080de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e0:	3310      	adds	r3, #16
 80080e2:	687a      	ldr	r2, [r7, #4]
 80080e4:	4611      	mov	r1, r2
 80080e6:	4618      	mov	r0, r3
 80080e8:	f001 f916 	bl	8009318 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80080ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080ee:	f000 fa2d 	bl	800854c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80080f2:	f000 ff45 	bl	8008f80 <xTaskResumeAll>
 80080f6:	4603      	mov	r3, r0
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	f47f af7c 	bne.w	8007ff6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80080fe:	4b0c      	ldr	r3, [pc, #48]	; (8008130 <xQueueGenericSend+0x1f8>)
 8008100:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008104:	601a      	str	r2, [r3, #0]
 8008106:	f3bf 8f4f 	dsb	sy
 800810a:	f3bf 8f6f 	isb	sy
 800810e:	e772      	b.n	8007ff6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008110:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008112:	f000 fa1b 	bl	800854c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008116:	f000 ff33 	bl	8008f80 <xTaskResumeAll>
 800811a:	e76c      	b.n	8007ff6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800811c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800811e:	f000 fa15 	bl	800854c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008122:	f000 ff2d 	bl	8008f80 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008126:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008128:	4618      	mov	r0, r3
 800812a:	3738      	adds	r7, #56	; 0x38
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}
 8008130:	e000ed04 	.word	0xe000ed04

08008134 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b090      	sub	sp, #64	; 0x40
 8008138:	af00      	add	r7, sp, #0
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	607a      	str	r2, [r7, #4]
 8008140:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008148:	2b00      	cmp	r3, #0
 800814a:	d10a      	bne.n	8008162 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800814c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008150:	f383 8811 	msr	BASEPRI, r3
 8008154:	f3bf 8f6f 	isb	sy
 8008158:	f3bf 8f4f 	dsb	sy
 800815c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800815e:	bf00      	nop
 8008160:	e7fe      	b.n	8008160 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d103      	bne.n	8008170 <xQueueGenericSendFromISR+0x3c>
 8008168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800816a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800816c:	2b00      	cmp	r3, #0
 800816e:	d101      	bne.n	8008174 <xQueueGenericSendFromISR+0x40>
 8008170:	2301      	movs	r3, #1
 8008172:	e000      	b.n	8008176 <xQueueGenericSendFromISR+0x42>
 8008174:	2300      	movs	r3, #0
 8008176:	2b00      	cmp	r3, #0
 8008178:	d10a      	bne.n	8008190 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800817a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800817e:	f383 8811 	msr	BASEPRI, r3
 8008182:	f3bf 8f6f 	isb	sy
 8008186:	f3bf 8f4f 	dsb	sy
 800818a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800818c:	bf00      	nop
 800818e:	e7fe      	b.n	800818e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	2b02      	cmp	r3, #2
 8008194:	d103      	bne.n	800819e <xQueueGenericSendFromISR+0x6a>
 8008196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800819a:	2b01      	cmp	r3, #1
 800819c:	d101      	bne.n	80081a2 <xQueueGenericSendFromISR+0x6e>
 800819e:	2301      	movs	r3, #1
 80081a0:	e000      	b.n	80081a4 <xQueueGenericSendFromISR+0x70>
 80081a2:	2300      	movs	r3, #0
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d10a      	bne.n	80081be <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80081a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ac:	f383 8811 	msr	BASEPRI, r3
 80081b0:	f3bf 8f6f 	isb	sy
 80081b4:	f3bf 8f4f 	dsb	sy
 80081b8:	623b      	str	r3, [r7, #32]
}
 80081ba:	bf00      	nop
 80081bc:	e7fe      	b.n	80081bc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80081be:	f002 f9ab 	bl	800a518 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80081c2:	f3ef 8211 	mrs	r2, BASEPRI
 80081c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ca:	f383 8811 	msr	BASEPRI, r3
 80081ce:	f3bf 8f6f 	isb	sy
 80081d2:	f3bf 8f4f 	dsb	sy
 80081d6:	61fa      	str	r2, [r7, #28]
 80081d8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80081da:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80081dc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80081de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d302      	bcc.n	80081f0 <xQueueGenericSendFromISR+0xbc>
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	2b02      	cmp	r3, #2
 80081ee:	d12f      	bne.n	8008250 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80081f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80081fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081fe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008200:	683a      	ldr	r2, [r7, #0]
 8008202:	68b9      	ldr	r1, [r7, #8]
 8008204:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008206:	f000 f911 	bl	800842c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800820a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800820e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008212:	d112      	bne.n	800823a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008218:	2b00      	cmp	r3, #0
 800821a:	d016      	beq.n	800824a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800821c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800821e:	3324      	adds	r3, #36	; 0x24
 8008220:	4618      	mov	r0, r3
 8008222:	f001 f8c9 	bl	80093b8 <xTaskRemoveFromEventList>
 8008226:	4603      	mov	r3, r0
 8008228:	2b00      	cmp	r3, #0
 800822a:	d00e      	beq.n	800824a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d00b      	beq.n	800824a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2201      	movs	r2, #1
 8008236:	601a      	str	r2, [r3, #0]
 8008238:	e007      	b.n	800824a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800823a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800823e:	3301      	adds	r3, #1
 8008240:	b2db      	uxtb	r3, r3
 8008242:	b25a      	sxtb	r2, r3
 8008244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008246:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800824a:	2301      	movs	r3, #1
 800824c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800824e:	e001      	b.n	8008254 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008250:	2300      	movs	r3, #0
 8008252:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008256:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800825e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008262:	4618      	mov	r0, r3
 8008264:	3740      	adds	r7, #64	; 0x40
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
	...

0800826c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b08c      	sub	sp, #48	; 0x30
 8008270:	af00      	add	r7, sp, #0
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	60b9      	str	r1, [r7, #8]
 8008276:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008278:	2300      	movs	r3, #0
 800827a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008282:	2b00      	cmp	r3, #0
 8008284:	d10a      	bne.n	800829c <xQueueReceive+0x30>
	__asm volatile
 8008286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800828a:	f383 8811 	msr	BASEPRI, r3
 800828e:	f3bf 8f6f 	isb	sy
 8008292:	f3bf 8f4f 	dsb	sy
 8008296:	623b      	str	r3, [r7, #32]
}
 8008298:	bf00      	nop
 800829a:	e7fe      	b.n	800829a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d103      	bne.n	80082aa <xQueueReceive+0x3e>
 80082a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d101      	bne.n	80082ae <xQueueReceive+0x42>
 80082aa:	2301      	movs	r3, #1
 80082ac:	e000      	b.n	80082b0 <xQueueReceive+0x44>
 80082ae:	2300      	movs	r3, #0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d10a      	bne.n	80082ca <xQueueReceive+0x5e>
	__asm volatile
 80082b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b8:	f383 8811 	msr	BASEPRI, r3
 80082bc:	f3bf 8f6f 	isb	sy
 80082c0:	f3bf 8f4f 	dsb	sy
 80082c4:	61fb      	str	r3, [r7, #28]
}
 80082c6:	bf00      	nop
 80082c8:	e7fe      	b.n	80082c8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80082ca:	f001 fa9b 	bl	8009804 <xTaskGetSchedulerState>
 80082ce:	4603      	mov	r3, r0
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d102      	bne.n	80082da <xQueueReceive+0x6e>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d101      	bne.n	80082de <xQueueReceive+0x72>
 80082da:	2301      	movs	r3, #1
 80082dc:	e000      	b.n	80082e0 <xQueueReceive+0x74>
 80082de:	2300      	movs	r3, #0
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d10a      	bne.n	80082fa <xQueueReceive+0x8e>
	__asm volatile
 80082e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e8:	f383 8811 	msr	BASEPRI, r3
 80082ec:	f3bf 8f6f 	isb	sy
 80082f0:	f3bf 8f4f 	dsb	sy
 80082f4:	61bb      	str	r3, [r7, #24]
}
 80082f6:	bf00      	nop
 80082f8:	e7fe      	b.n	80082f8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80082fa:	f002 f82b 	bl	800a354 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80082fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008302:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008306:	2b00      	cmp	r3, #0
 8008308:	d01f      	beq.n	800834a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800830a:	68b9      	ldr	r1, [r7, #8]
 800830c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800830e:	f000 f8f7 	bl	8008500 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008314:	1e5a      	subs	r2, r3, #1
 8008316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008318:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800831a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800831c:	691b      	ldr	r3, [r3, #16]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d00f      	beq.n	8008342 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008324:	3310      	adds	r3, #16
 8008326:	4618      	mov	r0, r3
 8008328:	f001 f846 	bl	80093b8 <xTaskRemoveFromEventList>
 800832c:	4603      	mov	r3, r0
 800832e:	2b00      	cmp	r3, #0
 8008330:	d007      	beq.n	8008342 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008332:	4b3d      	ldr	r3, [pc, #244]	; (8008428 <xQueueReceive+0x1bc>)
 8008334:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008338:	601a      	str	r2, [r3, #0]
 800833a:	f3bf 8f4f 	dsb	sy
 800833e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008342:	f002 f837 	bl	800a3b4 <vPortExitCritical>
				return pdPASS;
 8008346:	2301      	movs	r3, #1
 8008348:	e069      	b.n	800841e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d103      	bne.n	8008358 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008350:	f002 f830 	bl	800a3b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008354:	2300      	movs	r3, #0
 8008356:	e062      	b.n	800841e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800835a:	2b00      	cmp	r3, #0
 800835c:	d106      	bne.n	800836c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800835e:	f107 0310 	add.w	r3, r7, #16
 8008362:	4618      	mov	r0, r3
 8008364:	f001 f88c 	bl	8009480 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008368:	2301      	movs	r3, #1
 800836a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800836c:	f002 f822 	bl	800a3b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008370:	f000 fdf8 	bl	8008f64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008374:	f001 ffee 	bl	800a354 <vPortEnterCritical>
 8008378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800837a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800837e:	b25b      	sxtb	r3, r3
 8008380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008384:	d103      	bne.n	800838e <xQueueReceive+0x122>
 8008386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008388:	2200      	movs	r2, #0
 800838a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800838e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008390:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008394:	b25b      	sxtb	r3, r3
 8008396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800839a:	d103      	bne.n	80083a4 <xQueueReceive+0x138>
 800839c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800839e:	2200      	movs	r2, #0
 80083a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80083a4:	f002 f806 	bl	800a3b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80083a8:	1d3a      	adds	r2, r7, #4
 80083aa:	f107 0310 	add.w	r3, r7, #16
 80083ae:	4611      	mov	r1, r2
 80083b0:	4618      	mov	r0, r3
 80083b2:	f001 f87b 	bl	80094ac <xTaskCheckForTimeOut>
 80083b6:	4603      	mov	r3, r0
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d123      	bne.n	8008404 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80083bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083be:	f000 f917 	bl	80085f0 <prvIsQueueEmpty>
 80083c2:	4603      	mov	r3, r0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d017      	beq.n	80083f8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80083c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ca:	3324      	adds	r3, #36	; 0x24
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	4611      	mov	r1, r2
 80083d0:	4618      	mov	r0, r3
 80083d2:	f000 ffa1 	bl	8009318 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80083d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083d8:	f000 f8b8 	bl	800854c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80083dc:	f000 fdd0 	bl	8008f80 <xTaskResumeAll>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d189      	bne.n	80082fa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80083e6:	4b10      	ldr	r3, [pc, #64]	; (8008428 <xQueueReceive+0x1bc>)
 80083e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083ec:	601a      	str	r2, [r3, #0]
 80083ee:	f3bf 8f4f 	dsb	sy
 80083f2:	f3bf 8f6f 	isb	sy
 80083f6:	e780      	b.n	80082fa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80083f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083fa:	f000 f8a7 	bl	800854c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80083fe:	f000 fdbf 	bl	8008f80 <xTaskResumeAll>
 8008402:	e77a      	b.n	80082fa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008404:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008406:	f000 f8a1 	bl	800854c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800840a:	f000 fdb9 	bl	8008f80 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800840e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008410:	f000 f8ee 	bl	80085f0 <prvIsQueueEmpty>
 8008414:	4603      	mov	r3, r0
 8008416:	2b00      	cmp	r3, #0
 8008418:	f43f af6f 	beq.w	80082fa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800841c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800841e:	4618      	mov	r0, r3
 8008420:	3730      	adds	r7, #48	; 0x30
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}
 8008426:	bf00      	nop
 8008428:	e000ed04 	.word	0xe000ed04

0800842c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b086      	sub	sp, #24
 8008430:	af00      	add	r7, sp, #0
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	60b9      	str	r1, [r7, #8]
 8008436:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008438:	2300      	movs	r3, #0
 800843a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008440:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008446:	2b00      	cmp	r3, #0
 8008448:	d10d      	bne.n	8008466 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d14d      	bne.n	80084ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	4618      	mov	r0, r3
 8008458:	f001 f9f2 	bl	8009840 <xTaskPriorityDisinherit>
 800845c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2200      	movs	r2, #0
 8008462:	609a      	str	r2, [r3, #8]
 8008464:	e043      	b.n	80084ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d119      	bne.n	80084a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	6858      	ldr	r0, [r3, #4]
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008474:	461a      	mov	r2, r3
 8008476:	68b9      	ldr	r1, [r7, #8]
 8008478:	f003 f9bb 	bl	800b7f2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	685a      	ldr	r2, [r3, #4]
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008484:	441a      	add	r2, r3
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	685a      	ldr	r2, [r3, #4]
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	689b      	ldr	r3, [r3, #8]
 8008492:	429a      	cmp	r2, r3
 8008494:	d32b      	bcc.n	80084ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	605a      	str	r2, [r3, #4]
 800849e:	e026      	b.n	80084ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	68d8      	ldr	r0, [r3, #12]
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084a8:	461a      	mov	r2, r3
 80084aa:	68b9      	ldr	r1, [r7, #8]
 80084ac:	f003 f9a1 	bl	800b7f2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	68da      	ldr	r2, [r3, #12]
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b8:	425b      	negs	r3, r3
 80084ba:	441a      	add	r2, r3
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	68da      	ldr	r2, [r3, #12]
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d207      	bcs.n	80084dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	689a      	ldr	r2, [r3, #8]
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084d4:	425b      	negs	r3, r3
 80084d6:	441a      	add	r2, r3
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2b02      	cmp	r3, #2
 80084e0:	d105      	bne.n	80084ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d002      	beq.n	80084ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	3b01      	subs	r3, #1
 80084ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	1c5a      	adds	r2, r3, #1
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80084f6:	697b      	ldr	r3, [r7, #20]
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3718      	adds	r7, #24
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b082      	sub	sp, #8
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800850e:	2b00      	cmp	r3, #0
 8008510:	d018      	beq.n	8008544 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	68da      	ldr	r2, [r3, #12]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800851a:	441a      	add	r2, r3
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	68da      	ldr	r2, [r3, #12]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	689b      	ldr	r3, [r3, #8]
 8008528:	429a      	cmp	r2, r3
 800852a:	d303      	bcc.n	8008534 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681a      	ldr	r2, [r3, #0]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	68d9      	ldr	r1, [r3, #12]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800853c:	461a      	mov	r2, r3
 800853e:	6838      	ldr	r0, [r7, #0]
 8008540:	f003 f957 	bl	800b7f2 <memcpy>
	}
}
 8008544:	bf00      	nop
 8008546:	3708      	adds	r7, #8
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}

0800854c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b084      	sub	sp, #16
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008554:	f001 fefe 	bl	800a354 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800855e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008560:	e011      	b.n	8008586 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008566:	2b00      	cmp	r3, #0
 8008568:	d012      	beq.n	8008590 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	3324      	adds	r3, #36	; 0x24
 800856e:	4618      	mov	r0, r3
 8008570:	f000 ff22 	bl	80093b8 <xTaskRemoveFromEventList>
 8008574:	4603      	mov	r3, r0
 8008576:	2b00      	cmp	r3, #0
 8008578:	d001      	beq.n	800857e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800857a:	f000 fff9 	bl	8009570 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800857e:	7bfb      	ldrb	r3, [r7, #15]
 8008580:	3b01      	subs	r3, #1
 8008582:	b2db      	uxtb	r3, r3
 8008584:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800858a:	2b00      	cmp	r3, #0
 800858c:	dce9      	bgt.n	8008562 <prvUnlockQueue+0x16>
 800858e:	e000      	b.n	8008592 <prvUnlockQueue+0x46>
					break;
 8008590:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	22ff      	movs	r2, #255	; 0xff
 8008596:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800859a:	f001 ff0b 	bl	800a3b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800859e:	f001 fed9 	bl	800a354 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80085a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80085aa:	e011      	b.n	80085d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	691b      	ldr	r3, [r3, #16]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d012      	beq.n	80085da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	3310      	adds	r3, #16
 80085b8:	4618      	mov	r0, r3
 80085ba:	f000 fefd 	bl	80093b8 <xTaskRemoveFromEventList>
 80085be:	4603      	mov	r3, r0
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d001      	beq.n	80085c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80085c4:	f000 ffd4 	bl	8009570 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80085c8:	7bbb      	ldrb	r3, [r7, #14]
 80085ca:	3b01      	subs	r3, #1
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80085d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	dce9      	bgt.n	80085ac <prvUnlockQueue+0x60>
 80085d8:	e000      	b.n	80085dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80085da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	22ff      	movs	r2, #255	; 0xff
 80085e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80085e4:	f001 fee6 	bl	800a3b4 <vPortExitCritical>
}
 80085e8:	bf00      	nop
 80085ea:	3710      	adds	r7, #16
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b084      	sub	sp, #16
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80085f8:	f001 feac 	bl	800a354 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008600:	2b00      	cmp	r3, #0
 8008602:	d102      	bne.n	800860a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008604:	2301      	movs	r3, #1
 8008606:	60fb      	str	r3, [r7, #12]
 8008608:	e001      	b.n	800860e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800860a:	2300      	movs	r3, #0
 800860c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800860e:	f001 fed1 	bl	800a3b4 <vPortExitCritical>

	return xReturn;
 8008612:	68fb      	ldr	r3, [r7, #12]
}
 8008614:	4618      	mov	r0, r3
 8008616:	3710      	adds	r7, #16
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}

0800861c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b084      	sub	sp, #16
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008624:	f001 fe96 	bl	800a354 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008630:	429a      	cmp	r2, r3
 8008632:	d102      	bne.n	800863a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008634:	2301      	movs	r3, #1
 8008636:	60fb      	str	r3, [r7, #12]
 8008638:	e001      	b.n	800863e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800863a:	2300      	movs	r3, #0
 800863c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800863e:	f001 feb9 	bl	800a3b4 <vPortExitCritical>

	return xReturn;
 8008642:	68fb      	ldr	r3, [r7, #12]
}
 8008644:	4618      	mov	r0, r3
 8008646:	3710      	adds	r7, #16
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800864c:	b480      	push	{r7}
 800864e:	b085      	sub	sp, #20
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008656:	2300      	movs	r3, #0
 8008658:	60fb      	str	r3, [r7, #12]
 800865a:	e014      	b.n	8008686 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800865c:	4a0f      	ldr	r2, [pc, #60]	; (800869c <vQueueAddToRegistry+0x50>)
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d10b      	bne.n	8008680 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008668:	490c      	ldr	r1, [pc, #48]	; (800869c <vQueueAddToRegistry+0x50>)
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	683a      	ldr	r2, [r7, #0]
 800866e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008672:	4a0a      	ldr	r2, [pc, #40]	; (800869c <vQueueAddToRegistry+0x50>)
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	00db      	lsls	r3, r3, #3
 8008678:	4413      	add	r3, r2
 800867a:	687a      	ldr	r2, [r7, #4]
 800867c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800867e:	e006      	b.n	800868e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	3301      	adds	r3, #1
 8008684:	60fb      	str	r3, [r7, #12]
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2b07      	cmp	r3, #7
 800868a:	d9e7      	bls.n	800865c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800868c:	bf00      	nop
 800868e:	bf00      	nop
 8008690:	3714      	adds	r7, #20
 8008692:	46bd      	mov	sp, r7
 8008694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008698:	4770      	bx	lr
 800869a:	bf00      	nop
 800869c:	20000e0c 	.word	0x20000e0c

080086a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b086      	sub	sp, #24
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	60f8      	str	r0, [r7, #12]
 80086a8:	60b9      	str	r1, [r7, #8]
 80086aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80086b0:	f001 fe50 	bl	800a354 <vPortEnterCritical>
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80086ba:	b25b      	sxtb	r3, r3
 80086bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086c0:	d103      	bne.n	80086ca <vQueueWaitForMessageRestricted+0x2a>
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	2200      	movs	r2, #0
 80086c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086d0:	b25b      	sxtb	r3, r3
 80086d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086d6:	d103      	bne.n	80086e0 <vQueueWaitForMessageRestricted+0x40>
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	2200      	movs	r2, #0
 80086dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80086e0:	f001 fe68 	bl	800a3b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d106      	bne.n	80086fa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	3324      	adds	r3, #36	; 0x24
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	68b9      	ldr	r1, [r7, #8]
 80086f4:	4618      	mov	r0, r3
 80086f6:	f000 fe33 	bl	8009360 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80086fa:	6978      	ldr	r0, [r7, #20]
 80086fc:	f7ff ff26 	bl	800854c <prvUnlockQueue>
	}
 8008700:	bf00      	nop
 8008702:	3718      	adds	r7, #24
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}

08008708 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008708:	b580      	push	{r7, lr}
 800870a:	b08e      	sub	sp, #56	; 0x38
 800870c:	af04      	add	r7, sp, #16
 800870e:	60f8      	str	r0, [r7, #12]
 8008710:	60b9      	str	r1, [r7, #8]
 8008712:	607a      	str	r2, [r7, #4]
 8008714:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008718:	2b00      	cmp	r3, #0
 800871a:	d10a      	bne.n	8008732 <xTaskCreateStatic+0x2a>
	__asm volatile
 800871c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008720:	f383 8811 	msr	BASEPRI, r3
 8008724:	f3bf 8f6f 	isb	sy
 8008728:	f3bf 8f4f 	dsb	sy
 800872c:	623b      	str	r3, [r7, #32]
}
 800872e:	bf00      	nop
 8008730:	e7fe      	b.n	8008730 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008734:	2b00      	cmp	r3, #0
 8008736:	d10a      	bne.n	800874e <xTaskCreateStatic+0x46>
	__asm volatile
 8008738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800873c:	f383 8811 	msr	BASEPRI, r3
 8008740:	f3bf 8f6f 	isb	sy
 8008744:	f3bf 8f4f 	dsb	sy
 8008748:	61fb      	str	r3, [r7, #28]
}
 800874a:	bf00      	nop
 800874c:	e7fe      	b.n	800874c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800874e:	23ac      	movs	r3, #172	; 0xac
 8008750:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	2bac      	cmp	r3, #172	; 0xac
 8008756:	d00a      	beq.n	800876e <xTaskCreateStatic+0x66>
	__asm volatile
 8008758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800875c:	f383 8811 	msr	BASEPRI, r3
 8008760:	f3bf 8f6f 	isb	sy
 8008764:	f3bf 8f4f 	dsb	sy
 8008768:	61bb      	str	r3, [r7, #24]
}
 800876a:	bf00      	nop
 800876c:	e7fe      	b.n	800876c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800876e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008772:	2b00      	cmp	r3, #0
 8008774:	d01e      	beq.n	80087b4 <xTaskCreateStatic+0xac>
 8008776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008778:	2b00      	cmp	r3, #0
 800877a:	d01b      	beq.n	80087b4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800877c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800877e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008782:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008784:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008788:	2202      	movs	r2, #2
 800878a:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800878e:	2300      	movs	r3, #0
 8008790:	9303      	str	r3, [sp, #12]
 8008792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008794:	9302      	str	r3, [sp, #8]
 8008796:	f107 0314 	add.w	r3, r7, #20
 800879a:	9301      	str	r3, [sp, #4]
 800879c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800879e:	9300      	str	r3, [sp, #0]
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	68b9      	ldr	r1, [r7, #8]
 80087a6:	68f8      	ldr	r0, [r7, #12]
 80087a8:	f000 f850 	bl	800884c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80087ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80087ae:	f000 f903 	bl	80089b8 <prvAddNewTaskToReadyList>
 80087b2:	e001      	b.n	80087b8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80087b4:	2300      	movs	r3, #0
 80087b6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80087b8:	697b      	ldr	r3, [r7, #20]
	}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3728      	adds	r7, #40	; 0x28
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}

080087c2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80087c2:	b580      	push	{r7, lr}
 80087c4:	b08c      	sub	sp, #48	; 0x30
 80087c6:	af04      	add	r7, sp, #16
 80087c8:	60f8      	str	r0, [r7, #12]
 80087ca:	60b9      	str	r1, [r7, #8]
 80087cc:	603b      	str	r3, [r7, #0]
 80087ce:	4613      	mov	r3, r2
 80087d0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80087d2:	88fb      	ldrh	r3, [r7, #6]
 80087d4:	009b      	lsls	r3, r3, #2
 80087d6:	4618      	mov	r0, r3
 80087d8:	f001 fede 	bl	800a598 <pvPortMalloc>
 80087dc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d00e      	beq.n	8008802 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80087e4:	20ac      	movs	r0, #172	; 0xac
 80087e6:	f001 fed7 	bl	800a598 <pvPortMalloc>
 80087ea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80087ec:	69fb      	ldr	r3, [r7, #28]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d003      	beq.n	80087fa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80087f2:	69fb      	ldr	r3, [r7, #28]
 80087f4:	697a      	ldr	r2, [r7, #20]
 80087f6:	631a      	str	r2, [r3, #48]	; 0x30
 80087f8:	e005      	b.n	8008806 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80087fa:	6978      	ldr	r0, [r7, #20]
 80087fc:	f001 ff98 	bl	800a730 <vPortFree>
 8008800:	e001      	b.n	8008806 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008802:	2300      	movs	r3, #0
 8008804:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008806:	69fb      	ldr	r3, [r7, #28]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d017      	beq.n	800883c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800880c:	69fb      	ldr	r3, [r7, #28]
 800880e:	2200      	movs	r2, #0
 8008810:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008814:	88fa      	ldrh	r2, [r7, #6]
 8008816:	2300      	movs	r3, #0
 8008818:	9303      	str	r3, [sp, #12]
 800881a:	69fb      	ldr	r3, [r7, #28]
 800881c:	9302      	str	r3, [sp, #8]
 800881e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008820:	9301      	str	r3, [sp, #4]
 8008822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008824:	9300      	str	r3, [sp, #0]
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	68b9      	ldr	r1, [r7, #8]
 800882a:	68f8      	ldr	r0, [r7, #12]
 800882c:	f000 f80e 	bl	800884c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008830:	69f8      	ldr	r0, [r7, #28]
 8008832:	f000 f8c1 	bl	80089b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008836:	2301      	movs	r3, #1
 8008838:	61bb      	str	r3, [r7, #24]
 800883a:	e002      	b.n	8008842 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800883c:	f04f 33ff 	mov.w	r3, #4294967295
 8008840:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008842:	69bb      	ldr	r3, [r7, #24]
	}
 8008844:	4618      	mov	r0, r3
 8008846:	3720      	adds	r7, #32
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}

0800884c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b088      	sub	sp, #32
 8008850:	af00      	add	r7, sp, #0
 8008852:	60f8      	str	r0, [r7, #12]
 8008854:	60b9      	str	r1, [r7, #8]
 8008856:	607a      	str	r2, [r7, #4]
 8008858:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800885a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800885c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	461a      	mov	r2, r3
 8008864:	21a5      	movs	r1, #165	; 0xa5
 8008866:	f002 feef 	bl	800b648 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800886a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800886c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008874:	3b01      	subs	r3, #1
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	4413      	add	r3, r2
 800887a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800887c:	69bb      	ldr	r3, [r7, #24]
 800887e:	f023 0307 	bic.w	r3, r3, #7
 8008882:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008884:	69bb      	ldr	r3, [r7, #24]
 8008886:	f003 0307 	and.w	r3, r3, #7
 800888a:	2b00      	cmp	r3, #0
 800888c:	d00a      	beq.n	80088a4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800888e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008892:	f383 8811 	msr	BASEPRI, r3
 8008896:	f3bf 8f6f 	isb	sy
 800889a:	f3bf 8f4f 	dsb	sy
 800889e:	617b      	str	r3, [r7, #20]
}
 80088a0:	bf00      	nop
 80088a2:	e7fe      	b.n	80088a2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d01f      	beq.n	80088ea <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80088aa:	2300      	movs	r3, #0
 80088ac:	61fb      	str	r3, [r7, #28]
 80088ae:	e012      	b.n	80088d6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80088b0:	68ba      	ldr	r2, [r7, #8]
 80088b2:	69fb      	ldr	r3, [r7, #28]
 80088b4:	4413      	add	r3, r2
 80088b6:	7819      	ldrb	r1, [r3, #0]
 80088b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088ba:	69fb      	ldr	r3, [r7, #28]
 80088bc:	4413      	add	r3, r2
 80088be:	3334      	adds	r3, #52	; 0x34
 80088c0:	460a      	mov	r2, r1
 80088c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80088c4:	68ba      	ldr	r2, [r7, #8]
 80088c6:	69fb      	ldr	r3, [r7, #28]
 80088c8:	4413      	add	r3, r2
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d006      	beq.n	80088de <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80088d0:	69fb      	ldr	r3, [r7, #28]
 80088d2:	3301      	adds	r3, #1
 80088d4:	61fb      	str	r3, [r7, #28]
 80088d6:	69fb      	ldr	r3, [r7, #28]
 80088d8:	2b0f      	cmp	r3, #15
 80088da:	d9e9      	bls.n	80088b0 <prvInitialiseNewTask+0x64>
 80088dc:	e000      	b.n	80088e0 <prvInitialiseNewTask+0x94>
			{
				break;
 80088de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80088e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e2:	2200      	movs	r2, #0
 80088e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80088e8:	e003      	b.n	80088f2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80088ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ec:	2200      	movs	r2, #0
 80088ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80088f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f4:	2b37      	cmp	r3, #55	; 0x37
 80088f6:	d901      	bls.n	80088fc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80088f8:	2337      	movs	r3, #55	; 0x37
 80088fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80088fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008900:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008904:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008906:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800890a:	2200      	movs	r2, #0
 800890c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800890e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008910:	3304      	adds	r3, #4
 8008912:	4618      	mov	r0, r3
 8008914:	f7ff f978 	bl	8007c08 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800891a:	3318      	adds	r3, #24
 800891c:	4618      	mov	r0, r3
 800891e:	f7ff f973 	bl	8007c08 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008926:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800892a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800892e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008930:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008934:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008936:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
	{
		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 8008938:	2300      	movs	r3, #0
 800893a:	61fb      	str	r3, [r7, #28]
 800893c:	e009      	b.n	8008952 <prvInitialiseNewTask+0x106>
		{
			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 800893e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008940:	69fb      	ldr	r3, [r7, #28]
 8008942:	3314      	adds	r3, #20
 8008944:	009b      	lsls	r3, r3, #2
 8008946:	4413      	add	r3, r2
 8008948:	2200      	movs	r2, #0
 800894a:	605a      	str	r2, [r3, #4]
		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 800894c:	69fb      	ldr	r3, [r7, #28]
 800894e:	3301      	adds	r3, #1
 8008950:	61fb      	str	r3, [r7, #28]
 8008952:	69fb      	ldr	r3, [r7, #28]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d0f2      	beq.n	800893e <prvInitialiseNewTask+0xf2>
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800895a:	2200      	movs	r2, #0
 800895c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008962:	2200      	movs	r2, #0
 8008964:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800896a:	3358      	adds	r3, #88	; 0x58
 800896c:	224c      	movs	r2, #76	; 0x4c
 800896e:	2100      	movs	r1, #0
 8008970:	4618      	mov	r0, r3
 8008972:	f002 fe69 	bl	800b648 <memset>
 8008976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008978:	4a0c      	ldr	r2, [pc, #48]	; (80089ac <prvInitialiseNewTask+0x160>)
 800897a:	65da      	str	r2, [r3, #92]	; 0x5c
 800897c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800897e:	4a0c      	ldr	r2, [pc, #48]	; (80089b0 <prvInitialiseNewTask+0x164>)
 8008980:	661a      	str	r2, [r3, #96]	; 0x60
 8008982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008984:	4a0b      	ldr	r2, [pc, #44]	; (80089b4 <prvInitialiseNewTask+0x168>)
 8008986:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008988:	683a      	ldr	r2, [r7, #0]
 800898a:	68f9      	ldr	r1, [r7, #12]
 800898c:	69b8      	ldr	r0, [r7, #24]
 800898e:	f001 fbb3 	bl	800a0f8 <pxPortInitialiseStack>
 8008992:	4602      	mov	r2, r0
 8008994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008996:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800899a:	2b00      	cmp	r3, #0
 800899c:	d002      	beq.n	80089a4 <prvInitialiseNewTask+0x158>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800899e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089a2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80089a4:	bf00      	nop
 80089a6:	3720      	adds	r7, #32
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}
 80089ac:	200050a0 	.word	0x200050a0
 80089b0:	20005108 	.word	0x20005108
 80089b4:	20005170 	.word	0x20005170

080089b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80089c0:	f001 fcc8 	bl	800a354 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80089c4:	4b2d      	ldr	r3, [pc, #180]	; (8008a7c <prvAddNewTaskToReadyList+0xc4>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	3301      	adds	r3, #1
 80089ca:	4a2c      	ldr	r2, [pc, #176]	; (8008a7c <prvAddNewTaskToReadyList+0xc4>)
 80089cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80089ce:	4b2c      	ldr	r3, [pc, #176]	; (8008a80 <prvAddNewTaskToReadyList+0xc8>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d109      	bne.n	80089ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80089d6:	4a2a      	ldr	r2, [pc, #168]	; (8008a80 <prvAddNewTaskToReadyList+0xc8>)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80089dc:	4b27      	ldr	r3, [pc, #156]	; (8008a7c <prvAddNewTaskToReadyList+0xc4>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	d110      	bne.n	8008a06 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80089e4:	f000 fe3c 	bl	8009660 <prvInitialiseTaskLists>
 80089e8:	e00d      	b.n	8008a06 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80089ea:	4b26      	ldr	r3, [pc, #152]	; (8008a84 <prvAddNewTaskToReadyList+0xcc>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d109      	bne.n	8008a06 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80089f2:	4b23      	ldr	r3, [pc, #140]	; (8008a80 <prvAddNewTaskToReadyList+0xc8>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d802      	bhi.n	8008a06 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008a00:	4a1f      	ldr	r2, [pc, #124]	; (8008a80 <prvAddNewTaskToReadyList+0xc8>)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008a06:	4b20      	ldr	r3, [pc, #128]	; (8008a88 <prvAddNewTaskToReadyList+0xd0>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	4a1e      	ldr	r2, [pc, #120]	; (8008a88 <prvAddNewTaskToReadyList+0xd0>)
 8008a0e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008a10:	4b1d      	ldr	r3, [pc, #116]	; (8008a88 <prvAddNewTaskToReadyList+0xd0>)
 8008a12:	681a      	ldr	r2, [r3, #0]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a1c:	4b1b      	ldr	r3, [pc, #108]	; (8008a8c <prvAddNewTaskToReadyList+0xd4>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d903      	bls.n	8008a2c <prvAddNewTaskToReadyList+0x74>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a28:	4a18      	ldr	r2, [pc, #96]	; (8008a8c <prvAddNewTaskToReadyList+0xd4>)
 8008a2a:	6013      	str	r3, [r2, #0]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a30:	4613      	mov	r3, r2
 8008a32:	009b      	lsls	r3, r3, #2
 8008a34:	4413      	add	r3, r2
 8008a36:	009b      	lsls	r3, r3, #2
 8008a38:	4a15      	ldr	r2, [pc, #84]	; (8008a90 <prvAddNewTaskToReadyList+0xd8>)
 8008a3a:	441a      	add	r2, r3
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	3304      	adds	r3, #4
 8008a40:	4619      	mov	r1, r3
 8008a42:	4610      	mov	r0, r2
 8008a44:	f7ff f8ed 	bl	8007c22 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008a48:	f001 fcb4 	bl	800a3b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008a4c:	4b0d      	ldr	r3, [pc, #52]	; (8008a84 <prvAddNewTaskToReadyList+0xcc>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d00e      	beq.n	8008a72 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008a54:	4b0a      	ldr	r3, [pc, #40]	; (8008a80 <prvAddNewTaskToReadyList+0xc8>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	d207      	bcs.n	8008a72 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008a62:	4b0c      	ldr	r3, [pc, #48]	; (8008a94 <prvAddNewTaskToReadyList+0xdc>)
 8008a64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a68:	601a      	str	r2, [r3, #0]
 8008a6a:	f3bf 8f4f 	dsb	sy
 8008a6e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a72:	bf00      	nop
 8008a74:	3708      	adds	r7, #8
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
 8008a7a:	bf00      	nop
 8008a7c:	20001320 	.word	0x20001320
 8008a80:	20000e4c 	.word	0x20000e4c
 8008a84:	2000132c 	.word	0x2000132c
 8008a88:	2000133c 	.word	0x2000133c
 8008a8c:	20001328 	.word	0x20001328
 8008a90:	20000e50 	.word	0x20000e50
 8008a94:	e000ed04 	.word	0xe000ed04

08008a98 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b084      	sub	sp, #16
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008aa0:	f001 fc58 	bl	800a354 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d102      	bne.n	8008ab0 <vTaskDelete+0x18>
 8008aaa:	4b2c      	ldr	r3, [pc, #176]	; (8008b5c <vTaskDelete+0xc4>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	e000      	b.n	8008ab2 <vTaskDelete+0x1a>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	3304      	adds	r3, #4
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f7ff f90f 	bl	8007cdc <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d004      	beq.n	8008ad0 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	3318      	adds	r3, #24
 8008aca:	4618      	mov	r0, r3
 8008acc:	f7ff f906 	bl	8007cdc <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8008ad0:	4b23      	ldr	r3, [pc, #140]	; (8008b60 <vTaskDelete+0xc8>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	4a22      	ldr	r2, [pc, #136]	; (8008b60 <vTaskDelete+0xc8>)
 8008ad8:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8008ada:	4b20      	ldr	r3, [pc, #128]	; (8008b5c <vTaskDelete+0xc4>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	68fa      	ldr	r2, [r7, #12]
 8008ae0:	429a      	cmp	r2, r3
 8008ae2:	d10b      	bne.n	8008afc <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	3304      	adds	r3, #4
 8008ae8:	4619      	mov	r1, r3
 8008aea:	481e      	ldr	r0, [pc, #120]	; (8008b64 <vTaskDelete+0xcc>)
 8008aec:	f7ff f899 	bl	8007c22 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8008af0:	4b1d      	ldr	r3, [pc, #116]	; (8008b68 <vTaskDelete+0xd0>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	3301      	adds	r3, #1
 8008af6:	4a1c      	ldr	r2, [pc, #112]	; (8008b68 <vTaskDelete+0xd0>)
 8008af8:	6013      	str	r3, [r2, #0]
 8008afa:	e009      	b.n	8008b10 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8008afc:	4b1b      	ldr	r3, [pc, #108]	; (8008b6c <vTaskDelete+0xd4>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	3b01      	subs	r3, #1
 8008b02:	4a1a      	ldr	r2, [pc, #104]	; (8008b6c <vTaskDelete+0xd4>)
 8008b04:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8008b06:	68f8      	ldr	r0, [r7, #12]
 8008b08:	f000 fe18 	bl	800973c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8008b0c:	f000 fe4a 	bl	80097a4 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8008b10:	f001 fc50 	bl	800a3b4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8008b14:	4b16      	ldr	r3, [pc, #88]	; (8008b70 <vTaskDelete+0xd8>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d01b      	beq.n	8008b54 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8008b1c:	4b0f      	ldr	r3, [pc, #60]	; (8008b5c <vTaskDelete+0xc4>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	68fa      	ldr	r2, [r7, #12]
 8008b22:	429a      	cmp	r2, r3
 8008b24:	d116      	bne.n	8008b54 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8008b26:	4b13      	ldr	r3, [pc, #76]	; (8008b74 <vTaskDelete+0xdc>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d00a      	beq.n	8008b44 <vTaskDelete+0xac>
	__asm volatile
 8008b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b32:	f383 8811 	msr	BASEPRI, r3
 8008b36:	f3bf 8f6f 	isb	sy
 8008b3a:	f3bf 8f4f 	dsb	sy
 8008b3e:	60bb      	str	r3, [r7, #8]
}
 8008b40:	bf00      	nop
 8008b42:	e7fe      	b.n	8008b42 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8008b44:	4b0c      	ldr	r3, [pc, #48]	; (8008b78 <vTaskDelete+0xe0>)
 8008b46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b4a:	601a      	str	r2, [r3, #0]
 8008b4c:	f3bf 8f4f 	dsb	sy
 8008b50:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008b54:	bf00      	nop
 8008b56:	3710      	adds	r7, #16
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}
 8008b5c:	20000e4c 	.word	0x20000e4c
 8008b60:	2000133c 	.word	0x2000133c
 8008b64:	200012f4 	.word	0x200012f4
 8008b68:	20001308 	.word	0x20001308
 8008b6c:	20001320 	.word	0x20001320
 8008b70:	2000132c 	.word	0x2000132c
 8008b74:	20001348 	.word	0x20001348
 8008b78:	e000ed04 	.word	0xe000ed04

08008b7c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b08a      	sub	sp, #40	; 0x28
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8008b86:	2300      	movs	r3, #0
 8008b88:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d10a      	bne.n	8008ba6 <vTaskDelayUntil+0x2a>
	__asm volatile
 8008b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b94:	f383 8811 	msr	BASEPRI, r3
 8008b98:	f3bf 8f6f 	isb	sy
 8008b9c:	f3bf 8f4f 	dsb	sy
 8008ba0:	617b      	str	r3, [r7, #20]
}
 8008ba2:	bf00      	nop
 8008ba4:	e7fe      	b.n	8008ba4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d10a      	bne.n	8008bc2 <vTaskDelayUntil+0x46>
	__asm volatile
 8008bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb0:	f383 8811 	msr	BASEPRI, r3
 8008bb4:	f3bf 8f6f 	isb	sy
 8008bb8:	f3bf 8f4f 	dsb	sy
 8008bbc:	613b      	str	r3, [r7, #16]
}
 8008bbe:	bf00      	nop
 8008bc0:	e7fe      	b.n	8008bc0 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8008bc2:	4b2a      	ldr	r3, [pc, #168]	; (8008c6c <vTaskDelayUntil+0xf0>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d00a      	beq.n	8008be0 <vTaskDelayUntil+0x64>
	__asm volatile
 8008bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bce:	f383 8811 	msr	BASEPRI, r3
 8008bd2:	f3bf 8f6f 	isb	sy
 8008bd6:	f3bf 8f4f 	dsb	sy
 8008bda:	60fb      	str	r3, [r7, #12]
}
 8008bdc:	bf00      	nop
 8008bde:	e7fe      	b.n	8008bde <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8008be0:	f000 f9c0 	bl	8008f64 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8008be4:	4b22      	ldr	r3, [pc, #136]	; (8008c70 <vTaskDelayUntil+0xf4>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	683a      	ldr	r2, [r7, #0]
 8008bf0:	4413      	add	r3, r2
 8008bf2:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	6a3a      	ldr	r2, [r7, #32]
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d20b      	bcs.n	8008c16 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	69fa      	ldr	r2, [r7, #28]
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d211      	bcs.n	8008c2c <vTaskDelayUntil+0xb0>
 8008c08:	69fa      	ldr	r2, [r7, #28]
 8008c0a:	6a3b      	ldr	r3, [r7, #32]
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d90d      	bls.n	8008c2c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8008c10:	2301      	movs	r3, #1
 8008c12:	627b      	str	r3, [r7, #36]	; 0x24
 8008c14:	e00a      	b.n	8008c2c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	69fa      	ldr	r2, [r7, #28]
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	d303      	bcc.n	8008c28 <vTaskDelayUntil+0xac>
 8008c20:	69fa      	ldr	r2, [r7, #28]
 8008c22:	6a3b      	ldr	r3, [r7, #32]
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d901      	bls.n	8008c2c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8008c28:	2301      	movs	r3, #1
 8008c2a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	69fa      	ldr	r2, [r7, #28]
 8008c30:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8008c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d006      	beq.n	8008c46 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8008c38:	69fa      	ldr	r2, [r7, #28]
 8008c3a:	6a3b      	ldr	r3, [r7, #32]
 8008c3c:	1ad3      	subs	r3, r2, r3
 8008c3e:	2100      	movs	r1, #0
 8008c40:	4618      	mov	r0, r3
 8008c42:	f000 feb7 	bl	80099b4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8008c46:	f000 f99b 	bl	8008f80 <xTaskResumeAll>
 8008c4a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008c4c:	69bb      	ldr	r3, [r7, #24]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d107      	bne.n	8008c62 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8008c52:	4b08      	ldr	r3, [pc, #32]	; (8008c74 <vTaskDelayUntil+0xf8>)
 8008c54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c58:	601a      	str	r2, [r3, #0]
 8008c5a:	f3bf 8f4f 	dsb	sy
 8008c5e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008c62:	bf00      	nop
 8008c64:	3728      	adds	r7, #40	; 0x28
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}
 8008c6a:	bf00      	nop
 8008c6c:	20001348 	.word	0x20001348
 8008c70:	20001324 	.word	0x20001324
 8008c74:	e000ed04 	.word	0xe000ed04

08008c78 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b084      	sub	sp, #16
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008c80:	f001 fb68 	bl	800a354 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d102      	bne.n	8008c90 <vTaskSuspend+0x18>
 8008c8a:	4b30      	ldr	r3, [pc, #192]	; (8008d4c <vTaskSuspend+0xd4>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	e000      	b.n	8008c92 <vTaskSuspend+0x1a>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	3304      	adds	r3, #4
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f7ff f81f 	bl	8007cdc <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d004      	beq.n	8008cb0 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	3318      	adds	r3, #24
 8008caa:	4618      	mov	r0, r3
 8008cac:	f7ff f816 	bl	8007cdc <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	3304      	adds	r3, #4
 8008cb4:	4619      	mov	r1, r3
 8008cb6:	4826      	ldr	r0, [pc, #152]	; (8008d50 <vTaskSuspend+0xd8>)
 8008cb8:	f7fe ffb3 	bl	8007c22 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8008cc2:	b2db      	uxtb	r3, r3
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d103      	bne.n	8008cd0 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8008cd0:	f001 fb70 	bl	800a3b4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8008cd4:	4b1f      	ldr	r3, [pc, #124]	; (8008d54 <vTaskSuspend+0xdc>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d005      	beq.n	8008ce8 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8008cdc:	f001 fb3a 	bl	800a354 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8008ce0:	f000 fd60 	bl	80097a4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8008ce4:	f001 fb66 	bl	800a3b4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8008ce8:	4b18      	ldr	r3, [pc, #96]	; (8008d4c <vTaskSuspend+0xd4>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	68fa      	ldr	r2, [r7, #12]
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d127      	bne.n	8008d42 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8008cf2:	4b18      	ldr	r3, [pc, #96]	; (8008d54 <vTaskSuspend+0xdc>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d017      	beq.n	8008d2a <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8008cfa:	4b17      	ldr	r3, [pc, #92]	; (8008d58 <vTaskSuspend+0xe0>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d00a      	beq.n	8008d18 <vTaskSuspend+0xa0>
	__asm volatile
 8008d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d06:	f383 8811 	msr	BASEPRI, r3
 8008d0a:	f3bf 8f6f 	isb	sy
 8008d0e:	f3bf 8f4f 	dsb	sy
 8008d12:	60bb      	str	r3, [r7, #8]
}
 8008d14:	bf00      	nop
 8008d16:	e7fe      	b.n	8008d16 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8008d18:	4b10      	ldr	r3, [pc, #64]	; (8008d5c <vTaskSuspend+0xe4>)
 8008d1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d1e:	601a      	str	r2, [r3, #0]
 8008d20:	f3bf 8f4f 	dsb	sy
 8008d24:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008d28:	e00b      	b.n	8008d42 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8008d2a:	4b09      	ldr	r3, [pc, #36]	; (8008d50 <vTaskSuspend+0xd8>)
 8008d2c:	681a      	ldr	r2, [r3, #0]
 8008d2e:	4b0c      	ldr	r3, [pc, #48]	; (8008d60 <vTaskSuspend+0xe8>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d103      	bne.n	8008d3e <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8008d36:	4b05      	ldr	r3, [pc, #20]	; (8008d4c <vTaskSuspend+0xd4>)
 8008d38:	2200      	movs	r2, #0
 8008d3a:	601a      	str	r2, [r3, #0]
	}
 8008d3c:	e001      	b.n	8008d42 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8008d3e:	f000 fa87 	bl	8009250 <vTaskSwitchContext>
	}
 8008d42:	bf00      	nop
 8008d44:	3710      	adds	r7, #16
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	bf00      	nop
 8008d4c:	20000e4c 	.word	0x20000e4c
 8008d50:	2000130c 	.word	0x2000130c
 8008d54:	2000132c 	.word	0x2000132c
 8008d58:	20001348 	.word	0x20001348
 8008d5c:	e000ed04 	.word	0xe000ed04
 8008d60:	20001320 	.word	0x20001320

08008d64 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8008d64:	b480      	push	{r7}
 8008d66:	b087      	sub	sp, #28
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d10a      	bne.n	8008d90 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8008d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d7e:	f383 8811 	msr	BASEPRI, r3
 8008d82:	f3bf 8f6f 	isb	sy
 8008d86:	f3bf 8f4f 	dsb	sy
 8008d8a:	60fb      	str	r3, [r7, #12]
}
 8008d8c:	bf00      	nop
 8008d8e:	e7fe      	b.n	8008d8e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	695b      	ldr	r3, [r3, #20]
 8008d94:	4a0a      	ldr	r2, [pc, #40]	; (8008dc0 <prvTaskIsTaskSuspended+0x5c>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d10a      	bne.n	8008db0 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d9e:	4a09      	ldr	r2, [pc, #36]	; (8008dc4 <prvTaskIsTaskSuspended+0x60>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d005      	beq.n	8008db0 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d101      	bne.n	8008db0 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8008dac:	2301      	movs	r3, #1
 8008dae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008db0:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8008db2:	4618      	mov	r0, r3
 8008db4:	371c      	adds	r7, #28
 8008db6:	46bd      	mov	sp, r7
 8008db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbc:	4770      	bx	lr
 8008dbe:	bf00      	nop
 8008dc0:	2000130c 	.word	0x2000130c
 8008dc4:	200012e0 	.word	0x200012e0

08008dc8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b084      	sub	sp, #16
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d10a      	bne.n	8008df0 <vTaskResume+0x28>
	__asm volatile
 8008dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dde:	f383 8811 	msr	BASEPRI, r3
 8008de2:	f3bf 8f6f 	isb	sy
 8008de6:	f3bf 8f4f 	dsb	sy
 8008dea:	60bb      	str	r3, [r7, #8]
}
 8008dec:	bf00      	nop
 8008dee:	e7fe      	b.n	8008dee <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8008df0:	4b20      	ldr	r3, [pc, #128]	; (8008e74 <vTaskResume+0xac>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	68fa      	ldr	r2, [r7, #12]
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d038      	beq.n	8008e6c <vTaskResume+0xa4>
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d035      	beq.n	8008e6c <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8008e00:	f001 faa8 	bl	800a354 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8008e04:	68f8      	ldr	r0, [r7, #12]
 8008e06:	f7ff ffad 	bl	8008d64 <prvTaskIsTaskSuspended>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d02b      	beq.n	8008e68 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	3304      	adds	r3, #4
 8008e14:	4618      	mov	r0, r3
 8008e16:	f7fe ff61 	bl	8007cdc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e1e:	4b16      	ldr	r3, [pc, #88]	; (8008e78 <vTaskResume+0xb0>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d903      	bls.n	8008e2e <vTaskResume+0x66>
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e2a:	4a13      	ldr	r2, [pc, #76]	; (8008e78 <vTaskResume+0xb0>)
 8008e2c:	6013      	str	r3, [r2, #0]
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e32:	4613      	mov	r3, r2
 8008e34:	009b      	lsls	r3, r3, #2
 8008e36:	4413      	add	r3, r2
 8008e38:	009b      	lsls	r3, r3, #2
 8008e3a:	4a10      	ldr	r2, [pc, #64]	; (8008e7c <vTaskResume+0xb4>)
 8008e3c:	441a      	add	r2, r3
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	3304      	adds	r3, #4
 8008e42:	4619      	mov	r1, r3
 8008e44:	4610      	mov	r0, r2
 8008e46:	f7fe feec 	bl	8007c22 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e4e:	4b09      	ldr	r3, [pc, #36]	; (8008e74 <vTaskResume+0xac>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e54:	429a      	cmp	r2, r3
 8008e56:	d307      	bcc.n	8008e68 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8008e58:	4b09      	ldr	r3, [pc, #36]	; (8008e80 <vTaskResume+0xb8>)
 8008e5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e5e:	601a      	str	r2, [r3, #0]
 8008e60:	f3bf 8f4f 	dsb	sy
 8008e64:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8008e68:	f001 faa4 	bl	800a3b4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008e6c:	bf00      	nop
 8008e6e:	3710      	adds	r7, #16
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}
 8008e74:	20000e4c 	.word	0x20000e4c
 8008e78:	20001328 	.word	0x20001328
 8008e7c:	20000e50 	.word	0x20000e50
 8008e80:	e000ed04 	.word	0xe000ed04

08008e84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b08a      	sub	sp, #40	; 0x28
 8008e88:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008e92:	463a      	mov	r2, r7
 8008e94:	1d39      	adds	r1, r7, #4
 8008e96:	f107 0308 	add.w	r3, r7, #8
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f7fe fe60 	bl	8007b60 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008ea0:	6839      	ldr	r1, [r7, #0]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	68ba      	ldr	r2, [r7, #8]
 8008ea6:	9202      	str	r2, [sp, #8]
 8008ea8:	9301      	str	r3, [sp, #4]
 8008eaa:	2300      	movs	r3, #0
 8008eac:	9300      	str	r3, [sp, #0]
 8008eae:	2300      	movs	r3, #0
 8008eb0:	460a      	mov	r2, r1
 8008eb2:	4924      	ldr	r1, [pc, #144]	; (8008f44 <vTaskStartScheduler+0xc0>)
 8008eb4:	4824      	ldr	r0, [pc, #144]	; (8008f48 <vTaskStartScheduler+0xc4>)
 8008eb6:	f7ff fc27 	bl	8008708 <xTaskCreateStatic>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	4a23      	ldr	r2, [pc, #140]	; (8008f4c <vTaskStartScheduler+0xc8>)
 8008ebe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008ec0:	4b22      	ldr	r3, [pc, #136]	; (8008f4c <vTaskStartScheduler+0xc8>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d002      	beq.n	8008ece <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	617b      	str	r3, [r7, #20]
 8008ecc:	e001      	b.n	8008ed2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d102      	bne.n	8008ede <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008ed8:	f000 fdc0 	bl	8009a5c <xTimerCreateTimerTask>
 8008edc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	2b01      	cmp	r3, #1
 8008ee2:	d11b      	bne.n	8008f1c <vTaskStartScheduler+0x98>
	__asm volatile
 8008ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee8:	f383 8811 	msr	BASEPRI, r3
 8008eec:	f3bf 8f6f 	isb	sy
 8008ef0:	f3bf 8f4f 	dsb	sy
 8008ef4:	613b      	str	r3, [r7, #16]
}
 8008ef6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008ef8:	4b15      	ldr	r3, [pc, #84]	; (8008f50 <vTaskStartScheduler+0xcc>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	3358      	adds	r3, #88	; 0x58
 8008efe:	4a15      	ldr	r2, [pc, #84]	; (8008f54 <vTaskStartScheduler+0xd0>)
 8008f00:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008f02:	4b15      	ldr	r3, [pc, #84]	; (8008f58 <vTaskStartScheduler+0xd4>)
 8008f04:	f04f 32ff 	mov.w	r2, #4294967295
 8008f08:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008f0a:	4b14      	ldr	r3, [pc, #80]	; (8008f5c <vTaskStartScheduler+0xd8>)
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008f10:	4b13      	ldr	r3, [pc, #76]	; (8008f60 <vTaskStartScheduler+0xdc>)
 8008f12:	2200      	movs	r2, #0
 8008f14:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008f16:	f001 f97b 	bl	800a210 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008f1a:	e00e      	b.n	8008f3a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f22:	d10a      	bne.n	8008f3a <vTaskStartScheduler+0xb6>
	__asm volatile
 8008f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f28:	f383 8811 	msr	BASEPRI, r3
 8008f2c:	f3bf 8f6f 	isb	sy
 8008f30:	f3bf 8f4f 	dsb	sy
 8008f34:	60fb      	str	r3, [r7, #12]
}
 8008f36:	bf00      	nop
 8008f38:	e7fe      	b.n	8008f38 <vTaskStartScheduler+0xb4>
}
 8008f3a:	bf00      	nop
 8008f3c:	3718      	adds	r7, #24
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}
 8008f42:	bf00      	nop
 8008f44:	0800d5c0 	.word	0x0800d5c0
 8008f48:	08009589 	.word	0x08009589
 8008f4c:	20001344 	.word	0x20001344
 8008f50:	20000e4c 	.word	0x20000e4c
 8008f54:	20000068 	.word	0x20000068
 8008f58:	20001340 	.word	0x20001340
 8008f5c:	2000132c 	.word	0x2000132c
 8008f60:	20001324 	.word	0x20001324

08008f64 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008f64:	b480      	push	{r7}
 8008f66:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008f68:	4b04      	ldr	r3, [pc, #16]	; (8008f7c <vTaskSuspendAll+0x18>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	3301      	adds	r3, #1
 8008f6e:	4a03      	ldr	r2, [pc, #12]	; (8008f7c <vTaskSuspendAll+0x18>)
 8008f70:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008f72:	bf00      	nop
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr
 8008f7c:	20001348 	.word	0x20001348

08008f80 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b084      	sub	sp, #16
 8008f84:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008f86:	2300      	movs	r3, #0
 8008f88:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008f8e:	4b42      	ldr	r3, [pc, #264]	; (8009098 <xTaskResumeAll+0x118>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d10a      	bne.n	8008fac <xTaskResumeAll+0x2c>
	__asm volatile
 8008f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f9a:	f383 8811 	msr	BASEPRI, r3
 8008f9e:	f3bf 8f6f 	isb	sy
 8008fa2:	f3bf 8f4f 	dsb	sy
 8008fa6:	603b      	str	r3, [r7, #0]
}
 8008fa8:	bf00      	nop
 8008faa:	e7fe      	b.n	8008faa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008fac:	f001 f9d2 	bl	800a354 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008fb0:	4b39      	ldr	r3, [pc, #228]	; (8009098 <xTaskResumeAll+0x118>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	3b01      	subs	r3, #1
 8008fb6:	4a38      	ldr	r2, [pc, #224]	; (8009098 <xTaskResumeAll+0x118>)
 8008fb8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fba:	4b37      	ldr	r3, [pc, #220]	; (8009098 <xTaskResumeAll+0x118>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d162      	bne.n	8009088 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008fc2:	4b36      	ldr	r3, [pc, #216]	; (800909c <xTaskResumeAll+0x11c>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d05e      	beq.n	8009088 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008fca:	e02f      	b.n	800902c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fcc:	4b34      	ldr	r3, [pc, #208]	; (80090a0 <xTaskResumeAll+0x120>)
 8008fce:	68db      	ldr	r3, [r3, #12]
 8008fd0:	68db      	ldr	r3, [r3, #12]
 8008fd2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	3318      	adds	r3, #24
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f7fe fe7f 	bl	8007cdc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	3304      	adds	r3, #4
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f7fe fe7a 	bl	8007cdc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fec:	4b2d      	ldr	r3, [pc, #180]	; (80090a4 <xTaskResumeAll+0x124>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d903      	bls.n	8008ffc <xTaskResumeAll+0x7c>
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff8:	4a2a      	ldr	r2, [pc, #168]	; (80090a4 <xTaskResumeAll+0x124>)
 8008ffa:	6013      	str	r3, [r2, #0]
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009000:	4613      	mov	r3, r2
 8009002:	009b      	lsls	r3, r3, #2
 8009004:	4413      	add	r3, r2
 8009006:	009b      	lsls	r3, r3, #2
 8009008:	4a27      	ldr	r2, [pc, #156]	; (80090a8 <xTaskResumeAll+0x128>)
 800900a:	441a      	add	r2, r3
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	3304      	adds	r3, #4
 8009010:	4619      	mov	r1, r3
 8009012:	4610      	mov	r0, r2
 8009014:	f7fe fe05 	bl	8007c22 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800901c:	4b23      	ldr	r3, [pc, #140]	; (80090ac <xTaskResumeAll+0x12c>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009022:	429a      	cmp	r2, r3
 8009024:	d302      	bcc.n	800902c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009026:	4b22      	ldr	r3, [pc, #136]	; (80090b0 <xTaskResumeAll+0x130>)
 8009028:	2201      	movs	r2, #1
 800902a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800902c:	4b1c      	ldr	r3, [pc, #112]	; (80090a0 <xTaskResumeAll+0x120>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d1cb      	bne.n	8008fcc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d001      	beq.n	800903e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800903a:	f000 fbb3 	bl	80097a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800903e:	4b1d      	ldr	r3, [pc, #116]	; (80090b4 <xTaskResumeAll+0x134>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d010      	beq.n	800906c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800904a:	f000 f847 	bl	80090dc <xTaskIncrementTick>
 800904e:	4603      	mov	r3, r0
 8009050:	2b00      	cmp	r3, #0
 8009052:	d002      	beq.n	800905a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009054:	4b16      	ldr	r3, [pc, #88]	; (80090b0 <xTaskResumeAll+0x130>)
 8009056:	2201      	movs	r2, #1
 8009058:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	3b01      	subs	r3, #1
 800905e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d1f1      	bne.n	800904a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009066:	4b13      	ldr	r3, [pc, #76]	; (80090b4 <xTaskResumeAll+0x134>)
 8009068:	2200      	movs	r2, #0
 800906a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800906c:	4b10      	ldr	r3, [pc, #64]	; (80090b0 <xTaskResumeAll+0x130>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d009      	beq.n	8009088 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009074:	2301      	movs	r3, #1
 8009076:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009078:	4b0f      	ldr	r3, [pc, #60]	; (80090b8 <xTaskResumeAll+0x138>)
 800907a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800907e:	601a      	str	r2, [r3, #0]
 8009080:	f3bf 8f4f 	dsb	sy
 8009084:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009088:	f001 f994 	bl	800a3b4 <vPortExitCritical>

	return xAlreadyYielded;
 800908c:	68bb      	ldr	r3, [r7, #8]
}
 800908e:	4618      	mov	r0, r3
 8009090:	3710      	adds	r7, #16
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
 8009096:	bf00      	nop
 8009098:	20001348 	.word	0x20001348
 800909c:	20001320 	.word	0x20001320
 80090a0:	200012e0 	.word	0x200012e0
 80090a4:	20001328 	.word	0x20001328
 80090a8:	20000e50 	.word	0x20000e50
 80090ac:	20000e4c 	.word	0x20000e4c
 80090b0:	20001334 	.word	0x20001334
 80090b4:	20001330 	.word	0x20001330
 80090b8:	e000ed04 	.word	0xe000ed04

080090bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80090bc:	b480      	push	{r7}
 80090be:	b083      	sub	sp, #12
 80090c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80090c2:	4b05      	ldr	r3, [pc, #20]	; (80090d8 <xTaskGetTickCount+0x1c>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80090c8:	687b      	ldr	r3, [r7, #4]
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	370c      	adds	r7, #12
 80090ce:	46bd      	mov	sp, r7
 80090d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d4:	4770      	bx	lr
 80090d6:	bf00      	nop
 80090d8:	20001324 	.word	0x20001324

080090dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b086      	sub	sp, #24
 80090e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80090e2:	2300      	movs	r3, #0
 80090e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090e6:	4b4f      	ldr	r3, [pc, #316]	; (8009224 <xTaskIncrementTick+0x148>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	f040 808f 	bne.w	800920e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80090f0:	4b4d      	ldr	r3, [pc, #308]	; (8009228 <xTaskIncrementTick+0x14c>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	3301      	adds	r3, #1
 80090f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80090f8:	4a4b      	ldr	r2, [pc, #300]	; (8009228 <xTaskIncrementTick+0x14c>)
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d120      	bne.n	8009146 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009104:	4b49      	ldr	r3, [pc, #292]	; (800922c <xTaskIncrementTick+0x150>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d00a      	beq.n	8009124 <xTaskIncrementTick+0x48>
	__asm volatile
 800910e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009112:	f383 8811 	msr	BASEPRI, r3
 8009116:	f3bf 8f6f 	isb	sy
 800911a:	f3bf 8f4f 	dsb	sy
 800911e:	603b      	str	r3, [r7, #0]
}
 8009120:	bf00      	nop
 8009122:	e7fe      	b.n	8009122 <xTaskIncrementTick+0x46>
 8009124:	4b41      	ldr	r3, [pc, #260]	; (800922c <xTaskIncrementTick+0x150>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	60fb      	str	r3, [r7, #12]
 800912a:	4b41      	ldr	r3, [pc, #260]	; (8009230 <xTaskIncrementTick+0x154>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4a3f      	ldr	r2, [pc, #252]	; (800922c <xTaskIncrementTick+0x150>)
 8009130:	6013      	str	r3, [r2, #0]
 8009132:	4a3f      	ldr	r2, [pc, #252]	; (8009230 <xTaskIncrementTick+0x154>)
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	6013      	str	r3, [r2, #0]
 8009138:	4b3e      	ldr	r3, [pc, #248]	; (8009234 <xTaskIncrementTick+0x158>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	3301      	adds	r3, #1
 800913e:	4a3d      	ldr	r2, [pc, #244]	; (8009234 <xTaskIncrementTick+0x158>)
 8009140:	6013      	str	r3, [r2, #0]
 8009142:	f000 fb2f 	bl	80097a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009146:	4b3c      	ldr	r3, [pc, #240]	; (8009238 <xTaskIncrementTick+0x15c>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	693a      	ldr	r2, [r7, #16]
 800914c:	429a      	cmp	r2, r3
 800914e:	d349      	bcc.n	80091e4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009150:	4b36      	ldr	r3, [pc, #216]	; (800922c <xTaskIncrementTick+0x150>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d104      	bne.n	8009164 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800915a:	4b37      	ldr	r3, [pc, #220]	; (8009238 <xTaskIncrementTick+0x15c>)
 800915c:	f04f 32ff 	mov.w	r2, #4294967295
 8009160:	601a      	str	r2, [r3, #0]
					break;
 8009162:	e03f      	b.n	80091e4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009164:	4b31      	ldr	r3, [pc, #196]	; (800922c <xTaskIncrementTick+0x150>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	68db      	ldr	r3, [r3, #12]
 800916a:	68db      	ldr	r3, [r3, #12]
 800916c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009174:	693a      	ldr	r2, [r7, #16]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	429a      	cmp	r2, r3
 800917a:	d203      	bcs.n	8009184 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800917c:	4a2e      	ldr	r2, [pc, #184]	; (8009238 <xTaskIncrementTick+0x15c>)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009182:	e02f      	b.n	80091e4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	3304      	adds	r3, #4
 8009188:	4618      	mov	r0, r3
 800918a:	f7fe fda7 	bl	8007cdc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009192:	2b00      	cmp	r3, #0
 8009194:	d004      	beq.n	80091a0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	3318      	adds	r3, #24
 800919a:	4618      	mov	r0, r3
 800919c:	f7fe fd9e 	bl	8007cdc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091a4:	4b25      	ldr	r3, [pc, #148]	; (800923c <xTaskIncrementTick+0x160>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	429a      	cmp	r2, r3
 80091aa:	d903      	bls.n	80091b4 <xTaskIncrementTick+0xd8>
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091b0:	4a22      	ldr	r2, [pc, #136]	; (800923c <xTaskIncrementTick+0x160>)
 80091b2:	6013      	str	r3, [r2, #0]
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091b8:	4613      	mov	r3, r2
 80091ba:	009b      	lsls	r3, r3, #2
 80091bc:	4413      	add	r3, r2
 80091be:	009b      	lsls	r3, r3, #2
 80091c0:	4a1f      	ldr	r2, [pc, #124]	; (8009240 <xTaskIncrementTick+0x164>)
 80091c2:	441a      	add	r2, r3
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	3304      	adds	r3, #4
 80091c8:	4619      	mov	r1, r3
 80091ca:	4610      	mov	r0, r2
 80091cc:	f7fe fd29 	bl	8007c22 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091d4:	4b1b      	ldr	r3, [pc, #108]	; (8009244 <xTaskIncrementTick+0x168>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091da:	429a      	cmp	r2, r3
 80091dc:	d3b8      	bcc.n	8009150 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80091de:	2301      	movs	r3, #1
 80091e0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091e2:	e7b5      	b.n	8009150 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80091e4:	4b17      	ldr	r3, [pc, #92]	; (8009244 <xTaskIncrementTick+0x168>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091ea:	4915      	ldr	r1, [pc, #84]	; (8009240 <xTaskIncrementTick+0x164>)
 80091ec:	4613      	mov	r3, r2
 80091ee:	009b      	lsls	r3, r3, #2
 80091f0:	4413      	add	r3, r2
 80091f2:	009b      	lsls	r3, r3, #2
 80091f4:	440b      	add	r3, r1
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	2b01      	cmp	r3, #1
 80091fa:	d901      	bls.n	8009200 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80091fc:	2301      	movs	r3, #1
 80091fe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009200:	4b11      	ldr	r3, [pc, #68]	; (8009248 <xTaskIncrementTick+0x16c>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d007      	beq.n	8009218 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009208:	2301      	movs	r3, #1
 800920a:	617b      	str	r3, [r7, #20]
 800920c:	e004      	b.n	8009218 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800920e:	4b0f      	ldr	r3, [pc, #60]	; (800924c <xTaskIncrementTick+0x170>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	3301      	adds	r3, #1
 8009214:	4a0d      	ldr	r2, [pc, #52]	; (800924c <xTaskIncrementTick+0x170>)
 8009216:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009218:	697b      	ldr	r3, [r7, #20]
}
 800921a:	4618      	mov	r0, r3
 800921c:	3718      	adds	r7, #24
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}
 8009222:	bf00      	nop
 8009224:	20001348 	.word	0x20001348
 8009228:	20001324 	.word	0x20001324
 800922c:	200012d8 	.word	0x200012d8
 8009230:	200012dc 	.word	0x200012dc
 8009234:	20001338 	.word	0x20001338
 8009238:	20001340 	.word	0x20001340
 800923c:	20001328 	.word	0x20001328
 8009240:	20000e50 	.word	0x20000e50
 8009244:	20000e4c 	.word	0x20000e4c
 8009248:	20001334 	.word	0x20001334
 800924c:	20001330 	.word	0x20001330

08009250 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009250:	b480      	push	{r7}
 8009252:	b085      	sub	sp, #20
 8009254:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009256:	4b2a      	ldr	r3, [pc, #168]	; (8009300 <vTaskSwitchContext+0xb0>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d003      	beq.n	8009266 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800925e:	4b29      	ldr	r3, [pc, #164]	; (8009304 <vTaskSwitchContext+0xb4>)
 8009260:	2201      	movs	r2, #1
 8009262:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009264:	e046      	b.n	80092f4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009266:	4b27      	ldr	r3, [pc, #156]	; (8009304 <vTaskSwitchContext+0xb4>)
 8009268:	2200      	movs	r2, #0
 800926a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800926c:	4b26      	ldr	r3, [pc, #152]	; (8009308 <vTaskSwitchContext+0xb8>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	60fb      	str	r3, [r7, #12]
 8009272:	e010      	b.n	8009296 <vTaskSwitchContext+0x46>
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d10a      	bne.n	8009290 <vTaskSwitchContext+0x40>
	__asm volatile
 800927a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800927e:	f383 8811 	msr	BASEPRI, r3
 8009282:	f3bf 8f6f 	isb	sy
 8009286:	f3bf 8f4f 	dsb	sy
 800928a:	607b      	str	r3, [r7, #4]
}
 800928c:	bf00      	nop
 800928e:	e7fe      	b.n	800928e <vTaskSwitchContext+0x3e>
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	3b01      	subs	r3, #1
 8009294:	60fb      	str	r3, [r7, #12]
 8009296:	491d      	ldr	r1, [pc, #116]	; (800930c <vTaskSwitchContext+0xbc>)
 8009298:	68fa      	ldr	r2, [r7, #12]
 800929a:	4613      	mov	r3, r2
 800929c:	009b      	lsls	r3, r3, #2
 800929e:	4413      	add	r3, r2
 80092a0:	009b      	lsls	r3, r3, #2
 80092a2:	440b      	add	r3, r1
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d0e4      	beq.n	8009274 <vTaskSwitchContext+0x24>
 80092aa:	68fa      	ldr	r2, [r7, #12]
 80092ac:	4613      	mov	r3, r2
 80092ae:	009b      	lsls	r3, r3, #2
 80092b0:	4413      	add	r3, r2
 80092b2:	009b      	lsls	r3, r3, #2
 80092b4:	4a15      	ldr	r2, [pc, #84]	; (800930c <vTaskSwitchContext+0xbc>)
 80092b6:	4413      	add	r3, r2
 80092b8:	60bb      	str	r3, [r7, #8]
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	685a      	ldr	r2, [r3, #4]
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	605a      	str	r2, [r3, #4]
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	685a      	ldr	r2, [r3, #4]
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	3308      	adds	r3, #8
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d104      	bne.n	80092da <vTaskSwitchContext+0x8a>
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	685a      	ldr	r2, [r3, #4]
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	605a      	str	r2, [r3, #4]
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	68db      	ldr	r3, [r3, #12]
 80092e0:	4a0b      	ldr	r2, [pc, #44]	; (8009310 <vTaskSwitchContext+0xc0>)
 80092e2:	6013      	str	r3, [r2, #0]
 80092e4:	4a08      	ldr	r2, [pc, #32]	; (8009308 <vTaskSwitchContext+0xb8>)
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80092ea:	4b09      	ldr	r3, [pc, #36]	; (8009310 <vTaskSwitchContext+0xc0>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	3358      	adds	r3, #88	; 0x58
 80092f0:	4a08      	ldr	r2, [pc, #32]	; (8009314 <vTaskSwitchContext+0xc4>)
 80092f2:	6013      	str	r3, [r2, #0]
}
 80092f4:	bf00      	nop
 80092f6:	3714      	adds	r7, #20
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr
 8009300:	20001348 	.word	0x20001348
 8009304:	20001334 	.word	0x20001334
 8009308:	20001328 	.word	0x20001328
 800930c:	20000e50 	.word	0x20000e50
 8009310:	20000e4c 	.word	0x20000e4c
 8009314:	20000068 	.word	0x20000068

08009318 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b084      	sub	sp, #16
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d10a      	bne.n	800933e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800932c:	f383 8811 	msr	BASEPRI, r3
 8009330:	f3bf 8f6f 	isb	sy
 8009334:	f3bf 8f4f 	dsb	sy
 8009338:	60fb      	str	r3, [r7, #12]
}
 800933a:	bf00      	nop
 800933c:	e7fe      	b.n	800933c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800933e:	4b07      	ldr	r3, [pc, #28]	; (800935c <vTaskPlaceOnEventList+0x44>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	3318      	adds	r3, #24
 8009344:	4619      	mov	r1, r3
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f7fe fc8f 	bl	8007c6a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800934c:	2101      	movs	r1, #1
 800934e:	6838      	ldr	r0, [r7, #0]
 8009350:	f000 fb30 	bl	80099b4 <prvAddCurrentTaskToDelayedList>
}
 8009354:	bf00      	nop
 8009356:	3710      	adds	r7, #16
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}
 800935c:	20000e4c 	.word	0x20000e4c

08009360 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009360:	b580      	push	{r7, lr}
 8009362:	b086      	sub	sp, #24
 8009364:	af00      	add	r7, sp, #0
 8009366:	60f8      	str	r0, [r7, #12]
 8009368:	60b9      	str	r1, [r7, #8]
 800936a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d10a      	bne.n	8009388 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009376:	f383 8811 	msr	BASEPRI, r3
 800937a:	f3bf 8f6f 	isb	sy
 800937e:	f3bf 8f4f 	dsb	sy
 8009382:	617b      	str	r3, [r7, #20]
}
 8009384:	bf00      	nop
 8009386:	e7fe      	b.n	8009386 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009388:	4b0a      	ldr	r3, [pc, #40]	; (80093b4 <vTaskPlaceOnEventListRestricted+0x54>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	3318      	adds	r3, #24
 800938e:	4619      	mov	r1, r3
 8009390:	68f8      	ldr	r0, [r7, #12]
 8009392:	f7fe fc46 	bl	8007c22 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d002      	beq.n	80093a2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800939c:	f04f 33ff 	mov.w	r3, #4294967295
 80093a0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80093a2:	6879      	ldr	r1, [r7, #4]
 80093a4:	68b8      	ldr	r0, [r7, #8]
 80093a6:	f000 fb05 	bl	80099b4 <prvAddCurrentTaskToDelayedList>
	}
 80093aa:	bf00      	nop
 80093ac:	3718      	adds	r7, #24
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
 80093b2:	bf00      	nop
 80093b4:	20000e4c 	.word	0x20000e4c

080093b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b086      	sub	sp, #24
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	68db      	ldr	r3, [r3, #12]
 80093c4:	68db      	ldr	r3, [r3, #12]
 80093c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d10a      	bne.n	80093e4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80093ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d2:	f383 8811 	msr	BASEPRI, r3
 80093d6:	f3bf 8f6f 	isb	sy
 80093da:	f3bf 8f4f 	dsb	sy
 80093de:	60fb      	str	r3, [r7, #12]
}
 80093e0:	bf00      	nop
 80093e2:	e7fe      	b.n	80093e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	3318      	adds	r3, #24
 80093e8:	4618      	mov	r0, r3
 80093ea:	f7fe fc77 	bl	8007cdc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093ee:	4b1e      	ldr	r3, [pc, #120]	; (8009468 <xTaskRemoveFromEventList+0xb0>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d11d      	bne.n	8009432 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	3304      	adds	r3, #4
 80093fa:	4618      	mov	r0, r3
 80093fc:	f7fe fc6e 	bl	8007cdc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009404:	4b19      	ldr	r3, [pc, #100]	; (800946c <xTaskRemoveFromEventList+0xb4>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	429a      	cmp	r2, r3
 800940a:	d903      	bls.n	8009414 <xTaskRemoveFromEventList+0x5c>
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009410:	4a16      	ldr	r2, [pc, #88]	; (800946c <xTaskRemoveFromEventList+0xb4>)
 8009412:	6013      	str	r3, [r2, #0]
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009418:	4613      	mov	r3, r2
 800941a:	009b      	lsls	r3, r3, #2
 800941c:	4413      	add	r3, r2
 800941e:	009b      	lsls	r3, r3, #2
 8009420:	4a13      	ldr	r2, [pc, #76]	; (8009470 <xTaskRemoveFromEventList+0xb8>)
 8009422:	441a      	add	r2, r3
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	3304      	adds	r3, #4
 8009428:	4619      	mov	r1, r3
 800942a:	4610      	mov	r0, r2
 800942c:	f7fe fbf9 	bl	8007c22 <vListInsertEnd>
 8009430:	e005      	b.n	800943e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	3318      	adds	r3, #24
 8009436:	4619      	mov	r1, r3
 8009438:	480e      	ldr	r0, [pc, #56]	; (8009474 <xTaskRemoveFromEventList+0xbc>)
 800943a:	f7fe fbf2 	bl	8007c22 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009442:	4b0d      	ldr	r3, [pc, #52]	; (8009478 <xTaskRemoveFromEventList+0xc0>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009448:	429a      	cmp	r2, r3
 800944a:	d905      	bls.n	8009458 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800944c:	2301      	movs	r3, #1
 800944e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009450:	4b0a      	ldr	r3, [pc, #40]	; (800947c <xTaskRemoveFromEventList+0xc4>)
 8009452:	2201      	movs	r2, #1
 8009454:	601a      	str	r2, [r3, #0]
 8009456:	e001      	b.n	800945c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009458:	2300      	movs	r3, #0
 800945a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800945c:	697b      	ldr	r3, [r7, #20]
}
 800945e:	4618      	mov	r0, r3
 8009460:	3718      	adds	r7, #24
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}
 8009466:	bf00      	nop
 8009468:	20001348 	.word	0x20001348
 800946c:	20001328 	.word	0x20001328
 8009470:	20000e50 	.word	0x20000e50
 8009474:	200012e0 	.word	0x200012e0
 8009478:	20000e4c 	.word	0x20000e4c
 800947c:	20001334 	.word	0x20001334

08009480 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009480:	b480      	push	{r7}
 8009482:	b083      	sub	sp, #12
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009488:	4b06      	ldr	r3, [pc, #24]	; (80094a4 <vTaskInternalSetTimeOutState+0x24>)
 800948a:	681a      	ldr	r2, [r3, #0]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009490:	4b05      	ldr	r3, [pc, #20]	; (80094a8 <vTaskInternalSetTimeOutState+0x28>)
 8009492:	681a      	ldr	r2, [r3, #0]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	605a      	str	r2, [r3, #4]
}
 8009498:	bf00      	nop
 800949a:	370c      	adds	r7, #12
 800949c:	46bd      	mov	sp, r7
 800949e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a2:	4770      	bx	lr
 80094a4:	20001338 	.word	0x20001338
 80094a8:	20001324 	.word	0x20001324

080094ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b088      	sub	sp, #32
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d10a      	bne.n	80094d2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80094bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c0:	f383 8811 	msr	BASEPRI, r3
 80094c4:	f3bf 8f6f 	isb	sy
 80094c8:	f3bf 8f4f 	dsb	sy
 80094cc:	613b      	str	r3, [r7, #16]
}
 80094ce:	bf00      	nop
 80094d0:	e7fe      	b.n	80094d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d10a      	bne.n	80094ee <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80094d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094dc:	f383 8811 	msr	BASEPRI, r3
 80094e0:	f3bf 8f6f 	isb	sy
 80094e4:	f3bf 8f4f 	dsb	sy
 80094e8:	60fb      	str	r3, [r7, #12]
}
 80094ea:	bf00      	nop
 80094ec:	e7fe      	b.n	80094ec <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80094ee:	f000 ff31 	bl	800a354 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80094f2:	4b1d      	ldr	r3, [pc, #116]	; (8009568 <xTaskCheckForTimeOut+0xbc>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	685b      	ldr	r3, [r3, #4]
 80094fc:	69ba      	ldr	r2, [r7, #24]
 80094fe:	1ad3      	subs	r3, r2, r3
 8009500:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800950a:	d102      	bne.n	8009512 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800950c:	2300      	movs	r3, #0
 800950e:	61fb      	str	r3, [r7, #28]
 8009510:	e023      	b.n	800955a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681a      	ldr	r2, [r3, #0]
 8009516:	4b15      	ldr	r3, [pc, #84]	; (800956c <xTaskCheckForTimeOut+0xc0>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	429a      	cmp	r2, r3
 800951c:	d007      	beq.n	800952e <xTaskCheckForTimeOut+0x82>
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	69ba      	ldr	r2, [r7, #24]
 8009524:	429a      	cmp	r2, r3
 8009526:	d302      	bcc.n	800952e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009528:	2301      	movs	r3, #1
 800952a:	61fb      	str	r3, [r7, #28]
 800952c:	e015      	b.n	800955a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	697a      	ldr	r2, [r7, #20]
 8009534:	429a      	cmp	r2, r3
 8009536:	d20b      	bcs.n	8009550 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	681a      	ldr	r2, [r3, #0]
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	1ad2      	subs	r2, r2, r3
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f7ff ff9b 	bl	8009480 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800954a:	2300      	movs	r3, #0
 800954c:	61fb      	str	r3, [r7, #28]
 800954e:	e004      	b.n	800955a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	2200      	movs	r2, #0
 8009554:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009556:	2301      	movs	r3, #1
 8009558:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800955a:	f000 ff2b 	bl	800a3b4 <vPortExitCritical>

	return xReturn;
 800955e:	69fb      	ldr	r3, [r7, #28]
}
 8009560:	4618      	mov	r0, r3
 8009562:	3720      	adds	r7, #32
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}
 8009568:	20001324 	.word	0x20001324
 800956c:	20001338 	.word	0x20001338

08009570 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009570:	b480      	push	{r7}
 8009572:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009574:	4b03      	ldr	r3, [pc, #12]	; (8009584 <vTaskMissedYield+0x14>)
 8009576:	2201      	movs	r2, #1
 8009578:	601a      	str	r2, [r3, #0]
}
 800957a:	bf00      	nop
 800957c:	46bd      	mov	sp, r7
 800957e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009582:	4770      	bx	lr
 8009584:	20001334 	.word	0x20001334

08009588 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009590:	f000 f8a6 	bl	80096e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009594:	4b06      	ldr	r3, [pc, #24]	; (80095b0 <prvIdleTask+0x28>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	2b01      	cmp	r3, #1
 800959a:	d9f9      	bls.n	8009590 <prvIdleTask+0x8>
			{
				taskYIELD();
 800959c:	4b05      	ldr	r3, [pc, #20]	; (80095b4 <prvIdleTask+0x2c>)
 800959e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095a2:	601a      	str	r2, [r3, #0]
 80095a4:	f3bf 8f4f 	dsb	sy
 80095a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80095ac:	e7f0      	b.n	8009590 <prvIdleTask+0x8>
 80095ae:	bf00      	nop
 80095b0:	20000e50 	.word	0x20000e50
 80095b4:	e000ed04 	.word	0xe000ed04

080095b8 <vTaskSetThreadLocalStoragePointer>:
/*-----------------------------------------------------------*/

#if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )

	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue )
	{
 80095b8:	b480      	push	{r7}
 80095ba:	b087      	sub	sp, #28
 80095bc:	af00      	add	r7, sp, #0
 80095be:	60f8      	str	r0, [r7, #12]
 80095c0:	60b9      	str	r1, [r7, #8]
 80095c2:	607a      	str	r2, [r7, #4]
	TCB_t *pxTCB;

		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	dc1c      	bgt.n	8009604 <vTaskSetThreadLocalStoragePointer+0x4c>
		{
			pxTCB = prvGetTCBFromHandle( xTaskToSet );
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d102      	bne.n	80095d6 <vTaskSetThreadLocalStoragePointer+0x1e>
 80095d0:	4b0f      	ldr	r3, [pc, #60]	; (8009610 <vTaskSetThreadLocalStoragePointer+0x58>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	e000      	b.n	80095d8 <vTaskSetThreadLocalStoragePointer+0x20>
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	617b      	str	r3, [r7, #20]
			configASSERT( pxTCB != NULL );
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d10a      	bne.n	80095f6 <vTaskSetThreadLocalStoragePointer+0x3e>
	__asm volatile
 80095e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e4:	f383 8811 	msr	BASEPRI, r3
 80095e8:	f3bf 8f6f 	isb	sy
 80095ec:	f3bf 8f4f 	dsb	sy
 80095f0:	613b      	str	r3, [r7, #16]
}
 80095f2:	bf00      	nop
 80095f4:	e7fe      	b.n	80095f4 <vTaskSetThreadLocalStoragePointer+0x3c>
			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
 80095f6:	697a      	ldr	r2, [r7, #20]
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	3314      	adds	r3, #20
 80095fc:	009b      	lsls	r3, r3, #2
 80095fe:	4413      	add	r3, r2
 8009600:	687a      	ldr	r2, [r7, #4]
 8009602:	605a      	str	r2, [r3, #4]
		}
	}
 8009604:	bf00      	nop
 8009606:	371c      	adds	r7, #28
 8009608:	46bd      	mov	sp, r7
 800960a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960e:	4770      	bx	lr
 8009610:	20000e4c 	.word	0x20000e4c

08009614 <pvTaskGetThreadLocalStoragePointer>:
/*-----------------------------------------------------------*/

#if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )

	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
	{
 8009614:	b480      	push	{r7}
 8009616:	b085      	sub	sp, #20
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	6039      	str	r1, [r7, #0]
	void *pvReturn = NULL;
 800961e:	2300      	movs	r3, #0
 8009620:	60fb      	str	r3, [r7, #12]
	TCB_t *pxTCB;

		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	2b00      	cmp	r3, #0
 8009626:	dc0f      	bgt.n	8009648 <pvTaskGetThreadLocalStoragePointer+0x34>
		{
			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d102      	bne.n	8009634 <pvTaskGetThreadLocalStoragePointer+0x20>
 800962e:	4b0b      	ldr	r3, [pc, #44]	; (800965c <pvTaskGetThreadLocalStoragePointer+0x48>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	e000      	b.n	8009636 <pvTaskGetThreadLocalStoragePointer+0x22>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	60bb      	str	r3, [r7, #8]
			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
 8009638:	68ba      	ldr	r2, [r7, #8]
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	3314      	adds	r3, #20
 800963e:	009b      	lsls	r3, r3, #2
 8009640:	4413      	add	r3, r2
 8009642:	685b      	ldr	r3, [r3, #4]
 8009644:	60fb      	str	r3, [r7, #12]
 8009646:	e001      	b.n	800964c <pvTaskGetThreadLocalStoragePointer+0x38>
		}
		else
		{
			pvReturn = NULL;
 8009648:	2300      	movs	r3, #0
 800964a:	60fb      	str	r3, [r7, #12]
		}

		return pvReturn;
 800964c:	68fb      	ldr	r3, [r7, #12]
	}
 800964e:	4618      	mov	r0, r3
 8009650:	3714      	adds	r7, #20
 8009652:	46bd      	mov	sp, r7
 8009654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009658:	4770      	bx	lr
 800965a:	bf00      	nop
 800965c:	20000e4c 	.word	0x20000e4c

08009660 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b082      	sub	sp, #8
 8009664:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009666:	2300      	movs	r3, #0
 8009668:	607b      	str	r3, [r7, #4]
 800966a:	e00c      	b.n	8009686 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	4613      	mov	r3, r2
 8009670:	009b      	lsls	r3, r3, #2
 8009672:	4413      	add	r3, r2
 8009674:	009b      	lsls	r3, r3, #2
 8009676:	4a12      	ldr	r2, [pc, #72]	; (80096c0 <prvInitialiseTaskLists+0x60>)
 8009678:	4413      	add	r3, r2
 800967a:	4618      	mov	r0, r3
 800967c:	f7fe faa4 	bl	8007bc8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	3301      	adds	r3, #1
 8009684:	607b      	str	r3, [r7, #4]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2b37      	cmp	r3, #55	; 0x37
 800968a:	d9ef      	bls.n	800966c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800968c:	480d      	ldr	r0, [pc, #52]	; (80096c4 <prvInitialiseTaskLists+0x64>)
 800968e:	f7fe fa9b 	bl	8007bc8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009692:	480d      	ldr	r0, [pc, #52]	; (80096c8 <prvInitialiseTaskLists+0x68>)
 8009694:	f7fe fa98 	bl	8007bc8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009698:	480c      	ldr	r0, [pc, #48]	; (80096cc <prvInitialiseTaskLists+0x6c>)
 800969a:	f7fe fa95 	bl	8007bc8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800969e:	480c      	ldr	r0, [pc, #48]	; (80096d0 <prvInitialiseTaskLists+0x70>)
 80096a0:	f7fe fa92 	bl	8007bc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80096a4:	480b      	ldr	r0, [pc, #44]	; (80096d4 <prvInitialiseTaskLists+0x74>)
 80096a6:	f7fe fa8f 	bl	8007bc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80096aa:	4b0b      	ldr	r3, [pc, #44]	; (80096d8 <prvInitialiseTaskLists+0x78>)
 80096ac:	4a05      	ldr	r2, [pc, #20]	; (80096c4 <prvInitialiseTaskLists+0x64>)
 80096ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80096b0:	4b0a      	ldr	r3, [pc, #40]	; (80096dc <prvInitialiseTaskLists+0x7c>)
 80096b2:	4a05      	ldr	r2, [pc, #20]	; (80096c8 <prvInitialiseTaskLists+0x68>)
 80096b4:	601a      	str	r2, [r3, #0]
}
 80096b6:	bf00      	nop
 80096b8:	3708      	adds	r7, #8
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
 80096be:	bf00      	nop
 80096c0:	20000e50 	.word	0x20000e50
 80096c4:	200012b0 	.word	0x200012b0
 80096c8:	200012c4 	.word	0x200012c4
 80096cc:	200012e0 	.word	0x200012e0
 80096d0:	200012f4 	.word	0x200012f4
 80096d4:	2000130c 	.word	0x2000130c
 80096d8:	200012d8 	.word	0x200012d8
 80096dc:	200012dc 	.word	0x200012dc

080096e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b082      	sub	sp, #8
 80096e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80096e6:	e019      	b.n	800971c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80096e8:	f000 fe34 	bl	800a354 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096ec:	4b10      	ldr	r3, [pc, #64]	; (8009730 <prvCheckTasksWaitingTermination+0x50>)
 80096ee:	68db      	ldr	r3, [r3, #12]
 80096f0:	68db      	ldr	r3, [r3, #12]
 80096f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	3304      	adds	r3, #4
 80096f8:	4618      	mov	r0, r3
 80096fa:	f7fe faef 	bl	8007cdc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80096fe:	4b0d      	ldr	r3, [pc, #52]	; (8009734 <prvCheckTasksWaitingTermination+0x54>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	3b01      	subs	r3, #1
 8009704:	4a0b      	ldr	r2, [pc, #44]	; (8009734 <prvCheckTasksWaitingTermination+0x54>)
 8009706:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009708:	4b0b      	ldr	r3, [pc, #44]	; (8009738 <prvCheckTasksWaitingTermination+0x58>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	3b01      	subs	r3, #1
 800970e:	4a0a      	ldr	r2, [pc, #40]	; (8009738 <prvCheckTasksWaitingTermination+0x58>)
 8009710:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009712:	f000 fe4f 	bl	800a3b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 f810 	bl	800973c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800971c:	4b06      	ldr	r3, [pc, #24]	; (8009738 <prvCheckTasksWaitingTermination+0x58>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d1e1      	bne.n	80096e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009724:	bf00      	nop
 8009726:	bf00      	nop
 8009728:	3708      	adds	r7, #8
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}
 800972e:	bf00      	nop
 8009730:	200012f4 	.word	0x200012f4
 8009734:	20001320 	.word	0x20001320
 8009738:	20001308 	.word	0x20001308

0800973c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800973c:	b580      	push	{r7, lr}
 800973e:	b084      	sub	sp, #16
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	3358      	adds	r3, #88	; 0x58
 8009748:	4618      	mov	r0, r3
 800974a:	f001 ff99 	bl	800b680 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8009754:	2b00      	cmp	r3, #0
 8009756:	d108      	bne.n	800976a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800975c:	4618      	mov	r0, r3
 800975e:	f000 ffe7 	bl	800a730 <vPortFree>
				vPortFree( pxTCB );
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f000 ffe4 	bl	800a730 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009768:	e018      	b.n	800979c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8009770:	2b01      	cmp	r3, #1
 8009772:	d103      	bne.n	800977c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f000 ffdb 	bl	800a730 <vPortFree>
	}
 800977a:	e00f      	b.n	800979c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8009782:	2b02      	cmp	r3, #2
 8009784:	d00a      	beq.n	800979c <prvDeleteTCB+0x60>
	__asm volatile
 8009786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800978a:	f383 8811 	msr	BASEPRI, r3
 800978e:	f3bf 8f6f 	isb	sy
 8009792:	f3bf 8f4f 	dsb	sy
 8009796:	60fb      	str	r3, [r7, #12]
}
 8009798:	bf00      	nop
 800979a:	e7fe      	b.n	800979a <prvDeleteTCB+0x5e>
	}
 800979c:	bf00      	nop
 800979e:	3710      	adds	r7, #16
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}

080097a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80097a4:	b480      	push	{r7}
 80097a6:	b083      	sub	sp, #12
 80097a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097aa:	4b0c      	ldr	r3, [pc, #48]	; (80097dc <prvResetNextTaskUnblockTime+0x38>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d104      	bne.n	80097be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80097b4:	4b0a      	ldr	r3, [pc, #40]	; (80097e0 <prvResetNextTaskUnblockTime+0x3c>)
 80097b6:	f04f 32ff 	mov.w	r2, #4294967295
 80097ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80097bc:	e008      	b.n	80097d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097be:	4b07      	ldr	r3, [pc, #28]	; (80097dc <prvResetNextTaskUnblockTime+0x38>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	68db      	ldr	r3, [r3, #12]
 80097c4:	68db      	ldr	r3, [r3, #12]
 80097c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	4a04      	ldr	r2, [pc, #16]	; (80097e0 <prvResetNextTaskUnblockTime+0x3c>)
 80097ce:	6013      	str	r3, [r2, #0]
}
 80097d0:	bf00      	nop
 80097d2:	370c      	adds	r7, #12
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr
 80097dc:	200012d8 	.word	0x200012d8
 80097e0:	20001340 	.word	0x20001340

080097e4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80097e4:	b480      	push	{r7}
 80097e6:	b083      	sub	sp, #12
 80097e8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80097ea:	4b05      	ldr	r3, [pc, #20]	; (8009800 <xTaskGetCurrentTaskHandle+0x1c>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	607b      	str	r3, [r7, #4]

		return xReturn;
 80097f0:	687b      	ldr	r3, [r7, #4]
	}
 80097f2:	4618      	mov	r0, r3
 80097f4:	370c      	adds	r7, #12
 80097f6:	46bd      	mov	sp, r7
 80097f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fc:	4770      	bx	lr
 80097fe:	bf00      	nop
 8009800:	20000e4c 	.word	0x20000e4c

08009804 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009804:	b480      	push	{r7}
 8009806:	b083      	sub	sp, #12
 8009808:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800980a:	4b0b      	ldr	r3, [pc, #44]	; (8009838 <xTaskGetSchedulerState+0x34>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d102      	bne.n	8009818 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009812:	2301      	movs	r3, #1
 8009814:	607b      	str	r3, [r7, #4]
 8009816:	e008      	b.n	800982a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009818:	4b08      	ldr	r3, [pc, #32]	; (800983c <xTaskGetSchedulerState+0x38>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d102      	bne.n	8009826 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009820:	2302      	movs	r3, #2
 8009822:	607b      	str	r3, [r7, #4]
 8009824:	e001      	b.n	800982a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009826:	2300      	movs	r3, #0
 8009828:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800982a:	687b      	ldr	r3, [r7, #4]
	}
 800982c:	4618      	mov	r0, r3
 800982e:	370c      	adds	r7, #12
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr
 8009838:	2000132c 	.word	0x2000132c
 800983c:	20001348 	.word	0x20001348

08009840 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009840:	b580      	push	{r7, lr}
 8009842:	b086      	sub	sp, #24
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800984c:	2300      	movs	r3, #0
 800984e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d056      	beq.n	8009904 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009856:	4b2e      	ldr	r3, [pc, #184]	; (8009910 <xTaskPriorityDisinherit+0xd0>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	693a      	ldr	r2, [r7, #16]
 800985c:	429a      	cmp	r2, r3
 800985e:	d00a      	beq.n	8009876 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009864:	f383 8811 	msr	BASEPRI, r3
 8009868:	f3bf 8f6f 	isb	sy
 800986c:	f3bf 8f4f 	dsb	sy
 8009870:	60fb      	str	r3, [r7, #12]
}
 8009872:	bf00      	nop
 8009874:	e7fe      	b.n	8009874 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800987a:	2b00      	cmp	r3, #0
 800987c:	d10a      	bne.n	8009894 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800987e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009882:	f383 8811 	msr	BASEPRI, r3
 8009886:	f3bf 8f6f 	isb	sy
 800988a:	f3bf 8f4f 	dsb	sy
 800988e:	60bb      	str	r3, [r7, #8]
}
 8009890:	bf00      	nop
 8009892:	e7fe      	b.n	8009892 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009898:	1e5a      	subs	r2, r3, #1
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098a6:	429a      	cmp	r2, r3
 80098a8:	d02c      	beq.n	8009904 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d128      	bne.n	8009904 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	3304      	adds	r3, #4
 80098b6:	4618      	mov	r0, r3
 80098b8:	f7fe fa10 	bl	8007cdc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098d4:	4b0f      	ldr	r3, [pc, #60]	; (8009914 <xTaskPriorityDisinherit+0xd4>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	429a      	cmp	r2, r3
 80098da:	d903      	bls.n	80098e4 <xTaskPriorityDisinherit+0xa4>
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e0:	4a0c      	ldr	r2, [pc, #48]	; (8009914 <xTaskPriorityDisinherit+0xd4>)
 80098e2:	6013      	str	r3, [r2, #0]
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098e8:	4613      	mov	r3, r2
 80098ea:	009b      	lsls	r3, r3, #2
 80098ec:	4413      	add	r3, r2
 80098ee:	009b      	lsls	r3, r3, #2
 80098f0:	4a09      	ldr	r2, [pc, #36]	; (8009918 <xTaskPriorityDisinherit+0xd8>)
 80098f2:	441a      	add	r2, r3
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	3304      	adds	r3, #4
 80098f8:	4619      	mov	r1, r3
 80098fa:	4610      	mov	r0, r2
 80098fc:	f7fe f991 	bl	8007c22 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009900:	2301      	movs	r3, #1
 8009902:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009904:	697b      	ldr	r3, [r7, #20]
	}
 8009906:	4618      	mov	r0, r3
 8009908:	3718      	adds	r7, #24
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}
 800990e:	bf00      	nop
 8009910:	20000e4c 	.word	0x20000e4c
 8009914:	20001328 	.word	0x20001328
 8009918:	20000e50 	.word	0x20000e50

0800991c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8009926:	f000 fd15 	bl	800a354 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800992a:	4b20      	ldr	r3, [pc, #128]	; (80099ac <ulTaskNotifyTake+0x90>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009932:	2b00      	cmp	r3, #0
 8009934:	d113      	bne.n	800995e <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009936:	4b1d      	ldr	r3, [pc, #116]	; (80099ac <ulTaskNotifyTake+0x90>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	2201      	movs	r2, #1
 800993c:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8

				if( xTicksToWait > ( TickType_t ) 0 )
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d00b      	beq.n	800995e <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009946:	2101      	movs	r1, #1
 8009948:	6838      	ldr	r0, [r7, #0]
 800994a:	f000 f833 	bl	80099b4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800994e:	4b18      	ldr	r3, [pc, #96]	; (80099b0 <ulTaskNotifyTake+0x94>)
 8009950:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009954:	601a      	str	r2, [r3, #0]
 8009956:	f3bf 8f4f 	dsb	sy
 800995a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800995e:	f000 fd29 	bl	800a3b4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8009962:	f000 fcf7 	bl	800a354 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8009966:	4b11      	ldr	r3, [pc, #68]	; (80099ac <ulTaskNotifyTake+0x90>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800996e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d00e      	beq.n	8009994 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d005      	beq.n	8009988 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800997c:	4b0b      	ldr	r3, [pc, #44]	; (80099ac <ulTaskNotifyTake+0x90>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	2200      	movs	r2, #0
 8009982:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8009986:	e005      	b.n	8009994 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8009988:	4b08      	ldr	r3, [pc, #32]	; (80099ac <ulTaskNotifyTake+0x90>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	68fa      	ldr	r2, [r7, #12]
 800998e:	3a01      	subs	r2, #1
 8009990:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009994:	4b05      	ldr	r3, [pc, #20]	; (80099ac <ulTaskNotifyTake+0x90>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	2200      	movs	r2, #0
 800999a:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		}
		taskEXIT_CRITICAL();
 800999e:	f000 fd09 	bl	800a3b4 <vPortExitCritical>

		return ulReturn;
 80099a2:	68fb      	ldr	r3, [r7, #12]
	}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3710      	adds	r7, #16
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}
 80099ac:	20000e4c 	.word	0x20000e4c
 80099b0:	e000ed04 	.word	0xe000ed04

080099b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b084      	sub	sp, #16
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80099be:	4b21      	ldr	r3, [pc, #132]	; (8009a44 <prvAddCurrentTaskToDelayedList+0x90>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80099c4:	4b20      	ldr	r3, [pc, #128]	; (8009a48 <prvAddCurrentTaskToDelayedList+0x94>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	3304      	adds	r3, #4
 80099ca:	4618      	mov	r0, r3
 80099cc:	f7fe f986 	bl	8007cdc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099d6:	d10a      	bne.n	80099ee <prvAddCurrentTaskToDelayedList+0x3a>
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d007      	beq.n	80099ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80099de:	4b1a      	ldr	r3, [pc, #104]	; (8009a48 <prvAddCurrentTaskToDelayedList+0x94>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	3304      	adds	r3, #4
 80099e4:	4619      	mov	r1, r3
 80099e6:	4819      	ldr	r0, [pc, #100]	; (8009a4c <prvAddCurrentTaskToDelayedList+0x98>)
 80099e8:	f7fe f91b 	bl	8007c22 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80099ec:	e026      	b.n	8009a3c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80099ee:	68fa      	ldr	r2, [r7, #12]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	4413      	add	r3, r2
 80099f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80099f6:	4b14      	ldr	r3, [pc, #80]	; (8009a48 <prvAddCurrentTaskToDelayedList+0x94>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	68ba      	ldr	r2, [r7, #8]
 80099fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80099fe:	68ba      	ldr	r2, [r7, #8]
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	429a      	cmp	r2, r3
 8009a04:	d209      	bcs.n	8009a1a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a06:	4b12      	ldr	r3, [pc, #72]	; (8009a50 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009a08:	681a      	ldr	r2, [r3, #0]
 8009a0a:	4b0f      	ldr	r3, [pc, #60]	; (8009a48 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	3304      	adds	r3, #4
 8009a10:	4619      	mov	r1, r3
 8009a12:	4610      	mov	r0, r2
 8009a14:	f7fe f929 	bl	8007c6a <vListInsert>
}
 8009a18:	e010      	b.n	8009a3c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a1a:	4b0e      	ldr	r3, [pc, #56]	; (8009a54 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009a1c:	681a      	ldr	r2, [r3, #0]
 8009a1e:	4b0a      	ldr	r3, [pc, #40]	; (8009a48 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	3304      	adds	r3, #4
 8009a24:	4619      	mov	r1, r3
 8009a26:	4610      	mov	r0, r2
 8009a28:	f7fe f91f 	bl	8007c6a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009a2c:	4b0a      	ldr	r3, [pc, #40]	; (8009a58 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	68ba      	ldr	r2, [r7, #8]
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d202      	bcs.n	8009a3c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009a36:	4a08      	ldr	r2, [pc, #32]	; (8009a58 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	6013      	str	r3, [r2, #0]
}
 8009a3c:	bf00      	nop
 8009a3e:	3710      	adds	r7, #16
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}
 8009a44:	20001324 	.word	0x20001324
 8009a48:	20000e4c 	.word	0x20000e4c
 8009a4c:	2000130c 	.word	0x2000130c
 8009a50:	200012dc 	.word	0x200012dc
 8009a54:	200012d8 	.word	0x200012d8
 8009a58:	20001340 	.word	0x20001340

08009a5c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b08a      	sub	sp, #40	; 0x28
 8009a60:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009a62:	2300      	movs	r3, #0
 8009a64:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009a66:	f000 fb07 	bl	800a078 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009a6a:	4b1c      	ldr	r3, [pc, #112]	; (8009adc <xTimerCreateTimerTask+0x80>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d021      	beq.n	8009ab6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009a72:	2300      	movs	r3, #0
 8009a74:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009a76:	2300      	movs	r3, #0
 8009a78:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009a7a:	1d3a      	adds	r2, r7, #4
 8009a7c:	f107 0108 	add.w	r1, r7, #8
 8009a80:	f107 030c 	add.w	r3, r7, #12
 8009a84:	4618      	mov	r0, r3
 8009a86:	f7fe f885 	bl	8007b94 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009a8a:	6879      	ldr	r1, [r7, #4]
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	68fa      	ldr	r2, [r7, #12]
 8009a90:	9202      	str	r2, [sp, #8]
 8009a92:	9301      	str	r3, [sp, #4]
 8009a94:	2302      	movs	r3, #2
 8009a96:	9300      	str	r3, [sp, #0]
 8009a98:	2300      	movs	r3, #0
 8009a9a:	460a      	mov	r2, r1
 8009a9c:	4910      	ldr	r1, [pc, #64]	; (8009ae0 <xTimerCreateTimerTask+0x84>)
 8009a9e:	4811      	ldr	r0, [pc, #68]	; (8009ae4 <xTimerCreateTimerTask+0x88>)
 8009aa0:	f7fe fe32 	bl	8008708 <xTaskCreateStatic>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	4a10      	ldr	r2, [pc, #64]	; (8009ae8 <xTimerCreateTimerTask+0x8c>)
 8009aa8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009aaa:	4b0f      	ldr	r3, [pc, #60]	; (8009ae8 <xTimerCreateTimerTask+0x8c>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d001      	beq.n	8009ab6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d10a      	bne.n	8009ad2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac0:	f383 8811 	msr	BASEPRI, r3
 8009ac4:	f3bf 8f6f 	isb	sy
 8009ac8:	f3bf 8f4f 	dsb	sy
 8009acc:	613b      	str	r3, [r7, #16]
}
 8009ace:	bf00      	nop
 8009ad0:	e7fe      	b.n	8009ad0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009ad2:	697b      	ldr	r3, [r7, #20]
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3718      	adds	r7, #24
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}
 8009adc:	2000137c 	.word	0x2000137c
 8009ae0:	0800d5c8 	.word	0x0800d5c8
 8009ae4:	08009c21 	.word	0x08009c21
 8009ae8:	20001380 	.word	0x20001380

08009aec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b08a      	sub	sp, #40	; 0x28
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	60f8      	str	r0, [r7, #12]
 8009af4:	60b9      	str	r1, [r7, #8]
 8009af6:	607a      	str	r2, [r7, #4]
 8009af8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009afa:	2300      	movs	r3, #0
 8009afc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d10a      	bne.n	8009b1a <xTimerGenericCommand+0x2e>
	__asm volatile
 8009b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b08:	f383 8811 	msr	BASEPRI, r3
 8009b0c:	f3bf 8f6f 	isb	sy
 8009b10:	f3bf 8f4f 	dsb	sy
 8009b14:	623b      	str	r3, [r7, #32]
}
 8009b16:	bf00      	nop
 8009b18:	e7fe      	b.n	8009b18 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009b1a:	4b1a      	ldr	r3, [pc, #104]	; (8009b84 <xTimerGenericCommand+0x98>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d02a      	beq.n	8009b78 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	2b05      	cmp	r3, #5
 8009b32:	dc18      	bgt.n	8009b66 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009b34:	f7ff fe66 	bl	8009804 <xTaskGetSchedulerState>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	2b02      	cmp	r3, #2
 8009b3c:	d109      	bne.n	8009b52 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009b3e:	4b11      	ldr	r3, [pc, #68]	; (8009b84 <xTimerGenericCommand+0x98>)
 8009b40:	6818      	ldr	r0, [r3, #0]
 8009b42:	f107 0110 	add.w	r1, r7, #16
 8009b46:	2300      	movs	r3, #0
 8009b48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b4a:	f7fe f9f5 	bl	8007f38 <xQueueGenericSend>
 8009b4e:	6278      	str	r0, [r7, #36]	; 0x24
 8009b50:	e012      	b.n	8009b78 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009b52:	4b0c      	ldr	r3, [pc, #48]	; (8009b84 <xTimerGenericCommand+0x98>)
 8009b54:	6818      	ldr	r0, [r3, #0]
 8009b56:	f107 0110 	add.w	r1, r7, #16
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	f7fe f9eb 	bl	8007f38 <xQueueGenericSend>
 8009b62:	6278      	str	r0, [r7, #36]	; 0x24
 8009b64:	e008      	b.n	8009b78 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009b66:	4b07      	ldr	r3, [pc, #28]	; (8009b84 <xTimerGenericCommand+0x98>)
 8009b68:	6818      	ldr	r0, [r3, #0]
 8009b6a:	f107 0110 	add.w	r1, r7, #16
 8009b6e:	2300      	movs	r3, #0
 8009b70:	683a      	ldr	r2, [r7, #0]
 8009b72:	f7fe fadf 	bl	8008134 <xQueueGenericSendFromISR>
 8009b76:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3728      	adds	r7, #40	; 0x28
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}
 8009b82:	bf00      	nop
 8009b84:	2000137c 	.word	0x2000137c

08009b88 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b088      	sub	sp, #32
 8009b8c:	af02      	add	r7, sp, #8
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b92:	4b22      	ldr	r3, [pc, #136]	; (8009c1c <prvProcessExpiredTimer+0x94>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	68db      	ldr	r3, [r3, #12]
 8009b98:	68db      	ldr	r3, [r3, #12]
 8009b9a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	3304      	adds	r3, #4
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f7fe f89b 	bl	8007cdc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009bac:	f003 0304 	and.w	r3, r3, #4
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d022      	beq.n	8009bfa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	699a      	ldr	r2, [r3, #24]
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	18d1      	adds	r1, r2, r3
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	683a      	ldr	r2, [r7, #0]
 8009bc0:	6978      	ldr	r0, [r7, #20]
 8009bc2:	f000 f8d1 	bl	8009d68 <prvInsertTimerInActiveList>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d01f      	beq.n	8009c0c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009bcc:	2300      	movs	r3, #0
 8009bce:	9300      	str	r3, [sp, #0]
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	687a      	ldr	r2, [r7, #4]
 8009bd4:	2100      	movs	r1, #0
 8009bd6:	6978      	ldr	r0, [r7, #20]
 8009bd8:	f7ff ff88 	bl	8009aec <xTimerGenericCommand>
 8009bdc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d113      	bne.n	8009c0c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be8:	f383 8811 	msr	BASEPRI, r3
 8009bec:	f3bf 8f6f 	isb	sy
 8009bf0:	f3bf 8f4f 	dsb	sy
 8009bf4:	60fb      	str	r3, [r7, #12]
}
 8009bf6:	bf00      	nop
 8009bf8:	e7fe      	b.n	8009bf8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009bfa:	697b      	ldr	r3, [r7, #20]
 8009bfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c00:	f023 0301 	bic.w	r3, r3, #1
 8009c04:	b2da      	uxtb	r2, r3
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	6a1b      	ldr	r3, [r3, #32]
 8009c10:	6978      	ldr	r0, [r7, #20]
 8009c12:	4798      	blx	r3
}
 8009c14:	bf00      	nop
 8009c16:	3718      	adds	r7, #24
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}
 8009c1c:	20001374 	.word	0x20001374

08009c20 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b084      	sub	sp, #16
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009c28:	f107 0308 	add.w	r3, r7, #8
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f000 f857 	bl	8009ce0 <prvGetNextExpireTime>
 8009c32:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	4619      	mov	r1, r3
 8009c38:	68f8      	ldr	r0, [r7, #12]
 8009c3a:	f000 f803 	bl	8009c44 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009c3e:	f000 f8d5 	bl	8009dec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009c42:	e7f1      	b.n	8009c28 <prvTimerTask+0x8>

08009c44 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009c4e:	f7ff f989 	bl	8008f64 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009c52:	f107 0308 	add.w	r3, r7, #8
 8009c56:	4618      	mov	r0, r3
 8009c58:	f000 f866 	bl	8009d28 <prvSampleTimeNow>
 8009c5c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d130      	bne.n	8009cc6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d10a      	bne.n	8009c80 <prvProcessTimerOrBlockTask+0x3c>
 8009c6a:	687a      	ldr	r2, [r7, #4]
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	429a      	cmp	r2, r3
 8009c70:	d806      	bhi.n	8009c80 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009c72:	f7ff f985 	bl	8008f80 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009c76:	68f9      	ldr	r1, [r7, #12]
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f7ff ff85 	bl	8009b88 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009c7e:	e024      	b.n	8009cca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d008      	beq.n	8009c98 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009c86:	4b13      	ldr	r3, [pc, #76]	; (8009cd4 <prvProcessTimerOrBlockTask+0x90>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d101      	bne.n	8009c94 <prvProcessTimerOrBlockTask+0x50>
 8009c90:	2301      	movs	r3, #1
 8009c92:	e000      	b.n	8009c96 <prvProcessTimerOrBlockTask+0x52>
 8009c94:	2300      	movs	r3, #0
 8009c96:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009c98:	4b0f      	ldr	r3, [pc, #60]	; (8009cd8 <prvProcessTimerOrBlockTask+0x94>)
 8009c9a:	6818      	ldr	r0, [r3, #0]
 8009c9c:	687a      	ldr	r2, [r7, #4]
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	1ad3      	subs	r3, r2, r3
 8009ca2:	683a      	ldr	r2, [r7, #0]
 8009ca4:	4619      	mov	r1, r3
 8009ca6:	f7fe fcfb 	bl	80086a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009caa:	f7ff f969 	bl	8008f80 <xTaskResumeAll>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d10a      	bne.n	8009cca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009cb4:	4b09      	ldr	r3, [pc, #36]	; (8009cdc <prvProcessTimerOrBlockTask+0x98>)
 8009cb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cba:	601a      	str	r2, [r3, #0]
 8009cbc:	f3bf 8f4f 	dsb	sy
 8009cc0:	f3bf 8f6f 	isb	sy
}
 8009cc4:	e001      	b.n	8009cca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009cc6:	f7ff f95b 	bl	8008f80 <xTaskResumeAll>
}
 8009cca:	bf00      	nop
 8009ccc:	3710      	adds	r7, #16
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}
 8009cd2:	bf00      	nop
 8009cd4:	20001378 	.word	0x20001378
 8009cd8:	2000137c 	.word	0x2000137c
 8009cdc:	e000ed04 	.word	0xe000ed04

08009ce0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b085      	sub	sp, #20
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009ce8:	4b0e      	ldr	r3, [pc, #56]	; (8009d24 <prvGetNextExpireTime+0x44>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d101      	bne.n	8009cf6 <prvGetNextExpireTime+0x16>
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	e000      	b.n	8009cf8 <prvGetNextExpireTime+0x18>
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d105      	bne.n	8009d10 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009d04:	4b07      	ldr	r3, [pc, #28]	; (8009d24 <prvGetNextExpireTime+0x44>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	68db      	ldr	r3, [r3, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	60fb      	str	r3, [r7, #12]
 8009d0e:	e001      	b.n	8009d14 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009d10:	2300      	movs	r3, #0
 8009d12:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009d14:	68fb      	ldr	r3, [r7, #12]
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3714      	adds	r7, #20
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d20:	4770      	bx	lr
 8009d22:	bf00      	nop
 8009d24:	20001374 	.word	0x20001374

08009d28 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b084      	sub	sp, #16
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009d30:	f7ff f9c4 	bl	80090bc <xTaskGetTickCount>
 8009d34:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009d36:	4b0b      	ldr	r3, [pc, #44]	; (8009d64 <prvSampleTimeNow+0x3c>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	68fa      	ldr	r2, [r7, #12]
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	d205      	bcs.n	8009d4c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009d40:	f000 f936 	bl	8009fb0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2201      	movs	r2, #1
 8009d48:	601a      	str	r2, [r3, #0]
 8009d4a:	e002      	b.n	8009d52 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009d52:	4a04      	ldr	r2, [pc, #16]	; (8009d64 <prvSampleTimeNow+0x3c>)
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009d58:	68fb      	ldr	r3, [r7, #12]
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3710      	adds	r7, #16
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}
 8009d62:	bf00      	nop
 8009d64:	20001384 	.word	0x20001384

08009d68 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b086      	sub	sp, #24
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	60f8      	str	r0, [r7, #12]
 8009d70:	60b9      	str	r1, [r7, #8]
 8009d72:	607a      	str	r2, [r7, #4]
 8009d74:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009d76:	2300      	movs	r3, #0
 8009d78:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	68ba      	ldr	r2, [r7, #8]
 8009d7e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	68fa      	ldr	r2, [r7, #12]
 8009d84:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009d86:	68ba      	ldr	r2, [r7, #8]
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	429a      	cmp	r2, r3
 8009d8c:	d812      	bhi.n	8009db4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d8e:	687a      	ldr	r2, [r7, #4]
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	1ad2      	subs	r2, r2, r3
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	699b      	ldr	r3, [r3, #24]
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d302      	bcc.n	8009da2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	617b      	str	r3, [r7, #20]
 8009da0:	e01b      	b.n	8009dda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009da2:	4b10      	ldr	r3, [pc, #64]	; (8009de4 <prvInsertTimerInActiveList+0x7c>)
 8009da4:	681a      	ldr	r2, [r3, #0]
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	3304      	adds	r3, #4
 8009daa:	4619      	mov	r1, r3
 8009dac:	4610      	mov	r0, r2
 8009dae:	f7fd ff5c 	bl	8007c6a <vListInsert>
 8009db2:	e012      	b.n	8009dda <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009db4:	687a      	ldr	r2, [r7, #4]
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	429a      	cmp	r2, r3
 8009dba:	d206      	bcs.n	8009dca <prvInsertTimerInActiveList+0x62>
 8009dbc:	68ba      	ldr	r2, [r7, #8]
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	429a      	cmp	r2, r3
 8009dc2:	d302      	bcc.n	8009dca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	617b      	str	r3, [r7, #20]
 8009dc8:	e007      	b.n	8009dda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009dca:	4b07      	ldr	r3, [pc, #28]	; (8009de8 <prvInsertTimerInActiveList+0x80>)
 8009dcc:	681a      	ldr	r2, [r3, #0]
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	3304      	adds	r3, #4
 8009dd2:	4619      	mov	r1, r3
 8009dd4:	4610      	mov	r0, r2
 8009dd6:	f7fd ff48 	bl	8007c6a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009dda:	697b      	ldr	r3, [r7, #20]
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3718      	adds	r7, #24
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}
 8009de4:	20001378 	.word	0x20001378
 8009de8:	20001374 	.word	0x20001374

08009dec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b08e      	sub	sp, #56	; 0x38
 8009df0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009df2:	e0ca      	b.n	8009f8a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	da18      	bge.n	8009e2c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009dfa:	1d3b      	adds	r3, r7, #4
 8009dfc:	3304      	adds	r3, #4
 8009dfe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d10a      	bne.n	8009e1c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e0a:	f383 8811 	msr	BASEPRI, r3
 8009e0e:	f3bf 8f6f 	isb	sy
 8009e12:	f3bf 8f4f 	dsb	sy
 8009e16:	61fb      	str	r3, [r7, #28]
}
 8009e18:	bf00      	nop
 8009e1a:	e7fe      	b.n	8009e1a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e22:	6850      	ldr	r0, [r2, #4]
 8009e24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e26:	6892      	ldr	r2, [r2, #8]
 8009e28:	4611      	mov	r1, r2
 8009e2a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	f2c0 80ab 	blt.w	8009f8a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e3a:	695b      	ldr	r3, [r3, #20]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d004      	beq.n	8009e4a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e42:	3304      	adds	r3, #4
 8009e44:	4618      	mov	r0, r3
 8009e46:	f7fd ff49 	bl	8007cdc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009e4a:	463b      	mov	r3, r7
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f7ff ff6b 	bl	8009d28 <prvSampleTimeNow>
 8009e52:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2b09      	cmp	r3, #9
 8009e58:	f200 8096 	bhi.w	8009f88 <prvProcessReceivedCommands+0x19c>
 8009e5c:	a201      	add	r2, pc, #4	; (adr r2, 8009e64 <prvProcessReceivedCommands+0x78>)
 8009e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e62:	bf00      	nop
 8009e64:	08009e8d 	.word	0x08009e8d
 8009e68:	08009e8d 	.word	0x08009e8d
 8009e6c:	08009e8d 	.word	0x08009e8d
 8009e70:	08009f01 	.word	0x08009f01
 8009e74:	08009f15 	.word	0x08009f15
 8009e78:	08009f5f 	.word	0x08009f5f
 8009e7c:	08009e8d 	.word	0x08009e8d
 8009e80:	08009e8d 	.word	0x08009e8d
 8009e84:	08009f01 	.word	0x08009f01
 8009e88:	08009f15 	.word	0x08009f15
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e92:	f043 0301 	orr.w	r3, r3, #1
 8009e96:	b2da      	uxtb	r2, r3
 8009e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009e9e:	68ba      	ldr	r2, [r7, #8]
 8009ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea2:	699b      	ldr	r3, [r3, #24]
 8009ea4:	18d1      	adds	r1, r2, r3
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009eaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009eac:	f7ff ff5c 	bl	8009d68 <prvInsertTimerInActiveList>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d069      	beq.n	8009f8a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb8:	6a1b      	ldr	r3, [r3, #32]
 8009eba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ebc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ec4:	f003 0304 	and.w	r3, r3, #4
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d05e      	beq.n	8009f8a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009ecc:	68ba      	ldr	r2, [r7, #8]
 8009ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed0:	699b      	ldr	r3, [r3, #24]
 8009ed2:	441a      	add	r2, r3
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	9300      	str	r3, [sp, #0]
 8009ed8:	2300      	movs	r3, #0
 8009eda:	2100      	movs	r1, #0
 8009edc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ede:	f7ff fe05 	bl	8009aec <xTimerGenericCommand>
 8009ee2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009ee4:	6a3b      	ldr	r3, [r7, #32]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d14f      	bne.n	8009f8a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eee:	f383 8811 	msr	BASEPRI, r3
 8009ef2:	f3bf 8f6f 	isb	sy
 8009ef6:	f3bf 8f4f 	dsb	sy
 8009efa:	61bb      	str	r3, [r7, #24]
}
 8009efc:	bf00      	nop
 8009efe:	e7fe      	b.n	8009efe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f06:	f023 0301 	bic.w	r3, r3, #1
 8009f0a:	b2da      	uxtb	r2, r3
 8009f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009f12:	e03a      	b.n	8009f8a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f1a:	f043 0301 	orr.w	r3, r3, #1
 8009f1e:	b2da      	uxtb	r2, r3
 8009f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009f26:	68ba      	ldr	r2, [r7, #8]
 8009f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f2a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f2e:	699b      	ldr	r3, [r3, #24]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d10a      	bne.n	8009f4a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f38:	f383 8811 	msr	BASEPRI, r3
 8009f3c:	f3bf 8f6f 	isb	sy
 8009f40:	f3bf 8f4f 	dsb	sy
 8009f44:	617b      	str	r3, [r7, #20]
}
 8009f46:	bf00      	nop
 8009f48:	e7fe      	b.n	8009f48 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f4c:	699a      	ldr	r2, [r3, #24]
 8009f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f50:	18d1      	adds	r1, r2, r3
 8009f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f58:	f7ff ff06 	bl	8009d68 <prvInsertTimerInActiveList>
					break;
 8009f5c:	e015      	b.n	8009f8a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f64:	f003 0302 	and.w	r3, r3, #2
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d103      	bne.n	8009f74 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009f6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f6e:	f000 fbdf 	bl	800a730 <vPortFree>
 8009f72:	e00a      	b.n	8009f8a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f7a:	f023 0301 	bic.w	r3, r3, #1
 8009f7e:	b2da      	uxtb	r2, r3
 8009f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009f86:	e000      	b.n	8009f8a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8009f88:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009f8a:	4b08      	ldr	r3, [pc, #32]	; (8009fac <prvProcessReceivedCommands+0x1c0>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	1d39      	adds	r1, r7, #4
 8009f90:	2200      	movs	r2, #0
 8009f92:	4618      	mov	r0, r3
 8009f94:	f7fe f96a 	bl	800826c <xQueueReceive>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	f47f af2a 	bne.w	8009df4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009fa0:	bf00      	nop
 8009fa2:	bf00      	nop
 8009fa4:	3730      	adds	r7, #48	; 0x30
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}
 8009faa:	bf00      	nop
 8009fac:	2000137c 	.word	0x2000137c

08009fb0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b088      	sub	sp, #32
 8009fb4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009fb6:	e048      	b.n	800a04a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009fb8:	4b2d      	ldr	r3, [pc, #180]	; (800a070 <prvSwitchTimerLists+0xc0>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	68db      	ldr	r3, [r3, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fc2:	4b2b      	ldr	r3, [pc, #172]	; (800a070 <prvSwitchTimerLists+0xc0>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	68db      	ldr	r3, [r3, #12]
 8009fc8:	68db      	ldr	r3, [r3, #12]
 8009fca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	3304      	adds	r3, #4
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	f7fd fe83 	bl	8007cdc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	6a1b      	ldr	r3, [r3, #32]
 8009fda:	68f8      	ldr	r0, [r7, #12]
 8009fdc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009fe4:	f003 0304 	and.w	r3, r3, #4
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d02e      	beq.n	800a04a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	699b      	ldr	r3, [r3, #24]
 8009ff0:	693a      	ldr	r2, [r7, #16]
 8009ff2:	4413      	add	r3, r2
 8009ff4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009ff6:	68ba      	ldr	r2, [r7, #8]
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	d90e      	bls.n	800a01c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	68ba      	ldr	r2, [r7, #8]
 800a002:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	68fa      	ldr	r2, [r7, #12]
 800a008:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a00a:	4b19      	ldr	r3, [pc, #100]	; (800a070 <prvSwitchTimerLists+0xc0>)
 800a00c:	681a      	ldr	r2, [r3, #0]
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	3304      	adds	r3, #4
 800a012:	4619      	mov	r1, r3
 800a014:	4610      	mov	r0, r2
 800a016:	f7fd fe28 	bl	8007c6a <vListInsert>
 800a01a:	e016      	b.n	800a04a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a01c:	2300      	movs	r3, #0
 800a01e:	9300      	str	r3, [sp, #0]
 800a020:	2300      	movs	r3, #0
 800a022:	693a      	ldr	r2, [r7, #16]
 800a024:	2100      	movs	r1, #0
 800a026:	68f8      	ldr	r0, [r7, #12]
 800a028:	f7ff fd60 	bl	8009aec <xTimerGenericCommand>
 800a02c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d10a      	bne.n	800a04a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a034:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a038:	f383 8811 	msr	BASEPRI, r3
 800a03c:	f3bf 8f6f 	isb	sy
 800a040:	f3bf 8f4f 	dsb	sy
 800a044:	603b      	str	r3, [r7, #0]
}
 800a046:	bf00      	nop
 800a048:	e7fe      	b.n	800a048 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a04a:	4b09      	ldr	r3, [pc, #36]	; (800a070 <prvSwitchTimerLists+0xc0>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d1b1      	bne.n	8009fb8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a054:	4b06      	ldr	r3, [pc, #24]	; (800a070 <prvSwitchTimerLists+0xc0>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a05a:	4b06      	ldr	r3, [pc, #24]	; (800a074 <prvSwitchTimerLists+0xc4>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	4a04      	ldr	r2, [pc, #16]	; (800a070 <prvSwitchTimerLists+0xc0>)
 800a060:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a062:	4a04      	ldr	r2, [pc, #16]	; (800a074 <prvSwitchTimerLists+0xc4>)
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	6013      	str	r3, [r2, #0]
}
 800a068:	bf00      	nop
 800a06a:	3718      	adds	r7, #24
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}
 800a070:	20001374 	.word	0x20001374
 800a074:	20001378 	.word	0x20001378

0800a078 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b082      	sub	sp, #8
 800a07c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a07e:	f000 f969 	bl	800a354 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a082:	4b15      	ldr	r3, [pc, #84]	; (800a0d8 <prvCheckForValidListAndQueue+0x60>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d120      	bne.n	800a0cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a08a:	4814      	ldr	r0, [pc, #80]	; (800a0dc <prvCheckForValidListAndQueue+0x64>)
 800a08c:	f7fd fd9c 	bl	8007bc8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a090:	4813      	ldr	r0, [pc, #76]	; (800a0e0 <prvCheckForValidListAndQueue+0x68>)
 800a092:	f7fd fd99 	bl	8007bc8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a096:	4b13      	ldr	r3, [pc, #76]	; (800a0e4 <prvCheckForValidListAndQueue+0x6c>)
 800a098:	4a10      	ldr	r2, [pc, #64]	; (800a0dc <prvCheckForValidListAndQueue+0x64>)
 800a09a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a09c:	4b12      	ldr	r3, [pc, #72]	; (800a0e8 <prvCheckForValidListAndQueue+0x70>)
 800a09e:	4a10      	ldr	r2, [pc, #64]	; (800a0e0 <prvCheckForValidListAndQueue+0x68>)
 800a0a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	9300      	str	r3, [sp, #0]
 800a0a6:	4b11      	ldr	r3, [pc, #68]	; (800a0ec <prvCheckForValidListAndQueue+0x74>)
 800a0a8:	4a11      	ldr	r2, [pc, #68]	; (800a0f0 <prvCheckForValidListAndQueue+0x78>)
 800a0aa:	2110      	movs	r1, #16
 800a0ac:	200a      	movs	r0, #10
 800a0ae:	f7fd fea7 	bl	8007e00 <xQueueGenericCreateStatic>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	4a08      	ldr	r2, [pc, #32]	; (800a0d8 <prvCheckForValidListAndQueue+0x60>)
 800a0b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a0b8:	4b07      	ldr	r3, [pc, #28]	; (800a0d8 <prvCheckForValidListAndQueue+0x60>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d005      	beq.n	800a0cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a0c0:	4b05      	ldr	r3, [pc, #20]	; (800a0d8 <prvCheckForValidListAndQueue+0x60>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	490b      	ldr	r1, [pc, #44]	; (800a0f4 <prvCheckForValidListAndQueue+0x7c>)
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f7fe fac0 	bl	800864c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a0cc:	f000 f972 	bl	800a3b4 <vPortExitCritical>
}
 800a0d0:	bf00      	nop
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}
 800a0d6:	bf00      	nop
 800a0d8:	2000137c 	.word	0x2000137c
 800a0dc:	2000134c 	.word	0x2000134c
 800a0e0:	20001360 	.word	0x20001360
 800a0e4:	20001374 	.word	0x20001374
 800a0e8:	20001378 	.word	0x20001378
 800a0ec:	20001428 	.word	0x20001428
 800a0f0:	20001388 	.word	0x20001388
 800a0f4:	0800d5d0 	.word	0x0800d5d0

0800a0f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b085      	sub	sp, #20
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	60f8      	str	r0, [r7, #12]
 800a100:	60b9      	str	r1, [r7, #8]
 800a102:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	3b04      	subs	r3, #4
 800a108:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a110:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	3b04      	subs	r3, #4
 800a116:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	f023 0201 	bic.w	r2, r3, #1
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	3b04      	subs	r3, #4
 800a126:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a128:	4a0c      	ldr	r2, [pc, #48]	; (800a15c <pxPortInitialiseStack+0x64>)
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	3b14      	subs	r3, #20
 800a132:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a134:	687a      	ldr	r2, [r7, #4]
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	3b04      	subs	r3, #4
 800a13e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	f06f 0202 	mvn.w	r2, #2
 800a146:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	3b20      	subs	r3, #32
 800a14c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a14e:	68fb      	ldr	r3, [r7, #12]
}
 800a150:	4618      	mov	r0, r3
 800a152:	3714      	adds	r7, #20
 800a154:	46bd      	mov	sp, r7
 800a156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15a:	4770      	bx	lr
 800a15c:	0800a161 	.word	0x0800a161

0800a160 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a160:	b480      	push	{r7}
 800a162:	b085      	sub	sp, #20
 800a164:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a166:	2300      	movs	r3, #0
 800a168:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a16a:	4b12      	ldr	r3, [pc, #72]	; (800a1b4 <prvTaskExitError+0x54>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a172:	d00a      	beq.n	800a18a <prvTaskExitError+0x2a>
	__asm volatile
 800a174:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a178:	f383 8811 	msr	BASEPRI, r3
 800a17c:	f3bf 8f6f 	isb	sy
 800a180:	f3bf 8f4f 	dsb	sy
 800a184:	60fb      	str	r3, [r7, #12]
}
 800a186:	bf00      	nop
 800a188:	e7fe      	b.n	800a188 <prvTaskExitError+0x28>
	__asm volatile
 800a18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a18e:	f383 8811 	msr	BASEPRI, r3
 800a192:	f3bf 8f6f 	isb	sy
 800a196:	f3bf 8f4f 	dsb	sy
 800a19a:	60bb      	str	r3, [r7, #8]
}
 800a19c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a19e:	bf00      	nop
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d0fc      	beq.n	800a1a0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a1a6:	bf00      	nop
 800a1a8:	bf00      	nop
 800a1aa:	3714      	adds	r7, #20
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b2:	4770      	bx	lr
 800a1b4:	2000000c 	.word	0x2000000c
	...

0800a1c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a1c0:	4b07      	ldr	r3, [pc, #28]	; (800a1e0 <pxCurrentTCBConst2>)
 800a1c2:	6819      	ldr	r1, [r3, #0]
 800a1c4:	6808      	ldr	r0, [r1, #0]
 800a1c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1ca:	f380 8809 	msr	PSP, r0
 800a1ce:	f3bf 8f6f 	isb	sy
 800a1d2:	f04f 0000 	mov.w	r0, #0
 800a1d6:	f380 8811 	msr	BASEPRI, r0
 800a1da:	4770      	bx	lr
 800a1dc:	f3af 8000 	nop.w

0800a1e0 <pxCurrentTCBConst2>:
 800a1e0:	20000e4c 	.word	0x20000e4c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a1e4:	bf00      	nop
 800a1e6:	bf00      	nop

0800a1e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a1e8:	4808      	ldr	r0, [pc, #32]	; (800a20c <prvPortStartFirstTask+0x24>)
 800a1ea:	6800      	ldr	r0, [r0, #0]
 800a1ec:	6800      	ldr	r0, [r0, #0]
 800a1ee:	f380 8808 	msr	MSP, r0
 800a1f2:	f04f 0000 	mov.w	r0, #0
 800a1f6:	f380 8814 	msr	CONTROL, r0
 800a1fa:	b662      	cpsie	i
 800a1fc:	b661      	cpsie	f
 800a1fe:	f3bf 8f4f 	dsb	sy
 800a202:	f3bf 8f6f 	isb	sy
 800a206:	df00      	svc	0
 800a208:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a20a:	bf00      	nop
 800a20c:	e000ed08 	.word	0xe000ed08

0800a210 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b086      	sub	sp, #24
 800a214:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a216:	4b46      	ldr	r3, [pc, #280]	; (800a330 <xPortStartScheduler+0x120>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	4a46      	ldr	r2, [pc, #280]	; (800a334 <xPortStartScheduler+0x124>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d10a      	bne.n	800a236 <xPortStartScheduler+0x26>
	__asm volatile
 800a220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a224:	f383 8811 	msr	BASEPRI, r3
 800a228:	f3bf 8f6f 	isb	sy
 800a22c:	f3bf 8f4f 	dsb	sy
 800a230:	613b      	str	r3, [r7, #16]
}
 800a232:	bf00      	nop
 800a234:	e7fe      	b.n	800a234 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a236:	4b3e      	ldr	r3, [pc, #248]	; (800a330 <xPortStartScheduler+0x120>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	4a3f      	ldr	r2, [pc, #252]	; (800a338 <xPortStartScheduler+0x128>)
 800a23c:	4293      	cmp	r3, r2
 800a23e:	d10a      	bne.n	800a256 <xPortStartScheduler+0x46>
	__asm volatile
 800a240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a244:	f383 8811 	msr	BASEPRI, r3
 800a248:	f3bf 8f6f 	isb	sy
 800a24c:	f3bf 8f4f 	dsb	sy
 800a250:	60fb      	str	r3, [r7, #12]
}
 800a252:	bf00      	nop
 800a254:	e7fe      	b.n	800a254 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a256:	4b39      	ldr	r3, [pc, #228]	; (800a33c <xPortStartScheduler+0x12c>)
 800a258:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	781b      	ldrb	r3, [r3, #0]
 800a25e:	b2db      	uxtb	r3, r3
 800a260:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	22ff      	movs	r2, #255	; 0xff
 800a266:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a268:	697b      	ldr	r3, [r7, #20]
 800a26a:	781b      	ldrb	r3, [r3, #0]
 800a26c:	b2db      	uxtb	r3, r3
 800a26e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a270:	78fb      	ldrb	r3, [r7, #3]
 800a272:	b2db      	uxtb	r3, r3
 800a274:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a278:	b2da      	uxtb	r2, r3
 800a27a:	4b31      	ldr	r3, [pc, #196]	; (800a340 <xPortStartScheduler+0x130>)
 800a27c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a27e:	4b31      	ldr	r3, [pc, #196]	; (800a344 <xPortStartScheduler+0x134>)
 800a280:	2207      	movs	r2, #7
 800a282:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a284:	e009      	b.n	800a29a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a286:	4b2f      	ldr	r3, [pc, #188]	; (800a344 <xPortStartScheduler+0x134>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	3b01      	subs	r3, #1
 800a28c:	4a2d      	ldr	r2, [pc, #180]	; (800a344 <xPortStartScheduler+0x134>)
 800a28e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a290:	78fb      	ldrb	r3, [r7, #3]
 800a292:	b2db      	uxtb	r3, r3
 800a294:	005b      	lsls	r3, r3, #1
 800a296:	b2db      	uxtb	r3, r3
 800a298:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a29a:	78fb      	ldrb	r3, [r7, #3]
 800a29c:	b2db      	uxtb	r3, r3
 800a29e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2a2:	2b80      	cmp	r3, #128	; 0x80
 800a2a4:	d0ef      	beq.n	800a286 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a2a6:	4b27      	ldr	r3, [pc, #156]	; (800a344 <xPortStartScheduler+0x134>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f1c3 0307 	rsb	r3, r3, #7
 800a2ae:	2b04      	cmp	r3, #4
 800a2b0:	d00a      	beq.n	800a2c8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b6:	f383 8811 	msr	BASEPRI, r3
 800a2ba:	f3bf 8f6f 	isb	sy
 800a2be:	f3bf 8f4f 	dsb	sy
 800a2c2:	60bb      	str	r3, [r7, #8]
}
 800a2c4:	bf00      	nop
 800a2c6:	e7fe      	b.n	800a2c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a2c8:	4b1e      	ldr	r3, [pc, #120]	; (800a344 <xPortStartScheduler+0x134>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	021b      	lsls	r3, r3, #8
 800a2ce:	4a1d      	ldr	r2, [pc, #116]	; (800a344 <xPortStartScheduler+0x134>)
 800a2d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a2d2:	4b1c      	ldr	r3, [pc, #112]	; (800a344 <xPortStartScheduler+0x134>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a2da:	4a1a      	ldr	r2, [pc, #104]	; (800a344 <xPortStartScheduler+0x134>)
 800a2dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	b2da      	uxtb	r2, r3
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a2e6:	4b18      	ldr	r3, [pc, #96]	; (800a348 <xPortStartScheduler+0x138>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	4a17      	ldr	r2, [pc, #92]	; (800a348 <xPortStartScheduler+0x138>)
 800a2ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a2f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a2f2:	4b15      	ldr	r3, [pc, #84]	; (800a348 <xPortStartScheduler+0x138>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	4a14      	ldr	r2, [pc, #80]	; (800a348 <xPortStartScheduler+0x138>)
 800a2f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a2fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a2fe:	f000 f8dd 	bl	800a4bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a302:	4b12      	ldr	r3, [pc, #72]	; (800a34c <xPortStartScheduler+0x13c>)
 800a304:	2200      	movs	r2, #0
 800a306:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a308:	f000 f8fc 	bl	800a504 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a30c:	4b10      	ldr	r3, [pc, #64]	; (800a350 <xPortStartScheduler+0x140>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	4a0f      	ldr	r2, [pc, #60]	; (800a350 <xPortStartScheduler+0x140>)
 800a312:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a316:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a318:	f7ff ff66 	bl	800a1e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a31c:	f7fe ff98 	bl	8009250 <vTaskSwitchContext>
	prvTaskExitError();
 800a320:	f7ff ff1e 	bl	800a160 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a324:	2300      	movs	r3, #0
}
 800a326:	4618      	mov	r0, r3
 800a328:	3718      	adds	r7, #24
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}
 800a32e:	bf00      	nop
 800a330:	e000ed00 	.word	0xe000ed00
 800a334:	410fc271 	.word	0x410fc271
 800a338:	410fc270 	.word	0x410fc270
 800a33c:	e000e400 	.word	0xe000e400
 800a340:	20001478 	.word	0x20001478
 800a344:	2000147c 	.word	0x2000147c
 800a348:	e000ed20 	.word	0xe000ed20
 800a34c:	2000000c 	.word	0x2000000c
 800a350:	e000ef34 	.word	0xe000ef34

0800a354 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a354:	b480      	push	{r7}
 800a356:	b083      	sub	sp, #12
 800a358:	af00      	add	r7, sp, #0
	__asm volatile
 800a35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a35e:	f383 8811 	msr	BASEPRI, r3
 800a362:	f3bf 8f6f 	isb	sy
 800a366:	f3bf 8f4f 	dsb	sy
 800a36a:	607b      	str	r3, [r7, #4]
}
 800a36c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a36e:	4b0f      	ldr	r3, [pc, #60]	; (800a3ac <vPortEnterCritical+0x58>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	3301      	adds	r3, #1
 800a374:	4a0d      	ldr	r2, [pc, #52]	; (800a3ac <vPortEnterCritical+0x58>)
 800a376:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a378:	4b0c      	ldr	r3, [pc, #48]	; (800a3ac <vPortEnterCritical+0x58>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	2b01      	cmp	r3, #1
 800a37e:	d10f      	bne.n	800a3a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a380:	4b0b      	ldr	r3, [pc, #44]	; (800a3b0 <vPortEnterCritical+0x5c>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	b2db      	uxtb	r3, r3
 800a386:	2b00      	cmp	r3, #0
 800a388:	d00a      	beq.n	800a3a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a38a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a38e:	f383 8811 	msr	BASEPRI, r3
 800a392:	f3bf 8f6f 	isb	sy
 800a396:	f3bf 8f4f 	dsb	sy
 800a39a:	603b      	str	r3, [r7, #0]
}
 800a39c:	bf00      	nop
 800a39e:	e7fe      	b.n	800a39e <vPortEnterCritical+0x4a>
	}
}
 800a3a0:	bf00      	nop
 800a3a2:	370c      	adds	r7, #12
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3aa:	4770      	bx	lr
 800a3ac:	2000000c 	.word	0x2000000c
 800a3b0:	e000ed04 	.word	0xe000ed04

0800a3b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b083      	sub	sp, #12
 800a3b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a3ba:	4b12      	ldr	r3, [pc, #72]	; (800a404 <vPortExitCritical+0x50>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d10a      	bne.n	800a3d8 <vPortExitCritical+0x24>
	__asm volatile
 800a3c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c6:	f383 8811 	msr	BASEPRI, r3
 800a3ca:	f3bf 8f6f 	isb	sy
 800a3ce:	f3bf 8f4f 	dsb	sy
 800a3d2:	607b      	str	r3, [r7, #4]
}
 800a3d4:	bf00      	nop
 800a3d6:	e7fe      	b.n	800a3d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a3d8:	4b0a      	ldr	r3, [pc, #40]	; (800a404 <vPortExitCritical+0x50>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	3b01      	subs	r3, #1
 800a3de:	4a09      	ldr	r2, [pc, #36]	; (800a404 <vPortExitCritical+0x50>)
 800a3e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a3e2:	4b08      	ldr	r3, [pc, #32]	; (800a404 <vPortExitCritical+0x50>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d105      	bne.n	800a3f6 <vPortExitCritical+0x42>
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	f383 8811 	msr	BASEPRI, r3
}
 800a3f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a3f6:	bf00      	nop
 800a3f8:	370c      	adds	r7, #12
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a400:	4770      	bx	lr
 800a402:	bf00      	nop
 800a404:	2000000c 	.word	0x2000000c
	...

0800a410 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a410:	f3ef 8009 	mrs	r0, PSP
 800a414:	f3bf 8f6f 	isb	sy
 800a418:	4b15      	ldr	r3, [pc, #84]	; (800a470 <pxCurrentTCBConst>)
 800a41a:	681a      	ldr	r2, [r3, #0]
 800a41c:	f01e 0f10 	tst.w	lr, #16
 800a420:	bf08      	it	eq
 800a422:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a426:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a42a:	6010      	str	r0, [r2, #0]
 800a42c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a430:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a434:	f380 8811 	msr	BASEPRI, r0
 800a438:	f3bf 8f4f 	dsb	sy
 800a43c:	f3bf 8f6f 	isb	sy
 800a440:	f7fe ff06 	bl	8009250 <vTaskSwitchContext>
 800a444:	f04f 0000 	mov.w	r0, #0
 800a448:	f380 8811 	msr	BASEPRI, r0
 800a44c:	bc09      	pop	{r0, r3}
 800a44e:	6819      	ldr	r1, [r3, #0]
 800a450:	6808      	ldr	r0, [r1, #0]
 800a452:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a456:	f01e 0f10 	tst.w	lr, #16
 800a45a:	bf08      	it	eq
 800a45c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a460:	f380 8809 	msr	PSP, r0
 800a464:	f3bf 8f6f 	isb	sy
 800a468:	4770      	bx	lr
 800a46a:	bf00      	nop
 800a46c:	f3af 8000 	nop.w

0800a470 <pxCurrentTCBConst>:
 800a470:	20000e4c 	.word	0x20000e4c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a474:	bf00      	nop
 800a476:	bf00      	nop

0800a478 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b082      	sub	sp, #8
 800a47c:	af00      	add	r7, sp, #0
	__asm volatile
 800a47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a482:	f383 8811 	msr	BASEPRI, r3
 800a486:	f3bf 8f6f 	isb	sy
 800a48a:	f3bf 8f4f 	dsb	sy
 800a48e:	607b      	str	r3, [r7, #4]
}
 800a490:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a492:	f7fe fe23 	bl	80090dc <xTaskIncrementTick>
 800a496:	4603      	mov	r3, r0
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d003      	beq.n	800a4a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a49c:	4b06      	ldr	r3, [pc, #24]	; (800a4b8 <xPortSysTickHandler+0x40>)
 800a49e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4a2:	601a      	str	r2, [r3, #0]
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	f383 8811 	msr	BASEPRI, r3
}
 800a4ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a4b0:	bf00      	nop
 800a4b2:	3708      	adds	r7, #8
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd80      	pop	{r7, pc}
 800a4b8:	e000ed04 	.word	0xe000ed04

0800a4bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a4bc:	b480      	push	{r7}
 800a4be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a4c0:	4b0b      	ldr	r3, [pc, #44]	; (800a4f0 <vPortSetupTimerInterrupt+0x34>)
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a4c6:	4b0b      	ldr	r3, [pc, #44]	; (800a4f4 <vPortSetupTimerInterrupt+0x38>)
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a4cc:	4b0a      	ldr	r3, [pc, #40]	; (800a4f8 <vPortSetupTimerInterrupt+0x3c>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	4a0a      	ldr	r2, [pc, #40]	; (800a4fc <vPortSetupTimerInterrupt+0x40>)
 800a4d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a4d6:	099b      	lsrs	r3, r3, #6
 800a4d8:	4a09      	ldr	r2, [pc, #36]	; (800a500 <vPortSetupTimerInterrupt+0x44>)
 800a4da:	3b01      	subs	r3, #1
 800a4dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a4de:	4b04      	ldr	r3, [pc, #16]	; (800a4f0 <vPortSetupTimerInterrupt+0x34>)
 800a4e0:	2207      	movs	r2, #7
 800a4e2:	601a      	str	r2, [r3, #0]
}
 800a4e4:	bf00      	nop
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ec:	4770      	bx	lr
 800a4ee:	bf00      	nop
 800a4f0:	e000e010 	.word	0xe000e010
 800a4f4:	e000e018 	.word	0xe000e018
 800a4f8:	20000000 	.word	0x20000000
 800a4fc:	10624dd3 	.word	0x10624dd3
 800a500:	e000e014 	.word	0xe000e014

0800a504 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a504:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a514 <vPortEnableVFP+0x10>
 800a508:	6801      	ldr	r1, [r0, #0]
 800a50a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a50e:	6001      	str	r1, [r0, #0]
 800a510:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a512:	bf00      	nop
 800a514:	e000ed88 	.word	0xe000ed88

0800a518 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a518:	b480      	push	{r7}
 800a51a:	b085      	sub	sp, #20
 800a51c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a51e:	f3ef 8305 	mrs	r3, IPSR
 800a522:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	2b0f      	cmp	r3, #15
 800a528:	d914      	bls.n	800a554 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a52a:	4a17      	ldr	r2, [pc, #92]	; (800a588 <vPortValidateInterruptPriority+0x70>)
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	4413      	add	r3, r2
 800a530:	781b      	ldrb	r3, [r3, #0]
 800a532:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a534:	4b15      	ldr	r3, [pc, #84]	; (800a58c <vPortValidateInterruptPriority+0x74>)
 800a536:	781b      	ldrb	r3, [r3, #0]
 800a538:	7afa      	ldrb	r2, [r7, #11]
 800a53a:	429a      	cmp	r2, r3
 800a53c:	d20a      	bcs.n	800a554 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a542:	f383 8811 	msr	BASEPRI, r3
 800a546:	f3bf 8f6f 	isb	sy
 800a54a:	f3bf 8f4f 	dsb	sy
 800a54e:	607b      	str	r3, [r7, #4]
}
 800a550:	bf00      	nop
 800a552:	e7fe      	b.n	800a552 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a554:	4b0e      	ldr	r3, [pc, #56]	; (800a590 <vPortValidateInterruptPriority+0x78>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a55c:	4b0d      	ldr	r3, [pc, #52]	; (800a594 <vPortValidateInterruptPriority+0x7c>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	429a      	cmp	r2, r3
 800a562:	d90a      	bls.n	800a57a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a564:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a568:	f383 8811 	msr	BASEPRI, r3
 800a56c:	f3bf 8f6f 	isb	sy
 800a570:	f3bf 8f4f 	dsb	sy
 800a574:	603b      	str	r3, [r7, #0]
}
 800a576:	bf00      	nop
 800a578:	e7fe      	b.n	800a578 <vPortValidateInterruptPriority+0x60>
	}
 800a57a:	bf00      	nop
 800a57c:	3714      	adds	r7, #20
 800a57e:	46bd      	mov	sp, r7
 800a580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a584:	4770      	bx	lr
 800a586:	bf00      	nop
 800a588:	e000e3f0 	.word	0xe000e3f0
 800a58c:	20001478 	.word	0x20001478
 800a590:	e000ed0c 	.word	0xe000ed0c
 800a594:	2000147c 	.word	0x2000147c

0800a598 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b08a      	sub	sp, #40	; 0x28
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a5a4:	f7fe fcde 	bl	8008f64 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a5a8:	4b5b      	ldr	r3, [pc, #364]	; (800a718 <pvPortMalloc+0x180>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d101      	bne.n	800a5b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a5b0:	f000 f920 	bl	800a7f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a5b4:	4b59      	ldr	r3, [pc, #356]	; (800a71c <pvPortMalloc+0x184>)
 800a5b6:	681a      	ldr	r2, [r3, #0]
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	4013      	ands	r3, r2
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	f040 8093 	bne.w	800a6e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d01d      	beq.n	800a604 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a5c8:	2208      	movs	r2, #8
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	4413      	add	r3, r2
 800a5ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f003 0307 	and.w	r3, r3, #7
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d014      	beq.n	800a604 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f023 0307 	bic.w	r3, r3, #7
 800a5e0:	3308      	adds	r3, #8
 800a5e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f003 0307 	and.w	r3, r3, #7
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d00a      	beq.n	800a604 <pvPortMalloc+0x6c>
	__asm volatile
 800a5ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5f2:	f383 8811 	msr	BASEPRI, r3
 800a5f6:	f3bf 8f6f 	isb	sy
 800a5fa:	f3bf 8f4f 	dsb	sy
 800a5fe:	617b      	str	r3, [r7, #20]
}
 800a600:	bf00      	nop
 800a602:	e7fe      	b.n	800a602 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d06e      	beq.n	800a6e8 <pvPortMalloc+0x150>
 800a60a:	4b45      	ldr	r3, [pc, #276]	; (800a720 <pvPortMalloc+0x188>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	429a      	cmp	r2, r3
 800a612:	d869      	bhi.n	800a6e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a614:	4b43      	ldr	r3, [pc, #268]	; (800a724 <pvPortMalloc+0x18c>)
 800a616:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a618:	4b42      	ldr	r3, [pc, #264]	; (800a724 <pvPortMalloc+0x18c>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a61e:	e004      	b.n	800a62a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a622:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a62c:	685b      	ldr	r3, [r3, #4]
 800a62e:	687a      	ldr	r2, [r7, #4]
 800a630:	429a      	cmp	r2, r3
 800a632:	d903      	bls.n	800a63c <pvPortMalloc+0xa4>
 800a634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d1f1      	bne.n	800a620 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a63c:	4b36      	ldr	r3, [pc, #216]	; (800a718 <pvPortMalloc+0x180>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a642:	429a      	cmp	r2, r3
 800a644:	d050      	beq.n	800a6e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a646:	6a3b      	ldr	r3, [r7, #32]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	2208      	movs	r2, #8
 800a64c:	4413      	add	r3, r2
 800a64e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a652:	681a      	ldr	r2, [r3, #0]
 800a654:	6a3b      	ldr	r3, [r7, #32]
 800a656:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a65a:	685a      	ldr	r2, [r3, #4]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	1ad2      	subs	r2, r2, r3
 800a660:	2308      	movs	r3, #8
 800a662:	005b      	lsls	r3, r3, #1
 800a664:	429a      	cmp	r2, r3
 800a666:	d91f      	bls.n	800a6a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	4413      	add	r3, r2
 800a66e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a670:	69bb      	ldr	r3, [r7, #24]
 800a672:	f003 0307 	and.w	r3, r3, #7
 800a676:	2b00      	cmp	r3, #0
 800a678:	d00a      	beq.n	800a690 <pvPortMalloc+0xf8>
	__asm volatile
 800a67a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a67e:	f383 8811 	msr	BASEPRI, r3
 800a682:	f3bf 8f6f 	isb	sy
 800a686:	f3bf 8f4f 	dsb	sy
 800a68a:	613b      	str	r3, [r7, #16]
}
 800a68c:	bf00      	nop
 800a68e:	e7fe      	b.n	800a68e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a692:	685a      	ldr	r2, [r3, #4]
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	1ad2      	subs	r2, r2, r3
 800a698:	69bb      	ldr	r3, [r7, #24]
 800a69a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a69e:	687a      	ldr	r2, [r7, #4]
 800a6a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a6a2:	69b8      	ldr	r0, [r7, #24]
 800a6a4:	f000 f908 	bl	800a8b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a6a8:	4b1d      	ldr	r3, [pc, #116]	; (800a720 <pvPortMalloc+0x188>)
 800a6aa:	681a      	ldr	r2, [r3, #0]
 800a6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ae:	685b      	ldr	r3, [r3, #4]
 800a6b0:	1ad3      	subs	r3, r2, r3
 800a6b2:	4a1b      	ldr	r2, [pc, #108]	; (800a720 <pvPortMalloc+0x188>)
 800a6b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a6b6:	4b1a      	ldr	r3, [pc, #104]	; (800a720 <pvPortMalloc+0x188>)
 800a6b8:	681a      	ldr	r2, [r3, #0]
 800a6ba:	4b1b      	ldr	r3, [pc, #108]	; (800a728 <pvPortMalloc+0x190>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	429a      	cmp	r2, r3
 800a6c0:	d203      	bcs.n	800a6ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a6c2:	4b17      	ldr	r3, [pc, #92]	; (800a720 <pvPortMalloc+0x188>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	4a18      	ldr	r2, [pc, #96]	; (800a728 <pvPortMalloc+0x190>)
 800a6c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6cc:	685a      	ldr	r2, [r3, #4]
 800a6ce:	4b13      	ldr	r3, [pc, #76]	; (800a71c <pvPortMalloc+0x184>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	431a      	orrs	r2, r3
 800a6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6da:	2200      	movs	r2, #0
 800a6dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a6de:	4b13      	ldr	r3, [pc, #76]	; (800a72c <pvPortMalloc+0x194>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	3301      	adds	r3, #1
 800a6e4:	4a11      	ldr	r2, [pc, #68]	; (800a72c <pvPortMalloc+0x194>)
 800a6e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a6e8:	f7fe fc4a 	bl	8008f80 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a6ec:	69fb      	ldr	r3, [r7, #28]
 800a6ee:	f003 0307 	and.w	r3, r3, #7
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d00a      	beq.n	800a70c <pvPortMalloc+0x174>
	__asm volatile
 800a6f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6fa:	f383 8811 	msr	BASEPRI, r3
 800a6fe:	f3bf 8f6f 	isb	sy
 800a702:	f3bf 8f4f 	dsb	sy
 800a706:	60fb      	str	r3, [r7, #12]
}
 800a708:	bf00      	nop
 800a70a:	e7fe      	b.n	800a70a <pvPortMalloc+0x172>
	return pvReturn;
 800a70c:	69fb      	ldr	r3, [r7, #28]
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3728      	adds	r7, #40	; 0x28
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}
 800a716:	bf00      	nop
 800a718:	20005088 	.word	0x20005088
 800a71c:	2000509c 	.word	0x2000509c
 800a720:	2000508c 	.word	0x2000508c
 800a724:	20005080 	.word	0x20005080
 800a728:	20005090 	.word	0x20005090
 800a72c:	20005094 	.word	0x20005094

0800a730 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b086      	sub	sp, #24
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d04d      	beq.n	800a7de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a742:	2308      	movs	r3, #8
 800a744:	425b      	negs	r3, r3
 800a746:	697a      	ldr	r2, [r7, #20]
 800a748:	4413      	add	r3, r2
 800a74a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	685a      	ldr	r2, [r3, #4]
 800a754:	4b24      	ldr	r3, [pc, #144]	; (800a7e8 <vPortFree+0xb8>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4013      	ands	r3, r2
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d10a      	bne.n	800a774 <vPortFree+0x44>
	__asm volatile
 800a75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a762:	f383 8811 	msr	BASEPRI, r3
 800a766:	f3bf 8f6f 	isb	sy
 800a76a:	f3bf 8f4f 	dsb	sy
 800a76e:	60fb      	str	r3, [r7, #12]
}
 800a770:	bf00      	nop
 800a772:	e7fe      	b.n	800a772 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d00a      	beq.n	800a792 <vPortFree+0x62>
	__asm volatile
 800a77c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a780:	f383 8811 	msr	BASEPRI, r3
 800a784:	f3bf 8f6f 	isb	sy
 800a788:	f3bf 8f4f 	dsb	sy
 800a78c:	60bb      	str	r3, [r7, #8]
}
 800a78e:	bf00      	nop
 800a790:	e7fe      	b.n	800a790 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	685a      	ldr	r2, [r3, #4]
 800a796:	4b14      	ldr	r3, [pc, #80]	; (800a7e8 <vPortFree+0xb8>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	4013      	ands	r3, r2
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d01e      	beq.n	800a7de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d11a      	bne.n	800a7de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	685a      	ldr	r2, [r3, #4]
 800a7ac:	4b0e      	ldr	r3, [pc, #56]	; (800a7e8 <vPortFree+0xb8>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	43db      	mvns	r3, r3
 800a7b2:	401a      	ands	r2, r3
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a7b8:	f7fe fbd4 	bl	8008f64 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a7bc:	693b      	ldr	r3, [r7, #16]
 800a7be:	685a      	ldr	r2, [r3, #4]
 800a7c0:	4b0a      	ldr	r3, [pc, #40]	; (800a7ec <vPortFree+0xbc>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	4413      	add	r3, r2
 800a7c6:	4a09      	ldr	r2, [pc, #36]	; (800a7ec <vPortFree+0xbc>)
 800a7c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a7ca:	6938      	ldr	r0, [r7, #16]
 800a7cc:	f000 f874 	bl	800a8b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a7d0:	4b07      	ldr	r3, [pc, #28]	; (800a7f0 <vPortFree+0xc0>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	3301      	adds	r3, #1
 800a7d6:	4a06      	ldr	r2, [pc, #24]	; (800a7f0 <vPortFree+0xc0>)
 800a7d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a7da:	f7fe fbd1 	bl	8008f80 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a7de:	bf00      	nop
 800a7e0:	3718      	adds	r7, #24
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}
 800a7e6:	bf00      	nop
 800a7e8:	2000509c 	.word	0x2000509c
 800a7ec:	2000508c 	.word	0x2000508c
 800a7f0:	20005098 	.word	0x20005098

0800a7f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b085      	sub	sp, #20
 800a7f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a7fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a7fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a800:	4b27      	ldr	r3, [pc, #156]	; (800a8a0 <prvHeapInit+0xac>)
 800a802:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	f003 0307 	and.w	r3, r3, #7
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d00c      	beq.n	800a828 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	3307      	adds	r3, #7
 800a812:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	f023 0307 	bic.w	r3, r3, #7
 800a81a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a81c:	68ba      	ldr	r2, [r7, #8]
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	1ad3      	subs	r3, r2, r3
 800a822:	4a1f      	ldr	r2, [pc, #124]	; (800a8a0 <prvHeapInit+0xac>)
 800a824:	4413      	add	r3, r2
 800a826:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a82c:	4a1d      	ldr	r2, [pc, #116]	; (800a8a4 <prvHeapInit+0xb0>)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a832:	4b1c      	ldr	r3, [pc, #112]	; (800a8a4 <prvHeapInit+0xb0>)
 800a834:	2200      	movs	r2, #0
 800a836:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	68ba      	ldr	r2, [r7, #8]
 800a83c:	4413      	add	r3, r2
 800a83e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a840:	2208      	movs	r2, #8
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	1a9b      	subs	r3, r3, r2
 800a846:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	f023 0307 	bic.w	r3, r3, #7
 800a84e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	4a15      	ldr	r2, [pc, #84]	; (800a8a8 <prvHeapInit+0xb4>)
 800a854:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a856:	4b14      	ldr	r3, [pc, #80]	; (800a8a8 <prvHeapInit+0xb4>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	2200      	movs	r2, #0
 800a85c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a85e:	4b12      	ldr	r3, [pc, #72]	; (800a8a8 <prvHeapInit+0xb4>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	2200      	movs	r2, #0
 800a864:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	68fa      	ldr	r2, [r7, #12]
 800a86e:	1ad2      	subs	r2, r2, r3
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a874:	4b0c      	ldr	r3, [pc, #48]	; (800a8a8 <prvHeapInit+0xb4>)
 800a876:	681a      	ldr	r2, [r3, #0]
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	685b      	ldr	r3, [r3, #4]
 800a880:	4a0a      	ldr	r2, [pc, #40]	; (800a8ac <prvHeapInit+0xb8>)
 800a882:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	685b      	ldr	r3, [r3, #4]
 800a888:	4a09      	ldr	r2, [pc, #36]	; (800a8b0 <prvHeapInit+0xbc>)
 800a88a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a88c:	4b09      	ldr	r3, [pc, #36]	; (800a8b4 <prvHeapInit+0xc0>)
 800a88e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a892:	601a      	str	r2, [r3, #0]
}
 800a894:	bf00      	nop
 800a896:	3714      	adds	r7, #20
 800a898:	46bd      	mov	sp, r7
 800a89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89e:	4770      	bx	lr
 800a8a0:	20001480 	.word	0x20001480
 800a8a4:	20005080 	.word	0x20005080
 800a8a8:	20005088 	.word	0x20005088
 800a8ac:	20005090 	.word	0x20005090
 800a8b0:	2000508c 	.word	0x2000508c
 800a8b4:	2000509c 	.word	0x2000509c

0800a8b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b085      	sub	sp, #20
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a8c0:	4b28      	ldr	r3, [pc, #160]	; (800a964 <prvInsertBlockIntoFreeList+0xac>)
 800a8c2:	60fb      	str	r3, [r7, #12]
 800a8c4:	e002      	b.n	800a8cc <prvInsertBlockIntoFreeList+0x14>
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	60fb      	str	r3, [r7, #12]
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	687a      	ldr	r2, [r7, #4]
 800a8d2:	429a      	cmp	r2, r3
 800a8d4:	d8f7      	bhi.n	800a8c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	685b      	ldr	r3, [r3, #4]
 800a8de:	68ba      	ldr	r2, [r7, #8]
 800a8e0:	4413      	add	r3, r2
 800a8e2:	687a      	ldr	r2, [r7, #4]
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	d108      	bne.n	800a8fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	685a      	ldr	r2, [r3, #4]
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	441a      	add	r2, r3
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	685b      	ldr	r3, [r3, #4]
 800a902:	68ba      	ldr	r2, [r7, #8]
 800a904:	441a      	add	r2, r3
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	429a      	cmp	r2, r3
 800a90c:	d118      	bne.n	800a940 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681a      	ldr	r2, [r3, #0]
 800a912:	4b15      	ldr	r3, [pc, #84]	; (800a968 <prvInsertBlockIntoFreeList+0xb0>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	429a      	cmp	r2, r3
 800a918:	d00d      	beq.n	800a936 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	685a      	ldr	r2, [r3, #4]
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	685b      	ldr	r3, [r3, #4]
 800a924:	441a      	add	r2, r3
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	681a      	ldr	r2, [r3, #0]
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	601a      	str	r2, [r3, #0]
 800a934:	e008      	b.n	800a948 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a936:	4b0c      	ldr	r3, [pc, #48]	; (800a968 <prvInsertBlockIntoFreeList+0xb0>)
 800a938:	681a      	ldr	r2, [r3, #0]
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	601a      	str	r2, [r3, #0]
 800a93e:	e003      	b.n	800a948 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	681a      	ldr	r2, [r3, #0]
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a948:	68fa      	ldr	r2, [r7, #12]
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	429a      	cmp	r2, r3
 800a94e:	d002      	beq.n	800a956 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	687a      	ldr	r2, [r7, #4]
 800a954:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a956:	bf00      	nop
 800a958:	3714      	adds	r7, #20
 800a95a:	46bd      	mov	sp, r7
 800a95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a960:	4770      	bx	lr
 800a962:	bf00      	nop
 800a964:	20005080 	.word	0x20005080
 800a968:	20005088 	.word	0x20005088

0800a96c <__cvt>:
 800a96c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a970:	ec55 4b10 	vmov	r4, r5, d0
 800a974:	2d00      	cmp	r5, #0
 800a976:	460e      	mov	r6, r1
 800a978:	4619      	mov	r1, r3
 800a97a:	462b      	mov	r3, r5
 800a97c:	bfbb      	ittet	lt
 800a97e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a982:	461d      	movlt	r5, r3
 800a984:	2300      	movge	r3, #0
 800a986:	232d      	movlt	r3, #45	; 0x2d
 800a988:	700b      	strb	r3, [r1, #0]
 800a98a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a98c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a990:	4691      	mov	r9, r2
 800a992:	f023 0820 	bic.w	r8, r3, #32
 800a996:	bfbc      	itt	lt
 800a998:	4622      	movlt	r2, r4
 800a99a:	4614      	movlt	r4, r2
 800a99c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a9a0:	d005      	beq.n	800a9ae <__cvt+0x42>
 800a9a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a9a6:	d100      	bne.n	800a9aa <__cvt+0x3e>
 800a9a8:	3601      	adds	r6, #1
 800a9aa:	2102      	movs	r1, #2
 800a9ac:	e000      	b.n	800a9b0 <__cvt+0x44>
 800a9ae:	2103      	movs	r1, #3
 800a9b0:	ab03      	add	r3, sp, #12
 800a9b2:	9301      	str	r3, [sp, #4]
 800a9b4:	ab02      	add	r3, sp, #8
 800a9b6:	9300      	str	r3, [sp, #0]
 800a9b8:	ec45 4b10 	vmov	d0, r4, r5
 800a9bc:	4653      	mov	r3, sl
 800a9be:	4632      	mov	r2, r6
 800a9c0:	f000 ffae 	bl	800b920 <_dtoa_r>
 800a9c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a9c8:	4607      	mov	r7, r0
 800a9ca:	d102      	bne.n	800a9d2 <__cvt+0x66>
 800a9cc:	f019 0f01 	tst.w	r9, #1
 800a9d0:	d022      	beq.n	800aa18 <__cvt+0xac>
 800a9d2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a9d6:	eb07 0906 	add.w	r9, r7, r6
 800a9da:	d110      	bne.n	800a9fe <__cvt+0x92>
 800a9dc:	783b      	ldrb	r3, [r7, #0]
 800a9de:	2b30      	cmp	r3, #48	; 0x30
 800a9e0:	d10a      	bne.n	800a9f8 <__cvt+0x8c>
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	4620      	mov	r0, r4
 800a9e8:	4629      	mov	r1, r5
 800a9ea:	f7f6 f875 	bl	8000ad8 <__aeabi_dcmpeq>
 800a9ee:	b918      	cbnz	r0, 800a9f8 <__cvt+0x8c>
 800a9f0:	f1c6 0601 	rsb	r6, r6, #1
 800a9f4:	f8ca 6000 	str.w	r6, [sl]
 800a9f8:	f8da 3000 	ldr.w	r3, [sl]
 800a9fc:	4499      	add	r9, r3
 800a9fe:	2200      	movs	r2, #0
 800aa00:	2300      	movs	r3, #0
 800aa02:	4620      	mov	r0, r4
 800aa04:	4629      	mov	r1, r5
 800aa06:	f7f6 f867 	bl	8000ad8 <__aeabi_dcmpeq>
 800aa0a:	b108      	cbz	r0, 800aa10 <__cvt+0xa4>
 800aa0c:	f8cd 900c 	str.w	r9, [sp, #12]
 800aa10:	2230      	movs	r2, #48	; 0x30
 800aa12:	9b03      	ldr	r3, [sp, #12]
 800aa14:	454b      	cmp	r3, r9
 800aa16:	d307      	bcc.n	800aa28 <__cvt+0xbc>
 800aa18:	9b03      	ldr	r3, [sp, #12]
 800aa1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa1c:	1bdb      	subs	r3, r3, r7
 800aa1e:	4638      	mov	r0, r7
 800aa20:	6013      	str	r3, [r2, #0]
 800aa22:	b004      	add	sp, #16
 800aa24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa28:	1c59      	adds	r1, r3, #1
 800aa2a:	9103      	str	r1, [sp, #12]
 800aa2c:	701a      	strb	r2, [r3, #0]
 800aa2e:	e7f0      	b.n	800aa12 <__cvt+0xa6>

0800aa30 <__exponent>:
 800aa30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa32:	4603      	mov	r3, r0
 800aa34:	2900      	cmp	r1, #0
 800aa36:	bfb8      	it	lt
 800aa38:	4249      	neglt	r1, r1
 800aa3a:	f803 2b02 	strb.w	r2, [r3], #2
 800aa3e:	bfb4      	ite	lt
 800aa40:	222d      	movlt	r2, #45	; 0x2d
 800aa42:	222b      	movge	r2, #43	; 0x2b
 800aa44:	2909      	cmp	r1, #9
 800aa46:	7042      	strb	r2, [r0, #1]
 800aa48:	dd2a      	ble.n	800aaa0 <__exponent+0x70>
 800aa4a:	f10d 0207 	add.w	r2, sp, #7
 800aa4e:	4617      	mov	r7, r2
 800aa50:	260a      	movs	r6, #10
 800aa52:	4694      	mov	ip, r2
 800aa54:	fb91 f5f6 	sdiv	r5, r1, r6
 800aa58:	fb06 1415 	mls	r4, r6, r5, r1
 800aa5c:	3430      	adds	r4, #48	; 0x30
 800aa5e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800aa62:	460c      	mov	r4, r1
 800aa64:	2c63      	cmp	r4, #99	; 0x63
 800aa66:	f102 32ff 	add.w	r2, r2, #4294967295
 800aa6a:	4629      	mov	r1, r5
 800aa6c:	dcf1      	bgt.n	800aa52 <__exponent+0x22>
 800aa6e:	3130      	adds	r1, #48	; 0x30
 800aa70:	f1ac 0402 	sub.w	r4, ip, #2
 800aa74:	f802 1c01 	strb.w	r1, [r2, #-1]
 800aa78:	1c41      	adds	r1, r0, #1
 800aa7a:	4622      	mov	r2, r4
 800aa7c:	42ba      	cmp	r2, r7
 800aa7e:	d30a      	bcc.n	800aa96 <__exponent+0x66>
 800aa80:	f10d 0209 	add.w	r2, sp, #9
 800aa84:	eba2 020c 	sub.w	r2, r2, ip
 800aa88:	42bc      	cmp	r4, r7
 800aa8a:	bf88      	it	hi
 800aa8c:	2200      	movhi	r2, #0
 800aa8e:	4413      	add	r3, r2
 800aa90:	1a18      	subs	r0, r3, r0
 800aa92:	b003      	add	sp, #12
 800aa94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa96:	f812 5b01 	ldrb.w	r5, [r2], #1
 800aa9a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800aa9e:	e7ed      	b.n	800aa7c <__exponent+0x4c>
 800aaa0:	2330      	movs	r3, #48	; 0x30
 800aaa2:	3130      	adds	r1, #48	; 0x30
 800aaa4:	7083      	strb	r3, [r0, #2]
 800aaa6:	70c1      	strb	r1, [r0, #3]
 800aaa8:	1d03      	adds	r3, r0, #4
 800aaaa:	e7f1      	b.n	800aa90 <__exponent+0x60>

0800aaac <_printf_float>:
 800aaac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aab0:	ed2d 8b02 	vpush	{d8}
 800aab4:	b08d      	sub	sp, #52	; 0x34
 800aab6:	460c      	mov	r4, r1
 800aab8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800aabc:	4616      	mov	r6, r2
 800aabe:	461f      	mov	r7, r3
 800aac0:	4605      	mov	r5, r0
 800aac2:	f000 fdc9 	bl	800b658 <_localeconv_r>
 800aac6:	f8d0 a000 	ldr.w	sl, [r0]
 800aaca:	4650      	mov	r0, sl
 800aacc:	f7f5 fbd8 	bl	8000280 <strlen>
 800aad0:	2300      	movs	r3, #0
 800aad2:	930a      	str	r3, [sp, #40]	; 0x28
 800aad4:	6823      	ldr	r3, [r4, #0]
 800aad6:	9305      	str	r3, [sp, #20]
 800aad8:	f8d8 3000 	ldr.w	r3, [r8]
 800aadc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800aae0:	3307      	adds	r3, #7
 800aae2:	f023 0307 	bic.w	r3, r3, #7
 800aae6:	f103 0208 	add.w	r2, r3, #8
 800aaea:	f8c8 2000 	str.w	r2, [r8]
 800aaee:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aaf2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800aaf6:	9307      	str	r3, [sp, #28]
 800aaf8:	f8cd 8018 	str.w	r8, [sp, #24]
 800aafc:	ee08 0a10 	vmov	s16, r0
 800ab00:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800ab04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab08:	4b9e      	ldr	r3, [pc, #632]	; (800ad84 <_printf_float+0x2d8>)
 800ab0a:	f04f 32ff 	mov.w	r2, #4294967295
 800ab0e:	f7f6 f815 	bl	8000b3c <__aeabi_dcmpun>
 800ab12:	bb88      	cbnz	r0, 800ab78 <_printf_float+0xcc>
 800ab14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab18:	4b9a      	ldr	r3, [pc, #616]	; (800ad84 <_printf_float+0x2d8>)
 800ab1a:	f04f 32ff 	mov.w	r2, #4294967295
 800ab1e:	f7f5 ffef 	bl	8000b00 <__aeabi_dcmple>
 800ab22:	bb48      	cbnz	r0, 800ab78 <_printf_float+0xcc>
 800ab24:	2200      	movs	r2, #0
 800ab26:	2300      	movs	r3, #0
 800ab28:	4640      	mov	r0, r8
 800ab2a:	4649      	mov	r1, r9
 800ab2c:	f7f5 ffde 	bl	8000aec <__aeabi_dcmplt>
 800ab30:	b110      	cbz	r0, 800ab38 <_printf_float+0x8c>
 800ab32:	232d      	movs	r3, #45	; 0x2d
 800ab34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab38:	4a93      	ldr	r2, [pc, #588]	; (800ad88 <_printf_float+0x2dc>)
 800ab3a:	4b94      	ldr	r3, [pc, #592]	; (800ad8c <_printf_float+0x2e0>)
 800ab3c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ab40:	bf94      	ite	ls
 800ab42:	4690      	movls	r8, r2
 800ab44:	4698      	movhi	r8, r3
 800ab46:	2303      	movs	r3, #3
 800ab48:	6123      	str	r3, [r4, #16]
 800ab4a:	9b05      	ldr	r3, [sp, #20]
 800ab4c:	f023 0304 	bic.w	r3, r3, #4
 800ab50:	6023      	str	r3, [r4, #0]
 800ab52:	f04f 0900 	mov.w	r9, #0
 800ab56:	9700      	str	r7, [sp, #0]
 800ab58:	4633      	mov	r3, r6
 800ab5a:	aa0b      	add	r2, sp, #44	; 0x2c
 800ab5c:	4621      	mov	r1, r4
 800ab5e:	4628      	mov	r0, r5
 800ab60:	f000 f9da 	bl	800af18 <_printf_common>
 800ab64:	3001      	adds	r0, #1
 800ab66:	f040 8090 	bne.w	800ac8a <_printf_float+0x1de>
 800ab6a:	f04f 30ff 	mov.w	r0, #4294967295
 800ab6e:	b00d      	add	sp, #52	; 0x34
 800ab70:	ecbd 8b02 	vpop	{d8}
 800ab74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab78:	4642      	mov	r2, r8
 800ab7a:	464b      	mov	r3, r9
 800ab7c:	4640      	mov	r0, r8
 800ab7e:	4649      	mov	r1, r9
 800ab80:	f7f5 ffdc 	bl	8000b3c <__aeabi_dcmpun>
 800ab84:	b140      	cbz	r0, 800ab98 <_printf_float+0xec>
 800ab86:	464b      	mov	r3, r9
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	bfbc      	itt	lt
 800ab8c:	232d      	movlt	r3, #45	; 0x2d
 800ab8e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ab92:	4a7f      	ldr	r2, [pc, #508]	; (800ad90 <_printf_float+0x2e4>)
 800ab94:	4b7f      	ldr	r3, [pc, #508]	; (800ad94 <_printf_float+0x2e8>)
 800ab96:	e7d1      	b.n	800ab3c <_printf_float+0x90>
 800ab98:	6863      	ldr	r3, [r4, #4]
 800ab9a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ab9e:	9206      	str	r2, [sp, #24]
 800aba0:	1c5a      	adds	r2, r3, #1
 800aba2:	d13f      	bne.n	800ac24 <_printf_float+0x178>
 800aba4:	2306      	movs	r3, #6
 800aba6:	6063      	str	r3, [r4, #4]
 800aba8:	9b05      	ldr	r3, [sp, #20]
 800abaa:	6861      	ldr	r1, [r4, #4]
 800abac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800abb0:	2300      	movs	r3, #0
 800abb2:	9303      	str	r3, [sp, #12]
 800abb4:	ab0a      	add	r3, sp, #40	; 0x28
 800abb6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800abba:	ab09      	add	r3, sp, #36	; 0x24
 800abbc:	ec49 8b10 	vmov	d0, r8, r9
 800abc0:	9300      	str	r3, [sp, #0]
 800abc2:	6022      	str	r2, [r4, #0]
 800abc4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800abc8:	4628      	mov	r0, r5
 800abca:	f7ff fecf 	bl	800a96c <__cvt>
 800abce:	9b06      	ldr	r3, [sp, #24]
 800abd0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800abd2:	2b47      	cmp	r3, #71	; 0x47
 800abd4:	4680      	mov	r8, r0
 800abd6:	d108      	bne.n	800abea <_printf_float+0x13e>
 800abd8:	1cc8      	adds	r0, r1, #3
 800abda:	db02      	blt.n	800abe2 <_printf_float+0x136>
 800abdc:	6863      	ldr	r3, [r4, #4]
 800abde:	4299      	cmp	r1, r3
 800abe0:	dd41      	ble.n	800ac66 <_printf_float+0x1ba>
 800abe2:	f1ab 0302 	sub.w	r3, fp, #2
 800abe6:	fa5f fb83 	uxtb.w	fp, r3
 800abea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800abee:	d820      	bhi.n	800ac32 <_printf_float+0x186>
 800abf0:	3901      	subs	r1, #1
 800abf2:	465a      	mov	r2, fp
 800abf4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800abf8:	9109      	str	r1, [sp, #36]	; 0x24
 800abfa:	f7ff ff19 	bl	800aa30 <__exponent>
 800abfe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac00:	1813      	adds	r3, r2, r0
 800ac02:	2a01      	cmp	r2, #1
 800ac04:	4681      	mov	r9, r0
 800ac06:	6123      	str	r3, [r4, #16]
 800ac08:	dc02      	bgt.n	800ac10 <_printf_float+0x164>
 800ac0a:	6822      	ldr	r2, [r4, #0]
 800ac0c:	07d2      	lsls	r2, r2, #31
 800ac0e:	d501      	bpl.n	800ac14 <_printf_float+0x168>
 800ac10:	3301      	adds	r3, #1
 800ac12:	6123      	str	r3, [r4, #16]
 800ac14:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d09c      	beq.n	800ab56 <_printf_float+0xaa>
 800ac1c:	232d      	movs	r3, #45	; 0x2d
 800ac1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac22:	e798      	b.n	800ab56 <_printf_float+0xaa>
 800ac24:	9a06      	ldr	r2, [sp, #24]
 800ac26:	2a47      	cmp	r2, #71	; 0x47
 800ac28:	d1be      	bne.n	800aba8 <_printf_float+0xfc>
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d1bc      	bne.n	800aba8 <_printf_float+0xfc>
 800ac2e:	2301      	movs	r3, #1
 800ac30:	e7b9      	b.n	800aba6 <_printf_float+0xfa>
 800ac32:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ac36:	d118      	bne.n	800ac6a <_printf_float+0x1be>
 800ac38:	2900      	cmp	r1, #0
 800ac3a:	6863      	ldr	r3, [r4, #4]
 800ac3c:	dd0b      	ble.n	800ac56 <_printf_float+0x1aa>
 800ac3e:	6121      	str	r1, [r4, #16]
 800ac40:	b913      	cbnz	r3, 800ac48 <_printf_float+0x19c>
 800ac42:	6822      	ldr	r2, [r4, #0]
 800ac44:	07d0      	lsls	r0, r2, #31
 800ac46:	d502      	bpl.n	800ac4e <_printf_float+0x1a2>
 800ac48:	3301      	adds	r3, #1
 800ac4a:	440b      	add	r3, r1
 800ac4c:	6123      	str	r3, [r4, #16]
 800ac4e:	65a1      	str	r1, [r4, #88]	; 0x58
 800ac50:	f04f 0900 	mov.w	r9, #0
 800ac54:	e7de      	b.n	800ac14 <_printf_float+0x168>
 800ac56:	b913      	cbnz	r3, 800ac5e <_printf_float+0x1b2>
 800ac58:	6822      	ldr	r2, [r4, #0]
 800ac5a:	07d2      	lsls	r2, r2, #31
 800ac5c:	d501      	bpl.n	800ac62 <_printf_float+0x1b6>
 800ac5e:	3302      	adds	r3, #2
 800ac60:	e7f4      	b.n	800ac4c <_printf_float+0x1a0>
 800ac62:	2301      	movs	r3, #1
 800ac64:	e7f2      	b.n	800ac4c <_printf_float+0x1a0>
 800ac66:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ac6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac6c:	4299      	cmp	r1, r3
 800ac6e:	db05      	blt.n	800ac7c <_printf_float+0x1d0>
 800ac70:	6823      	ldr	r3, [r4, #0]
 800ac72:	6121      	str	r1, [r4, #16]
 800ac74:	07d8      	lsls	r0, r3, #31
 800ac76:	d5ea      	bpl.n	800ac4e <_printf_float+0x1a2>
 800ac78:	1c4b      	adds	r3, r1, #1
 800ac7a:	e7e7      	b.n	800ac4c <_printf_float+0x1a0>
 800ac7c:	2900      	cmp	r1, #0
 800ac7e:	bfd4      	ite	le
 800ac80:	f1c1 0202 	rsble	r2, r1, #2
 800ac84:	2201      	movgt	r2, #1
 800ac86:	4413      	add	r3, r2
 800ac88:	e7e0      	b.n	800ac4c <_printf_float+0x1a0>
 800ac8a:	6823      	ldr	r3, [r4, #0]
 800ac8c:	055a      	lsls	r2, r3, #21
 800ac8e:	d407      	bmi.n	800aca0 <_printf_float+0x1f4>
 800ac90:	6923      	ldr	r3, [r4, #16]
 800ac92:	4642      	mov	r2, r8
 800ac94:	4631      	mov	r1, r6
 800ac96:	4628      	mov	r0, r5
 800ac98:	47b8      	blx	r7
 800ac9a:	3001      	adds	r0, #1
 800ac9c:	d12c      	bne.n	800acf8 <_printf_float+0x24c>
 800ac9e:	e764      	b.n	800ab6a <_printf_float+0xbe>
 800aca0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800aca4:	f240 80e0 	bls.w	800ae68 <_printf_float+0x3bc>
 800aca8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800acac:	2200      	movs	r2, #0
 800acae:	2300      	movs	r3, #0
 800acb0:	f7f5 ff12 	bl	8000ad8 <__aeabi_dcmpeq>
 800acb4:	2800      	cmp	r0, #0
 800acb6:	d034      	beq.n	800ad22 <_printf_float+0x276>
 800acb8:	4a37      	ldr	r2, [pc, #220]	; (800ad98 <_printf_float+0x2ec>)
 800acba:	2301      	movs	r3, #1
 800acbc:	4631      	mov	r1, r6
 800acbe:	4628      	mov	r0, r5
 800acc0:	47b8      	blx	r7
 800acc2:	3001      	adds	r0, #1
 800acc4:	f43f af51 	beq.w	800ab6a <_printf_float+0xbe>
 800acc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800accc:	429a      	cmp	r2, r3
 800acce:	db02      	blt.n	800acd6 <_printf_float+0x22a>
 800acd0:	6823      	ldr	r3, [r4, #0]
 800acd2:	07d8      	lsls	r0, r3, #31
 800acd4:	d510      	bpl.n	800acf8 <_printf_float+0x24c>
 800acd6:	ee18 3a10 	vmov	r3, s16
 800acda:	4652      	mov	r2, sl
 800acdc:	4631      	mov	r1, r6
 800acde:	4628      	mov	r0, r5
 800ace0:	47b8      	blx	r7
 800ace2:	3001      	adds	r0, #1
 800ace4:	f43f af41 	beq.w	800ab6a <_printf_float+0xbe>
 800ace8:	f04f 0800 	mov.w	r8, #0
 800acec:	f104 091a 	add.w	r9, r4, #26
 800acf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acf2:	3b01      	subs	r3, #1
 800acf4:	4543      	cmp	r3, r8
 800acf6:	dc09      	bgt.n	800ad0c <_printf_float+0x260>
 800acf8:	6823      	ldr	r3, [r4, #0]
 800acfa:	079b      	lsls	r3, r3, #30
 800acfc:	f100 8107 	bmi.w	800af0e <_printf_float+0x462>
 800ad00:	68e0      	ldr	r0, [r4, #12]
 800ad02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad04:	4298      	cmp	r0, r3
 800ad06:	bfb8      	it	lt
 800ad08:	4618      	movlt	r0, r3
 800ad0a:	e730      	b.n	800ab6e <_printf_float+0xc2>
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	464a      	mov	r2, r9
 800ad10:	4631      	mov	r1, r6
 800ad12:	4628      	mov	r0, r5
 800ad14:	47b8      	blx	r7
 800ad16:	3001      	adds	r0, #1
 800ad18:	f43f af27 	beq.w	800ab6a <_printf_float+0xbe>
 800ad1c:	f108 0801 	add.w	r8, r8, #1
 800ad20:	e7e6      	b.n	800acf0 <_printf_float+0x244>
 800ad22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	dc39      	bgt.n	800ad9c <_printf_float+0x2f0>
 800ad28:	4a1b      	ldr	r2, [pc, #108]	; (800ad98 <_printf_float+0x2ec>)
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	4631      	mov	r1, r6
 800ad2e:	4628      	mov	r0, r5
 800ad30:	47b8      	blx	r7
 800ad32:	3001      	adds	r0, #1
 800ad34:	f43f af19 	beq.w	800ab6a <_printf_float+0xbe>
 800ad38:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ad3c:	4313      	orrs	r3, r2
 800ad3e:	d102      	bne.n	800ad46 <_printf_float+0x29a>
 800ad40:	6823      	ldr	r3, [r4, #0]
 800ad42:	07d9      	lsls	r1, r3, #31
 800ad44:	d5d8      	bpl.n	800acf8 <_printf_float+0x24c>
 800ad46:	ee18 3a10 	vmov	r3, s16
 800ad4a:	4652      	mov	r2, sl
 800ad4c:	4631      	mov	r1, r6
 800ad4e:	4628      	mov	r0, r5
 800ad50:	47b8      	blx	r7
 800ad52:	3001      	adds	r0, #1
 800ad54:	f43f af09 	beq.w	800ab6a <_printf_float+0xbe>
 800ad58:	f04f 0900 	mov.w	r9, #0
 800ad5c:	f104 0a1a 	add.w	sl, r4, #26
 800ad60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad62:	425b      	negs	r3, r3
 800ad64:	454b      	cmp	r3, r9
 800ad66:	dc01      	bgt.n	800ad6c <_printf_float+0x2c0>
 800ad68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad6a:	e792      	b.n	800ac92 <_printf_float+0x1e6>
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	4652      	mov	r2, sl
 800ad70:	4631      	mov	r1, r6
 800ad72:	4628      	mov	r0, r5
 800ad74:	47b8      	blx	r7
 800ad76:	3001      	adds	r0, #1
 800ad78:	f43f aef7 	beq.w	800ab6a <_printf_float+0xbe>
 800ad7c:	f109 0901 	add.w	r9, r9, #1
 800ad80:	e7ee      	b.n	800ad60 <_printf_float+0x2b4>
 800ad82:	bf00      	nop
 800ad84:	7fefffff 	.word	0x7fefffff
 800ad88:	0800d5f0 	.word	0x0800d5f0
 800ad8c:	0800d5f4 	.word	0x0800d5f4
 800ad90:	0800d5f8 	.word	0x0800d5f8
 800ad94:	0800d5fc 	.word	0x0800d5fc
 800ad98:	0800d600 	.word	0x0800d600
 800ad9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ada0:	429a      	cmp	r2, r3
 800ada2:	bfa8      	it	ge
 800ada4:	461a      	movge	r2, r3
 800ada6:	2a00      	cmp	r2, #0
 800ada8:	4691      	mov	r9, r2
 800adaa:	dc37      	bgt.n	800ae1c <_printf_float+0x370>
 800adac:	f04f 0b00 	mov.w	fp, #0
 800adb0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800adb4:	f104 021a 	add.w	r2, r4, #26
 800adb8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800adba:	9305      	str	r3, [sp, #20]
 800adbc:	eba3 0309 	sub.w	r3, r3, r9
 800adc0:	455b      	cmp	r3, fp
 800adc2:	dc33      	bgt.n	800ae2c <_printf_float+0x380>
 800adc4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800adc8:	429a      	cmp	r2, r3
 800adca:	db3b      	blt.n	800ae44 <_printf_float+0x398>
 800adcc:	6823      	ldr	r3, [r4, #0]
 800adce:	07da      	lsls	r2, r3, #31
 800add0:	d438      	bmi.n	800ae44 <_printf_float+0x398>
 800add2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800add6:	eba2 0903 	sub.w	r9, r2, r3
 800adda:	9b05      	ldr	r3, [sp, #20]
 800addc:	1ad2      	subs	r2, r2, r3
 800adde:	4591      	cmp	r9, r2
 800ade0:	bfa8      	it	ge
 800ade2:	4691      	movge	r9, r2
 800ade4:	f1b9 0f00 	cmp.w	r9, #0
 800ade8:	dc35      	bgt.n	800ae56 <_printf_float+0x3aa>
 800adea:	f04f 0800 	mov.w	r8, #0
 800adee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800adf2:	f104 0a1a 	add.w	sl, r4, #26
 800adf6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800adfa:	1a9b      	subs	r3, r3, r2
 800adfc:	eba3 0309 	sub.w	r3, r3, r9
 800ae00:	4543      	cmp	r3, r8
 800ae02:	f77f af79 	ble.w	800acf8 <_printf_float+0x24c>
 800ae06:	2301      	movs	r3, #1
 800ae08:	4652      	mov	r2, sl
 800ae0a:	4631      	mov	r1, r6
 800ae0c:	4628      	mov	r0, r5
 800ae0e:	47b8      	blx	r7
 800ae10:	3001      	adds	r0, #1
 800ae12:	f43f aeaa 	beq.w	800ab6a <_printf_float+0xbe>
 800ae16:	f108 0801 	add.w	r8, r8, #1
 800ae1a:	e7ec      	b.n	800adf6 <_printf_float+0x34a>
 800ae1c:	4613      	mov	r3, r2
 800ae1e:	4631      	mov	r1, r6
 800ae20:	4642      	mov	r2, r8
 800ae22:	4628      	mov	r0, r5
 800ae24:	47b8      	blx	r7
 800ae26:	3001      	adds	r0, #1
 800ae28:	d1c0      	bne.n	800adac <_printf_float+0x300>
 800ae2a:	e69e      	b.n	800ab6a <_printf_float+0xbe>
 800ae2c:	2301      	movs	r3, #1
 800ae2e:	4631      	mov	r1, r6
 800ae30:	4628      	mov	r0, r5
 800ae32:	9205      	str	r2, [sp, #20]
 800ae34:	47b8      	blx	r7
 800ae36:	3001      	adds	r0, #1
 800ae38:	f43f ae97 	beq.w	800ab6a <_printf_float+0xbe>
 800ae3c:	9a05      	ldr	r2, [sp, #20]
 800ae3e:	f10b 0b01 	add.w	fp, fp, #1
 800ae42:	e7b9      	b.n	800adb8 <_printf_float+0x30c>
 800ae44:	ee18 3a10 	vmov	r3, s16
 800ae48:	4652      	mov	r2, sl
 800ae4a:	4631      	mov	r1, r6
 800ae4c:	4628      	mov	r0, r5
 800ae4e:	47b8      	blx	r7
 800ae50:	3001      	adds	r0, #1
 800ae52:	d1be      	bne.n	800add2 <_printf_float+0x326>
 800ae54:	e689      	b.n	800ab6a <_printf_float+0xbe>
 800ae56:	9a05      	ldr	r2, [sp, #20]
 800ae58:	464b      	mov	r3, r9
 800ae5a:	4442      	add	r2, r8
 800ae5c:	4631      	mov	r1, r6
 800ae5e:	4628      	mov	r0, r5
 800ae60:	47b8      	blx	r7
 800ae62:	3001      	adds	r0, #1
 800ae64:	d1c1      	bne.n	800adea <_printf_float+0x33e>
 800ae66:	e680      	b.n	800ab6a <_printf_float+0xbe>
 800ae68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae6a:	2a01      	cmp	r2, #1
 800ae6c:	dc01      	bgt.n	800ae72 <_printf_float+0x3c6>
 800ae6e:	07db      	lsls	r3, r3, #31
 800ae70:	d53a      	bpl.n	800aee8 <_printf_float+0x43c>
 800ae72:	2301      	movs	r3, #1
 800ae74:	4642      	mov	r2, r8
 800ae76:	4631      	mov	r1, r6
 800ae78:	4628      	mov	r0, r5
 800ae7a:	47b8      	blx	r7
 800ae7c:	3001      	adds	r0, #1
 800ae7e:	f43f ae74 	beq.w	800ab6a <_printf_float+0xbe>
 800ae82:	ee18 3a10 	vmov	r3, s16
 800ae86:	4652      	mov	r2, sl
 800ae88:	4631      	mov	r1, r6
 800ae8a:	4628      	mov	r0, r5
 800ae8c:	47b8      	blx	r7
 800ae8e:	3001      	adds	r0, #1
 800ae90:	f43f ae6b 	beq.w	800ab6a <_printf_float+0xbe>
 800ae94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ae98:	2200      	movs	r2, #0
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800aea0:	f7f5 fe1a 	bl	8000ad8 <__aeabi_dcmpeq>
 800aea4:	b9d8      	cbnz	r0, 800aede <_printf_float+0x432>
 800aea6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800aeaa:	f108 0201 	add.w	r2, r8, #1
 800aeae:	4631      	mov	r1, r6
 800aeb0:	4628      	mov	r0, r5
 800aeb2:	47b8      	blx	r7
 800aeb4:	3001      	adds	r0, #1
 800aeb6:	d10e      	bne.n	800aed6 <_printf_float+0x42a>
 800aeb8:	e657      	b.n	800ab6a <_printf_float+0xbe>
 800aeba:	2301      	movs	r3, #1
 800aebc:	4652      	mov	r2, sl
 800aebe:	4631      	mov	r1, r6
 800aec0:	4628      	mov	r0, r5
 800aec2:	47b8      	blx	r7
 800aec4:	3001      	adds	r0, #1
 800aec6:	f43f ae50 	beq.w	800ab6a <_printf_float+0xbe>
 800aeca:	f108 0801 	add.w	r8, r8, #1
 800aece:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aed0:	3b01      	subs	r3, #1
 800aed2:	4543      	cmp	r3, r8
 800aed4:	dcf1      	bgt.n	800aeba <_printf_float+0x40e>
 800aed6:	464b      	mov	r3, r9
 800aed8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800aedc:	e6da      	b.n	800ac94 <_printf_float+0x1e8>
 800aede:	f04f 0800 	mov.w	r8, #0
 800aee2:	f104 0a1a 	add.w	sl, r4, #26
 800aee6:	e7f2      	b.n	800aece <_printf_float+0x422>
 800aee8:	2301      	movs	r3, #1
 800aeea:	4642      	mov	r2, r8
 800aeec:	e7df      	b.n	800aeae <_printf_float+0x402>
 800aeee:	2301      	movs	r3, #1
 800aef0:	464a      	mov	r2, r9
 800aef2:	4631      	mov	r1, r6
 800aef4:	4628      	mov	r0, r5
 800aef6:	47b8      	blx	r7
 800aef8:	3001      	adds	r0, #1
 800aefa:	f43f ae36 	beq.w	800ab6a <_printf_float+0xbe>
 800aefe:	f108 0801 	add.w	r8, r8, #1
 800af02:	68e3      	ldr	r3, [r4, #12]
 800af04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800af06:	1a5b      	subs	r3, r3, r1
 800af08:	4543      	cmp	r3, r8
 800af0a:	dcf0      	bgt.n	800aeee <_printf_float+0x442>
 800af0c:	e6f8      	b.n	800ad00 <_printf_float+0x254>
 800af0e:	f04f 0800 	mov.w	r8, #0
 800af12:	f104 0919 	add.w	r9, r4, #25
 800af16:	e7f4      	b.n	800af02 <_printf_float+0x456>

0800af18 <_printf_common>:
 800af18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af1c:	4616      	mov	r6, r2
 800af1e:	4699      	mov	r9, r3
 800af20:	688a      	ldr	r2, [r1, #8]
 800af22:	690b      	ldr	r3, [r1, #16]
 800af24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800af28:	4293      	cmp	r3, r2
 800af2a:	bfb8      	it	lt
 800af2c:	4613      	movlt	r3, r2
 800af2e:	6033      	str	r3, [r6, #0]
 800af30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800af34:	4607      	mov	r7, r0
 800af36:	460c      	mov	r4, r1
 800af38:	b10a      	cbz	r2, 800af3e <_printf_common+0x26>
 800af3a:	3301      	adds	r3, #1
 800af3c:	6033      	str	r3, [r6, #0]
 800af3e:	6823      	ldr	r3, [r4, #0]
 800af40:	0699      	lsls	r1, r3, #26
 800af42:	bf42      	ittt	mi
 800af44:	6833      	ldrmi	r3, [r6, #0]
 800af46:	3302      	addmi	r3, #2
 800af48:	6033      	strmi	r3, [r6, #0]
 800af4a:	6825      	ldr	r5, [r4, #0]
 800af4c:	f015 0506 	ands.w	r5, r5, #6
 800af50:	d106      	bne.n	800af60 <_printf_common+0x48>
 800af52:	f104 0a19 	add.w	sl, r4, #25
 800af56:	68e3      	ldr	r3, [r4, #12]
 800af58:	6832      	ldr	r2, [r6, #0]
 800af5a:	1a9b      	subs	r3, r3, r2
 800af5c:	42ab      	cmp	r3, r5
 800af5e:	dc26      	bgt.n	800afae <_printf_common+0x96>
 800af60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800af64:	1e13      	subs	r3, r2, #0
 800af66:	6822      	ldr	r2, [r4, #0]
 800af68:	bf18      	it	ne
 800af6a:	2301      	movne	r3, #1
 800af6c:	0692      	lsls	r2, r2, #26
 800af6e:	d42b      	bmi.n	800afc8 <_printf_common+0xb0>
 800af70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800af74:	4649      	mov	r1, r9
 800af76:	4638      	mov	r0, r7
 800af78:	47c0      	blx	r8
 800af7a:	3001      	adds	r0, #1
 800af7c:	d01e      	beq.n	800afbc <_printf_common+0xa4>
 800af7e:	6823      	ldr	r3, [r4, #0]
 800af80:	6922      	ldr	r2, [r4, #16]
 800af82:	f003 0306 	and.w	r3, r3, #6
 800af86:	2b04      	cmp	r3, #4
 800af88:	bf02      	ittt	eq
 800af8a:	68e5      	ldreq	r5, [r4, #12]
 800af8c:	6833      	ldreq	r3, [r6, #0]
 800af8e:	1aed      	subeq	r5, r5, r3
 800af90:	68a3      	ldr	r3, [r4, #8]
 800af92:	bf0c      	ite	eq
 800af94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800af98:	2500      	movne	r5, #0
 800af9a:	4293      	cmp	r3, r2
 800af9c:	bfc4      	itt	gt
 800af9e:	1a9b      	subgt	r3, r3, r2
 800afa0:	18ed      	addgt	r5, r5, r3
 800afa2:	2600      	movs	r6, #0
 800afa4:	341a      	adds	r4, #26
 800afa6:	42b5      	cmp	r5, r6
 800afa8:	d11a      	bne.n	800afe0 <_printf_common+0xc8>
 800afaa:	2000      	movs	r0, #0
 800afac:	e008      	b.n	800afc0 <_printf_common+0xa8>
 800afae:	2301      	movs	r3, #1
 800afb0:	4652      	mov	r2, sl
 800afb2:	4649      	mov	r1, r9
 800afb4:	4638      	mov	r0, r7
 800afb6:	47c0      	blx	r8
 800afb8:	3001      	adds	r0, #1
 800afba:	d103      	bne.n	800afc4 <_printf_common+0xac>
 800afbc:	f04f 30ff 	mov.w	r0, #4294967295
 800afc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afc4:	3501      	adds	r5, #1
 800afc6:	e7c6      	b.n	800af56 <_printf_common+0x3e>
 800afc8:	18e1      	adds	r1, r4, r3
 800afca:	1c5a      	adds	r2, r3, #1
 800afcc:	2030      	movs	r0, #48	; 0x30
 800afce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800afd2:	4422      	add	r2, r4
 800afd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800afd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800afdc:	3302      	adds	r3, #2
 800afde:	e7c7      	b.n	800af70 <_printf_common+0x58>
 800afe0:	2301      	movs	r3, #1
 800afe2:	4622      	mov	r2, r4
 800afe4:	4649      	mov	r1, r9
 800afe6:	4638      	mov	r0, r7
 800afe8:	47c0      	blx	r8
 800afea:	3001      	adds	r0, #1
 800afec:	d0e6      	beq.n	800afbc <_printf_common+0xa4>
 800afee:	3601      	adds	r6, #1
 800aff0:	e7d9      	b.n	800afa6 <_printf_common+0x8e>
	...

0800aff4 <_printf_i>:
 800aff4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aff8:	7e0f      	ldrb	r7, [r1, #24]
 800affa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800affc:	2f78      	cmp	r7, #120	; 0x78
 800affe:	4691      	mov	r9, r2
 800b000:	4680      	mov	r8, r0
 800b002:	460c      	mov	r4, r1
 800b004:	469a      	mov	sl, r3
 800b006:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b00a:	d807      	bhi.n	800b01c <_printf_i+0x28>
 800b00c:	2f62      	cmp	r7, #98	; 0x62
 800b00e:	d80a      	bhi.n	800b026 <_printf_i+0x32>
 800b010:	2f00      	cmp	r7, #0
 800b012:	f000 80d4 	beq.w	800b1be <_printf_i+0x1ca>
 800b016:	2f58      	cmp	r7, #88	; 0x58
 800b018:	f000 80c0 	beq.w	800b19c <_printf_i+0x1a8>
 800b01c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b020:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b024:	e03a      	b.n	800b09c <_printf_i+0xa8>
 800b026:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b02a:	2b15      	cmp	r3, #21
 800b02c:	d8f6      	bhi.n	800b01c <_printf_i+0x28>
 800b02e:	a101      	add	r1, pc, #4	; (adr r1, 800b034 <_printf_i+0x40>)
 800b030:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b034:	0800b08d 	.word	0x0800b08d
 800b038:	0800b0a1 	.word	0x0800b0a1
 800b03c:	0800b01d 	.word	0x0800b01d
 800b040:	0800b01d 	.word	0x0800b01d
 800b044:	0800b01d 	.word	0x0800b01d
 800b048:	0800b01d 	.word	0x0800b01d
 800b04c:	0800b0a1 	.word	0x0800b0a1
 800b050:	0800b01d 	.word	0x0800b01d
 800b054:	0800b01d 	.word	0x0800b01d
 800b058:	0800b01d 	.word	0x0800b01d
 800b05c:	0800b01d 	.word	0x0800b01d
 800b060:	0800b1a5 	.word	0x0800b1a5
 800b064:	0800b0cd 	.word	0x0800b0cd
 800b068:	0800b15f 	.word	0x0800b15f
 800b06c:	0800b01d 	.word	0x0800b01d
 800b070:	0800b01d 	.word	0x0800b01d
 800b074:	0800b1c7 	.word	0x0800b1c7
 800b078:	0800b01d 	.word	0x0800b01d
 800b07c:	0800b0cd 	.word	0x0800b0cd
 800b080:	0800b01d 	.word	0x0800b01d
 800b084:	0800b01d 	.word	0x0800b01d
 800b088:	0800b167 	.word	0x0800b167
 800b08c:	682b      	ldr	r3, [r5, #0]
 800b08e:	1d1a      	adds	r2, r3, #4
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	602a      	str	r2, [r5, #0]
 800b094:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b098:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b09c:	2301      	movs	r3, #1
 800b09e:	e09f      	b.n	800b1e0 <_printf_i+0x1ec>
 800b0a0:	6820      	ldr	r0, [r4, #0]
 800b0a2:	682b      	ldr	r3, [r5, #0]
 800b0a4:	0607      	lsls	r7, r0, #24
 800b0a6:	f103 0104 	add.w	r1, r3, #4
 800b0aa:	6029      	str	r1, [r5, #0]
 800b0ac:	d501      	bpl.n	800b0b2 <_printf_i+0xbe>
 800b0ae:	681e      	ldr	r6, [r3, #0]
 800b0b0:	e003      	b.n	800b0ba <_printf_i+0xc6>
 800b0b2:	0646      	lsls	r6, r0, #25
 800b0b4:	d5fb      	bpl.n	800b0ae <_printf_i+0xba>
 800b0b6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b0ba:	2e00      	cmp	r6, #0
 800b0bc:	da03      	bge.n	800b0c6 <_printf_i+0xd2>
 800b0be:	232d      	movs	r3, #45	; 0x2d
 800b0c0:	4276      	negs	r6, r6
 800b0c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0c6:	485a      	ldr	r0, [pc, #360]	; (800b230 <_printf_i+0x23c>)
 800b0c8:	230a      	movs	r3, #10
 800b0ca:	e012      	b.n	800b0f2 <_printf_i+0xfe>
 800b0cc:	682b      	ldr	r3, [r5, #0]
 800b0ce:	6820      	ldr	r0, [r4, #0]
 800b0d0:	1d19      	adds	r1, r3, #4
 800b0d2:	6029      	str	r1, [r5, #0]
 800b0d4:	0605      	lsls	r5, r0, #24
 800b0d6:	d501      	bpl.n	800b0dc <_printf_i+0xe8>
 800b0d8:	681e      	ldr	r6, [r3, #0]
 800b0da:	e002      	b.n	800b0e2 <_printf_i+0xee>
 800b0dc:	0641      	lsls	r1, r0, #25
 800b0de:	d5fb      	bpl.n	800b0d8 <_printf_i+0xe4>
 800b0e0:	881e      	ldrh	r6, [r3, #0]
 800b0e2:	4853      	ldr	r0, [pc, #332]	; (800b230 <_printf_i+0x23c>)
 800b0e4:	2f6f      	cmp	r7, #111	; 0x6f
 800b0e6:	bf0c      	ite	eq
 800b0e8:	2308      	moveq	r3, #8
 800b0ea:	230a      	movne	r3, #10
 800b0ec:	2100      	movs	r1, #0
 800b0ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b0f2:	6865      	ldr	r5, [r4, #4]
 800b0f4:	60a5      	str	r5, [r4, #8]
 800b0f6:	2d00      	cmp	r5, #0
 800b0f8:	bfa2      	ittt	ge
 800b0fa:	6821      	ldrge	r1, [r4, #0]
 800b0fc:	f021 0104 	bicge.w	r1, r1, #4
 800b100:	6021      	strge	r1, [r4, #0]
 800b102:	b90e      	cbnz	r6, 800b108 <_printf_i+0x114>
 800b104:	2d00      	cmp	r5, #0
 800b106:	d04b      	beq.n	800b1a0 <_printf_i+0x1ac>
 800b108:	4615      	mov	r5, r2
 800b10a:	fbb6 f1f3 	udiv	r1, r6, r3
 800b10e:	fb03 6711 	mls	r7, r3, r1, r6
 800b112:	5dc7      	ldrb	r7, [r0, r7]
 800b114:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b118:	4637      	mov	r7, r6
 800b11a:	42bb      	cmp	r3, r7
 800b11c:	460e      	mov	r6, r1
 800b11e:	d9f4      	bls.n	800b10a <_printf_i+0x116>
 800b120:	2b08      	cmp	r3, #8
 800b122:	d10b      	bne.n	800b13c <_printf_i+0x148>
 800b124:	6823      	ldr	r3, [r4, #0]
 800b126:	07de      	lsls	r6, r3, #31
 800b128:	d508      	bpl.n	800b13c <_printf_i+0x148>
 800b12a:	6923      	ldr	r3, [r4, #16]
 800b12c:	6861      	ldr	r1, [r4, #4]
 800b12e:	4299      	cmp	r1, r3
 800b130:	bfde      	ittt	le
 800b132:	2330      	movle	r3, #48	; 0x30
 800b134:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b138:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b13c:	1b52      	subs	r2, r2, r5
 800b13e:	6122      	str	r2, [r4, #16]
 800b140:	f8cd a000 	str.w	sl, [sp]
 800b144:	464b      	mov	r3, r9
 800b146:	aa03      	add	r2, sp, #12
 800b148:	4621      	mov	r1, r4
 800b14a:	4640      	mov	r0, r8
 800b14c:	f7ff fee4 	bl	800af18 <_printf_common>
 800b150:	3001      	adds	r0, #1
 800b152:	d14a      	bne.n	800b1ea <_printf_i+0x1f6>
 800b154:	f04f 30ff 	mov.w	r0, #4294967295
 800b158:	b004      	add	sp, #16
 800b15a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b15e:	6823      	ldr	r3, [r4, #0]
 800b160:	f043 0320 	orr.w	r3, r3, #32
 800b164:	6023      	str	r3, [r4, #0]
 800b166:	4833      	ldr	r0, [pc, #204]	; (800b234 <_printf_i+0x240>)
 800b168:	2778      	movs	r7, #120	; 0x78
 800b16a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b16e:	6823      	ldr	r3, [r4, #0]
 800b170:	6829      	ldr	r1, [r5, #0]
 800b172:	061f      	lsls	r7, r3, #24
 800b174:	f851 6b04 	ldr.w	r6, [r1], #4
 800b178:	d402      	bmi.n	800b180 <_printf_i+0x18c>
 800b17a:	065f      	lsls	r7, r3, #25
 800b17c:	bf48      	it	mi
 800b17e:	b2b6      	uxthmi	r6, r6
 800b180:	07df      	lsls	r7, r3, #31
 800b182:	bf48      	it	mi
 800b184:	f043 0320 	orrmi.w	r3, r3, #32
 800b188:	6029      	str	r1, [r5, #0]
 800b18a:	bf48      	it	mi
 800b18c:	6023      	strmi	r3, [r4, #0]
 800b18e:	b91e      	cbnz	r6, 800b198 <_printf_i+0x1a4>
 800b190:	6823      	ldr	r3, [r4, #0]
 800b192:	f023 0320 	bic.w	r3, r3, #32
 800b196:	6023      	str	r3, [r4, #0]
 800b198:	2310      	movs	r3, #16
 800b19a:	e7a7      	b.n	800b0ec <_printf_i+0xf8>
 800b19c:	4824      	ldr	r0, [pc, #144]	; (800b230 <_printf_i+0x23c>)
 800b19e:	e7e4      	b.n	800b16a <_printf_i+0x176>
 800b1a0:	4615      	mov	r5, r2
 800b1a2:	e7bd      	b.n	800b120 <_printf_i+0x12c>
 800b1a4:	682b      	ldr	r3, [r5, #0]
 800b1a6:	6826      	ldr	r6, [r4, #0]
 800b1a8:	6961      	ldr	r1, [r4, #20]
 800b1aa:	1d18      	adds	r0, r3, #4
 800b1ac:	6028      	str	r0, [r5, #0]
 800b1ae:	0635      	lsls	r5, r6, #24
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	d501      	bpl.n	800b1b8 <_printf_i+0x1c4>
 800b1b4:	6019      	str	r1, [r3, #0]
 800b1b6:	e002      	b.n	800b1be <_printf_i+0x1ca>
 800b1b8:	0670      	lsls	r0, r6, #25
 800b1ba:	d5fb      	bpl.n	800b1b4 <_printf_i+0x1c0>
 800b1bc:	8019      	strh	r1, [r3, #0]
 800b1be:	2300      	movs	r3, #0
 800b1c0:	6123      	str	r3, [r4, #16]
 800b1c2:	4615      	mov	r5, r2
 800b1c4:	e7bc      	b.n	800b140 <_printf_i+0x14c>
 800b1c6:	682b      	ldr	r3, [r5, #0]
 800b1c8:	1d1a      	adds	r2, r3, #4
 800b1ca:	602a      	str	r2, [r5, #0]
 800b1cc:	681d      	ldr	r5, [r3, #0]
 800b1ce:	6862      	ldr	r2, [r4, #4]
 800b1d0:	2100      	movs	r1, #0
 800b1d2:	4628      	mov	r0, r5
 800b1d4:	f7f5 f804 	bl	80001e0 <memchr>
 800b1d8:	b108      	cbz	r0, 800b1de <_printf_i+0x1ea>
 800b1da:	1b40      	subs	r0, r0, r5
 800b1dc:	6060      	str	r0, [r4, #4]
 800b1de:	6863      	ldr	r3, [r4, #4]
 800b1e0:	6123      	str	r3, [r4, #16]
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1e8:	e7aa      	b.n	800b140 <_printf_i+0x14c>
 800b1ea:	6923      	ldr	r3, [r4, #16]
 800b1ec:	462a      	mov	r2, r5
 800b1ee:	4649      	mov	r1, r9
 800b1f0:	4640      	mov	r0, r8
 800b1f2:	47d0      	blx	sl
 800b1f4:	3001      	adds	r0, #1
 800b1f6:	d0ad      	beq.n	800b154 <_printf_i+0x160>
 800b1f8:	6823      	ldr	r3, [r4, #0]
 800b1fa:	079b      	lsls	r3, r3, #30
 800b1fc:	d413      	bmi.n	800b226 <_printf_i+0x232>
 800b1fe:	68e0      	ldr	r0, [r4, #12]
 800b200:	9b03      	ldr	r3, [sp, #12]
 800b202:	4298      	cmp	r0, r3
 800b204:	bfb8      	it	lt
 800b206:	4618      	movlt	r0, r3
 800b208:	e7a6      	b.n	800b158 <_printf_i+0x164>
 800b20a:	2301      	movs	r3, #1
 800b20c:	4632      	mov	r2, r6
 800b20e:	4649      	mov	r1, r9
 800b210:	4640      	mov	r0, r8
 800b212:	47d0      	blx	sl
 800b214:	3001      	adds	r0, #1
 800b216:	d09d      	beq.n	800b154 <_printf_i+0x160>
 800b218:	3501      	adds	r5, #1
 800b21a:	68e3      	ldr	r3, [r4, #12]
 800b21c:	9903      	ldr	r1, [sp, #12]
 800b21e:	1a5b      	subs	r3, r3, r1
 800b220:	42ab      	cmp	r3, r5
 800b222:	dcf2      	bgt.n	800b20a <_printf_i+0x216>
 800b224:	e7eb      	b.n	800b1fe <_printf_i+0x20a>
 800b226:	2500      	movs	r5, #0
 800b228:	f104 0619 	add.w	r6, r4, #25
 800b22c:	e7f5      	b.n	800b21a <_printf_i+0x226>
 800b22e:	bf00      	nop
 800b230:	0800d602 	.word	0x0800d602
 800b234:	0800d613 	.word	0x0800d613

0800b238 <std>:
 800b238:	2300      	movs	r3, #0
 800b23a:	b510      	push	{r4, lr}
 800b23c:	4604      	mov	r4, r0
 800b23e:	e9c0 3300 	strd	r3, r3, [r0]
 800b242:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b246:	6083      	str	r3, [r0, #8]
 800b248:	8181      	strh	r1, [r0, #12]
 800b24a:	6643      	str	r3, [r0, #100]	; 0x64
 800b24c:	81c2      	strh	r2, [r0, #14]
 800b24e:	6183      	str	r3, [r0, #24]
 800b250:	4619      	mov	r1, r3
 800b252:	2208      	movs	r2, #8
 800b254:	305c      	adds	r0, #92	; 0x5c
 800b256:	f000 f9f7 	bl	800b648 <memset>
 800b25a:	4b0d      	ldr	r3, [pc, #52]	; (800b290 <std+0x58>)
 800b25c:	6263      	str	r3, [r4, #36]	; 0x24
 800b25e:	4b0d      	ldr	r3, [pc, #52]	; (800b294 <std+0x5c>)
 800b260:	62a3      	str	r3, [r4, #40]	; 0x28
 800b262:	4b0d      	ldr	r3, [pc, #52]	; (800b298 <std+0x60>)
 800b264:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b266:	4b0d      	ldr	r3, [pc, #52]	; (800b29c <std+0x64>)
 800b268:	6323      	str	r3, [r4, #48]	; 0x30
 800b26a:	4b0d      	ldr	r3, [pc, #52]	; (800b2a0 <std+0x68>)
 800b26c:	6224      	str	r4, [r4, #32]
 800b26e:	429c      	cmp	r4, r3
 800b270:	d006      	beq.n	800b280 <std+0x48>
 800b272:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b276:	4294      	cmp	r4, r2
 800b278:	d002      	beq.n	800b280 <std+0x48>
 800b27a:	33d0      	adds	r3, #208	; 0xd0
 800b27c:	429c      	cmp	r4, r3
 800b27e:	d105      	bne.n	800b28c <std+0x54>
 800b280:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b288:	f000 bab0 	b.w	800b7ec <__retarget_lock_init_recursive>
 800b28c:	bd10      	pop	{r4, pc}
 800b28e:	bf00      	nop
 800b290:	0800b499 	.word	0x0800b499
 800b294:	0800b4bb 	.word	0x0800b4bb
 800b298:	0800b4f3 	.word	0x0800b4f3
 800b29c:	0800b517 	.word	0x0800b517
 800b2a0:	200050a0 	.word	0x200050a0

0800b2a4 <stdio_exit_handler>:
 800b2a4:	4a02      	ldr	r2, [pc, #8]	; (800b2b0 <stdio_exit_handler+0xc>)
 800b2a6:	4903      	ldr	r1, [pc, #12]	; (800b2b4 <stdio_exit_handler+0x10>)
 800b2a8:	4803      	ldr	r0, [pc, #12]	; (800b2b8 <stdio_exit_handler+0x14>)
 800b2aa:	f000 b869 	b.w	800b380 <_fwalk_sglue>
 800b2ae:	bf00      	nop
 800b2b0:	20000010 	.word	0x20000010
 800b2b4:	0800d191 	.word	0x0800d191
 800b2b8:	2000001c 	.word	0x2000001c

0800b2bc <cleanup_stdio>:
 800b2bc:	6841      	ldr	r1, [r0, #4]
 800b2be:	4b0c      	ldr	r3, [pc, #48]	; (800b2f0 <cleanup_stdio+0x34>)
 800b2c0:	4299      	cmp	r1, r3
 800b2c2:	b510      	push	{r4, lr}
 800b2c4:	4604      	mov	r4, r0
 800b2c6:	d001      	beq.n	800b2cc <cleanup_stdio+0x10>
 800b2c8:	f001 ff62 	bl	800d190 <_fflush_r>
 800b2cc:	68a1      	ldr	r1, [r4, #8]
 800b2ce:	4b09      	ldr	r3, [pc, #36]	; (800b2f4 <cleanup_stdio+0x38>)
 800b2d0:	4299      	cmp	r1, r3
 800b2d2:	d002      	beq.n	800b2da <cleanup_stdio+0x1e>
 800b2d4:	4620      	mov	r0, r4
 800b2d6:	f001 ff5b 	bl	800d190 <_fflush_r>
 800b2da:	68e1      	ldr	r1, [r4, #12]
 800b2dc:	4b06      	ldr	r3, [pc, #24]	; (800b2f8 <cleanup_stdio+0x3c>)
 800b2de:	4299      	cmp	r1, r3
 800b2e0:	d004      	beq.n	800b2ec <cleanup_stdio+0x30>
 800b2e2:	4620      	mov	r0, r4
 800b2e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2e8:	f001 bf52 	b.w	800d190 <_fflush_r>
 800b2ec:	bd10      	pop	{r4, pc}
 800b2ee:	bf00      	nop
 800b2f0:	200050a0 	.word	0x200050a0
 800b2f4:	20005108 	.word	0x20005108
 800b2f8:	20005170 	.word	0x20005170

0800b2fc <global_stdio_init.part.0>:
 800b2fc:	b510      	push	{r4, lr}
 800b2fe:	4b0b      	ldr	r3, [pc, #44]	; (800b32c <global_stdio_init.part.0+0x30>)
 800b300:	4c0b      	ldr	r4, [pc, #44]	; (800b330 <global_stdio_init.part.0+0x34>)
 800b302:	4a0c      	ldr	r2, [pc, #48]	; (800b334 <global_stdio_init.part.0+0x38>)
 800b304:	601a      	str	r2, [r3, #0]
 800b306:	4620      	mov	r0, r4
 800b308:	2200      	movs	r2, #0
 800b30a:	2104      	movs	r1, #4
 800b30c:	f7ff ff94 	bl	800b238 <std>
 800b310:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b314:	2201      	movs	r2, #1
 800b316:	2109      	movs	r1, #9
 800b318:	f7ff ff8e 	bl	800b238 <std>
 800b31c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b320:	2202      	movs	r2, #2
 800b322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b326:	2112      	movs	r1, #18
 800b328:	f7ff bf86 	b.w	800b238 <std>
 800b32c:	200051d8 	.word	0x200051d8
 800b330:	200050a0 	.word	0x200050a0
 800b334:	0800b2a5 	.word	0x0800b2a5

0800b338 <__sfp_lock_acquire>:
 800b338:	4801      	ldr	r0, [pc, #4]	; (800b340 <__sfp_lock_acquire+0x8>)
 800b33a:	f000 ba58 	b.w	800b7ee <__retarget_lock_acquire_recursive>
 800b33e:	bf00      	nop
 800b340:	200051e1 	.word	0x200051e1

0800b344 <__sfp_lock_release>:
 800b344:	4801      	ldr	r0, [pc, #4]	; (800b34c <__sfp_lock_release+0x8>)
 800b346:	f000 ba53 	b.w	800b7f0 <__retarget_lock_release_recursive>
 800b34a:	bf00      	nop
 800b34c:	200051e1 	.word	0x200051e1

0800b350 <__sinit>:
 800b350:	b510      	push	{r4, lr}
 800b352:	4604      	mov	r4, r0
 800b354:	f7ff fff0 	bl	800b338 <__sfp_lock_acquire>
 800b358:	6a23      	ldr	r3, [r4, #32]
 800b35a:	b11b      	cbz	r3, 800b364 <__sinit+0x14>
 800b35c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b360:	f7ff bff0 	b.w	800b344 <__sfp_lock_release>
 800b364:	4b04      	ldr	r3, [pc, #16]	; (800b378 <__sinit+0x28>)
 800b366:	6223      	str	r3, [r4, #32]
 800b368:	4b04      	ldr	r3, [pc, #16]	; (800b37c <__sinit+0x2c>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d1f5      	bne.n	800b35c <__sinit+0xc>
 800b370:	f7ff ffc4 	bl	800b2fc <global_stdio_init.part.0>
 800b374:	e7f2      	b.n	800b35c <__sinit+0xc>
 800b376:	bf00      	nop
 800b378:	0800b2bd 	.word	0x0800b2bd
 800b37c:	200051d8 	.word	0x200051d8

0800b380 <_fwalk_sglue>:
 800b380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b384:	4607      	mov	r7, r0
 800b386:	4688      	mov	r8, r1
 800b388:	4614      	mov	r4, r2
 800b38a:	2600      	movs	r6, #0
 800b38c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b390:	f1b9 0901 	subs.w	r9, r9, #1
 800b394:	d505      	bpl.n	800b3a2 <_fwalk_sglue+0x22>
 800b396:	6824      	ldr	r4, [r4, #0]
 800b398:	2c00      	cmp	r4, #0
 800b39a:	d1f7      	bne.n	800b38c <_fwalk_sglue+0xc>
 800b39c:	4630      	mov	r0, r6
 800b39e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3a2:	89ab      	ldrh	r3, [r5, #12]
 800b3a4:	2b01      	cmp	r3, #1
 800b3a6:	d907      	bls.n	800b3b8 <_fwalk_sglue+0x38>
 800b3a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b3ac:	3301      	adds	r3, #1
 800b3ae:	d003      	beq.n	800b3b8 <_fwalk_sglue+0x38>
 800b3b0:	4629      	mov	r1, r5
 800b3b2:	4638      	mov	r0, r7
 800b3b4:	47c0      	blx	r8
 800b3b6:	4306      	orrs	r6, r0
 800b3b8:	3568      	adds	r5, #104	; 0x68
 800b3ba:	e7e9      	b.n	800b390 <_fwalk_sglue+0x10>

0800b3bc <iprintf>:
 800b3bc:	b40f      	push	{r0, r1, r2, r3}
 800b3be:	b507      	push	{r0, r1, r2, lr}
 800b3c0:	4906      	ldr	r1, [pc, #24]	; (800b3dc <iprintf+0x20>)
 800b3c2:	ab04      	add	r3, sp, #16
 800b3c4:	6808      	ldr	r0, [r1, #0]
 800b3c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3ca:	6881      	ldr	r1, [r0, #8]
 800b3cc:	9301      	str	r3, [sp, #4]
 800b3ce:	f001 fd3f 	bl	800ce50 <_vfiprintf_r>
 800b3d2:	b003      	add	sp, #12
 800b3d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3d8:	b004      	add	sp, #16
 800b3da:	4770      	bx	lr
 800b3dc:	20000068 	.word	0x20000068

0800b3e0 <_puts_r>:
 800b3e0:	6a03      	ldr	r3, [r0, #32]
 800b3e2:	b570      	push	{r4, r5, r6, lr}
 800b3e4:	6884      	ldr	r4, [r0, #8]
 800b3e6:	4605      	mov	r5, r0
 800b3e8:	460e      	mov	r6, r1
 800b3ea:	b90b      	cbnz	r3, 800b3f0 <_puts_r+0x10>
 800b3ec:	f7ff ffb0 	bl	800b350 <__sinit>
 800b3f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b3f2:	07db      	lsls	r3, r3, #31
 800b3f4:	d405      	bmi.n	800b402 <_puts_r+0x22>
 800b3f6:	89a3      	ldrh	r3, [r4, #12]
 800b3f8:	0598      	lsls	r0, r3, #22
 800b3fa:	d402      	bmi.n	800b402 <_puts_r+0x22>
 800b3fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b3fe:	f000 f9f6 	bl	800b7ee <__retarget_lock_acquire_recursive>
 800b402:	89a3      	ldrh	r3, [r4, #12]
 800b404:	0719      	lsls	r1, r3, #28
 800b406:	d513      	bpl.n	800b430 <_puts_r+0x50>
 800b408:	6923      	ldr	r3, [r4, #16]
 800b40a:	b18b      	cbz	r3, 800b430 <_puts_r+0x50>
 800b40c:	3e01      	subs	r6, #1
 800b40e:	68a3      	ldr	r3, [r4, #8]
 800b410:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b414:	3b01      	subs	r3, #1
 800b416:	60a3      	str	r3, [r4, #8]
 800b418:	b9e9      	cbnz	r1, 800b456 <_puts_r+0x76>
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	da2e      	bge.n	800b47c <_puts_r+0x9c>
 800b41e:	4622      	mov	r2, r4
 800b420:	210a      	movs	r1, #10
 800b422:	4628      	mov	r0, r5
 800b424:	f000 f87b 	bl	800b51e <__swbuf_r>
 800b428:	3001      	adds	r0, #1
 800b42a:	d007      	beq.n	800b43c <_puts_r+0x5c>
 800b42c:	250a      	movs	r5, #10
 800b42e:	e007      	b.n	800b440 <_puts_r+0x60>
 800b430:	4621      	mov	r1, r4
 800b432:	4628      	mov	r0, r5
 800b434:	f000 f8b0 	bl	800b598 <__swsetup_r>
 800b438:	2800      	cmp	r0, #0
 800b43a:	d0e7      	beq.n	800b40c <_puts_r+0x2c>
 800b43c:	f04f 35ff 	mov.w	r5, #4294967295
 800b440:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b442:	07da      	lsls	r2, r3, #31
 800b444:	d405      	bmi.n	800b452 <_puts_r+0x72>
 800b446:	89a3      	ldrh	r3, [r4, #12]
 800b448:	059b      	lsls	r3, r3, #22
 800b44a:	d402      	bmi.n	800b452 <_puts_r+0x72>
 800b44c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b44e:	f000 f9cf 	bl	800b7f0 <__retarget_lock_release_recursive>
 800b452:	4628      	mov	r0, r5
 800b454:	bd70      	pop	{r4, r5, r6, pc}
 800b456:	2b00      	cmp	r3, #0
 800b458:	da04      	bge.n	800b464 <_puts_r+0x84>
 800b45a:	69a2      	ldr	r2, [r4, #24]
 800b45c:	429a      	cmp	r2, r3
 800b45e:	dc06      	bgt.n	800b46e <_puts_r+0x8e>
 800b460:	290a      	cmp	r1, #10
 800b462:	d004      	beq.n	800b46e <_puts_r+0x8e>
 800b464:	6823      	ldr	r3, [r4, #0]
 800b466:	1c5a      	adds	r2, r3, #1
 800b468:	6022      	str	r2, [r4, #0]
 800b46a:	7019      	strb	r1, [r3, #0]
 800b46c:	e7cf      	b.n	800b40e <_puts_r+0x2e>
 800b46e:	4622      	mov	r2, r4
 800b470:	4628      	mov	r0, r5
 800b472:	f000 f854 	bl	800b51e <__swbuf_r>
 800b476:	3001      	adds	r0, #1
 800b478:	d1c9      	bne.n	800b40e <_puts_r+0x2e>
 800b47a:	e7df      	b.n	800b43c <_puts_r+0x5c>
 800b47c:	6823      	ldr	r3, [r4, #0]
 800b47e:	250a      	movs	r5, #10
 800b480:	1c5a      	adds	r2, r3, #1
 800b482:	6022      	str	r2, [r4, #0]
 800b484:	701d      	strb	r5, [r3, #0]
 800b486:	e7db      	b.n	800b440 <_puts_r+0x60>

0800b488 <puts>:
 800b488:	4b02      	ldr	r3, [pc, #8]	; (800b494 <puts+0xc>)
 800b48a:	4601      	mov	r1, r0
 800b48c:	6818      	ldr	r0, [r3, #0]
 800b48e:	f7ff bfa7 	b.w	800b3e0 <_puts_r>
 800b492:	bf00      	nop
 800b494:	20000068 	.word	0x20000068

0800b498 <__sread>:
 800b498:	b510      	push	{r4, lr}
 800b49a:	460c      	mov	r4, r1
 800b49c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4a0:	f000 f956 	bl	800b750 <_read_r>
 800b4a4:	2800      	cmp	r0, #0
 800b4a6:	bfab      	itete	ge
 800b4a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b4aa:	89a3      	ldrhlt	r3, [r4, #12]
 800b4ac:	181b      	addge	r3, r3, r0
 800b4ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b4b2:	bfac      	ite	ge
 800b4b4:	6563      	strge	r3, [r4, #84]	; 0x54
 800b4b6:	81a3      	strhlt	r3, [r4, #12]
 800b4b8:	bd10      	pop	{r4, pc}

0800b4ba <__swrite>:
 800b4ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4be:	461f      	mov	r7, r3
 800b4c0:	898b      	ldrh	r3, [r1, #12]
 800b4c2:	05db      	lsls	r3, r3, #23
 800b4c4:	4605      	mov	r5, r0
 800b4c6:	460c      	mov	r4, r1
 800b4c8:	4616      	mov	r6, r2
 800b4ca:	d505      	bpl.n	800b4d8 <__swrite+0x1e>
 800b4cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4d0:	2302      	movs	r3, #2
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	f000 f92a 	bl	800b72c <_lseek_r>
 800b4d8:	89a3      	ldrh	r3, [r4, #12]
 800b4da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b4e2:	81a3      	strh	r3, [r4, #12]
 800b4e4:	4632      	mov	r2, r6
 800b4e6:	463b      	mov	r3, r7
 800b4e8:	4628      	mov	r0, r5
 800b4ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4ee:	f000 b941 	b.w	800b774 <_write_r>

0800b4f2 <__sseek>:
 800b4f2:	b510      	push	{r4, lr}
 800b4f4:	460c      	mov	r4, r1
 800b4f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4fa:	f000 f917 	bl	800b72c <_lseek_r>
 800b4fe:	1c43      	adds	r3, r0, #1
 800b500:	89a3      	ldrh	r3, [r4, #12]
 800b502:	bf15      	itete	ne
 800b504:	6560      	strne	r0, [r4, #84]	; 0x54
 800b506:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b50a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b50e:	81a3      	strheq	r3, [r4, #12]
 800b510:	bf18      	it	ne
 800b512:	81a3      	strhne	r3, [r4, #12]
 800b514:	bd10      	pop	{r4, pc}

0800b516 <__sclose>:
 800b516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b51a:	f000 b8a1 	b.w	800b660 <_close_r>

0800b51e <__swbuf_r>:
 800b51e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b520:	460e      	mov	r6, r1
 800b522:	4614      	mov	r4, r2
 800b524:	4605      	mov	r5, r0
 800b526:	b118      	cbz	r0, 800b530 <__swbuf_r+0x12>
 800b528:	6a03      	ldr	r3, [r0, #32]
 800b52a:	b90b      	cbnz	r3, 800b530 <__swbuf_r+0x12>
 800b52c:	f7ff ff10 	bl	800b350 <__sinit>
 800b530:	69a3      	ldr	r3, [r4, #24]
 800b532:	60a3      	str	r3, [r4, #8]
 800b534:	89a3      	ldrh	r3, [r4, #12]
 800b536:	071a      	lsls	r2, r3, #28
 800b538:	d525      	bpl.n	800b586 <__swbuf_r+0x68>
 800b53a:	6923      	ldr	r3, [r4, #16]
 800b53c:	b31b      	cbz	r3, 800b586 <__swbuf_r+0x68>
 800b53e:	6823      	ldr	r3, [r4, #0]
 800b540:	6922      	ldr	r2, [r4, #16]
 800b542:	1a98      	subs	r0, r3, r2
 800b544:	6963      	ldr	r3, [r4, #20]
 800b546:	b2f6      	uxtb	r6, r6
 800b548:	4283      	cmp	r3, r0
 800b54a:	4637      	mov	r7, r6
 800b54c:	dc04      	bgt.n	800b558 <__swbuf_r+0x3a>
 800b54e:	4621      	mov	r1, r4
 800b550:	4628      	mov	r0, r5
 800b552:	f001 fe1d 	bl	800d190 <_fflush_r>
 800b556:	b9e0      	cbnz	r0, 800b592 <__swbuf_r+0x74>
 800b558:	68a3      	ldr	r3, [r4, #8]
 800b55a:	3b01      	subs	r3, #1
 800b55c:	60a3      	str	r3, [r4, #8]
 800b55e:	6823      	ldr	r3, [r4, #0]
 800b560:	1c5a      	adds	r2, r3, #1
 800b562:	6022      	str	r2, [r4, #0]
 800b564:	701e      	strb	r6, [r3, #0]
 800b566:	6962      	ldr	r2, [r4, #20]
 800b568:	1c43      	adds	r3, r0, #1
 800b56a:	429a      	cmp	r2, r3
 800b56c:	d004      	beq.n	800b578 <__swbuf_r+0x5a>
 800b56e:	89a3      	ldrh	r3, [r4, #12]
 800b570:	07db      	lsls	r3, r3, #31
 800b572:	d506      	bpl.n	800b582 <__swbuf_r+0x64>
 800b574:	2e0a      	cmp	r6, #10
 800b576:	d104      	bne.n	800b582 <__swbuf_r+0x64>
 800b578:	4621      	mov	r1, r4
 800b57a:	4628      	mov	r0, r5
 800b57c:	f001 fe08 	bl	800d190 <_fflush_r>
 800b580:	b938      	cbnz	r0, 800b592 <__swbuf_r+0x74>
 800b582:	4638      	mov	r0, r7
 800b584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b586:	4621      	mov	r1, r4
 800b588:	4628      	mov	r0, r5
 800b58a:	f000 f805 	bl	800b598 <__swsetup_r>
 800b58e:	2800      	cmp	r0, #0
 800b590:	d0d5      	beq.n	800b53e <__swbuf_r+0x20>
 800b592:	f04f 37ff 	mov.w	r7, #4294967295
 800b596:	e7f4      	b.n	800b582 <__swbuf_r+0x64>

0800b598 <__swsetup_r>:
 800b598:	b538      	push	{r3, r4, r5, lr}
 800b59a:	4b2a      	ldr	r3, [pc, #168]	; (800b644 <__swsetup_r+0xac>)
 800b59c:	4605      	mov	r5, r0
 800b59e:	6818      	ldr	r0, [r3, #0]
 800b5a0:	460c      	mov	r4, r1
 800b5a2:	b118      	cbz	r0, 800b5ac <__swsetup_r+0x14>
 800b5a4:	6a03      	ldr	r3, [r0, #32]
 800b5a6:	b90b      	cbnz	r3, 800b5ac <__swsetup_r+0x14>
 800b5a8:	f7ff fed2 	bl	800b350 <__sinit>
 800b5ac:	89a3      	ldrh	r3, [r4, #12]
 800b5ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b5b2:	0718      	lsls	r0, r3, #28
 800b5b4:	d422      	bmi.n	800b5fc <__swsetup_r+0x64>
 800b5b6:	06d9      	lsls	r1, r3, #27
 800b5b8:	d407      	bmi.n	800b5ca <__swsetup_r+0x32>
 800b5ba:	2309      	movs	r3, #9
 800b5bc:	602b      	str	r3, [r5, #0]
 800b5be:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b5c2:	81a3      	strh	r3, [r4, #12]
 800b5c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b5c8:	e034      	b.n	800b634 <__swsetup_r+0x9c>
 800b5ca:	0758      	lsls	r0, r3, #29
 800b5cc:	d512      	bpl.n	800b5f4 <__swsetup_r+0x5c>
 800b5ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b5d0:	b141      	cbz	r1, 800b5e4 <__swsetup_r+0x4c>
 800b5d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b5d6:	4299      	cmp	r1, r3
 800b5d8:	d002      	beq.n	800b5e0 <__swsetup_r+0x48>
 800b5da:	4628      	mov	r0, r5
 800b5dc:	f000 ff92 	bl	800c504 <_free_r>
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	6363      	str	r3, [r4, #52]	; 0x34
 800b5e4:	89a3      	ldrh	r3, [r4, #12]
 800b5e6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b5ea:	81a3      	strh	r3, [r4, #12]
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	6063      	str	r3, [r4, #4]
 800b5f0:	6923      	ldr	r3, [r4, #16]
 800b5f2:	6023      	str	r3, [r4, #0]
 800b5f4:	89a3      	ldrh	r3, [r4, #12]
 800b5f6:	f043 0308 	orr.w	r3, r3, #8
 800b5fa:	81a3      	strh	r3, [r4, #12]
 800b5fc:	6923      	ldr	r3, [r4, #16]
 800b5fe:	b94b      	cbnz	r3, 800b614 <__swsetup_r+0x7c>
 800b600:	89a3      	ldrh	r3, [r4, #12]
 800b602:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b606:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b60a:	d003      	beq.n	800b614 <__swsetup_r+0x7c>
 800b60c:	4621      	mov	r1, r4
 800b60e:	4628      	mov	r0, r5
 800b610:	f001 fe0c 	bl	800d22c <__smakebuf_r>
 800b614:	89a0      	ldrh	r0, [r4, #12]
 800b616:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b61a:	f010 0301 	ands.w	r3, r0, #1
 800b61e:	d00a      	beq.n	800b636 <__swsetup_r+0x9e>
 800b620:	2300      	movs	r3, #0
 800b622:	60a3      	str	r3, [r4, #8]
 800b624:	6963      	ldr	r3, [r4, #20]
 800b626:	425b      	negs	r3, r3
 800b628:	61a3      	str	r3, [r4, #24]
 800b62a:	6923      	ldr	r3, [r4, #16]
 800b62c:	b943      	cbnz	r3, 800b640 <__swsetup_r+0xa8>
 800b62e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b632:	d1c4      	bne.n	800b5be <__swsetup_r+0x26>
 800b634:	bd38      	pop	{r3, r4, r5, pc}
 800b636:	0781      	lsls	r1, r0, #30
 800b638:	bf58      	it	pl
 800b63a:	6963      	ldrpl	r3, [r4, #20]
 800b63c:	60a3      	str	r3, [r4, #8]
 800b63e:	e7f4      	b.n	800b62a <__swsetup_r+0x92>
 800b640:	2000      	movs	r0, #0
 800b642:	e7f7      	b.n	800b634 <__swsetup_r+0x9c>
 800b644:	20000068 	.word	0x20000068

0800b648 <memset>:
 800b648:	4402      	add	r2, r0
 800b64a:	4603      	mov	r3, r0
 800b64c:	4293      	cmp	r3, r2
 800b64e:	d100      	bne.n	800b652 <memset+0xa>
 800b650:	4770      	bx	lr
 800b652:	f803 1b01 	strb.w	r1, [r3], #1
 800b656:	e7f9      	b.n	800b64c <memset+0x4>

0800b658 <_localeconv_r>:
 800b658:	4800      	ldr	r0, [pc, #0]	; (800b65c <_localeconv_r+0x4>)
 800b65a:	4770      	bx	lr
 800b65c:	2000015c 	.word	0x2000015c

0800b660 <_close_r>:
 800b660:	b538      	push	{r3, r4, r5, lr}
 800b662:	4d06      	ldr	r5, [pc, #24]	; (800b67c <_close_r+0x1c>)
 800b664:	2300      	movs	r3, #0
 800b666:	4604      	mov	r4, r0
 800b668:	4608      	mov	r0, r1
 800b66a:	602b      	str	r3, [r5, #0]
 800b66c:	f7f7 f831 	bl	80026d2 <_close>
 800b670:	1c43      	adds	r3, r0, #1
 800b672:	d102      	bne.n	800b67a <_close_r+0x1a>
 800b674:	682b      	ldr	r3, [r5, #0]
 800b676:	b103      	cbz	r3, 800b67a <_close_r+0x1a>
 800b678:	6023      	str	r3, [r4, #0]
 800b67a:	bd38      	pop	{r3, r4, r5, pc}
 800b67c:	200051dc 	.word	0x200051dc

0800b680 <_reclaim_reent>:
 800b680:	4b29      	ldr	r3, [pc, #164]	; (800b728 <_reclaim_reent+0xa8>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	4283      	cmp	r3, r0
 800b686:	b570      	push	{r4, r5, r6, lr}
 800b688:	4604      	mov	r4, r0
 800b68a:	d04b      	beq.n	800b724 <_reclaim_reent+0xa4>
 800b68c:	69c3      	ldr	r3, [r0, #28]
 800b68e:	b143      	cbz	r3, 800b6a2 <_reclaim_reent+0x22>
 800b690:	68db      	ldr	r3, [r3, #12]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d144      	bne.n	800b720 <_reclaim_reent+0xa0>
 800b696:	69e3      	ldr	r3, [r4, #28]
 800b698:	6819      	ldr	r1, [r3, #0]
 800b69a:	b111      	cbz	r1, 800b6a2 <_reclaim_reent+0x22>
 800b69c:	4620      	mov	r0, r4
 800b69e:	f000 ff31 	bl	800c504 <_free_r>
 800b6a2:	6961      	ldr	r1, [r4, #20]
 800b6a4:	b111      	cbz	r1, 800b6ac <_reclaim_reent+0x2c>
 800b6a6:	4620      	mov	r0, r4
 800b6a8:	f000 ff2c 	bl	800c504 <_free_r>
 800b6ac:	69e1      	ldr	r1, [r4, #28]
 800b6ae:	b111      	cbz	r1, 800b6b6 <_reclaim_reent+0x36>
 800b6b0:	4620      	mov	r0, r4
 800b6b2:	f000 ff27 	bl	800c504 <_free_r>
 800b6b6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b6b8:	b111      	cbz	r1, 800b6c0 <_reclaim_reent+0x40>
 800b6ba:	4620      	mov	r0, r4
 800b6bc:	f000 ff22 	bl	800c504 <_free_r>
 800b6c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b6c2:	b111      	cbz	r1, 800b6ca <_reclaim_reent+0x4a>
 800b6c4:	4620      	mov	r0, r4
 800b6c6:	f000 ff1d 	bl	800c504 <_free_r>
 800b6ca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b6cc:	b111      	cbz	r1, 800b6d4 <_reclaim_reent+0x54>
 800b6ce:	4620      	mov	r0, r4
 800b6d0:	f000 ff18 	bl	800c504 <_free_r>
 800b6d4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b6d6:	b111      	cbz	r1, 800b6de <_reclaim_reent+0x5e>
 800b6d8:	4620      	mov	r0, r4
 800b6da:	f000 ff13 	bl	800c504 <_free_r>
 800b6de:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b6e0:	b111      	cbz	r1, 800b6e8 <_reclaim_reent+0x68>
 800b6e2:	4620      	mov	r0, r4
 800b6e4:	f000 ff0e 	bl	800c504 <_free_r>
 800b6e8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b6ea:	b111      	cbz	r1, 800b6f2 <_reclaim_reent+0x72>
 800b6ec:	4620      	mov	r0, r4
 800b6ee:	f000 ff09 	bl	800c504 <_free_r>
 800b6f2:	6a23      	ldr	r3, [r4, #32]
 800b6f4:	b1b3      	cbz	r3, 800b724 <_reclaim_reent+0xa4>
 800b6f6:	4620      	mov	r0, r4
 800b6f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b6fc:	4718      	bx	r3
 800b6fe:	5949      	ldr	r1, [r1, r5]
 800b700:	b941      	cbnz	r1, 800b714 <_reclaim_reent+0x94>
 800b702:	3504      	adds	r5, #4
 800b704:	69e3      	ldr	r3, [r4, #28]
 800b706:	2d80      	cmp	r5, #128	; 0x80
 800b708:	68d9      	ldr	r1, [r3, #12]
 800b70a:	d1f8      	bne.n	800b6fe <_reclaim_reent+0x7e>
 800b70c:	4620      	mov	r0, r4
 800b70e:	f000 fef9 	bl	800c504 <_free_r>
 800b712:	e7c0      	b.n	800b696 <_reclaim_reent+0x16>
 800b714:	680e      	ldr	r6, [r1, #0]
 800b716:	4620      	mov	r0, r4
 800b718:	f000 fef4 	bl	800c504 <_free_r>
 800b71c:	4631      	mov	r1, r6
 800b71e:	e7ef      	b.n	800b700 <_reclaim_reent+0x80>
 800b720:	2500      	movs	r5, #0
 800b722:	e7ef      	b.n	800b704 <_reclaim_reent+0x84>
 800b724:	bd70      	pop	{r4, r5, r6, pc}
 800b726:	bf00      	nop
 800b728:	20000068 	.word	0x20000068

0800b72c <_lseek_r>:
 800b72c:	b538      	push	{r3, r4, r5, lr}
 800b72e:	4d07      	ldr	r5, [pc, #28]	; (800b74c <_lseek_r+0x20>)
 800b730:	4604      	mov	r4, r0
 800b732:	4608      	mov	r0, r1
 800b734:	4611      	mov	r1, r2
 800b736:	2200      	movs	r2, #0
 800b738:	602a      	str	r2, [r5, #0]
 800b73a:	461a      	mov	r2, r3
 800b73c:	f7f6 fff0 	bl	8002720 <_lseek>
 800b740:	1c43      	adds	r3, r0, #1
 800b742:	d102      	bne.n	800b74a <_lseek_r+0x1e>
 800b744:	682b      	ldr	r3, [r5, #0]
 800b746:	b103      	cbz	r3, 800b74a <_lseek_r+0x1e>
 800b748:	6023      	str	r3, [r4, #0]
 800b74a:	bd38      	pop	{r3, r4, r5, pc}
 800b74c:	200051dc 	.word	0x200051dc

0800b750 <_read_r>:
 800b750:	b538      	push	{r3, r4, r5, lr}
 800b752:	4d07      	ldr	r5, [pc, #28]	; (800b770 <_read_r+0x20>)
 800b754:	4604      	mov	r4, r0
 800b756:	4608      	mov	r0, r1
 800b758:	4611      	mov	r1, r2
 800b75a:	2200      	movs	r2, #0
 800b75c:	602a      	str	r2, [r5, #0]
 800b75e:	461a      	mov	r2, r3
 800b760:	f7f6 ff7e 	bl	8002660 <_read>
 800b764:	1c43      	adds	r3, r0, #1
 800b766:	d102      	bne.n	800b76e <_read_r+0x1e>
 800b768:	682b      	ldr	r3, [r5, #0]
 800b76a:	b103      	cbz	r3, 800b76e <_read_r+0x1e>
 800b76c:	6023      	str	r3, [r4, #0]
 800b76e:	bd38      	pop	{r3, r4, r5, pc}
 800b770:	200051dc 	.word	0x200051dc

0800b774 <_write_r>:
 800b774:	b538      	push	{r3, r4, r5, lr}
 800b776:	4d07      	ldr	r5, [pc, #28]	; (800b794 <_write_r+0x20>)
 800b778:	4604      	mov	r4, r0
 800b77a:	4608      	mov	r0, r1
 800b77c:	4611      	mov	r1, r2
 800b77e:	2200      	movs	r2, #0
 800b780:	602a      	str	r2, [r5, #0]
 800b782:	461a      	mov	r2, r3
 800b784:	f7f6 ff89 	bl	800269a <_write>
 800b788:	1c43      	adds	r3, r0, #1
 800b78a:	d102      	bne.n	800b792 <_write_r+0x1e>
 800b78c:	682b      	ldr	r3, [r5, #0]
 800b78e:	b103      	cbz	r3, 800b792 <_write_r+0x1e>
 800b790:	6023      	str	r3, [r4, #0]
 800b792:	bd38      	pop	{r3, r4, r5, pc}
 800b794:	200051dc 	.word	0x200051dc

0800b798 <__errno>:
 800b798:	4b01      	ldr	r3, [pc, #4]	; (800b7a0 <__errno+0x8>)
 800b79a:	6818      	ldr	r0, [r3, #0]
 800b79c:	4770      	bx	lr
 800b79e:	bf00      	nop
 800b7a0:	20000068 	.word	0x20000068

0800b7a4 <__libc_init_array>:
 800b7a4:	b570      	push	{r4, r5, r6, lr}
 800b7a6:	4d0d      	ldr	r5, [pc, #52]	; (800b7dc <__libc_init_array+0x38>)
 800b7a8:	4c0d      	ldr	r4, [pc, #52]	; (800b7e0 <__libc_init_array+0x3c>)
 800b7aa:	1b64      	subs	r4, r4, r5
 800b7ac:	10a4      	asrs	r4, r4, #2
 800b7ae:	2600      	movs	r6, #0
 800b7b0:	42a6      	cmp	r6, r4
 800b7b2:	d109      	bne.n	800b7c8 <__libc_init_array+0x24>
 800b7b4:	4d0b      	ldr	r5, [pc, #44]	; (800b7e4 <__libc_init_array+0x40>)
 800b7b6:	4c0c      	ldr	r4, [pc, #48]	; (800b7e8 <__libc_init_array+0x44>)
 800b7b8:	f001 fe58 	bl	800d46c <_init>
 800b7bc:	1b64      	subs	r4, r4, r5
 800b7be:	10a4      	asrs	r4, r4, #2
 800b7c0:	2600      	movs	r6, #0
 800b7c2:	42a6      	cmp	r6, r4
 800b7c4:	d105      	bne.n	800b7d2 <__libc_init_array+0x2e>
 800b7c6:	bd70      	pop	{r4, r5, r6, pc}
 800b7c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7cc:	4798      	blx	r3
 800b7ce:	3601      	adds	r6, #1
 800b7d0:	e7ee      	b.n	800b7b0 <__libc_init_array+0xc>
 800b7d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7d6:	4798      	blx	r3
 800b7d8:	3601      	adds	r6, #1
 800b7da:	e7f2      	b.n	800b7c2 <__libc_init_array+0x1e>
 800b7dc:	0800d96c 	.word	0x0800d96c
 800b7e0:	0800d96c 	.word	0x0800d96c
 800b7e4:	0800d96c 	.word	0x0800d96c
 800b7e8:	0800d970 	.word	0x0800d970

0800b7ec <__retarget_lock_init_recursive>:
 800b7ec:	4770      	bx	lr

0800b7ee <__retarget_lock_acquire_recursive>:
 800b7ee:	4770      	bx	lr

0800b7f0 <__retarget_lock_release_recursive>:
 800b7f0:	4770      	bx	lr

0800b7f2 <memcpy>:
 800b7f2:	440a      	add	r2, r1
 800b7f4:	4291      	cmp	r1, r2
 800b7f6:	f100 33ff 	add.w	r3, r0, #4294967295
 800b7fa:	d100      	bne.n	800b7fe <memcpy+0xc>
 800b7fc:	4770      	bx	lr
 800b7fe:	b510      	push	{r4, lr}
 800b800:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b804:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b808:	4291      	cmp	r1, r2
 800b80a:	d1f9      	bne.n	800b800 <memcpy+0xe>
 800b80c:	bd10      	pop	{r4, pc}

0800b80e <quorem>:
 800b80e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b812:	6903      	ldr	r3, [r0, #16]
 800b814:	690c      	ldr	r4, [r1, #16]
 800b816:	42a3      	cmp	r3, r4
 800b818:	4607      	mov	r7, r0
 800b81a:	db7e      	blt.n	800b91a <quorem+0x10c>
 800b81c:	3c01      	subs	r4, #1
 800b81e:	f101 0814 	add.w	r8, r1, #20
 800b822:	f100 0514 	add.w	r5, r0, #20
 800b826:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b82a:	9301      	str	r3, [sp, #4]
 800b82c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b830:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b834:	3301      	adds	r3, #1
 800b836:	429a      	cmp	r2, r3
 800b838:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b83c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b840:	fbb2 f6f3 	udiv	r6, r2, r3
 800b844:	d331      	bcc.n	800b8aa <quorem+0x9c>
 800b846:	f04f 0e00 	mov.w	lr, #0
 800b84a:	4640      	mov	r0, r8
 800b84c:	46ac      	mov	ip, r5
 800b84e:	46f2      	mov	sl, lr
 800b850:	f850 2b04 	ldr.w	r2, [r0], #4
 800b854:	b293      	uxth	r3, r2
 800b856:	fb06 e303 	mla	r3, r6, r3, lr
 800b85a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b85e:	0c1a      	lsrs	r2, r3, #16
 800b860:	b29b      	uxth	r3, r3
 800b862:	ebaa 0303 	sub.w	r3, sl, r3
 800b866:	f8dc a000 	ldr.w	sl, [ip]
 800b86a:	fa13 f38a 	uxtah	r3, r3, sl
 800b86e:	fb06 220e 	mla	r2, r6, lr, r2
 800b872:	9300      	str	r3, [sp, #0]
 800b874:	9b00      	ldr	r3, [sp, #0]
 800b876:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b87a:	b292      	uxth	r2, r2
 800b87c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b880:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b884:	f8bd 3000 	ldrh.w	r3, [sp]
 800b888:	4581      	cmp	r9, r0
 800b88a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b88e:	f84c 3b04 	str.w	r3, [ip], #4
 800b892:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b896:	d2db      	bcs.n	800b850 <quorem+0x42>
 800b898:	f855 300b 	ldr.w	r3, [r5, fp]
 800b89c:	b92b      	cbnz	r3, 800b8aa <quorem+0x9c>
 800b89e:	9b01      	ldr	r3, [sp, #4]
 800b8a0:	3b04      	subs	r3, #4
 800b8a2:	429d      	cmp	r5, r3
 800b8a4:	461a      	mov	r2, r3
 800b8a6:	d32c      	bcc.n	800b902 <quorem+0xf4>
 800b8a8:	613c      	str	r4, [r7, #16]
 800b8aa:	4638      	mov	r0, r7
 800b8ac:	f001 f9a6 	bl	800cbfc <__mcmp>
 800b8b0:	2800      	cmp	r0, #0
 800b8b2:	db22      	blt.n	800b8fa <quorem+0xec>
 800b8b4:	3601      	adds	r6, #1
 800b8b6:	4629      	mov	r1, r5
 800b8b8:	2000      	movs	r0, #0
 800b8ba:	f858 2b04 	ldr.w	r2, [r8], #4
 800b8be:	f8d1 c000 	ldr.w	ip, [r1]
 800b8c2:	b293      	uxth	r3, r2
 800b8c4:	1ac3      	subs	r3, r0, r3
 800b8c6:	0c12      	lsrs	r2, r2, #16
 800b8c8:	fa13 f38c 	uxtah	r3, r3, ip
 800b8cc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b8d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b8d4:	b29b      	uxth	r3, r3
 800b8d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b8da:	45c1      	cmp	r9, r8
 800b8dc:	f841 3b04 	str.w	r3, [r1], #4
 800b8e0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b8e4:	d2e9      	bcs.n	800b8ba <quorem+0xac>
 800b8e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b8ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b8ee:	b922      	cbnz	r2, 800b8fa <quorem+0xec>
 800b8f0:	3b04      	subs	r3, #4
 800b8f2:	429d      	cmp	r5, r3
 800b8f4:	461a      	mov	r2, r3
 800b8f6:	d30a      	bcc.n	800b90e <quorem+0x100>
 800b8f8:	613c      	str	r4, [r7, #16]
 800b8fa:	4630      	mov	r0, r6
 800b8fc:	b003      	add	sp, #12
 800b8fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b902:	6812      	ldr	r2, [r2, #0]
 800b904:	3b04      	subs	r3, #4
 800b906:	2a00      	cmp	r2, #0
 800b908:	d1ce      	bne.n	800b8a8 <quorem+0x9a>
 800b90a:	3c01      	subs	r4, #1
 800b90c:	e7c9      	b.n	800b8a2 <quorem+0x94>
 800b90e:	6812      	ldr	r2, [r2, #0]
 800b910:	3b04      	subs	r3, #4
 800b912:	2a00      	cmp	r2, #0
 800b914:	d1f0      	bne.n	800b8f8 <quorem+0xea>
 800b916:	3c01      	subs	r4, #1
 800b918:	e7eb      	b.n	800b8f2 <quorem+0xe4>
 800b91a:	2000      	movs	r0, #0
 800b91c:	e7ee      	b.n	800b8fc <quorem+0xee>
	...

0800b920 <_dtoa_r>:
 800b920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b924:	ed2d 8b04 	vpush	{d8-d9}
 800b928:	69c5      	ldr	r5, [r0, #28]
 800b92a:	b093      	sub	sp, #76	; 0x4c
 800b92c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b930:	ec57 6b10 	vmov	r6, r7, d0
 800b934:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b938:	9107      	str	r1, [sp, #28]
 800b93a:	4604      	mov	r4, r0
 800b93c:	920a      	str	r2, [sp, #40]	; 0x28
 800b93e:	930d      	str	r3, [sp, #52]	; 0x34
 800b940:	b975      	cbnz	r5, 800b960 <_dtoa_r+0x40>
 800b942:	2010      	movs	r0, #16
 800b944:	f000 fe2a 	bl	800c59c <malloc>
 800b948:	4602      	mov	r2, r0
 800b94a:	61e0      	str	r0, [r4, #28]
 800b94c:	b920      	cbnz	r0, 800b958 <_dtoa_r+0x38>
 800b94e:	4bae      	ldr	r3, [pc, #696]	; (800bc08 <_dtoa_r+0x2e8>)
 800b950:	21ef      	movs	r1, #239	; 0xef
 800b952:	48ae      	ldr	r0, [pc, #696]	; (800bc0c <_dtoa_r+0x2ec>)
 800b954:	f001 fcd8 	bl	800d308 <__assert_func>
 800b958:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b95c:	6005      	str	r5, [r0, #0]
 800b95e:	60c5      	str	r5, [r0, #12]
 800b960:	69e3      	ldr	r3, [r4, #28]
 800b962:	6819      	ldr	r1, [r3, #0]
 800b964:	b151      	cbz	r1, 800b97c <_dtoa_r+0x5c>
 800b966:	685a      	ldr	r2, [r3, #4]
 800b968:	604a      	str	r2, [r1, #4]
 800b96a:	2301      	movs	r3, #1
 800b96c:	4093      	lsls	r3, r2
 800b96e:	608b      	str	r3, [r1, #8]
 800b970:	4620      	mov	r0, r4
 800b972:	f000 ff07 	bl	800c784 <_Bfree>
 800b976:	69e3      	ldr	r3, [r4, #28]
 800b978:	2200      	movs	r2, #0
 800b97a:	601a      	str	r2, [r3, #0]
 800b97c:	1e3b      	subs	r3, r7, #0
 800b97e:	bfbb      	ittet	lt
 800b980:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b984:	9303      	strlt	r3, [sp, #12]
 800b986:	2300      	movge	r3, #0
 800b988:	2201      	movlt	r2, #1
 800b98a:	bfac      	ite	ge
 800b98c:	f8c8 3000 	strge.w	r3, [r8]
 800b990:	f8c8 2000 	strlt.w	r2, [r8]
 800b994:	4b9e      	ldr	r3, [pc, #632]	; (800bc10 <_dtoa_r+0x2f0>)
 800b996:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b99a:	ea33 0308 	bics.w	r3, r3, r8
 800b99e:	d11b      	bne.n	800b9d8 <_dtoa_r+0xb8>
 800b9a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b9a2:	f242 730f 	movw	r3, #9999	; 0x270f
 800b9a6:	6013      	str	r3, [r2, #0]
 800b9a8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b9ac:	4333      	orrs	r3, r6
 800b9ae:	f000 8593 	beq.w	800c4d8 <_dtoa_r+0xbb8>
 800b9b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b9b4:	b963      	cbnz	r3, 800b9d0 <_dtoa_r+0xb0>
 800b9b6:	4b97      	ldr	r3, [pc, #604]	; (800bc14 <_dtoa_r+0x2f4>)
 800b9b8:	e027      	b.n	800ba0a <_dtoa_r+0xea>
 800b9ba:	4b97      	ldr	r3, [pc, #604]	; (800bc18 <_dtoa_r+0x2f8>)
 800b9bc:	9300      	str	r3, [sp, #0]
 800b9be:	3308      	adds	r3, #8
 800b9c0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b9c2:	6013      	str	r3, [r2, #0]
 800b9c4:	9800      	ldr	r0, [sp, #0]
 800b9c6:	b013      	add	sp, #76	; 0x4c
 800b9c8:	ecbd 8b04 	vpop	{d8-d9}
 800b9cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9d0:	4b90      	ldr	r3, [pc, #576]	; (800bc14 <_dtoa_r+0x2f4>)
 800b9d2:	9300      	str	r3, [sp, #0]
 800b9d4:	3303      	adds	r3, #3
 800b9d6:	e7f3      	b.n	800b9c0 <_dtoa_r+0xa0>
 800b9d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b9dc:	2200      	movs	r2, #0
 800b9de:	ec51 0b17 	vmov	r0, r1, d7
 800b9e2:	eeb0 8a47 	vmov.f32	s16, s14
 800b9e6:	eef0 8a67 	vmov.f32	s17, s15
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	f7f5 f874 	bl	8000ad8 <__aeabi_dcmpeq>
 800b9f0:	4681      	mov	r9, r0
 800b9f2:	b160      	cbz	r0, 800ba0e <_dtoa_r+0xee>
 800b9f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	6013      	str	r3, [r2, #0]
 800b9fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	f000 8568 	beq.w	800c4d2 <_dtoa_r+0xbb2>
 800ba02:	4b86      	ldr	r3, [pc, #536]	; (800bc1c <_dtoa_r+0x2fc>)
 800ba04:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ba06:	6013      	str	r3, [r2, #0]
 800ba08:	3b01      	subs	r3, #1
 800ba0a:	9300      	str	r3, [sp, #0]
 800ba0c:	e7da      	b.n	800b9c4 <_dtoa_r+0xa4>
 800ba0e:	aa10      	add	r2, sp, #64	; 0x40
 800ba10:	a911      	add	r1, sp, #68	; 0x44
 800ba12:	4620      	mov	r0, r4
 800ba14:	eeb0 0a48 	vmov.f32	s0, s16
 800ba18:	eef0 0a68 	vmov.f32	s1, s17
 800ba1c:	f001 f994 	bl	800cd48 <__d2b>
 800ba20:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ba24:	4682      	mov	sl, r0
 800ba26:	2d00      	cmp	r5, #0
 800ba28:	d07f      	beq.n	800bb2a <_dtoa_r+0x20a>
 800ba2a:	ee18 3a90 	vmov	r3, s17
 800ba2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ba32:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800ba36:	ec51 0b18 	vmov	r0, r1, d8
 800ba3a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ba3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ba42:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800ba46:	4619      	mov	r1, r3
 800ba48:	2200      	movs	r2, #0
 800ba4a:	4b75      	ldr	r3, [pc, #468]	; (800bc20 <_dtoa_r+0x300>)
 800ba4c:	f7f4 fc24 	bl	8000298 <__aeabi_dsub>
 800ba50:	a367      	add	r3, pc, #412	; (adr r3, 800bbf0 <_dtoa_r+0x2d0>)
 800ba52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba56:	f7f4 fdd7 	bl	8000608 <__aeabi_dmul>
 800ba5a:	a367      	add	r3, pc, #412	; (adr r3, 800bbf8 <_dtoa_r+0x2d8>)
 800ba5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba60:	f7f4 fc1c 	bl	800029c <__adddf3>
 800ba64:	4606      	mov	r6, r0
 800ba66:	4628      	mov	r0, r5
 800ba68:	460f      	mov	r7, r1
 800ba6a:	f7f4 fd63 	bl	8000534 <__aeabi_i2d>
 800ba6e:	a364      	add	r3, pc, #400	; (adr r3, 800bc00 <_dtoa_r+0x2e0>)
 800ba70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba74:	f7f4 fdc8 	bl	8000608 <__aeabi_dmul>
 800ba78:	4602      	mov	r2, r0
 800ba7a:	460b      	mov	r3, r1
 800ba7c:	4630      	mov	r0, r6
 800ba7e:	4639      	mov	r1, r7
 800ba80:	f7f4 fc0c 	bl	800029c <__adddf3>
 800ba84:	4606      	mov	r6, r0
 800ba86:	460f      	mov	r7, r1
 800ba88:	f7f5 f86e 	bl	8000b68 <__aeabi_d2iz>
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	4683      	mov	fp, r0
 800ba90:	2300      	movs	r3, #0
 800ba92:	4630      	mov	r0, r6
 800ba94:	4639      	mov	r1, r7
 800ba96:	f7f5 f829 	bl	8000aec <__aeabi_dcmplt>
 800ba9a:	b148      	cbz	r0, 800bab0 <_dtoa_r+0x190>
 800ba9c:	4658      	mov	r0, fp
 800ba9e:	f7f4 fd49 	bl	8000534 <__aeabi_i2d>
 800baa2:	4632      	mov	r2, r6
 800baa4:	463b      	mov	r3, r7
 800baa6:	f7f5 f817 	bl	8000ad8 <__aeabi_dcmpeq>
 800baaa:	b908      	cbnz	r0, 800bab0 <_dtoa_r+0x190>
 800baac:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bab0:	f1bb 0f16 	cmp.w	fp, #22
 800bab4:	d857      	bhi.n	800bb66 <_dtoa_r+0x246>
 800bab6:	4b5b      	ldr	r3, [pc, #364]	; (800bc24 <_dtoa_r+0x304>)
 800bab8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800babc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac0:	ec51 0b18 	vmov	r0, r1, d8
 800bac4:	f7f5 f812 	bl	8000aec <__aeabi_dcmplt>
 800bac8:	2800      	cmp	r0, #0
 800baca:	d04e      	beq.n	800bb6a <_dtoa_r+0x24a>
 800bacc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bad0:	2300      	movs	r3, #0
 800bad2:	930c      	str	r3, [sp, #48]	; 0x30
 800bad4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bad6:	1b5b      	subs	r3, r3, r5
 800bad8:	1e5a      	subs	r2, r3, #1
 800bada:	bf45      	ittet	mi
 800badc:	f1c3 0301 	rsbmi	r3, r3, #1
 800bae0:	9305      	strmi	r3, [sp, #20]
 800bae2:	2300      	movpl	r3, #0
 800bae4:	2300      	movmi	r3, #0
 800bae6:	9206      	str	r2, [sp, #24]
 800bae8:	bf54      	ite	pl
 800baea:	9305      	strpl	r3, [sp, #20]
 800baec:	9306      	strmi	r3, [sp, #24]
 800baee:	f1bb 0f00 	cmp.w	fp, #0
 800baf2:	db3c      	blt.n	800bb6e <_dtoa_r+0x24e>
 800baf4:	9b06      	ldr	r3, [sp, #24]
 800baf6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800bafa:	445b      	add	r3, fp
 800bafc:	9306      	str	r3, [sp, #24]
 800bafe:	2300      	movs	r3, #0
 800bb00:	9308      	str	r3, [sp, #32]
 800bb02:	9b07      	ldr	r3, [sp, #28]
 800bb04:	2b09      	cmp	r3, #9
 800bb06:	d868      	bhi.n	800bbda <_dtoa_r+0x2ba>
 800bb08:	2b05      	cmp	r3, #5
 800bb0a:	bfc4      	itt	gt
 800bb0c:	3b04      	subgt	r3, #4
 800bb0e:	9307      	strgt	r3, [sp, #28]
 800bb10:	9b07      	ldr	r3, [sp, #28]
 800bb12:	f1a3 0302 	sub.w	r3, r3, #2
 800bb16:	bfcc      	ite	gt
 800bb18:	2500      	movgt	r5, #0
 800bb1a:	2501      	movle	r5, #1
 800bb1c:	2b03      	cmp	r3, #3
 800bb1e:	f200 8085 	bhi.w	800bc2c <_dtoa_r+0x30c>
 800bb22:	e8df f003 	tbb	[pc, r3]
 800bb26:	3b2e      	.short	0x3b2e
 800bb28:	5839      	.short	0x5839
 800bb2a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bb2e:	441d      	add	r5, r3
 800bb30:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bb34:	2b20      	cmp	r3, #32
 800bb36:	bfc1      	itttt	gt
 800bb38:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bb3c:	fa08 f803 	lslgt.w	r8, r8, r3
 800bb40:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800bb44:	fa26 f303 	lsrgt.w	r3, r6, r3
 800bb48:	bfd6      	itet	le
 800bb4a:	f1c3 0320 	rsble	r3, r3, #32
 800bb4e:	ea48 0003 	orrgt.w	r0, r8, r3
 800bb52:	fa06 f003 	lslle.w	r0, r6, r3
 800bb56:	f7f4 fcdd 	bl	8000514 <__aeabi_ui2d>
 800bb5a:	2201      	movs	r2, #1
 800bb5c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800bb60:	3d01      	subs	r5, #1
 800bb62:	920e      	str	r2, [sp, #56]	; 0x38
 800bb64:	e76f      	b.n	800ba46 <_dtoa_r+0x126>
 800bb66:	2301      	movs	r3, #1
 800bb68:	e7b3      	b.n	800bad2 <_dtoa_r+0x1b2>
 800bb6a:	900c      	str	r0, [sp, #48]	; 0x30
 800bb6c:	e7b2      	b.n	800bad4 <_dtoa_r+0x1b4>
 800bb6e:	9b05      	ldr	r3, [sp, #20]
 800bb70:	eba3 030b 	sub.w	r3, r3, fp
 800bb74:	9305      	str	r3, [sp, #20]
 800bb76:	f1cb 0300 	rsb	r3, fp, #0
 800bb7a:	9308      	str	r3, [sp, #32]
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb80:	e7bf      	b.n	800bb02 <_dtoa_r+0x1e2>
 800bb82:	2300      	movs	r3, #0
 800bb84:	9309      	str	r3, [sp, #36]	; 0x24
 800bb86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	dc52      	bgt.n	800bc32 <_dtoa_r+0x312>
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	9301      	str	r3, [sp, #4]
 800bb90:	9304      	str	r3, [sp, #16]
 800bb92:	461a      	mov	r2, r3
 800bb94:	920a      	str	r2, [sp, #40]	; 0x28
 800bb96:	e00b      	b.n	800bbb0 <_dtoa_r+0x290>
 800bb98:	2301      	movs	r3, #1
 800bb9a:	e7f3      	b.n	800bb84 <_dtoa_r+0x264>
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	9309      	str	r3, [sp, #36]	; 0x24
 800bba0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bba2:	445b      	add	r3, fp
 800bba4:	9301      	str	r3, [sp, #4]
 800bba6:	3301      	adds	r3, #1
 800bba8:	2b01      	cmp	r3, #1
 800bbaa:	9304      	str	r3, [sp, #16]
 800bbac:	bfb8      	it	lt
 800bbae:	2301      	movlt	r3, #1
 800bbb0:	69e0      	ldr	r0, [r4, #28]
 800bbb2:	2100      	movs	r1, #0
 800bbb4:	2204      	movs	r2, #4
 800bbb6:	f102 0614 	add.w	r6, r2, #20
 800bbba:	429e      	cmp	r6, r3
 800bbbc:	d93d      	bls.n	800bc3a <_dtoa_r+0x31a>
 800bbbe:	6041      	str	r1, [r0, #4]
 800bbc0:	4620      	mov	r0, r4
 800bbc2:	f000 fd9f 	bl	800c704 <_Balloc>
 800bbc6:	9000      	str	r0, [sp, #0]
 800bbc8:	2800      	cmp	r0, #0
 800bbca:	d139      	bne.n	800bc40 <_dtoa_r+0x320>
 800bbcc:	4b16      	ldr	r3, [pc, #88]	; (800bc28 <_dtoa_r+0x308>)
 800bbce:	4602      	mov	r2, r0
 800bbd0:	f240 11af 	movw	r1, #431	; 0x1af
 800bbd4:	e6bd      	b.n	800b952 <_dtoa_r+0x32>
 800bbd6:	2301      	movs	r3, #1
 800bbd8:	e7e1      	b.n	800bb9e <_dtoa_r+0x27e>
 800bbda:	2501      	movs	r5, #1
 800bbdc:	2300      	movs	r3, #0
 800bbde:	9307      	str	r3, [sp, #28]
 800bbe0:	9509      	str	r5, [sp, #36]	; 0x24
 800bbe2:	f04f 33ff 	mov.w	r3, #4294967295
 800bbe6:	9301      	str	r3, [sp, #4]
 800bbe8:	9304      	str	r3, [sp, #16]
 800bbea:	2200      	movs	r2, #0
 800bbec:	2312      	movs	r3, #18
 800bbee:	e7d1      	b.n	800bb94 <_dtoa_r+0x274>
 800bbf0:	636f4361 	.word	0x636f4361
 800bbf4:	3fd287a7 	.word	0x3fd287a7
 800bbf8:	8b60c8b3 	.word	0x8b60c8b3
 800bbfc:	3fc68a28 	.word	0x3fc68a28
 800bc00:	509f79fb 	.word	0x509f79fb
 800bc04:	3fd34413 	.word	0x3fd34413
 800bc08:	0800d631 	.word	0x0800d631
 800bc0c:	0800d648 	.word	0x0800d648
 800bc10:	7ff00000 	.word	0x7ff00000
 800bc14:	0800d62d 	.word	0x0800d62d
 800bc18:	0800d624 	.word	0x0800d624
 800bc1c:	0800d601 	.word	0x0800d601
 800bc20:	3ff80000 	.word	0x3ff80000
 800bc24:	0800d738 	.word	0x0800d738
 800bc28:	0800d6a0 	.word	0x0800d6a0
 800bc2c:	2301      	movs	r3, #1
 800bc2e:	9309      	str	r3, [sp, #36]	; 0x24
 800bc30:	e7d7      	b.n	800bbe2 <_dtoa_r+0x2c2>
 800bc32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc34:	9301      	str	r3, [sp, #4]
 800bc36:	9304      	str	r3, [sp, #16]
 800bc38:	e7ba      	b.n	800bbb0 <_dtoa_r+0x290>
 800bc3a:	3101      	adds	r1, #1
 800bc3c:	0052      	lsls	r2, r2, #1
 800bc3e:	e7ba      	b.n	800bbb6 <_dtoa_r+0x296>
 800bc40:	69e3      	ldr	r3, [r4, #28]
 800bc42:	9a00      	ldr	r2, [sp, #0]
 800bc44:	601a      	str	r2, [r3, #0]
 800bc46:	9b04      	ldr	r3, [sp, #16]
 800bc48:	2b0e      	cmp	r3, #14
 800bc4a:	f200 80a8 	bhi.w	800bd9e <_dtoa_r+0x47e>
 800bc4e:	2d00      	cmp	r5, #0
 800bc50:	f000 80a5 	beq.w	800bd9e <_dtoa_r+0x47e>
 800bc54:	f1bb 0f00 	cmp.w	fp, #0
 800bc58:	dd38      	ble.n	800bccc <_dtoa_r+0x3ac>
 800bc5a:	4bc0      	ldr	r3, [pc, #768]	; (800bf5c <_dtoa_r+0x63c>)
 800bc5c:	f00b 020f 	and.w	r2, fp, #15
 800bc60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc64:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800bc68:	e9d3 6700 	ldrd	r6, r7, [r3]
 800bc6c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800bc70:	d019      	beq.n	800bca6 <_dtoa_r+0x386>
 800bc72:	4bbb      	ldr	r3, [pc, #748]	; (800bf60 <_dtoa_r+0x640>)
 800bc74:	ec51 0b18 	vmov	r0, r1, d8
 800bc78:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bc7c:	f7f4 fdee 	bl	800085c <__aeabi_ddiv>
 800bc80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc84:	f008 080f 	and.w	r8, r8, #15
 800bc88:	2503      	movs	r5, #3
 800bc8a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800bf60 <_dtoa_r+0x640>
 800bc8e:	f1b8 0f00 	cmp.w	r8, #0
 800bc92:	d10a      	bne.n	800bcaa <_dtoa_r+0x38a>
 800bc94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc98:	4632      	mov	r2, r6
 800bc9a:	463b      	mov	r3, r7
 800bc9c:	f7f4 fdde 	bl	800085c <__aeabi_ddiv>
 800bca0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bca4:	e02b      	b.n	800bcfe <_dtoa_r+0x3de>
 800bca6:	2502      	movs	r5, #2
 800bca8:	e7ef      	b.n	800bc8a <_dtoa_r+0x36a>
 800bcaa:	f018 0f01 	tst.w	r8, #1
 800bcae:	d008      	beq.n	800bcc2 <_dtoa_r+0x3a2>
 800bcb0:	4630      	mov	r0, r6
 800bcb2:	4639      	mov	r1, r7
 800bcb4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800bcb8:	f7f4 fca6 	bl	8000608 <__aeabi_dmul>
 800bcbc:	3501      	adds	r5, #1
 800bcbe:	4606      	mov	r6, r0
 800bcc0:	460f      	mov	r7, r1
 800bcc2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bcc6:	f109 0908 	add.w	r9, r9, #8
 800bcca:	e7e0      	b.n	800bc8e <_dtoa_r+0x36e>
 800bccc:	f000 809f 	beq.w	800be0e <_dtoa_r+0x4ee>
 800bcd0:	f1cb 0600 	rsb	r6, fp, #0
 800bcd4:	4ba1      	ldr	r3, [pc, #644]	; (800bf5c <_dtoa_r+0x63c>)
 800bcd6:	4fa2      	ldr	r7, [pc, #648]	; (800bf60 <_dtoa_r+0x640>)
 800bcd8:	f006 020f 	and.w	r2, r6, #15
 800bcdc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bce4:	ec51 0b18 	vmov	r0, r1, d8
 800bce8:	f7f4 fc8e 	bl	8000608 <__aeabi_dmul>
 800bcec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bcf0:	1136      	asrs	r6, r6, #4
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	2502      	movs	r5, #2
 800bcf6:	2e00      	cmp	r6, #0
 800bcf8:	d17e      	bne.n	800bdf8 <_dtoa_r+0x4d8>
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d1d0      	bne.n	800bca0 <_dtoa_r+0x380>
 800bcfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd00:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	f000 8084 	beq.w	800be12 <_dtoa_r+0x4f2>
 800bd0a:	4b96      	ldr	r3, [pc, #600]	; (800bf64 <_dtoa_r+0x644>)
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	4640      	mov	r0, r8
 800bd10:	4649      	mov	r1, r9
 800bd12:	f7f4 feeb 	bl	8000aec <__aeabi_dcmplt>
 800bd16:	2800      	cmp	r0, #0
 800bd18:	d07b      	beq.n	800be12 <_dtoa_r+0x4f2>
 800bd1a:	9b04      	ldr	r3, [sp, #16]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d078      	beq.n	800be12 <_dtoa_r+0x4f2>
 800bd20:	9b01      	ldr	r3, [sp, #4]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	dd39      	ble.n	800bd9a <_dtoa_r+0x47a>
 800bd26:	4b90      	ldr	r3, [pc, #576]	; (800bf68 <_dtoa_r+0x648>)
 800bd28:	2200      	movs	r2, #0
 800bd2a:	4640      	mov	r0, r8
 800bd2c:	4649      	mov	r1, r9
 800bd2e:	f7f4 fc6b 	bl	8000608 <__aeabi_dmul>
 800bd32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd36:	9e01      	ldr	r6, [sp, #4]
 800bd38:	f10b 37ff 	add.w	r7, fp, #4294967295
 800bd3c:	3501      	adds	r5, #1
 800bd3e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bd42:	4628      	mov	r0, r5
 800bd44:	f7f4 fbf6 	bl	8000534 <__aeabi_i2d>
 800bd48:	4642      	mov	r2, r8
 800bd4a:	464b      	mov	r3, r9
 800bd4c:	f7f4 fc5c 	bl	8000608 <__aeabi_dmul>
 800bd50:	4b86      	ldr	r3, [pc, #536]	; (800bf6c <_dtoa_r+0x64c>)
 800bd52:	2200      	movs	r2, #0
 800bd54:	f7f4 faa2 	bl	800029c <__adddf3>
 800bd58:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800bd5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd60:	9303      	str	r3, [sp, #12]
 800bd62:	2e00      	cmp	r6, #0
 800bd64:	d158      	bne.n	800be18 <_dtoa_r+0x4f8>
 800bd66:	4b82      	ldr	r3, [pc, #520]	; (800bf70 <_dtoa_r+0x650>)
 800bd68:	2200      	movs	r2, #0
 800bd6a:	4640      	mov	r0, r8
 800bd6c:	4649      	mov	r1, r9
 800bd6e:	f7f4 fa93 	bl	8000298 <__aeabi_dsub>
 800bd72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd76:	4680      	mov	r8, r0
 800bd78:	4689      	mov	r9, r1
 800bd7a:	f7f4 fed5 	bl	8000b28 <__aeabi_dcmpgt>
 800bd7e:	2800      	cmp	r0, #0
 800bd80:	f040 8296 	bne.w	800c2b0 <_dtoa_r+0x990>
 800bd84:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800bd88:	4640      	mov	r0, r8
 800bd8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bd8e:	4649      	mov	r1, r9
 800bd90:	f7f4 feac 	bl	8000aec <__aeabi_dcmplt>
 800bd94:	2800      	cmp	r0, #0
 800bd96:	f040 8289 	bne.w	800c2ac <_dtoa_r+0x98c>
 800bd9a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800bd9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	f2c0 814e 	blt.w	800c042 <_dtoa_r+0x722>
 800bda6:	f1bb 0f0e 	cmp.w	fp, #14
 800bdaa:	f300 814a 	bgt.w	800c042 <_dtoa_r+0x722>
 800bdae:	4b6b      	ldr	r3, [pc, #428]	; (800bf5c <_dtoa_r+0x63c>)
 800bdb0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bdb4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bdb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	f280 80dc 	bge.w	800bf78 <_dtoa_r+0x658>
 800bdc0:	9b04      	ldr	r3, [sp, #16]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	f300 80d8 	bgt.w	800bf78 <_dtoa_r+0x658>
 800bdc8:	f040 826f 	bne.w	800c2aa <_dtoa_r+0x98a>
 800bdcc:	4b68      	ldr	r3, [pc, #416]	; (800bf70 <_dtoa_r+0x650>)
 800bdce:	2200      	movs	r2, #0
 800bdd0:	4640      	mov	r0, r8
 800bdd2:	4649      	mov	r1, r9
 800bdd4:	f7f4 fc18 	bl	8000608 <__aeabi_dmul>
 800bdd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bddc:	f7f4 fe9a 	bl	8000b14 <__aeabi_dcmpge>
 800bde0:	9e04      	ldr	r6, [sp, #16]
 800bde2:	4637      	mov	r7, r6
 800bde4:	2800      	cmp	r0, #0
 800bde6:	f040 8245 	bne.w	800c274 <_dtoa_r+0x954>
 800bdea:	9d00      	ldr	r5, [sp, #0]
 800bdec:	2331      	movs	r3, #49	; 0x31
 800bdee:	f805 3b01 	strb.w	r3, [r5], #1
 800bdf2:	f10b 0b01 	add.w	fp, fp, #1
 800bdf6:	e241      	b.n	800c27c <_dtoa_r+0x95c>
 800bdf8:	07f2      	lsls	r2, r6, #31
 800bdfa:	d505      	bpl.n	800be08 <_dtoa_r+0x4e8>
 800bdfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be00:	f7f4 fc02 	bl	8000608 <__aeabi_dmul>
 800be04:	3501      	adds	r5, #1
 800be06:	2301      	movs	r3, #1
 800be08:	1076      	asrs	r6, r6, #1
 800be0a:	3708      	adds	r7, #8
 800be0c:	e773      	b.n	800bcf6 <_dtoa_r+0x3d6>
 800be0e:	2502      	movs	r5, #2
 800be10:	e775      	b.n	800bcfe <_dtoa_r+0x3de>
 800be12:	9e04      	ldr	r6, [sp, #16]
 800be14:	465f      	mov	r7, fp
 800be16:	e792      	b.n	800bd3e <_dtoa_r+0x41e>
 800be18:	9900      	ldr	r1, [sp, #0]
 800be1a:	4b50      	ldr	r3, [pc, #320]	; (800bf5c <_dtoa_r+0x63c>)
 800be1c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800be20:	4431      	add	r1, r6
 800be22:	9102      	str	r1, [sp, #8]
 800be24:	9909      	ldr	r1, [sp, #36]	; 0x24
 800be26:	eeb0 9a47 	vmov.f32	s18, s14
 800be2a:	eef0 9a67 	vmov.f32	s19, s15
 800be2e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800be32:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800be36:	2900      	cmp	r1, #0
 800be38:	d044      	beq.n	800bec4 <_dtoa_r+0x5a4>
 800be3a:	494e      	ldr	r1, [pc, #312]	; (800bf74 <_dtoa_r+0x654>)
 800be3c:	2000      	movs	r0, #0
 800be3e:	f7f4 fd0d 	bl	800085c <__aeabi_ddiv>
 800be42:	ec53 2b19 	vmov	r2, r3, d9
 800be46:	f7f4 fa27 	bl	8000298 <__aeabi_dsub>
 800be4a:	9d00      	ldr	r5, [sp, #0]
 800be4c:	ec41 0b19 	vmov	d9, r0, r1
 800be50:	4649      	mov	r1, r9
 800be52:	4640      	mov	r0, r8
 800be54:	f7f4 fe88 	bl	8000b68 <__aeabi_d2iz>
 800be58:	4606      	mov	r6, r0
 800be5a:	f7f4 fb6b 	bl	8000534 <__aeabi_i2d>
 800be5e:	4602      	mov	r2, r0
 800be60:	460b      	mov	r3, r1
 800be62:	4640      	mov	r0, r8
 800be64:	4649      	mov	r1, r9
 800be66:	f7f4 fa17 	bl	8000298 <__aeabi_dsub>
 800be6a:	3630      	adds	r6, #48	; 0x30
 800be6c:	f805 6b01 	strb.w	r6, [r5], #1
 800be70:	ec53 2b19 	vmov	r2, r3, d9
 800be74:	4680      	mov	r8, r0
 800be76:	4689      	mov	r9, r1
 800be78:	f7f4 fe38 	bl	8000aec <__aeabi_dcmplt>
 800be7c:	2800      	cmp	r0, #0
 800be7e:	d164      	bne.n	800bf4a <_dtoa_r+0x62a>
 800be80:	4642      	mov	r2, r8
 800be82:	464b      	mov	r3, r9
 800be84:	4937      	ldr	r1, [pc, #220]	; (800bf64 <_dtoa_r+0x644>)
 800be86:	2000      	movs	r0, #0
 800be88:	f7f4 fa06 	bl	8000298 <__aeabi_dsub>
 800be8c:	ec53 2b19 	vmov	r2, r3, d9
 800be90:	f7f4 fe2c 	bl	8000aec <__aeabi_dcmplt>
 800be94:	2800      	cmp	r0, #0
 800be96:	f040 80b6 	bne.w	800c006 <_dtoa_r+0x6e6>
 800be9a:	9b02      	ldr	r3, [sp, #8]
 800be9c:	429d      	cmp	r5, r3
 800be9e:	f43f af7c 	beq.w	800bd9a <_dtoa_r+0x47a>
 800bea2:	4b31      	ldr	r3, [pc, #196]	; (800bf68 <_dtoa_r+0x648>)
 800bea4:	ec51 0b19 	vmov	r0, r1, d9
 800bea8:	2200      	movs	r2, #0
 800beaa:	f7f4 fbad 	bl	8000608 <__aeabi_dmul>
 800beae:	4b2e      	ldr	r3, [pc, #184]	; (800bf68 <_dtoa_r+0x648>)
 800beb0:	ec41 0b19 	vmov	d9, r0, r1
 800beb4:	2200      	movs	r2, #0
 800beb6:	4640      	mov	r0, r8
 800beb8:	4649      	mov	r1, r9
 800beba:	f7f4 fba5 	bl	8000608 <__aeabi_dmul>
 800bebe:	4680      	mov	r8, r0
 800bec0:	4689      	mov	r9, r1
 800bec2:	e7c5      	b.n	800be50 <_dtoa_r+0x530>
 800bec4:	ec51 0b17 	vmov	r0, r1, d7
 800bec8:	f7f4 fb9e 	bl	8000608 <__aeabi_dmul>
 800becc:	9b02      	ldr	r3, [sp, #8]
 800bece:	9d00      	ldr	r5, [sp, #0]
 800bed0:	930f      	str	r3, [sp, #60]	; 0x3c
 800bed2:	ec41 0b19 	vmov	d9, r0, r1
 800bed6:	4649      	mov	r1, r9
 800bed8:	4640      	mov	r0, r8
 800beda:	f7f4 fe45 	bl	8000b68 <__aeabi_d2iz>
 800bede:	4606      	mov	r6, r0
 800bee0:	f7f4 fb28 	bl	8000534 <__aeabi_i2d>
 800bee4:	3630      	adds	r6, #48	; 0x30
 800bee6:	4602      	mov	r2, r0
 800bee8:	460b      	mov	r3, r1
 800beea:	4640      	mov	r0, r8
 800beec:	4649      	mov	r1, r9
 800beee:	f7f4 f9d3 	bl	8000298 <__aeabi_dsub>
 800bef2:	f805 6b01 	strb.w	r6, [r5], #1
 800bef6:	9b02      	ldr	r3, [sp, #8]
 800bef8:	429d      	cmp	r5, r3
 800befa:	4680      	mov	r8, r0
 800befc:	4689      	mov	r9, r1
 800befe:	f04f 0200 	mov.w	r2, #0
 800bf02:	d124      	bne.n	800bf4e <_dtoa_r+0x62e>
 800bf04:	4b1b      	ldr	r3, [pc, #108]	; (800bf74 <_dtoa_r+0x654>)
 800bf06:	ec51 0b19 	vmov	r0, r1, d9
 800bf0a:	f7f4 f9c7 	bl	800029c <__adddf3>
 800bf0e:	4602      	mov	r2, r0
 800bf10:	460b      	mov	r3, r1
 800bf12:	4640      	mov	r0, r8
 800bf14:	4649      	mov	r1, r9
 800bf16:	f7f4 fe07 	bl	8000b28 <__aeabi_dcmpgt>
 800bf1a:	2800      	cmp	r0, #0
 800bf1c:	d173      	bne.n	800c006 <_dtoa_r+0x6e6>
 800bf1e:	ec53 2b19 	vmov	r2, r3, d9
 800bf22:	4914      	ldr	r1, [pc, #80]	; (800bf74 <_dtoa_r+0x654>)
 800bf24:	2000      	movs	r0, #0
 800bf26:	f7f4 f9b7 	bl	8000298 <__aeabi_dsub>
 800bf2a:	4602      	mov	r2, r0
 800bf2c:	460b      	mov	r3, r1
 800bf2e:	4640      	mov	r0, r8
 800bf30:	4649      	mov	r1, r9
 800bf32:	f7f4 fddb 	bl	8000aec <__aeabi_dcmplt>
 800bf36:	2800      	cmp	r0, #0
 800bf38:	f43f af2f 	beq.w	800bd9a <_dtoa_r+0x47a>
 800bf3c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bf3e:	1e6b      	subs	r3, r5, #1
 800bf40:	930f      	str	r3, [sp, #60]	; 0x3c
 800bf42:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bf46:	2b30      	cmp	r3, #48	; 0x30
 800bf48:	d0f8      	beq.n	800bf3c <_dtoa_r+0x61c>
 800bf4a:	46bb      	mov	fp, r7
 800bf4c:	e04a      	b.n	800bfe4 <_dtoa_r+0x6c4>
 800bf4e:	4b06      	ldr	r3, [pc, #24]	; (800bf68 <_dtoa_r+0x648>)
 800bf50:	f7f4 fb5a 	bl	8000608 <__aeabi_dmul>
 800bf54:	4680      	mov	r8, r0
 800bf56:	4689      	mov	r9, r1
 800bf58:	e7bd      	b.n	800bed6 <_dtoa_r+0x5b6>
 800bf5a:	bf00      	nop
 800bf5c:	0800d738 	.word	0x0800d738
 800bf60:	0800d710 	.word	0x0800d710
 800bf64:	3ff00000 	.word	0x3ff00000
 800bf68:	40240000 	.word	0x40240000
 800bf6c:	401c0000 	.word	0x401c0000
 800bf70:	40140000 	.word	0x40140000
 800bf74:	3fe00000 	.word	0x3fe00000
 800bf78:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bf7c:	9d00      	ldr	r5, [sp, #0]
 800bf7e:	4642      	mov	r2, r8
 800bf80:	464b      	mov	r3, r9
 800bf82:	4630      	mov	r0, r6
 800bf84:	4639      	mov	r1, r7
 800bf86:	f7f4 fc69 	bl	800085c <__aeabi_ddiv>
 800bf8a:	f7f4 fded 	bl	8000b68 <__aeabi_d2iz>
 800bf8e:	9001      	str	r0, [sp, #4]
 800bf90:	f7f4 fad0 	bl	8000534 <__aeabi_i2d>
 800bf94:	4642      	mov	r2, r8
 800bf96:	464b      	mov	r3, r9
 800bf98:	f7f4 fb36 	bl	8000608 <__aeabi_dmul>
 800bf9c:	4602      	mov	r2, r0
 800bf9e:	460b      	mov	r3, r1
 800bfa0:	4630      	mov	r0, r6
 800bfa2:	4639      	mov	r1, r7
 800bfa4:	f7f4 f978 	bl	8000298 <__aeabi_dsub>
 800bfa8:	9e01      	ldr	r6, [sp, #4]
 800bfaa:	9f04      	ldr	r7, [sp, #16]
 800bfac:	3630      	adds	r6, #48	; 0x30
 800bfae:	f805 6b01 	strb.w	r6, [r5], #1
 800bfb2:	9e00      	ldr	r6, [sp, #0]
 800bfb4:	1bae      	subs	r6, r5, r6
 800bfb6:	42b7      	cmp	r7, r6
 800bfb8:	4602      	mov	r2, r0
 800bfba:	460b      	mov	r3, r1
 800bfbc:	d134      	bne.n	800c028 <_dtoa_r+0x708>
 800bfbe:	f7f4 f96d 	bl	800029c <__adddf3>
 800bfc2:	4642      	mov	r2, r8
 800bfc4:	464b      	mov	r3, r9
 800bfc6:	4606      	mov	r6, r0
 800bfc8:	460f      	mov	r7, r1
 800bfca:	f7f4 fdad 	bl	8000b28 <__aeabi_dcmpgt>
 800bfce:	b9c8      	cbnz	r0, 800c004 <_dtoa_r+0x6e4>
 800bfd0:	4642      	mov	r2, r8
 800bfd2:	464b      	mov	r3, r9
 800bfd4:	4630      	mov	r0, r6
 800bfd6:	4639      	mov	r1, r7
 800bfd8:	f7f4 fd7e 	bl	8000ad8 <__aeabi_dcmpeq>
 800bfdc:	b110      	cbz	r0, 800bfe4 <_dtoa_r+0x6c4>
 800bfde:	9b01      	ldr	r3, [sp, #4]
 800bfe0:	07db      	lsls	r3, r3, #31
 800bfe2:	d40f      	bmi.n	800c004 <_dtoa_r+0x6e4>
 800bfe4:	4651      	mov	r1, sl
 800bfe6:	4620      	mov	r0, r4
 800bfe8:	f000 fbcc 	bl	800c784 <_Bfree>
 800bfec:	2300      	movs	r3, #0
 800bfee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bff0:	702b      	strb	r3, [r5, #0]
 800bff2:	f10b 0301 	add.w	r3, fp, #1
 800bff6:	6013      	str	r3, [r2, #0]
 800bff8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	f43f ace2 	beq.w	800b9c4 <_dtoa_r+0xa4>
 800c000:	601d      	str	r5, [r3, #0]
 800c002:	e4df      	b.n	800b9c4 <_dtoa_r+0xa4>
 800c004:	465f      	mov	r7, fp
 800c006:	462b      	mov	r3, r5
 800c008:	461d      	mov	r5, r3
 800c00a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c00e:	2a39      	cmp	r2, #57	; 0x39
 800c010:	d106      	bne.n	800c020 <_dtoa_r+0x700>
 800c012:	9a00      	ldr	r2, [sp, #0]
 800c014:	429a      	cmp	r2, r3
 800c016:	d1f7      	bne.n	800c008 <_dtoa_r+0x6e8>
 800c018:	9900      	ldr	r1, [sp, #0]
 800c01a:	2230      	movs	r2, #48	; 0x30
 800c01c:	3701      	adds	r7, #1
 800c01e:	700a      	strb	r2, [r1, #0]
 800c020:	781a      	ldrb	r2, [r3, #0]
 800c022:	3201      	adds	r2, #1
 800c024:	701a      	strb	r2, [r3, #0]
 800c026:	e790      	b.n	800bf4a <_dtoa_r+0x62a>
 800c028:	4ba3      	ldr	r3, [pc, #652]	; (800c2b8 <_dtoa_r+0x998>)
 800c02a:	2200      	movs	r2, #0
 800c02c:	f7f4 faec 	bl	8000608 <__aeabi_dmul>
 800c030:	2200      	movs	r2, #0
 800c032:	2300      	movs	r3, #0
 800c034:	4606      	mov	r6, r0
 800c036:	460f      	mov	r7, r1
 800c038:	f7f4 fd4e 	bl	8000ad8 <__aeabi_dcmpeq>
 800c03c:	2800      	cmp	r0, #0
 800c03e:	d09e      	beq.n	800bf7e <_dtoa_r+0x65e>
 800c040:	e7d0      	b.n	800bfe4 <_dtoa_r+0x6c4>
 800c042:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c044:	2a00      	cmp	r2, #0
 800c046:	f000 80ca 	beq.w	800c1de <_dtoa_r+0x8be>
 800c04a:	9a07      	ldr	r2, [sp, #28]
 800c04c:	2a01      	cmp	r2, #1
 800c04e:	f300 80ad 	bgt.w	800c1ac <_dtoa_r+0x88c>
 800c052:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c054:	2a00      	cmp	r2, #0
 800c056:	f000 80a5 	beq.w	800c1a4 <_dtoa_r+0x884>
 800c05a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c05e:	9e08      	ldr	r6, [sp, #32]
 800c060:	9d05      	ldr	r5, [sp, #20]
 800c062:	9a05      	ldr	r2, [sp, #20]
 800c064:	441a      	add	r2, r3
 800c066:	9205      	str	r2, [sp, #20]
 800c068:	9a06      	ldr	r2, [sp, #24]
 800c06a:	2101      	movs	r1, #1
 800c06c:	441a      	add	r2, r3
 800c06e:	4620      	mov	r0, r4
 800c070:	9206      	str	r2, [sp, #24]
 800c072:	f000 fc3d 	bl	800c8f0 <__i2b>
 800c076:	4607      	mov	r7, r0
 800c078:	b165      	cbz	r5, 800c094 <_dtoa_r+0x774>
 800c07a:	9b06      	ldr	r3, [sp, #24]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	dd09      	ble.n	800c094 <_dtoa_r+0x774>
 800c080:	42ab      	cmp	r3, r5
 800c082:	9a05      	ldr	r2, [sp, #20]
 800c084:	bfa8      	it	ge
 800c086:	462b      	movge	r3, r5
 800c088:	1ad2      	subs	r2, r2, r3
 800c08a:	9205      	str	r2, [sp, #20]
 800c08c:	9a06      	ldr	r2, [sp, #24]
 800c08e:	1aed      	subs	r5, r5, r3
 800c090:	1ad3      	subs	r3, r2, r3
 800c092:	9306      	str	r3, [sp, #24]
 800c094:	9b08      	ldr	r3, [sp, #32]
 800c096:	b1f3      	cbz	r3, 800c0d6 <_dtoa_r+0x7b6>
 800c098:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	f000 80a3 	beq.w	800c1e6 <_dtoa_r+0x8c6>
 800c0a0:	2e00      	cmp	r6, #0
 800c0a2:	dd10      	ble.n	800c0c6 <_dtoa_r+0x7a6>
 800c0a4:	4639      	mov	r1, r7
 800c0a6:	4632      	mov	r2, r6
 800c0a8:	4620      	mov	r0, r4
 800c0aa:	f000 fce1 	bl	800ca70 <__pow5mult>
 800c0ae:	4652      	mov	r2, sl
 800c0b0:	4601      	mov	r1, r0
 800c0b2:	4607      	mov	r7, r0
 800c0b4:	4620      	mov	r0, r4
 800c0b6:	f000 fc31 	bl	800c91c <__multiply>
 800c0ba:	4651      	mov	r1, sl
 800c0bc:	4680      	mov	r8, r0
 800c0be:	4620      	mov	r0, r4
 800c0c0:	f000 fb60 	bl	800c784 <_Bfree>
 800c0c4:	46c2      	mov	sl, r8
 800c0c6:	9b08      	ldr	r3, [sp, #32]
 800c0c8:	1b9a      	subs	r2, r3, r6
 800c0ca:	d004      	beq.n	800c0d6 <_dtoa_r+0x7b6>
 800c0cc:	4651      	mov	r1, sl
 800c0ce:	4620      	mov	r0, r4
 800c0d0:	f000 fcce 	bl	800ca70 <__pow5mult>
 800c0d4:	4682      	mov	sl, r0
 800c0d6:	2101      	movs	r1, #1
 800c0d8:	4620      	mov	r0, r4
 800c0da:	f000 fc09 	bl	800c8f0 <__i2b>
 800c0de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	4606      	mov	r6, r0
 800c0e4:	f340 8081 	ble.w	800c1ea <_dtoa_r+0x8ca>
 800c0e8:	461a      	mov	r2, r3
 800c0ea:	4601      	mov	r1, r0
 800c0ec:	4620      	mov	r0, r4
 800c0ee:	f000 fcbf 	bl	800ca70 <__pow5mult>
 800c0f2:	9b07      	ldr	r3, [sp, #28]
 800c0f4:	2b01      	cmp	r3, #1
 800c0f6:	4606      	mov	r6, r0
 800c0f8:	dd7a      	ble.n	800c1f0 <_dtoa_r+0x8d0>
 800c0fa:	f04f 0800 	mov.w	r8, #0
 800c0fe:	6933      	ldr	r3, [r6, #16]
 800c100:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c104:	6918      	ldr	r0, [r3, #16]
 800c106:	f000 fba5 	bl	800c854 <__hi0bits>
 800c10a:	f1c0 0020 	rsb	r0, r0, #32
 800c10e:	9b06      	ldr	r3, [sp, #24]
 800c110:	4418      	add	r0, r3
 800c112:	f010 001f 	ands.w	r0, r0, #31
 800c116:	f000 8094 	beq.w	800c242 <_dtoa_r+0x922>
 800c11a:	f1c0 0320 	rsb	r3, r0, #32
 800c11e:	2b04      	cmp	r3, #4
 800c120:	f340 8085 	ble.w	800c22e <_dtoa_r+0x90e>
 800c124:	9b05      	ldr	r3, [sp, #20]
 800c126:	f1c0 001c 	rsb	r0, r0, #28
 800c12a:	4403      	add	r3, r0
 800c12c:	9305      	str	r3, [sp, #20]
 800c12e:	9b06      	ldr	r3, [sp, #24]
 800c130:	4403      	add	r3, r0
 800c132:	4405      	add	r5, r0
 800c134:	9306      	str	r3, [sp, #24]
 800c136:	9b05      	ldr	r3, [sp, #20]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	dd05      	ble.n	800c148 <_dtoa_r+0x828>
 800c13c:	4651      	mov	r1, sl
 800c13e:	461a      	mov	r2, r3
 800c140:	4620      	mov	r0, r4
 800c142:	f000 fcef 	bl	800cb24 <__lshift>
 800c146:	4682      	mov	sl, r0
 800c148:	9b06      	ldr	r3, [sp, #24]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	dd05      	ble.n	800c15a <_dtoa_r+0x83a>
 800c14e:	4631      	mov	r1, r6
 800c150:	461a      	mov	r2, r3
 800c152:	4620      	mov	r0, r4
 800c154:	f000 fce6 	bl	800cb24 <__lshift>
 800c158:	4606      	mov	r6, r0
 800c15a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d072      	beq.n	800c246 <_dtoa_r+0x926>
 800c160:	4631      	mov	r1, r6
 800c162:	4650      	mov	r0, sl
 800c164:	f000 fd4a 	bl	800cbfc <__mcmp>
 800c168:	2800      	cmp	r0, #0
 800c16a:	da6c      	bge.n	800c246 <_dtoa_r+0x926>
 800c16c:	2300      	movs	r3, #0
 800c16e:	4651      	mov	r1, sl
 800c170:	220a      	movs	r2, #10
 800c172:	4620      	mov	r0, r4
 800c174:	f000 fb28 	bl	800c7c8 <__multadd>
 800c178:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c17a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c17e:	4682      	mov	sl, r0
 800c180:	2b00      	cmp	r3, #0
 800c182:	f000 81b0 	beq.w	800c4e6 <_dtoa_r+0xbc6>
 800c186:	2300      	movs	r3, #0
 800c188:	4639      	mov	r1, r7
 800c18a:	220a      	movs	r2, #10
 800c18c:	4620      	mov	r0, r4
 800c18e:	f000 fb1b 	bl	800c7c8 <__multadd>
 800c192:	9b01      	ldr	r3, [sp, #4]
 800c194:	2b00      	cmp	r3, #0
 800c196:	4607      	mov	r7, r0
 800c198:	f300 8096 	bgt.w	800c2c8 <_dtoa_r+0x9a8>
 800c19c:	9b07      	ldr	r3, [sp, #28]
 800c19e:	2b02      	cmp	r3, #2
 800c1a0:	dc59      	bgt.n	800c256 <_dtoa_r+0x936>
 800c1a2:	e091      	b.n	800c2c8 <_dtoa_r+0x9a8>
 800c1a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c1a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c1aa:	e758      	b.n	800c05e <_dtoa_r+0x73e>
 800c1ac:	9b04      	ldr	r3, [sp, #16]
 800c1ae:	1e5e      	subs	r6, r3, #1
 800c1b0:	9b08      	ldr	r3, [sp, #32]
 800c1b2:	42b3      	cmp	r3, r6
 800c1b4:	bfbf      	itttt	lt
 800c1b6:	9b08      	ldrlt	r3, [sp, #32]
 800c1b8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800c1ba:	9608      	strlt	r6, [sp, #32]
 800c1bc:	1af3      	sublt	r3, r6, r3
 800c1be:	bfb4      	ite	lt
 800c1c0:	18d2      	addlt	r2, r2, r3
 800c1c2:	1b9e      	subge	r6, r3, r6
 800c1c4:	9b04      	ldr	r3, [sp, #16]
 800c1c6:	bfbc      	itt	lt
 800c1c8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800c1ca:	2600      	movlt	r6, #0
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	bfb7      	itett	lt
 800c1d0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800c1d4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800c1d8:	1a9d      	sublt	r5, r3, r2
 800c1da:	2300      	movlt	r3, #0
 800c1dc:	e741      	b.n	800c062 <_dtoa_r+0x742>
 800c1de:	9e08      	ldr	r6, [sp, #32]
 800c1e0:	9d05      	ldr	r5, [sp, #20]
 800c1e2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c1e4:	e748      	b.n	800c078 <_dtoa_r+0x758>
 800c1e6:	9a08      	ldr	r2, [sp, #32]
 800c1e8:	e770      	b.n	800c0cc <_dtoa_r+0x7ac>
 800c1ea:	9b07      	ldr	r3, [sp, #28]
 800c1ec:	2b01      	cmp	r3, #1
 800c1ee:	dc19      	bgt.n	800c224 <_dtoa_r+0x904>
 800c1f0:	9b02      	ldr	r3, [sp, #8]
 800c1f2:	b9bb      	cbnz	r3, 800c224 <_dtoa_r+0x904>
 800c1f4:	9b03      	ldr	r3, [sp, #12]
 800c1f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c1fa:	b99b      	cbnz	r3, 800c224 <_dtoa_r+0x904>
 800c1fc:	9b03      	ldr	r3, [sp, #12]
 800c1fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c202:	0d1b      	lsrs	r3, r3, #20
 800c204:	051b      	lsls	r3, r3, #20
 800c206:	b183      	cbz	r3, 800c22a <_dtoa_r+0x90a>
 800c208:	9b05      	ldr	r3, [sp, #20]
 800c20a:	3301      	adds	r3, #1
 800c20c:	9305      	str	r3, [sp, #20]
 800c20e:	9b06      	ldr	r3, [sp, #24]
 800c210:	3301      	adds	r3, #1
 800c212:	9306      	str	r3, [sp, #24]
 800c214:	f04f 0801 	mov.w	r8, #1
 800c218:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	f47f af6f 	bne.w	800c0fe <_dtoa_r+0x7de>
 800c220:	2001      	movs	r0, #1
 800c222:	e774      	b.n	800c10e <_dtoa_r+0x7ee>
 800c224:	f04f 0800 	mov.w	r8, #0
 800c228:	e7f6      	b.n	800c218 <_dtoa_r+0x8f8>
 800c22a:	4698      	mov	r8, r3
 800c22c:	e7f4      	b.n	800c218 <_dtoa_r+0x8f8>
 800c22e:	d082      	beq.n	800c136 <_dtoa_r+0x816>
 800c230:	9a05      	ldr	r2, [sp, #20]
 800c232:	331c      	adds	r3, #28
 800c234:	441a      	add	r2, r3
 800c236:	9205      	str	r2, [sp, #20]
 800c238:	9a06      	ldr	r2, [sp, #24]
 800c23a:	441a      	add	r2, r3
 800c23c:	441d      	add	r5, r3
 800c23e:	9206      	str	r2, [sp, #24]
 800c240:	e779      	b.n	800c136 <_dtoa_r+0x816>
 800c242:	4603      	mov	r3, r0
 800c244:	e7f4      	b.n	800c230 <_dtoa_r+0x910>
 800c246:	9b04      	ldr	r3, [sp, #16]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	dc37      	bgt.n	800c2bc <_dtoa_r+0x99c>
 800c24c:	9b07      	ldr	r3, [sp, #28]
 800c24e:	2b02      	cmp	r3, #2
 800c250:	dd34      	ble.n	800c2bc <_dtoa_r+0x99c>
 800c252:	9b04      	ldr	r3, [sp, #16]
 800c254:	9301      	str	r3, [sp, #4]
 800c256:	9b01      	ldr	r3, [sp, #4]
 800c258:	b963      	cbnz	r3, 800c274 <_dtoa_r+0x954>
 800c25a:	4631      	mov	r1, r6
 800c25c:	2205      	movs	r2, #5
 800c25e:	4620      	mov	r0, r4
 800c260:	f000 fab2 	bl	800c7c8 <__multadd>
 800c264:	4601      	mov	r1, r0
 800c266:	4606      	mov	r6, r0
 800c268:	4650      	mov	r0, sl
 800c26a:	f000 fcc7 	bl	800cbfc <__mcmp>
 800c26e:	2800      	cmp	r0, #0
 800c270:	f73f adbb 	bgt.w	800bdea <_dtoa_r+0x4ca>
 800c274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c276:	9d00      	ldr	r5, [sp, #0]
 800c278:	ea6f 0b03 	mvn.w	fp, r3
 800c27c:	f04f 0800 	mov.w	r8, #0
 800c280:	4631      	mov	r1, r6
 800c282:	4620      	mov	r0, r4
 800c284:	f000 fa7e 	bl	800c784 <_Bfree>
 800c288:	2f00      	cmp	r7, #0
 800c28a:	f43f aeab 	beq.w	800bfe4 <_dtoa_r+0x6c4>
 800c28e:	f1b8 0f00 	cmp.w	r8, #0
 800c292:	d005      	beq.n	800c2a0 <_dtoa_r+0x980>
 800c294:	45b8      	cmp	r8, r7
 800c296:	d003      	beq.n	800c2a0 <_dtoa_r+0x980>
 800c298:	4641      	mov	r1, r8
 800c29a:	4620      	mov	r0, r4
 800c29c:	f000 fa72 	bl	800c784 <_Bfree>
 800c2a0:	4639      	mov	r1, r7
 800c2a2:	4620      	mov	r0, r4
 800c2a4:	f000 fa6e 	bl	800c784 <_Bfree>
 800c2a8:	e69c      	b.n	800bfe4 <_dtoa_r+0x6c4>
 800c2aa:	2600      	movs	r6, #0
 800c2ac:	4637      	mov	r7, r6
 800c2ae:	e7e1      	b.n	800c274 <_dtoa_r+0x954>
 800c2b0:	46bb      	mov	fp, r7
 800c2b2:	4637      	mov	r7, r6
 800c2b4:	e599      	b.n	800bdea <_dtoa_r+0x4ca>
 800c2b6:	bf00      	nop
 800c2b8:	40240000 	.word	0x40240000
 800c2bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	f000 80c8 	beq.w	800c454 <_dtoa_r+0xb34>
 800c2c4:	9b04      	ldr	r3, [sp, #16]
 800c2c6:	9301      	str	r3, [sp, #4]
 800c2c8:	2d00      	cmp	r5, #0
 800c2ca:	dd05      	ble.n	800c2d8 <_dtoa_r+0x9b8>
 800c2cc:	4639      	mov	r1, r7
 800c2ce:	462a      	mov	r2, r5
 800c2d0:	4620      	mov	r0, r4
 800c2d2:	f000 fc27 	bl	800cb24 <__lshift>
 800c2d6:	4607      	mov	r7, r0
 800c2d8:	f1b8 0f00 	cmp.w	r8, #0
 800c2dc:	d05b      	beq.n	800c396 <_dtoa_r+0xa76>
 800c2de:	6879      	ldr	r1, [r7, #4]
 800c2e0:	4620      	mov	r0, r4
 800c2e2:	f000 fa0f 	bl	800c704 <_Balloc>
 800c2e6:	4605      	mov	r5, r0
 800c2e8:	b928      	cbnz	r0, 800c2f6 <_dtoa_r+0x9d6>
 800c2ea:	4b83      	ldr	r3, [pc, #524]	; (800c4f8 <_dtoa_r+0xbd8>)
 800c2ec:	4602      	mov	r2, r0
 800c2ee:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c2f2:	f7ff bb2e 	b.w	800b952 <_dtoa_r+0x32>
 800c2f6:	693a      	ldr	r2, [r7, #16]
 800c2f8:	3202      	adds	r2, #2
 800c2fa:	0092      	lsls	r2, r2, #2
 800c2fc:	f107 010c 	add.w	r1, r7, #12
 800c300:	300c      	adds	r0, #12
 800c302:	f7ff fa76 	bl	800b7f2 <memcpy>
 800c306:	2201      	movs	r2, #1
 800c308:	4629      	mov	r1, r5
 800c30a:	4620      	mov	r0, r4
 800c30c:	f000 fc0a 	bl	800cb24 <__lshift>
 800c310:	9b00      	ldr	r3, [sp, #0]
 800c312:	3301      	adds	r3, #1
 800c314:	9304      	str	r3, [sp, #16]
 800c316:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c31a:	4413      	add	r3, r2
 800c31c:	9308      	str	r3, [sp, #32]
 800c31e:	9b02      	ldr	r3, [sp, #8]
 800c320:	f003 0301 	and.w	r3, r3, #1
 800c324:	46b8      	mov	r8, r7
 800c326:	9306      	str	r3, [sp, #24]
 800c328:	4607      	mov	r7, r0
 800c32a:	9b04      	ldr	r3, [sp, #16]
 800c32c:	4631      	mov	r1, r6
 800c32e:	3b01      	subs	r3, #1
 800c330:	4650      	mov	r0, sl
 800c332:	9301      	str	r3, [sp, #4]
 800c334:	f7ff fa6b 	bl	800b80e <quorem>
 800c338:	4641      	mov	r1, r8
 800c33a:	9002      	str	r0, [sp, #8]
 800c33c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c340:	4650      	mov	r0, sl
 800c342:	f000 fc5b 	bl	800cbfc <__mcmp>
 800c346:	463a      	mov	r2, r7
 800c348:	9005      	str	r0, [sp, #20]
 800c34a:	4631      	mov	r1, r6
 800c34c:	4620      	mov	r0, r4
 800c34e:	f000 fc71 	bl	800cc34 <__mdiff>
 800c352:	68c2      	ldr	r2, [r0, #12]
 800c354:	4605      	mov	r5, r0
 800c356:	bb02      	cbnz	r2, 800c39a <_dtoa_r+0xa7a>
 800c358:	4601      	mov	r1, r0
 800c35a:	4650      	mov	r0, sl
 800c35c:	f000 fc4e 	bl	800cbfc <__mcmp>
 800c360:	4602      	mov	r2, r0
 800c362:	4629      	mov	r1, r5
 800c364:	4620      	mov	r0, r4
 800c366:	9209      	str	r2, [sp, #36]	; 0x24
 800c368:	f000 fa0c 	bl	800c784 <_Bfree>
 800c36c:	9b07      	ldr	r3, [sp, #28]
 800c36e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c370:	9d04      	ldr	r5, [sp, #16]
 800c372:	ea43 0102 	orr.w	r1, r3, r2
 800c376:	9b06      	ldr	r3, [sp, #24]
 800c378:	4319      	orrs	r1, r3
 800c37a:	d110      	bne.n	800c39e <_dtoa_r+0xa7e>
 800c37c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c380:	d029      	beq.n	800c3d6 <_dtoa_r+0xab6>
 800c382:	9b05      	ldr	r3, [sp, #20]
 800c384:	2b00      	cmp	r3, #0
 800c386:	dd02      	ble.n	800c38e <_dtoa_r+0xa6e>
 800c388:	9b02      	ldr	r3, [sp, #8]
 800c38a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c38e:	9b01      	ldr	r3, [sp, #4]
 800c390:	f883 9000 	strb.w	r9, [r3]
 800c394:	e774      	b.n	800c280 <_dtoa_r+0x960>
 800c396:	4638      	mov	r0, r7
 800c398:	e7ba      	b.n	800c310 <_dtoa_r+0x9f0>
 800c39a:	2201      	movs	r2, #1
 800c39c:	e7e1      	b.n	800c362 <_dtoa_r+0xa42>
 800c39e:	9b05      	ldr	r3, [sp, #20]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	db04      	blt.n	800c3ae <_dtoa_r+0xa8e>
 800c3a4:	9907      	ldr	r1, [sp, #28]
 800c3a6:	430b      	orrs	r3, r1
 800c3a8:	9906      	ldr	r1, [sp, #24]
 800c3aa:	430b      	orrs	r3, r1
 800c3ac:	d120      	bne.n	800c3f0 <_dtoa_r+0xad0>
 800c3ae:	2a00      	cmp	r2, #0
 800c3b0:	dded      	ble.n	800c38e <_dtoa_r+0xa6e>
 800c3b2:	4651      	mov	r1, sl
 800c3b4:	2201      	movs	r2, #1
 800c3b6:	4620      	mov	r0, r4
 800c3b8:	f000 fbb4 	bl	800cb24 <__lshift>
 800c3bc:	4631      	mov	r1, r6
 800c3be:	4682      	mov	sl, r0
 800c3c0:	f000 fc1c 	bl	800cbfc <__mcmp>
 800c3c4:	2800      	cmp	r0, #0
 800c3c6:	dc03      	bgt.n	800c3d0 <_dtoa_r+0xab0>
 800c3c8:	d1e1      	bne.n	800c38e <_dtoa_r+0xa6e>
 800c3ca:	f019 0f01 	tst.w	r9, #1
 800c3ce:	d0de      	beq.n	800c38e <_dtoa_r+0xa6e>
 800c3d0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c3d4:	d1d8      	bne.n	800c388 <_dtoa_r+0xa68>
 800c3d6:	9a01      	ldr	r2, [sp, #4]
 800c3d8:	2339      	movs	r3, #57	; 0x39
 800c3da:	7013      	strb	r3, [r2, #0]
 800c3dc:	462b      	mov	r3, r5
 800c3de:	461d      	mov	r5, r3
 800c3e0:	3b01      	subs	r3, #1
 800c3e2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c3e6:	2a39      	cmp	r2, #57	; 0x39
 800c3e8:	d06c      	beq.n	800c4c4 <_dtoa_r+0xba4>
 800c3ea:	3201      	adds	r2, #1
 800c3ec:	701a      	strb	r2, [r3, #0]
 800c3ee:	e747      	b.n	800c280 <_dtoa_r+0x960>
 800c3f0:	2a00      	cmp	r2, #0
 800c3f2:	dd07      	ble.n	800c404 <_dtoa_r+0xae4>
 800c3f4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c3f8:	d0ed      	beq.n	800c3d6 <_dtoa_r+0xab6>
 800c3fa:	9a01      	ldr	r2, [sp, #4]
 800c3fc:	f109 0301 	add.w	r3, r9, #1
 800c400:	7013      	strb	r3, [r2, #0]
 800c402:	e73d      	b.n	800c280 <_dtoa_r+0x960>
 800c404:	9b04      	ldr	r3, [sp, #16]
 800c406:	9a08      	ldr	r2, [sp, #32]
 800c408:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c40c:	4293      	cmp	r3, r2
 800c40e:	d043      	beq.n	800c498 <_dtoa_r+0xb78>
 800c410:	4651      	mov	r1, sl
 800c412:	2300      	movs	r3, #0
 800c414:	220a      	movs	r2, #10
 800c416:	4620      	mov	r0, r4
 800c418:	f000 f9d6 	bl	800c7c8 <__multadd>
 800c41c:	45b8      	cmp	r8, r7
 800c41e:	4682      	mov	sl, r0
 800c420:	f04f 0300 	mov.w	r3, #0
 800c424:	f04f 020a 	mov.w	r2, #10
 800c428:	4641      	mov	r1, r8
 800c42a:	4620      	mov	r0, r4
 800c42c:	d107      	bne.n	800c43e <_dtoa_r+0xb1e>
 800c42e:	f000 f9cb 	bl	800c7c8 <__multadd>
 800c432:	4680      	mov	r8, r0
 800c434:	4607      	mov	r7, r0
 800c436:	9b04      	ldr	r3, [sp, #16]
 800c438:	3301      	adds	r3, #1
 800c43a:	9304      	str	r3, [sp, #16]
 800c43c:	e775      	b.n	800c32a <_dtoa_r+0xa0a>
 800c43e:	f000 f9c3 	bl	800c7c8 <__multadd>
 800c442:	4639      	mov	r1, r7
 800c444:	4680      	mov	r8, r0
 800c446:	2300      	movs	r3, #0
 800c448:	220a      	movs	r2, #10
 800c44a:	4620      	mov	r0, r4
 800c44c:	f000 f9bc 	bl	800c7c8 <__multadd>
 800c450:	4607      	mov	r7, r0
 800c452:	e7f0      	b.n	800c436 <_dtoa_r+0xb16>
 800c454:	9b04      	ldr	r3, [sp, #16]
 800c456:	9301      	str	r3, [sp, #4]
 800c458:	9d00      	ldr	r5, [sp, #0]
 800c45a:	4631      	mov	r1, r6
 800c45c:	4650      	mov	r0, sl
 800c45e:	f7ff f9d6 	bl	800b80e <quorem>
 800c462:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c466:	9b00      	ldr	r3, [sp, #0]
 800c468:	f805 9b01 	strb.w	r9, [r5], #1
 800c46c:	1aea      	subs	r2, r5, r3
 800c46e:	9b01      	ldr	r3, [sp, #4]
 800c470:	4293      	cmp	r3, r2
 800c472:	dd07      	ble.n	800c484 <_dtoa_r+0xb64>
 800c474:	4651      	mov	r1, sl
 800c476:	2300      	movs	r3, #0
 800c478:	220a      	movs	r2, #10
 800c47a:	4620      	mov	r0, r4
 800c47c:	f000 f9a4 	bl	800c7c8 <__multadd>
 800c480:	4682      	mov	sl, r0
 800c482:	e7ea      	b.n	800c45a <_dtoa_r+0xb3a>
 800c484:	9b01      	ldr	r3, [sp, #4]
 800c486:	2b00      	cmp	r3, #0
 800c488:	bfc8      	it	gt
 800c48a:	461d      	movgt	r5, r3
 800c48c:	9b00      	ldr	r3, [sp, #0]
 800c48e:	bfd8      	it	le
 800c490:	2501      	movle	r5, #1
 800c492:	441d      	add	r5, r3
 800c494:	f04f 0800 	mov.w	r8, #0
 800c498:	4651      	mov	r1, sl
 800c49a:	2201      	movs	r2, #1
 800c49c:	4620      	mov	r0, r4
 800c49e:	f000 fb41 	bl	800cb24 <__lshift>
 800c4a2:	4631      	mov	r1, r6
 800c4a4:	4682      	mov	sl, r0
 800c4a6:	f000 fba9 	bl	800cbfc <__mcmp>
 800c4aa:	2800      	cmp	r0, #0
 800c4ac:	dc96      	bgt.n	800c3dc <_dtoa_r+0xabc>
 800c4ae:	d102      	bne.n	800c4b6 <_dtoa_r+0xb96>
 800c4b0:	f019 0f01 	tst.w	r9, #1
 800c4b4:	d192      	bne.n	800c3dc <_dtoa_r+0xabc>
 800c4b6:	462b      	mov	r3, r5
 800c4b8:	461d      	mov	r5, r3
 800c4ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c4be:	2a30      	cmp	r2, #48	; 0x30
 800c4c0:	d0fa      	beq.n	800c4b8 <_dtoa_r+0xb98>
 800c4c2:	e6dd      	b.n	800c280 <_dtoa_r+0x960>
 800c4c4:	9a00      	ldr	r2, [sp, #0]
 800c4c6:	429a      	cmp	r2, r3
 800c4c8:	d189      	bne.n	800c3de <_dtoa_r+0xabe>
 800c4ca:	f10b 0b01 	add.w	fp, fp, #1
 800c4ce:	2331      	movs	r3, #49	; 0x31
 800c4d0:	e796      	b.n	800c400 <_dtoa_r+0xae0>
 800c4d2:	4b0a      	ldr	r3, [pc, #40]	; (800c4fc <_dtoa_r+0xbdc>)
 800c4d4:	f7ff ba99 	b.w	800ba0a <_dtoa_r+0xea>
 800c4d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	f47f aa6d 	bne.w	800b9ba <_dtoa_r+0x9a>
 800c4e0:	4b07      	ldr	r3, [pc, #28]	; (800c500 <_dtoa_r+0xbe0>)
 800c4e2:	f7ff ba92 	b.w	800ba0a <_dtoa_r+0xea>
 800c4e6:	9b01      	ldr	r3, [sp, #4]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	dcb5      	bgt.n	800c458 <_dtoa_r+0xb38>
 800c4ec:	9b07      	ldr	r3, [sp, #28]
 800c4ee:	2b02      	cmp	r3, #2
 800c4f0:	f73f aeb1 	bgt.w	800c256 <_dtoa_r+0x936>
 800c4f4:	e7b0      	b.n	800c458 <_dtoa_r+0xb38>
 800c4f6:	bf00      	nop
 800c4f8:	0800d6a0 	.word	0x0800d6a0
 800c4fc:	0800d600 	.word	0x0800d600
 800c500:	0800d624 	.word	0x0800d624

0800c504 <_free_r>:
 800c504:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c506:	2900      	cmp	r1, #0
 800c508:	d044      	beq.n	800c594 <_free_r+0x90>
 800c50a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c50e:	9001      	str	r0, [sp, #4]
 800c510:	2b00      	cmp	r3, #0
 800c512:	f1a1 0404 	sub.w	r4, r1, #4
 800c516:	bfb8      	it	lt
 800c518:	18e4      	addlt	r4, r4, r3
 800c51a:	f000 f8e7 	bl	800c6ec <__malloc_lock>
 800c51e:	4a1e      	ldr	r2, [pc, #120]	; (800c598 <_free_r+0x94>)
 800c520:	9801      	ldr	r0, [sp, #4]
 800c522:	6813      	ldr	r3, [r2, #0]
 800c524:	b933      	cbnz	r3, 800c534 <_free_r+0x30>
 800c526:	6063      	str	r3, [r4, #4]
 800c528:	6014      	str	r4, [r2, #0]
 800c52a:	b003      	add	sp, #12
 800c52c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c530:	f000 b8e2 	b.w	800c6f8 <__malloc_unlock>
 800c534:	42a3      	cmp	r3, r4
 800c536:	d908      	bls.n	800c54a <_free_r+0x46>
 800c538:	6825      	ldr	r5, [r4, #0]
 800c53a:	1961      	adds	r1, r4, r5
 800c53c:	428b      	cmp	r3, r1
 800c53e:	bf01      	itttt	eq
 800c540:	6819      	ldreq	r1, [r3, #0]
 800c542:	685b      	ldreq	r3, [r3, #4]
 800c544:	1949      	addeq	r1, r1, r5
 800c546:	6021      	streq	r1, [r4, #0]
 800c548:	e7ed      	b.n	800c526 <_free_r+0x22>
 800c54a:	461a      	mov	r2, r3
 800c54c:	685b      	ldr	r3, [r3, #4]
 800c54e:	b10b      	cbz	r3, 800c554 <_free_r+0x50>
 800c550:	42a3      	cmp	r3, r4
 800c552:	d9fa      	bls.n	800c54a <_free_r+0x46>
 800c554:	6811      	ldr	r1, [r2, #0]
 800c556:	1855      	adds	r5, r2, r1
 800c558:	42a5      	cmp	r5, r4
 800c55a:	d10b      	bne.n	800c574 <_free_r+0x70>
 800c55c:	6824      	ldr	r4, [r4, #0]
 800c55e:	4421      	add	r1, r4
 800c560:	1854      	adds	r4, r2, r1
 800c562:	42a3      	cmp	r3, r4
 800c564:	6011      	str	r1, [r2, #0]
 800c566:	d1e0      	bne.n	800c52a <_free_r+0x26>
 800c568:	681c      	ldr	r4, [r3, #0]
 800c56a:	685b      	ldr	r3, [r3, #4]
 800c56c:	6053      	str	r3, [r2, #4]
 800c56e:	440c      	add	r4, r1
 800c570:	6014      	str	r4, [r2, #0]
 800c572:	e7da      	b.n	800c52a <_free_r+0x26>
 800c574:	d902      	bls.n	800c57c <_free_r+0x78>
 800c576:	230c      	movs	r3, #12
 800c578:	6003      	str	r3, [r0, #0]
 800c57a:	e7d6      	b.n	800c52a <_free_r+0x26>
 800c57c:	6825      	ldr	r5, [r4, #0]
 800c57e:	1961      	adds	r1, r4, r5
 800c580:	428b      	cmp	r3, r1
 800c582:	bf04      	itt	eq
 800c584:	6819      	ldreq	r1, [r3, #0]
 800c586:	685b      	ldreq	r3, [r3, #4]
 800c588:	6063      	str	r3, [r4, #4]
 800c58a:	bf04      	itt	eq
 800c58c:	1949      	addeq	r1, r1, r5
 800c58e:	6021      	streq	r1, [r4, #0]
 800c590:	6054      	str	r4, [r2, #4]
 800c592:	e7ca      	b.n	800c52a <_free_r+0x26>
 800c594:	b003      	add	sp, #12
 800c596:	bd30      	pop	{r4, r5, pc}
 800c598:	200051e4 	.word	0x200051e4

0800c59c <malloc>:
 800c59c:	4b02      	ldr	r3, [pc, #8]	; (800c5a8 <malloc+0xc>)
 800c59e:	4601      	mov	r1, r0
 800c5a0:	6818      	ldr	r0, [r3, #0]
 800c5a2:	f000 b823 	b.w	800c5ec <_malloc_r>
 800c5a6:	bf00      	nop
 800c5a8:	20000068 	.word	0x20000068

0800c5ac <sbrk_aligned>:
 800c5ac:	b570      	push	{r4, r5, r6, lr}
 800c5ae:	4e0e      	ldr	r6, [pc, #56]	; (800c5e8 <sbrk_aligned+0x3c>)
 800c5b0:	460c      	mov	r4, r1
 800c5b2:	6831      	ldr	r1, [r6, #0]
 800c5b4:	4605      	mov	r5, r0
 800c5b6:	b911      	cbnz	r1, 800c5be <sbrk_aligned+0x12>
 800c5b8:	f000 fe96 	bl	800d2e8 <_sbrk_r>
 800c5bc:	6030      	str	r0, [r6, #0]
 800c5be:	4621      	mov	r1, r4
 800c5c0:	4628      	mov	r0, r5
 800c5c2:	f000 fe91 	bl	800d2e8 <_sbrk_r>
 800c5c6:	1c43      	adds	r3, r0, #1
 800c5c8:	d00a      	beq.n	800c5e0 <sbrk_aligned+0x34>
 800c5ca:	1cc4      	adds	r4, r0, #3
 800c5cc:	f024 0403 	bic.w	r4, r4, #3
 800c5d0:	42a0      	cmp	r0, r4
 800c5d2:	d007      	beq.n	800c5e4 <sbrk_aligned+0x38>
 800c5d4:	1a21      	subs	r1, r4, r0
 800c5d6:	4628      	mov	r0, r5
 800c5d8:	f000 fe86 	bl	800d2e8 <_sbrk_r>
 800c5dc:	3001      	adds	r0, #1
 800c5de:	d101      	bne.n	800c5e4 <sbrk_aligned+0x38>
 800c5e0:	f04f 34ff 	mov.w	r4, #4294967295
 800c5e4:	4620      	mov	r0, r4
 800c5e6:	bd70      	pop	{r4, r5, r6, pc}
 800c5e8:	200051e8 	.word	0x200051e8

0800c5ec <_malloc_r>:
 800c5ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5f0:	1ccd      	adds	r5, r1, #3
 800c5f2:	f025 0503 	bic.w	r5, r5, #3
 800c5f6:	3508      	adds	r5, #8
 800c5f8:	2d0c      	cmp	r5, #12
 800c5fa:	bf38      	it	cc
 800c5fc:	250c      	movcc	r5, #12
 800c5fe:	2d00      	cmp	r5, #0
 800c600:	4607      	mov	r7, r0
 800c602:	db01      	blt.n	800c608 <_malloc_r+0x1c>
 800c604:	42a9      	cmp	r1, r5
 800c606:	d905      	bls.n	800c614 <_malloc_r+0x28>
 800c608:	230c      	movs	r3, #12
 800c60a:	603b      	str	r3, [r7, #0]
 800c60c:	2600      	movs	r6, #0
 800c60e:	4630      	mov	r0, r6
 800c610:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c614:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c6e8 <_malloc_r+0xfc>
 800c618:	f000 f868 	bl	800c6ec <__malloc_lock>
 800c61c:	f8d8 3000 	ldr.w	r3, [r8]
 800c620:	461c      	mov	r4, r3
 800c622:	bb5c      	cbnz	r4, 800c67c <_malloc_r+0x90>
 800c624:	4629      	mov	r1, r5
 800c626:	4638      	mov	r0, r7
 800c628:	f7ff ffc0 	bl	800c5ac <sbrk_aligned>
 800c62c:	1c43      	adds	r3, r0, #1
 800c62e:	4604      	mov	r4, r0
 800c630:	d155      	bne.n	800c6de <_malloc_r+0xf2>
 800c632:	f8d8 4000 	ldr.w	r4, [r8]
 800c636:	4626      	mov	r6, r4
 800c638:	2e00      	cmp	r6, #0
 800c63a:	d145      	bne.n	800c6c8 <_malloc_r+0xdc>
 800c63c:	2c00      	cmp	r4, #0
 800c63e:	d048      	beq.n	800c6d2 <_malloc_r+0xe6>
 800c640:	6823      	ldr	r3, [r4, #0]
 800c642:	4631      	mov	r1, r6
 800c644:	4638      	mov	r0, r7
 800c646:	eb04 0903 	add.w	r9, r4, r3
 800c64a:	f000 fe4d 	bl	800d2e8 <_sbrk_r>
 800c64e:	4581      	cmp	r9, r0
 800c650:	d13f      	bne.n	800c6d2 <_malloc_r+0xe6>
 800c652:	6821      	ldr	r1, [r4, #0]
 800c654:	1a6d      	subs	r5, r5, r1
 800c656:	4629      	mov	r1, r5
 800c658:	4638      	mov	r0, r7
 800c65a:	f7ff ffa7 	bl	800c5ac <sbrk_aligned>
 800c65e:	3001      	adds	r0, #1
 800c660:	d037      	beq.n	800c6d2 <_malloc_r+0xe6>
 800c662:	6823      	ldr	r3, [r4, #0]
 800c664:	442b      	add	r3, r5
 800c666:	6023      	str	r3, [r4, #0]
 800c668:	f8d8 3000 	ldr.w	r3, [r8]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d038      	beq.n	800c6e2 <_malloc_r+0xf6>
 800c670:	685a      	ldr	r2, [r3, #4]
 800c672:	42a2      	cmp	r2, r4
 800c674:	d12b      	bne.n	800c6ce <_malloc_r+0xe2>
 800c676:	2200      	movs	r2, #0
 800c678:	605a      	str	r2, [r3, #4]
 800c67a:	e00f      	b.n	800c69c <_malloc_r+0xb0>
 800c67c:	6822      	ldr	r2, [r4, #0]
 800c67e:	1b52      	subs	r2, r2, r5
 800c680:	d41f      	bmi.n	800c6c2 <_malloc_r+0xd6>
 800c682:	2a0b      	cmp	r2, #11
 800c684:	d917      	bls.n	800c6b6 <_malloc_r+0xca>
 800c686:	1961      	adds	r1, r4, r5
 800c688:	42a3      	cmp	r3, r4
 800c68a:	6025      	str	r5, [r4, #0]
 800c68c:	bf18      	it	ne
 800c68e:	6059      	strne	r1, [r3, #4]
 800c690:	6863      	ldr	r3, [r4, #4]
 800c692:	bf08      	it	eq
 800c694:	f8c8 1000 	streq.w	r1, [r8]
 800c698:	5162      	str	r2, [r4, r5]
 800c69a:	604b      	str	r3, [r1, #4]
 800c69c:	4638      	mov	r0, r7
 800c69e:	f104 060b 	add.w	r6, r4, #11
 800c6a2:	f000 f829 	bl	800c6f8 <__malloc_unlock>
 800c6a6:	f026 0607 	bic.w	r6, r6, #7
 800c6aa:	1d23      	adds	r3, r4, #4
 800c6ac:	1af2      	subs	r2, r6, r3
 800c6ae:	d0ae      	beq.n	800c60e <_malloc_r+0x22>
 800c6b0:	1b9b      	subs	r3, r3, r6
 800c6b2:	50a3      	str	r3, [r4, r2]
 800c6b4:	e7ab      	b.n	800c60e <_malloc_r+0x22>
 800c6b6:	42a3      	cmp	r3, r4
 800c6b8:	6862      	ldr	r2, [r4, #4]
 800c6ba:	d1dd      	bne.n	800c678 <_malloc_r+0x8c>
 800c6bc:	f8c8 2000 	str.w	r2, [r8]
 800c6c0:	e7ec      	b.n	800c69c <_malloc_r+0xb0>
 800c6c2:	4623      	mov	r3, r4
 800c6c4:	6864      	ldr	r4, [r4, #4]
 800c6c6:	e7ac      	b.n	800c622 <_malloc_r+0x36>
 800c6c8:	4634      	mov	r4, r6
 800c6ca:	6876      	ldr	r6, [r6, #4]
 800c6cc:	e7b4      	b.n	800c638 <_malloc_r+0x4c>
 800c6ce:	4613      	mov	r3, r2
 800c6d0:	e7cc      	b.n	800c66c <_malloc_r+0x80>
 800c6d2:	230c      	movs	r3, #12
 800c6d4:	603b      	str	r3, [r7, #0]
 800c6d6:	4638      	mov	r0, r7
 800c6d8:	f000 f80e 	bl	800c6f8 <__malloc_unlock>
 800c6dc:	e797      	b.n	800c60e <_malloc_r+0x22>
 800c6de:	6025      	str	r5, [r4, #0]
 800c6e0:	e7dc      	b.n	800c69c <_malloc_r+0xb0>
 800c6e2:	605b      	str	r3, [r3, #4]
 800c6e4:	deff      	udf	#255	; 0xff
 800c6e6:	bf00      	nop
 800c6e8:	200051e4 	.word	0x200051e4

0800c6ec <__malloc_lock>:
 800c6ec:	4801      	ldr	r0, [pc, #4]	; (800c6f4 <__malloc_lock+0x8>)
 800c6ee:	f7ff b87e 	b.w	800b7ee <__retarget_lock_acquire_recursive>
 800c6f2:	bf00      	nop
 800c6f4:	200051e0 	.word	0x200051e0

0800c6f8 <__malloc_unlock>:
 800c6f8:	4801      	ldr	r0, [pc, #4]	; (800c700 <__malloc_unlock+0x8>)
 800c6fa:	f7ff b879 	b.w	800b7f0 <__retarget_lock_release_recursive>
 800c6fe:	bf00      	nop
 800c700:	200051e0 	.word	0x200051e0

0800c704 <_Balloc>:
 800c704:	b570      	push	{r4, r5, r6, lr}
 800c706:	69c6      	ldr	r6, [r0, #28]
 800c708:	4604      	mov	r4, r0
 800c70a:	460d      	mov	r5, r1
 800c70c:	b976      	cbnz	r6, 800c72c <_Balloc+0x28>
 800c70e:	2010      	movs	r0, #16
 800c710:	f7ff ff44 	bl	800c59c <malloc>
 800c714:	4602      	mov	r2, r0
 800c716:	61e0      	str	r0, [r4, #28]
 800c718:	b920      	cbnz	r0, 800c724 <_Balloc+0x20>
 800c71a:	4b18      	ldr	r3, [pc, #96]	; (800c77c <_Balloc+0x78>)
 800c71c:	4818      	ldr	r0, [pc, #96]	; (800c780 <_Balloc+0x7c>)
 800c71e:	216b      	movs	r1, #107	; 0x6b
 800c720:	f000 fdf2 	bl	800d308 <__assert_func>
 800c724:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c728:	6006      	str	r6, [r0, #0]
 800c72a:	60c6      	str	r6, [r0, #12]
 800c72c:	69e6      	ldr	r6, [r4, #28]
 800c72e:	68f3      	ldr	r3, [r6, #12]
 800c730:	b183      	cbz	r3, 800c754 <_Balloc+0x50>
 800c732:	69e3      	ldr	r3, [r4, #28]
 800c734:	68db      	ldr	r3, [r3, #12]
 800c736:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c73a:	b9b8      	cbnz	r0, 800c76c <_Balloc+0x68>
 800c73c:	2101      	movs	r1, #1
 800c73e:	fa01 f605 	lsl.w	r6, r1, r5
 800c742:	1d72      	adds	r2, r6, #5
 800c744:	0092      	lsls	r2, r2, #2
 800c746:	4620      	mov	r0, r4
 800c748:	f000 fdfc 	bl	800d344 <_calloc_r>
 800c74c:	b160      	cbz	r0, 800c768 <_Balloc+0x64>
 800c74e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c752:	e00e      	b.n	800c772 <_Balloc+0x6e>
 800c754:	2221      	movs	r2, #33	; 0x21
 800c756:	2104      	movs	r1, #4
 800c758:	4620      	mov	r0, r4
 800c75a:	f000 fdf3 	bl	800d344 <_calloc_r>
 800c75e:	69e3      	ldr	r3, [r4, #28]
 800c760:	60f0      	str	r0, [r6, #12]
 800c762:	68db      	ldr	r3, [r3, #12]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d1e4      	bne.n	800c732 <_Balloc+0x2e>
 800c768:	2000      	movs	r0, #0
 800c76a:	bd70      	pop	{r4, r5, r6, pc}
 800c76c:	6802      	ldr	r2, [r0, #0]
 800c76e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c772:	2300      	movs	r3, #0
 800c774:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c778:	e7f7      	b.n	800c76a <_Balloc+0x66>
 800c77a:	bf00      	nop
 800c77c:	0800d631 	.word	0x0800d631
 800c780:	0800d6b1 	.word	0x0800d6b1

0800c784 <_Bfree>:
 800c784:	b570      	push	{r4, r5, r6, lr}
 800c786:	69c6      	ldr	r6, [r0, #28]
 800c788:	4605      	mov	r5, r0
 800c78a:	460c      	mov	r4, r1
 800c78c:	b976      	cbnz	r6, 800c7ac <_Bfree+0x28>
 800c78e:	2010      	movs	r0, #16
 800c790:	f7ff ff04 	bl	800c59c <malloc>
 800c794:	4602      	mov	r2, r0
 800c796:	61e8      	str	r0, [r5, #28]
 800c798:	b920      	cbnz	r0, 800c7a4 <_Bfree+0x20>
 800c79a:	4b09      	ldr	r3, [pc, #36]	; (800c7c0 <_Bfree+0x3c>)
 800c79c:	4809      	ldr	r0, [pc, #36]	; (800c7c4 <_Bfree+0x40>)
 800c79e:	218f      	movs	r1, #143	; 0x8f
 800c7a0:	f000 fdb2 	bl	800d308 <__assert_func>
 800c7a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c7a8:	6006      	str	r6, [r0, #0]
 800c7aa:	60c6      	str	r6, [r0, #12]
 800c7ac:	b13c      	cbz	r4, 800c7be <_Bfree+0x3a>
 800c7ae:	69eb      	ldr	r3, [r5, #28]
 800c7b0:	6862      	ldr	r2, [r4, #4]
 800c7b2:	68db      	ldr	r3, [r3, #12]
 800c7b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c7b8:	6021      	str	r1, [r4, #0]
 800c7ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c7be:	bd70      	pop	{r4, r5, r6, pc}
 800c7c0:	0800d631 	.word	0x0800d631
 800c7c4:	0800d6b1 	.word	0x0800d6b1

0800c7c8 <__multadd>:
 800c7c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7cc:	690d      	ldr	r5, [r1, #16]
 800c7ce:	4607      	mov	r7, r0
 800c7d0:	460c      	mov	r4, r1
 800c7d2:	461e      	mov	r6, r3
 800c7d4:	f101 0c14 	add.w	ip, r1, #20
 800c7d8:	2000      	movs	r0, #0
 800c7da:	f8dc 3000 	ldr.w	r3, [ip]
 800c7de:	b299      	uxth	r1, r3
 800c7e0:	fb02 6101 	mla	r1, r2, r1, r6
 800c7e4:	0c1e      	lsrs	r6, r3, #16
 800c7e6:	0c0b      	lsrs	r3, r1, #16
 800c7e8:	fb02 3306 	mla	r3, r2, r6, r3
 800c7ec:	b289      	uxth	r1, r1
 800c7ee:	3001      	adds	r0, #1
 800c7f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c7f4:	4285      	cmp	r5, r0
 800c7f6:	f84c 1b04 	str.w	r1, [ip], #4
 800c7fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c7fe:	dcec      	bgt.n	800c7da <__multadd+0x12>
 800c800:	b30e      	cbz	r6, 800c846 <__multadd+0x7e>
 800c802:	68a3      	ldr	r3, [r4, #8]
 800c804:	42ab      	cmp	r3, r5
 800c806:	dc19      	bgt.n	800c83c <__multadd+0x74>
 800c808:	6861      	ldr	r1, [r4, #4]
 800c80a:	4638      	mov	r0, r7
 800c80c:	3101      	adds	r1, #1
 800c80e:	f7ff ff79 	bl	800c704 <_Balloc>
 800c812:	4680      	mov	r8, r0
 800c814:	b928      	cbnz	r0, 800c822 <__multadd+0x5a>
 800c816:	4602      	mov	r2, r0
 800c818:	4b0c      	ldr	r3, [pc, #48]	; (800c84c <__multadd+0x84>)
 800c81a:	480d      	ldr	r0, [pc, #52]	; (800c850 <__multadd+0x88>)
 800c81c:	21ba      	movs	r1, #186	; 0xba
 800c81e:	f000 fd73 	bl	800d308 <__assert_func>
 800c822:	6922      	ldr	r2, [r4, #16]
 800c824:	3202      	adds	r2, #2
 800c826:	f104 010c 	add.w	r1, r4, #12
 800c82a:	0092      	lsls	r2, r2, #2
 800c82c:	300c      	adds	r0, #12
 800c82e:	f7fe ffe0 	bl	800b7f2 <memcpy>
 800c832:	4621      	mov	r1, r4
 800c834:	4638      	mov	r0, r7
 800c836:	f7ff ffa5 	bl	800c784 <_Bfree>
 800c83a:	4644      	mov	r4, r8
 800c83c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c840:	3501      	adds	r5, #1
 800c842:	615e      	str	r6, [r3, #20]
 800c844:	6125      	str	r5, [r4, #16]
 800c846:	4620      	mov	r0, r4
 800c848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c84c:	0800d6a0 	.word	0x0800d6a0
 800c850:	0800d6b1 	.word	0x0800d6b1

0800c854 <__hi0bits>:
 800c854:	0c03      	lsrs	r3, r0, #16
 800c856:	041b      	lsls	r3, r3, #16
 800c858:	b9d3      	cbnz	r3, 800c890 <__hi0bits+0x3c>
 800c85a:	0400      	lsls	r0, r0, #16
 800c85c:	2310      	movs	r3, #16
 800c85e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c862:	bf04      	itt	eq
 800c864:	0200      	lsleq	r0, r0, #8
 800c866:	3308      	addeq	r3, #8
 800c868:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c86c:	bf04      	itt	eq
 800c86e:	0100      	lsleq	r0, r0, #4
 800c870:	3304      	addeq	r3, #4
 800c872:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c876:	bf04      	itt	eq
 800c878:	0080      	lsleq	r0, r0, #2
 800c87a:	3302      	addeq	r3, #2
 800c87c:	2800      	cmp	r0, #0
 800c87e:	db05      	blt.n	800c88c <__hi0bits+0x38>
 800c880:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c884:	f103 0301 	add.w	r3, r3, #1
 800c888:	bf08      	it	eq
 800c88a:	2320      	moveq	r3, #32
 800c88c:	4618      	mov	r0, r3
 800c88e:	4770      	bx	lr
 800c890:	2300      	movs	r3, #0
 800c892:	e7e4      	b.n	800c85e <__hi0bits+0xa>

0800c894 <__lo0bits>:
 800c894:	6803      	ldr	r3, [r0, #0]
 800c896:	f013 0207 	ands.w	r2, r3, #7
 800c89a:	d00c      	beq.n	800c8b6 <__lo0bits+0x22>
 800c89c:	07d9      	lsls	r1, r3, #31
 800c89e:	d422      	bmi.n	800c8e6 <__lo0bits+0x52>
 800c8a0:	079a      	lsls	r2, r3, #30
 800c8a2:	bf49      	itett	mi
 800c8a4:	085b      	lsrmi	r3, r3, #1
 800c8a6:	089b      	lsrpl	r3, r3, #2
 800c8a8:	6003      	strmi	r3, [r0, #0]
 800c8aa:	2201      	movmi	r2, #1
 800c8ac:	bf5c      	itt	pl
 800c8ae:	6003      	strpl	r3, [r0, #0]
 800c8b0:	2202      	movpl	r2, #2
 800c8b2:	4610      	mov	r0, r2
 800c8b4:	4770      	bx	lr
 800c8b6:	b299      	uxth	r1, r3
 800c8b8:	b909      	cbnz	r1, 800c8be <__lo0bits+0x2a>
 800c8ba:	0c1b      	lsrs	r3, r3, #16
 800c8bc:	2210      	movs	r2, #16
 800c8be:	b2d9      	uxtb	r1, r3
 800c8c0:	b909      	cbnz	r1, 800c8c6 <__lo0bits+0x32>
 800c8c2:	3208      	adds	r2, #8
 800c8c4:	0a1b      	lsrs	r3, r3, #8
 800c8c6:	0719      	lsls	r1, r3, #28
 800c8c8:	bf04      	itt	eq
 800c8ca:	091b      	lsreq	r3, r3, #4
 800c8cc:	3204      	addeq	r2, #4
 800c8ce:	0799      	lsls	r1, r3, #30
 800c8d0:	bf04      	itt	eq
 800c8d2:	089b      	lsreq	r3, r3, #2
 800c8d4:	3202      	addeq	r2, #2
 800c8d6:	07d9      	lsls	r1, r3, #31
 800c8d8:	d403      	bmi.n	800c8e2 <__lo0bits+0x4e>
 800c8da:	085b      	lsrs	r3, r3, #1
 800c8dc:	f102 0201 	add.w	r2, r2, #1
 800c8e0:	d003      	beq.n	800c8ea <__lo0bits+0x56>
 800c8e2:	6003      	str	r3, [r0, #0]
 800c8e4:	e7e5      	b.n	800c8b2 <__lo0bits+0x1e>
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	e7e3      	b.n	800c8b2 <__lo0bits+0x1e>
 800c8ea:	2220      	movs	r2, #32
 800c8ec:	e7e1      	b.n	800c8b2 <__lo0bits+0x1e>
	...

0800c8f0 <__i2b>:
 800c8f0:	b510      	push	{r4, lr}
 800c8f2:	460c      	mov	r4, r1
 800c8f4:	2101      	movs	r1, #1
 800c8f6:	f7ff ff05 	bl	800c704 <_Balloc>
 800c8fa:	4602      	mov	r2, r0
 800c8fc:	b928      	cbnz	r0, 800c90a <__i2b+0x1a>
 800c8fe:	4b05      	ldr	r3, [pc, #20]	; (800c914 <__i2b+0x24>)
 800c900:	4805      	ldr	r0, [pc, #20]	; (800c918 <__i2b+0x28>)
 800c902:	f240 1145 	movw	r1, #325	; 0x145
 800c906:	f000 fcff 	bl	800d308 <__assert_func>
 800c90a:	2301      	movs	r3, #1
 800c90c:	6144      	str	r4, [r0, #20]
 800c90e:	6103      	str	r3, [r0, #16]
 800c910:	bd10      	pop	{r4, pc}
 800c912:	bf00      	nop
 800c914:	0800d6a0 	.word	0x0800d6a0
 800c918:	0800d6b1 	.word	0x0800d6b1

0800c91c <__multiply>:
 800c91c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c920:	4691      	mov	r9, r2
 800c922:	690a      	ldr	r2, [r1, #16]
 800c924:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c928:	429a      	cmp	r2, r3
 800c92a:	bfb8      	it	lt
 800c92c:	460b      	movlt	r3, r1
 800c92e:	460c      	mov	r4, r1
 800c930:	bfbc      	itt	lt
 800c932:	464c      	movlt	r4, r9
 800c934:	4699      	movlt	r9, r3
 800c936:	6927      	ldr	r7, [r4, #16]
 800c938:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c93c:	68a3      	ldr	r3, [r4, #8]
 800c93e:	6861      	ldr	r1, [r4, #4]
 800c940:	eb07 060a 	add.w	r6, r7, sl
 800c944:	42b3      	cmp	r3, r6
 800c946:	b085      	sub	sp, #20
 800c948:	bfb8      	it	lt
 800c94a:	3101      	addlt	r1, #1
 800c94c:	f7ff feda 	bl	800c704 <_Balloc>
 800c950:	b930      	cbnz	r0, 800c960 <__multiply+0x44>
 800c952:	4602      	mov	r2, r0
 800c954:	4b44      	ldr	r3, [pc, #272]	; (800ca68 <__multiply+0x14c>)
 800c956:	4845      	ldr	r0, [pc, #276]	; (800ca6c <__multiply+0x150>)
 800c958:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c95c:	f000 fcd4 	bl	800d308 <__assert_func>
 800c960:	f100 0514 	add.w	r5, r0, #20
 800c964:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c968:	462b      	mov	r3, r5
 800c96a:	2200      	movs	r2, #0
 800c96c:	4543      	cmp	r3, r8
 800c96e:	d321      	bcc.n	800c9b4 <__multiply+0x98>
 800c970:	f104 0314 	add.w	r3, r4, #20
 800c974:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c978:	f109 0314 	add.w	r3, r9, #20
 800c97c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c980:	9202      	str	r2, [sp, #8]
 800c982:	1b3a      	subs	r2, r7, r4
 800c984:	3a15      	subs	r2, #21
 800c986:	f022 0203 	bic.w	r2, r2, #3
 800c98a:	3204      	adds	r2, #4
 800c98c:	f104 0115 	add.w	r1, r4, #21
 800c990:	428f      	cmp	r7, r1
 800c992:	bf38      	it	cc
 800c994:	2204      	movcc	r2, #4
 800c996:	9201      	str	r2, [sp, #4]
 800c998:	9a02      	ldr	r2, [sp, #8]
 800c99a:	9303      	str	r3, [sp, #12]
 800c99c:	429a      	cmp	r2, r3
 800c99e:	d80c      	bhi.n	800c9ba <__multiply+0x9e>
 800c9a0:	2e00      	cmp	r6, #0
 800c9a2:	dd03      	ble.n	800c9ac <__multiply+0x90>
 800c9a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d05b      	beq.n	800ca64 <__multiply+0x148>
 800c9ac:	6106      	str	r6, [r0, #16]
 800c9ae:	b005      	add	sp, #20
 800c9b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9b4:	f843 2b04 	str.w	r2, [r3], #4
 800c9b8:	e7d8      	b.n	800c96c <__multiply+0x50>
 800c9ba:	f8b3 a000 	ldrh.w	sl, [r3]
 800c9be:	f1ba 0f00 	cmp.w	sl, #0
 800c9c2:	d024      	beq.n	800ca0e <__multiply+0xf2>
 800c9c4:	f104 0e14 	add.w	lr, r4, #20
 800c9c8:	46a9      	mov	r9, r5
 800c9ca:	f04f 0c00 	mov.w	ip, #0
 800c9ce:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c9d2:	f8d9 1000 	ldr.w	r1, [r9]
 800c9d6:	fa1f fb82 	uxth.w	fp, r2
 800c9da:	b289      	uxth	r1, r1
 800c9dc:	fb0a 110b 	mla	r1, sl, fp, r1
 800c9e0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c9e4:	f8d9 2000 	ldr.w	r2, [r9]
 800c9e8:	4461      	add	r1, ip
 800c9ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c9ee:	fb0a c20b 	mla	r2, sl, fp, ip
 800c9f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c9f6:	b289      	uxth	r1, r1
 800c9f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c9fc:	4577      	cmp	r7, lr
 800c9fe:	f849 1b04 	str.w	r1, [r9], #4
 800ca02:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ca06:	d8e2      	bhi.n	800c9ce <__multiply+0xb2>
 800ca08:	9a01      	ldr	r2, [sp, #4]
 800ca0a:	f845 c002 	str.w	ip, [r5, r2]
 800ca0e:	9a03      	ldr	r2, [sp, #12]
 800ca10:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ca14:	3304      	adds	r3, #4
 800ca16:	f1b9 0f00 	cmp.w	r9, #0
 800ca1a:	d021      	beq.n	800ca60 <__multiply+0x144>
 800ca1c:	6829      	ldr	r1, [r5, #0]
 800ca1e:	f104 0c14 	add.w	ip, r4, #20
 800ca22:	46ae      	mov	lr, r5
 800ca24:	f04f 0a00 	mov.w	sl, #0
 800ca28:	f8bc b000 	ldrh.w	fp, [ip]
 800ca2c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ca30:	fb09 220b 	mla	r2, r9, fp, r2
 800ca34:	4452      	add	r2, sl
 800ca36:	b289      	uxth	r1, r1
 800ca38:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ca3c:	f84e 1b04 	str.w	r1, [lr], #4
 800ca40:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ca44:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ca48:	f8be 1000 	ldrh.w	r1, [lr]
 800ca4c:	fb09 110a 	mla	r1, r9, sl, r1
 800ca50:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ca54:	4567      	cmp	r7, ip
 800ca56:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ca5a:	d8e5      	bhi.n	800ca28 <__multiply+0x10c>
 800ca5c:	9a01      	ldr	r2, [sp, #4]
 800ca5e:	50a9      	str	r1, [r5, r2]
 800ca60:	3504      	adds	r5, #4
 800ca62:	e799      	b.n	800c998 <__multiply+0x7c>
 800ca64:	3e01      	subs	r6, #1
 800ca66:	e79b      	b.n	800c9a0 <__multiply+0x84>
 800ca68:	0800d6a0 	.word	0x0800d6a0
 800ca6c:	0800d6b1 	.word	0x0800d6b1

0800ca70 <__pow5mult>:
 800ca70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca74:	4615      	mov	r5, r2
 800ca76:	f012 0203 	ands.w	r2, r2, #3
 800ca7a:	4606      	mov	r6, r0
 800ca7c:	460f      	mov	r7, r1
 800ca7e:	d007      	beq.n	800ca90 <__pow5mult+0x20>
 800ca80:	4c25      	ldr	r4, [pc, #148]	; (800cb18 <__pow5mult+0xa8>)
 800ca82:	3a01      	subs	r2, #1
 800ca84:	2300      	movs	r3, #0
 800ca86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ca8a:	f7ff fe9d 	bl	800c7c8 <__multadd>
 800ca8e:	4607      	mov	r7, r0
 800ca90:	10ad      	asrs	r5, r5, #2
 800ca92:	d03d      	beq.n	800cb10 <__pow5mult+0xa0>
 800ca94:	69f4      	ldr	r4, [r6, #28]
 800ca96:	b97c      	cbnz	r4, 800cab8 <__pow5mult+0x48>
 800ca98:	2010      	movs	r0, #16
 800ca9a:	f7ff fd7f 	bl	800c59c <malloc>
 800ca9e:	4602      	mov	r2, r0
 800caa0:	61f0      	str	r0, [r6, #28]
 800caa2:	b928      	cbnz	r0, 800cab0 <__pow5mult+0x40>
 800caa4:	4b1d      	ldr	r3, [pc, #116]	; (800cb1c <__pow5mult+0xac>)
 800caa6:	481e      	ldr	r0, [pc, #120]	; (800cb20 <__pow5mult+0xb0>)
 800caa8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800caac:	f000 fc2c 	bl	800d308 <__assert_func>
 800cab0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cab4:	6004      	str	r4, [r0, #0]
 800cab6:	60c4      	str	r4, [r0, #12]
 800cab8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800cabc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cac0:	b94c      	cbnz	r4, 800cad6 <__pow5mult+0x66>
 800cac2:	f240 2171 	movw	r1, #625	; 0x271
 800cac6:	4630      	mov	r0, r6
 800cac8:	f7ff ff12 	bl	800c8f0 <__i2b>
 800cacc:	2300      	movs	r3, #0
 800cace:	f8c8 0008 	str.w	r0, [r8, #8]
 800cad2:	4604      	mov	r4, r0
 800cad4:	6003      	str	r3, [r0, #0]
 800cad6:	f04f 0900 	mov.w	r9, #0
 800cada:	07eb      	lsls	r3, r5, #31
 800cadc:	d50a      	bpl.n	800caf4 <__pow5mult+0x84>
 800cade:	4639      	mov	r1, r7
 800cae0:	4622      	mov	r2, r4
 800cae2:	4630      	mov	r0, r6
 800cae4:	f7ff ff1a 	bl	800c91c <__multiply>
 800cae8:	4639      	mov	r1, r7
 800caea:	4680      	mov	r8, r0
 800caec:	4630      	mov	r0, r6
 800caee:	f7ff fe49 	bl	800c784 <_Bfree>
 800caf2:	4647      	mov	r7, r8
 800caf4:	106d      	asrs	r5, r5, #1
 800caf6:	d00b      	beq.n	800cb10 <__pow5mult+0xa0>
 800caf8:	6820      	ldr	r0, [r4, #0]
 800cafa:	b938      	cbnz	r0, 800cb0c <__pow5mult+0x9c>
 800cafc:	4622      	mov	r2, r4
 800cafe:	4621      	mov	r1, r4
 800cb00:	4630      	mov	r0, r6
 800cb02:	f7ff ff0b 	bl	800c91c <__multiply>
 800cb06:	6020      	str	r0, [r4, #0]
 800cb08:	f8c0 9000 	str.w	r9, [r0]
 800cb0c:	4604      	mov	r4, r0
 800cb0e:	e7e4      	b.n	800cada <__pow5mult+0x6a>
 800cb10:	4638      	mov	r0, r7
 800cb12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb16:	bf00      	nop
 800cb18:	0800d800 	.word	0x0800d800
 800cb1c:	0800d631 	.word	0x0800d631
 800cb20:	0800d6b1 	.word	0x0800d6b1

0800cb24 <__lshift>:
 800cb24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb28:	460c      	mov	r4, r1
 800cb2a:	6849      	ldr	r1, [r1, #4]
 800cb2c:	6923      	ldr	r3, [r4, #16]
 800cb2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cb32:	68a3      	ldr	r3, [r4, #8]
 800cb34:	4607      	mov	r7, r0
 800cb36:	4691      	mov	r9, r2
 800cb38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cb3c:	f108 0601 	add.w	r6, r8, #1
 800cb40:	42b3      	cmp	r3, r6
 800cb42:	db0b      	blt.n	800cb5c <__lshift+0x38>
 800cb44:	4638      	mov	r0, r7
 800cb46:	f7ff fddd 	bl	800c704 <_Balloc>
 800cb4a:	4605      	mov	r5, r0
 800cb4c:	b948      	cbnz	r0, 800cb62 <__lshift+0x3e>
 800cb4e:	4602      	mov	r2, r0
 800cb50:	4b28      	ldr	r3, [pc, #160]	; (800cbf4 <__lshift+0xd0>)
 800cb52:	4829      	ldr	r0, [pc, #164]	; (800cbf8 <__lshift+0xd4>)
 800cb54:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800cb58:	f000 fbd6 	bl	800d308 <__assert_func>
 800cb5c:	3101      	adds	r1, #1
 800cb5e:	005b      	lsls	r3, r3, #1
 800cb60:	e7ee      	b.n	800cb40 <__lshift+0x1c>
 800cb62:	2300      	movs	r3, #0
 800cb64:	f100 0114 	add.w	r1, r0, #20
 800cb68:	f100 0210 	add.w	r2, r0, #16
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	4553      	cmp	r3, sl
 800cb70:	db33      	blt.n	800cbda <__lshift+0xb6>
 800cb72:	6920      	ldr	r0, [r4, #16]
 800cb74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cb78:	f104 0314 	add.w	r3, r4, #20
 800cb7c:	f019 091f 	ands.w	r9, r9, #31
 800cb80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cb84:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cb88:	d02b      	beq.n	800cbe2 <__lshift+0xbe>
 800cb8a:	f1c9 0e20 	rsb	lr, r9, #32
 800cb8e:	468a      	mov	sl, r1
 800cb90:	2200      	movs	r2, #0
 800cb92:	6818      	ldr	r0, [r3, #0]
 800cb94:	fa00 f009 	lsl.w	r0, r0, r9
 800cb98:	4310      	orrs	r0, r2
 800cb9a:	f84a 0b04 	str.w	r0, [sl], #4
 800cb9e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cba2:	459c      	cmp	ip, r3
 800cba4:	fa22 f20e 	lsr.w	r2, r2, lr
 800cba8:	d8f3      	bhi.n	800cb92 <__lshift+0x6e>
 800cbaa:	ebac 0304 	sub.w	r3, ip, r4
 800cbae:	3b15      	subs	r3, #21
 800cbb0:	f023 0303 	bic.w	r3, r3, #3
 800cbb4:	3304      	adds	r3, #4
 800cbb6:	f104 0015 	add.w	r0, r4, #21
 800cbba:	4584      	cmp	ip, r0
 800cbbc:	bf38      	it	cc
 800cbbe:	2304      	movcc	r3, #4
 800cbc0:	50ca      	str	r2, [r1, r3]
 800cbc2:	b10a      	cbz	r2, 800cbc8 <__lshift+0xa4>
 800cbc4:	f108 0602 	add.w	r6, r8, #2
 800cbc8:	3e01      	subs	r6, #1
 800cbca:	4638      	mov	r0, r7
 800cbcc:	612e      	str	r6, [r5, #16]
 800cbce:	4621      	mov	r1, r4
 800cbd0:	f7ff fdd8 	bl	800c784 <_Bfree>
 800cbd4:	4628      	mov	r0, r5
 800cbd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbda:	f842 0f04 	str.w	r0, [r2, #4]!
 800cbde:	3301      	adds	r3, #1
 800cbe0:	e7c5      	b.n	800cb6e <__lshift+0x4a>
 800cbe2:	3904      	subs	r1, #4
 800cbe4:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbe8:	f841 2f04 	str.w	r2, [r1, #4]!
 800cbec:	459c      	cmp	ip, r3
 800cbee:	d8f9      	bhi.n	800cbe4 <__lshift+0xc0>
 800cbf0:	e7ea      	b.n	800cbc8 <__lshift+0xa4>
 800cbf2:	bf00      	nop
 800cbf4:	0800d6a0 	.word	0x0800d6a0
 800cbf8:	0800d6b1 	.word	0x0800d6b1

0800cbfc <__mcmp>:
 800cbfc:	b530      	push	{r4, r5, lr}
 800cbfe:	6902      	ldr	r2, [r0, #16]
 800cc00:	690c      	ldr	r4, [r1, #16]
 800cc02:	1b12      	subs	r2, r2, r4
 800cc04:	d10e      	bne.n	800cc24 <__mcmp+0x28>
 800cc06:	f100 0314 	add.w	r3, r0, #20
 800cc0a:	3114      	adds	r1, #20
 800cc0c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cc10:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cc14:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cc18:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cc1c:	42a5      	cmp	r5, r4
 800cc1e:	d003      	beq.n	800cc28 <__mcmp+0x2c>
 800cc20:	d305      	bcc.n	800cc2e <__mcmp+0x32>
 800cc22:	2201      	movs	r2, #1
 800cc24:	4610      	mov	r0, r2
 800cc26:	bd30      	pop	{r4, r5, pc}
 800cc28:	4283      	cmp	r3, r0
 800cc2a:	d3f3      	bcc.n	800cc14 <__mcmp+0x18>
 800cc2c:	e7fa      	b.n	800cc24 <__mcmp+0x28>
 800cc2e:	f04f 32ff 	mov.w	r2, #4294967295
 800cc32:	e7f7      	b.n	800cc24 <__mcmp+0x28>

0800cc34 <__mdiff>:
 800cc34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc38:	460c      	mov	r4, r1
 800cc3a:	4606      	mov	r6, r0
 800cc3c:	4611      	mov	r1, r2
 800cc3e:	4620      	mov	r0, r4
 800cc40:	4690      	mov	r8, r2
 800cc42:	f7ff ffdb 	bl	800cbfc <__mcmp>
 800cc46:	1e05      	subs	r5, r0, #0
 800cc48:	d110      	bne.n	800cc6c <__mdiff+0x38>
 800cc4a:	4629      	mov	r1, r5
 800cc4c:	4630      	mov	r0, r6
 800cc4e:	f7ff fd59 	bl	800c704 <_Balloc>
 800cc52:	b930      	cbnz	r0, 800cc62 <__mdiff+0x2e>
 800cc54:	4b3a      	ldr	r3, [pc, #232]	; (800cd40 <__mdiff+0x10c>)
 800cc56:	4602      	mov	r2, r0
 800cc58:	f240 2137 	movw	r1, #567	; 0x237
 800cc5c:	4839      	ldr	r0, [pc, #228]	; (800cd44 <__mdiff+0x110>)
 800cc5e:	f000 fb53 	bl	800d308 <__assert_func>
 800cc62:	2301      	movs	r3, #1
 800cc64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cc68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc6c:	bfa4      	itt	ge
 800cc6e:	4643      	movge	r3, r8
 800cc70:	46a0      	movge	r8, r4
 800cc72:	4630      	mov	r0, r6
 800cc74:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cc78:	bfa6      	itte	ge
 800cc7a:	461c      	movge	r4, r3
 800cc7c:	2500      	movge	r5, #0
 800cc7e:	2501      	movlt	r5, #1
 800cc80:	f7ff fd40 	bl	800c704 <_Balloc>
 800cc84:	b920      	cbnz	r0, 800cc90 <__mdiff+0x5c>
 800cc86:	4b2e      	ldr	r3, [pc, #184]	; (800cd40 <__mdiff+0x10c>)
 800cc88:	4602      	mov	r2, r0
 800cc8a:	f240 2145 	movw	r1, #581	; 0x245
 800cc8e:	e7e5      	b.n	800cc5c <__mdiff+0x28>
 800cc90:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cc94:	6926      	ldr	r6, [r4, #16]
 800cc96:	60c5      	str	r5, [r0, #12]
 800cc98:	f104 0914 	add.w	r9, r4, #20
 800cc9c:	f108 0514 	add.w	r5, r8, #20
 800cca0:	f100 0e14 	add.w	lr, r0, #20
 800cca4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cca8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ccac:	f108 0210 	add.w	r2, r8, #16
 800ccb0:	46f2      	mov	sl, lr
 800ccb2:	2100      	movs	r1, #0
 800ccb4:	f859 3b04 	ldr.w	r3, [r9], #4
 800ccb8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ccbc:	fa11 f88b 	uxtah	r8, r1, fp
 800ccc0:	b299      	uxth	r1, r3
 800ccc2:	0c1b      	lsrs	r3, r3, #16
 800ccc4:	eba8 0801 	sub.w	r8, r8, r1
 800ccc8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cccc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ccd0:	fa1f f888 	uxth.w	r8, r8
 800ccd4:	1419      	asrs	r1, r3, #16
 800ccd6:	454e      	cmp	r6, r9
 800ccd8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ccdc:	f84a 3b04 	str.w	r3, [sl], #4
 800cce0:	d8e8      	bhi.n	800ccb4 <__mdiff+0x80>
 800cce2:	1b33      	subs	r3, r6, r4
 800cce4:	3b15      	subs	r3, #21
 800cce6:	f023 0303 	bic.w	r3, r3, #3
 800ccea:	3304      	adds	r3, #4
 800ccec:	3415      	adds	r4, #21
 800ccee:	42a6      	cmp	r6, r4
 800ccf0:	bf38      	it	cc
 800ccf2:	2304      	movcc	r3, #4
 800ccf4:	441d      	add	r5, r3
 800ccf6:	4473      	add	r3, lr
 800ccf8:	469e      	mov	lr, r3
 800ccfa:	462e      	mov	r6, r5
 800ccfc:	4566      	cmp	r6, ip
 800ccfe:	d30e      	bcc.n	800cd1e <__mdiff+0xea>
 800cd00:	f10c 0203 	add.w	r2, ip, #3
 800cd04:	1b52      	subs	r2, r2, r5
 800cd06:	f022 0203 	bic.w	r2, r2, #3
 800cd0a:	3d03      	subs	r5, #3
 800cd0c:	45ac      	cmp	ip, r5
 800cd0e:	bf38      	it	cc
 800cd10:	2200      	movcc	r2, #0
 800cd12:	4413      	add	r3, r2
 800cd14:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800cd18:	b17a      	cbz	r2, 800cd3a <__mdiff+0x106>
 800cd1a:	6107      	str	r7, [r0, #16]
 800cd1c:	e7a4      	b.n	800cc68 <__mdiff+0x34>
 800cd1e:	f856 8b04 	ldr.w	r8, [r6], #4
 800cd22:	fa11 f288 	uxtah	r2, r1, r8
 800cd26:	1414      	asrs	r4, r2, #16
 800cd28:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cd2c:	b292      	uxth	r2, r2
 800cd2e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cd32:	f84e 2b04 	str.w	r2, [lr], #4
 800cd36:	1421      	asrs	r1, r4, #16
 800cd38:	e7e0      	b.n	800ccfc <__mdiff+0xc8>
 800cd3a:	3f01      	subs	r7, #1
 800cd3c:	e7ea      	b.n	800cd14 <__mdiff+0xe0>
 800cd3e:	bf00      	nop
 800cd40:	0800d6a0 	.word	0x0800d6a0
 800cd44:	0800d6b1 	.word	0x0800d6b1

0800cd48 <__d2b>:
 800cd48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cd4c:	460f      	mov	r7, r1
 800cd4e:	2101      	movs	r1, #1
 800cd50:	ec59 8b10 	vmov	r8, r9, d0
 800cd54:	4616      	mov	r6, r2
 800cd56:	f7ff fcd5 	bl	800c704 <_Balloc>
 800cd5a:	4604      	mov	r4, r0
 800cd5c:	b930      	cbnz	r0, 800cd6c <__d2b+0x24>
 800cd5e:	4602      	mov	r2, r0
 800cd60:	4b24      	ldr	r3, [pc, #144]	; (800cdf4 <__d2b+0xac>)
 800cd62:	4825      	ldr	r0, [pc, #148]	; (800cdf8 <__d2b+0xb0>)
 800cd64:	f240 310f 	movw	r1, #783	; 0x30f
 800cd68:	f000 face 	bl	800d308 <__assert_func>
 800cd6c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cd70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cd74:	bb2d      	cbnz	r5, 800cdc2 <__d2b+0x7a>
 800cd76:	9301      	str	r3, [sp, #4]
 800cd78:	f1b8 0300 	subs.w	r3, r8, #0
 800cd7c:	d026      	beq.n	800cdcc <__d2b+0x84>
 800cd7e:	4668      	mov	r0, sp
 800cd80:	9300      	str	r3, [sp, #0]
 800cd82:	f7ff fd87 	bl	800c894 <__lo0bits>
 800cd86:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cd8a:	b1e8      	cbz	r0, 800cdc8 <__d2b+0x80>
 800cd8c:	f1c0 0320 	rsb	r3, r0, #32
 800cd90:	fa02 f303 	lsl.w	r3, r2, r3
 800cd94:	430b      	orrs	r3, r1
 800cd96:	40c2      	lsrs	r2, r0
 800cd98:	6163      	str	r3, [r4, #20]
 800cd9a:	9201      	str	r2, [sp, #4]
 800cd9c:	9b01      	ldr	r3, [sp, #4]
 800cd9e:	61a3      	str	r3, [r4, #24]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	bf14      	ite	ne
 800cda4:	2202      	movne	r2, #2
 800cda6:	2201      	moveq	r2, #1
 800cda8:	6122      	str	r2, [r4, #16]
 800cdaa:	b1bd      	cbz	r5, 800cddc <__d2b+0x94>
 800cdac:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cdb0:	4405      	add	r5, r0
 800cdb2:	603d      	str	r5, [r7, #0]
 800cdb4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cdb8:	6030      	str	r0, [r6, #0]
 800cdba:	4620      	mov	r0, r4
 800cdbc:	b003      	add	sp, #12
 800cdbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cdc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cdc6:	e7d6      	b.n	800cd76 <__d2b+0x2e>
 800cdc8:	6161      	str	r1, [r4, #20]
 800cdca:	e7e7      	b.n	800cd9c <__d2b+0x54>
 800cdcc:	a801      	add	r0, sp, #4
 800cdce:	f7ff fd61 	bl	800c894 <__lo0bits>
 800cdd2:	9b01      	ldr	r3, [sp, #4]
 800cdd4:	6163      	str	r3, [r4, #20]
 800cdd6:	3020      	adds	r0, #32
 800cdd8:	2201      	movs	r2, #1
 800cdda:	e7e5      	b.n	800cda8 <__d2b+0x60>
 800cddc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cde0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cde4:	6038      	str	r0, [r7, #0]
 800cde6:	6918      	ldr	r0, [r3, #16]
 800cde8:	f7ff fd34 	bl	800c854 <__hi0bits>
 800cdec:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cdf0:	e7e2      	b.n	800cdb8 <__d2b+0x70>
 800cdf2:	bf00      	nop
 800cdf4:	0800d6a0 	.word	0x0800d6a0
 800cdf8:	0800d6b1 	.word	0x0800d6b1

0800cdfc <__sfputc_r>:
 800cdfc:	6893      	ldr	r3, [r2, #8]
 800cdfe:	3b01      	subs	r3, #1
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	b410      	push	{r4}
 800ce04:	6093      	str	r3, [r2, #8]
 800ce06:	da08      	bge.n	800ce1a <__sfputc_r+0x1e>
 800ce08:	6994      	ldr	r4, [r2, #24]
 800ce0a:	42a3      	cmp	r3, r4
 800ce0c:	db01      	blt.n	800ce12 <__sfputc_r+0x16>
 800ce0e:	290a      	cmp	r1, #10
 800ce10:	d103      	bne.n	800ce1a <__sfputc_r+0x1e>
 800ce12:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce16:	f7fe bb82 	b.w	800b51e <__swbuf_r>
 800ce1a:	6813      	ldr	r3, [r2, #0]
 800ce1c:	1c58      	adds	r0, r3, #1
 800ce1e:	6010      	str	r0, [r2, #0]
 800ce20:	7019      	strb	r1, [r3, #0]
 800ce22:	4608      	mov	r0, r1
 800ce24:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce28:	4770      	bx	lr

0800ce2a <__sfputs_r>:
 800ce2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce2c:	4606      	mov	r6, r0
 800ce2e:	460f      	mov	r7, r1
 800ce30:	4614      	mov	r4, r2
 800ce32:	18d5      	adds	r5, r2, r3
 800ce34:	42ac      	cmp	r4, r5
 800ce36:	d101      	bne.n	800ce3c <__sfputs_r+0x12>
 800ce38:	2000      	movs	r0, #0
 800ce3a:	e007      	b.n	800ce4c <__sfputs_r+0x22>
 800ce3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce40:	463a      	mov	r2, r7
 800ce42:	4630      	mov	r0, r6
 800ce44:	f7ff ffda 	bl	800cdfc <__sfputc_r>
 800ce48:	1c43      	adds	r3, r0, #1
 800ce4a:	d1f3      	bne.n	800ce34 <__sfputs_r+0xa>
 800ce4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ce50 <_vfiprintf_r>:
 800ce50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce54:	460d      	mov	r5, r1
 800ce56:	b09d      	sub	sp, #116	; 0x74
 800ce58:	4614      	mov	r4, r2
 800ce5a:	4698      	mov	r8, r3
 800ce5c:	4606      	mov	r6, r0
 800ce5e:	b118      	cbz	r0, 800ce68 <_vfiprintf_r+0x18>
 800ce60:	6a03      	ldr	r3, [r0, #32]
 800ce62:	b90b      	cbnz	r3, 800ce68 <_vfiprintf_r+0x18>
 800ce64:	f7fe fa74 	bl	800b350 <__sinit>
 800ce68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce6a:	07d9      	lsls	r1, r3, #31
 800ce6c:	d405      	bmi.n	800ce7a <_vfiprintf_r+0x2a>
 800ce6e:	89ab      	ldrh	r3, [r5, #12]
 800ce70:	059a      	lsls	r2, r3, #22
 800ce72:	d402      	bmi.n	800ce7a <_vfiprintf_r+0x2a>
 800ce74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce76:	f7fe fcba 	bl	800b7ee <__retarget_lock_acquire_recursive>
 800ce7a:	89ab      	ldrh	r3, [r5, #12]
 800ce7c:	071b      	lsls	r3, r3, #28
 800ce7e:	d501      	bpl.n	800ce84 <_vfiprintf_r+0x34>
 800ce80:	692b      	ldr	r3, [r5, #16]
 800ce82:	b99b      	cbnz	r3, 800ceac <_vfiprintf_r+0x5c>
 800ce84:	4629      	mov	r1, r5
 800ce86:	4630      	mov	r0, r6
 800ce88:	f7fe fb86 	bl	800b598 <__swsetup_r>
 800ce8c:	b170      	cbz	r0, 800ceac <_vfiprintf_r+0x5c>
 800ce8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce90:	07dc      	lsls	r4, r3, #31
 800ce92:	d504      	bpl.n	800ce9e <_vfiprintf_r+0x4e>
 800ce94:	f04f 30ff 	mov.w	r0, #4294967295
 800ce98:	b01d      	add	sp, #116	; 0x74
 800ce9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce9e:	89ab      	ldrh	r3, [r5, #12]
 800cea0:	0598      	lsls	r0, r3, #22
 800cea2:	d4f7      	bmi.n	800ce94 <_vfiprintf_r+0x44>
 800cea4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cea6:	f7fe fca3 	bl	800b7f0 <__retarget_lock_release_recursive>
 800ceaa:	e7f3      	b.n	800ce94 <_vfiprintf_r+0x44>
 800ceac:	2300      	movs	r3, #0
 800ceae:	9309      	str	r3, [sp, #36]	; 0x24
 800ceb0:	2320      	movs	r3, #32
 800ceb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ceb6:	f8cd 800c 	str.w	r8, [sp, #12]
 800ceba:	2330      	movs	r3, #48	; 0x30
 800cebc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d070 <_vfiprintf_r+0x220>
 800cec0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cec4:	f04f 0901 	mov.w	r9, #1
 800cec8:	4623      	mov	r3, r4
 800ceca:	469a      	mov	sl, r3
 800cecc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ced0:	b10a      	cbz	r2, 800ced6 <_vfiprintf_r+0x86>
 800ced2:	2a25      	cmp	r2, #37	; 0x25
 800ced4:	d1f9      	bne.n	800ceca <_vfiprintf_r+0x7a>
 800ced6:	ebba 0b04 	subs.w	fp, sl, r4
 800ceda:	d00b      	beq.n	800cef4 <_vfiprintf_r+0xa4>
 800cedc:	465b      	mov	r3, fp
 800cede:	4622      	mov	r2, r4
 800cee0:	4629      	mov	r1, r5
 800cee2:	4630      	mov	r0, r6
 800cee4:	f7ff ffa1 	bl	800ce2a <__sfputs_r>
 800cee8:	3001      	adds	r0, #1
 800ceea:	f000 80a9 	beq.w	800d040 <_vfiprintf_r+0x1f0>
 800ceee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cef0:	445a      	add	r2, fp
 800cef2:	9209      	str	r2, [sp, #36]	; 0x24
 800cef4:	f89a 3000 	ldrb.w	r3, [sl]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	f000 80a1 	beq.w	800d040 <_vfiprintf_r+0x1f0>
 800cefe:	2300      	movs	r3, #0
 800cf00:	f04f 32ff 	mov.w	r2, #4294967295
 800cf04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf08:	f10a 0a01 	add.w	sl, sl, #1
 800cf0c:	9304      	str	r3, [sp, #16]
 800cf0e:	9307      	str	r3, [sp, #28]
 800cf10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cf14:	931a      	str	r3, [sp, #104]	; 0x68
 800cf16:	4654      	mov	r4, sl
 800cf18:	2205      	movs	r2, #5
 800cf1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf1e:	4854      	ldr	r0, [pc, #336]	; (800d070 <_vfiprintf_r+0x220>)
 800cf20:	f7f3 f95e 	bl	80001e0 <memchr>
 800cf24:	9a04      	ldr	r2, [sp, #16]
 800cf26:	b9d8      	cbnz	r0, 800cf60 <_vfiprintf_r+0x110>
 800cf28:	06d1      	lsls	r1, r2, #27
 800cf2a:	bf44      	itt	mi
 800cf2c:	2320      	movmi	r3, #32
 800cf2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf32:	0713      	lsls	r3, r2, #28
 800cf34:	bf44      	itt	mi
 800cf36:	232b      	movmi	r3, #43	; 0x2b
 800cf38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf3c:	f89a 3000 	ldrb.w	r3, [sl]
 800cf40:	2b2a      	cmp	r3, #42	; 0x2a
 800cf42:	d015      	beq.n	800cf70 <_vfiprintf_r+0x120>
 800cf44:	9a07      	ldr	r2, [sp, #28]
 800cf46:	4654      	mov	r4, sl
 800cf48:	2000      	movs	r0, #0
 800cf4a:	f04f 0c0a 	mov.w	ip, #10
 800cf4e:	4621      	mov	r1, r4
 800cf50:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf54:	3b30      	subs	r3, #48	; 0x30
 800cf56:	2b09      	cmp	r3, #9
 800cf58:	d94d      	bls.n	800cff6 <_vfiprintf_r+0x1a6>
 800cf5a:	b1b0      	cbz	r0, 800cf8a <_vfiprintf_r+0x13a>
 800cf5c:	9207      	str	r2, [sp, #28]
 800cf5e:	e014      	b.n	800cf8a <_vfiprintf_r+0x13a>
 800cf60:	eba0 0308 	sub.w	r3, r0, r8
 800cf64:	fa09 f303 	lsl.w	r3, r9, r3
 800cf68:	4313      	orrs	r3, r2
 800cf6a:	9304      	str	r3, [sp, #16]
 800cf6c:	46a2      	mov	sl, r4
 800cf6e:	e7d2      	b.n	800cf16 <_vfiprintf_r+0xc6>
 800cf70:	9b03      	ldr	r3, [sp, #12]
 800cf72:	1d19      	adds	r1, r3, #4
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	9103      	str	r1, [sp, #12]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	bfbb      	ittet	lt
 800cf7c:	425b      	neglt	r3, r3
 800cf7e:	f042 0202 	orrlt.w	r2, r2, #2
 800cf82:	9307      	strge	r3, [sp, #28]
 800cf84:	9307      	strlt	r3, [sp, #28]
 800cf86:	bfb8      	it	lt
 800cf88:	9204      	strlt	r2, [sp, #16]
 800cf8a:	7823      	ldrb	r3, [r4, #0]
 800cf8c:	2b2e      	cmp	r3, #46	; 0x2e
 800cf8e:	d10c      	bne.n	800cfaa <_vfiprintf_r+0x15a>
 800cf90:	7863      	ldrb	r3, [r4, #1]
 800cf92:	2b2a      	cmp	r3, #42	; 0x2a
 800cf94:	d134      	bne.n	800d000 <_vfiprintf_r+0x1b0>
 800cf96:	9b03      	ldr	r3, [sp, #12]
 800cf98:	1d1a      	adds	r2, r3, #4
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	9203      	str	r2, [sp, #12]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	bfb8      	it	lt
 800cfa2:	f04f 33ff 	movlt.w	r3, #4294967295
 800cfa6:	3402      	adds	r4, #2
 800cfa8:	9305      	str	r3, [sp, #20]
 800cfaa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d080 <_vfiprintf_r+0x230>
 800cfae:	7821      	ldrb	r1, [r4, #0]
 800cfb0:	2203      	movs	r2, #3
 800cfb2:	4650      	mov	r0, sl
 800cfb4:	f7f3 f914 	bl	80001e0 <memchr>
 800cfb8:	b138      	cbz	r0, 800cfca <_vfiprintf_r+0x17a>
 800cfba:	9b04      	ldr	r3, [sp, #16]
 800cfbc:	eba0 000a 	sub.w	r0, r0, sl
 800cfc0:	2240      	movs	r2, #64	; 0x40
 800cfc2:	4082      	lsls	r2, r0
 800cfc4:	4313      	orrs	r3, r2
 800cfc6:	3401      	adds	r4, #1
 800cfc8:	9304      	str	r3, [sp, #16]
 800cfca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfce:	4829      	ldr	r0, [pc, #164]	; (800d074 <_vfiprintf_r+0x224>)
 800cfd0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cfd4:	2206      	movs	r2, #6
 800cfd6:	f7f3 f903 	bl	80001e0 <memchr>
 800cfda:	2800      	cmp	r0, #0
 800cfdc:	d03f      	beq.n	800d05e <_vfiprintf_r+0x20e>
 800cfde:	4b26      	ldr	r3, [pc, #152]	; (800d078 <_vfiprintf_r+0x228>)
 800cfe0:	bb1b      	cbnz	r3, 800d02a <_vfiprintf_r+0x1da>
 800cfe2:	9b03      	ldr	r3, [sp, #12]
 800cfe4:	3307      	adds	r3, #7
 800cfe6:	f023 0307 	bic.w	r3, r3, #7
 800cfea:	3308      	adds	r3, #8
 800cfec:	9303      	str	r3, [sp, #12]
 800cfee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cff0:	443b      	add	r3, r7
 800cff2:	9309      	str	r3, [sp, #36]	; 0x24
 800cff4:	e768      	b.n	800cec8 <_vfiprintf_r+0x78>
 800cff6:	fb0c 3202 	mla	r2, ip, r2, r3
 800cffa:	460c      	mov	r4, r1
 800cffc:	2001      	movs	r0, #1
 800cffe:	e7a6      	b.n	800cf4e <_vfiprintf_r+0xfe>
 800d000:	2300      	movs	r3, #0
 800d002:	3401      	adds	r4, #1
 800d004:	9305      	str	r3, [sp, #20]
 800d006:	4619      	mov	r1, r3
 800d008:	f04f 0c0a 	mov.w	ip, #10
 800d00c:	4620      	mov	r0, r4
 800d00e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d012:	3a30      	subs	r2, #48	; 0x30
 800d014:	2a09      	cmp	r2, #9
 800d016:	d903      	bls.n	800d020 <_vfiprintf_r+0x1d0>
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d0c6      	beq.n	800cfaa <_vfiprintf_r+0x15a>
 800d01c:	9105      	str	r1, [sp, #20]
 800d01e:	e7c4      	b.n	800cfaa <_vfiprintf_r+0x15a>
 800d020:	fb0c 2101 	mla	r1, ip, r1, r2
 800d024:	4604      	mov	r4, r0
 800d026:	2301      	movs	r3, #1
 800d028:	e7f0      	b.n	800d00c <_vfiprintf_r+0x1bc>
 800d02a:	ab03      	add	r3, sp, #12
 800d02c:	9300      	str	r3, [sp, #0]
 800d02e:	462a      	mov	r2, r5
 800d030:	4b12      	ldr	r3, [pc, #72]	; (800d07c <_vfiprintf_r+0x22c>)
 800d032:	a904      	add	r1, sp, #16
 800d034:	4630      	mov	r0, r6
 800d036:	f7fd fd39 	bl	800aaac <_printf_float>
 800d03a:	4607      	mov	r7, r0
 800d03c:	1c78      	adds	r0, r7, #1
 800d03e:	d1d6      	bne.n	800cfee <_vfiprintf_r+0x19e>
 800d040:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d042:	07d9      	lsls	r1, r3, #31
 800d044:	d405      	bmi.n	800d052 <_vfiprintf_r+0x202>
 800d046:	89ab      	ldrh	r3, [r5, #12]
 800d048:	059a      	lsls	r2, r3, #22
 800d04a:	d402      	bmi.n	800d052 <_vfiprintf_r+0x202>
 800d04c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d04e:	f7fe fbcf 	bl	800b7f0 <__retarget_lock_release_recursive>
 800d052:	89ab      	ldrh	r3, [r5, #12]
 800d054:	065b      	lsls	r3, r3, #25
 800d056:	f53f af1d 	bmi.w	800ce94 <_vfiprintf_r+0x44>
 800d05a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d05c:	e71c      	b.n	800ce98 <_vfiprintf_r+0x48>
 800d05e:	ab03      	add	r3, sp, #12
 800d060:	9300      	str	r3, [sp, #0]
 800d062:	462a      	mov	r2, r5
 800d064:	4b05      	ldr	r3, [pc, #20]	; (800d07c <_vfiprintf_r+0x22c>)
 800d066:	a904      	add	r1, sp, #16
 800d068:	4630      	mov	r0, r6
 800d06a:	f7fd ffc3 	bl	800aff4 <_printf_i>
 800d06e:	e7e4      	b.n	800d03a <_vfiprintf_r+0x1ea>
 800d070:	0800d80c 	.word	0x0800d80c
 800d074:	0800d816 	.word	0x0800d816
 800d078:	0800aaad 	.word	0x0800aaad
 800d07c:	0800ce2b 	.word	0x0800ce2b
 800d080:	0800d812 	.word	0x0800d812

0800d084 <__sflush_r>:
 800d084:	898a      	ldrh	r2, [r1, #12]
 800d086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d08a:	4605      	mov	r5, r0
 800d08c:	0710      	lsls	r0, r2, #28
 800d08e:	460c      	mov	r4, r1
 800d090:	d458      	bmi.n	800d144 <__sflush_r+0xc0>
 800d092:	684b      	ldr	r3, [r1, #4]
 800d094:	2b00      	cmp	r3, #0
 800d096:	dc05      	bgt.n	800d0a4 <__sflush_r+0x20>
 800d098:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	dc02      	bgt.n	800d0a4 <__sflush_r+0x20>
 800d09e:	2000      	movs	r0, #0
 800d0a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d0a6:	2e00      	cmp	r6, #0
 800d0a8:	d0f9      	beq.n	800d09e <__sflush_r+0x1a>
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d0b0:	682f      	ldr	r7, [r5, #0]
 800d0b2:	6a21      	ldr	r1, [r4, #32]
 800d0b4:	602b      	str	r3, [r5, #0]
 800d0b6:	d032      	beq.n	800d11e <__sflush_r+0x9a>
 800d0b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d0ba:	89a3      	ldrh	r3, [r4, #12]
 800d0bc:	075a      	lsls	r2, r3, #29
 800d0be:	d505      	bpl.n	800d0cc <__sflush_r+0x48>
 800d0c0:	6863      	ldr	r3, [r4, #4]
 800d0c2:	1ac0      	subs	r0, r0, r3
 800d0c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d0c6:	b10b      	cbz	r3, 800d0cc <__sflush_r+0x48>
 800d0c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d0ca:	1ac0      	subs	r0, r0, r3
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	4602      	mov	r2, r0
 800d0d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d0d2:	6a21      	ldr	r1, [r4, #32]
 800d0d4:	4628      	mov	r0, r5
 800d0d6:	47b0      	blx	r6
 800d0d8:	1c43      	adds	r3, r0, #1
 800d0da:	89a3      	ldrh	r3, [r4, #12]
 800d0dc:	d106      	bne.n	800d0ec <__sflush_r+0x68>
 800d0de:	6829      	ldr	r1, [r5, #0]
 800d0e0:	291d      	cmp	r1, #29
 800d0e2:	d82b      	bhi.n	800d13c <__sflush_r+0xb8>
 800d0e4:	4a29      	ldr	r2, [pc, #164]	; (800d18c <__sflush_r+0x108>)
 800d0e6:	410a      	asrs	r2, r1
 800d0e8:	07d6      	lsls	r6, r2, #31
 800d0ea:	d427      	bmi.n	800d13c <__sflush_r+0xb8>
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	6062      	str	r2, [r4, #4]
 800d0f0:	04d9      	lsls	r1, r3, #19
 800d0f2:	6922      	ldr	r2, [r4, #16]
 800d0f4:	6022      	str	r2, [r4, #0]
 800d0f6:	d504      	bpl.n	800d102 <__sflush_r+0x7e>
 800d0f8:	1c42      	adds	r2, r0, #1
 800d0fa:	d101      	bne.n	800d100 <__sflush_r+0x7c>
 800d0fc:	682b      	ldr	r3, [r5, #0]
 800d0fe:	b903      	cbnz	r3, 800d102 <__sflush_r+0x7e>
 800d100:	6560      	str	r0, [r4, #84]	; 0x54
 800d102:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d104:	602f      	str	r7, [r5, #0]
 800d106:	2900      	cmp	r1, #0
 800d108:	d0c9      	beq.n	800d09e <__sflush_r+0x1a>
 800d10a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d10e:	4299      	cmp	r1, r3
 800d110:	d002      	beq.n	800d118 <__sflush_r+0x94>
 800d112:	4628      	mov	r0, r5
 800d114:	f7ff f9f6 	bl	800c504 <_free_r>
 800d118:	2000      	movs	r0, #0
 800d11a:	6360      	str	r0, [r4, #52]	; 0x34
 800d11c:	e7c0      	b.n	800d0a0 <__sflush_r+0x1c>
 800d11e:	2301      	movs	r3, #1
 800d120:	4628      	mov	r0, r5
 800d122:	47b0      	blx	r6
 800d124:	1c41      	adds	r1, r0, #1
 800d126:	d1c8      	bne.n	800d0ba <__sflush_r+0x36>
 800d128:	682b      	ldr	r3, [r5, #0]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d0c5      	beq.n	800d0ba <__sflush_r+0x36>
 800d12e:	2b1d      	cmp	r3, #29
 800d130:	d001      	beq.n	800d136 <__sflush_r+0xb2>
 800d132:	2b16      	cmp	r3, #22
 800d134:	d101      	bne.n	800d13a <__sflush_r+0xb6>
 800d136:	602f      	str	r7, [r5, #0]
 800d138:	e7b1      	b.n	800d09e <__sflush_r+0x1a>
 800d13a:	89a3      	ldrh	r3, [r4, #12]
 800d13c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d140:	81a3      	strh	r3, [r4, #12]
 800d142:	e7ad      	b.n	800d0a0 <__sflush_r+0x1c>
 800d144:	690f      	ldr	r7, [r1, #16]
 800d146:	2f00      	cmp	r7, #0
 800d148:	d0a9      	beq.n	800d09e <__sflush_r+0x1a>
 800d14a:	0793      	lsls	r3, r2, #30
 800d14c:	680e      	ldr	r6, [r1, #0]
 800d14e:	bf08      	it	eq
 800d150:	694b      	ldreq	r3, [r1, #20]
 800d152:	600f      	str	r7, [r1, #0]
 800d154:	bf18      	it	ne
 800d156:	2300      	movne	r3, #0
 800d158:	eba6 0807 	sub.w	r8, r6, r7
 800d15c:	608b      	str	r3, [r1, #8]
 800d15e:	f1b8 0f00 	cmp.w	r8, #0
 800d162:	dd9c      	ble.n	800d09e <__sflush_r+0x1a>
 800d164:	6a21      	ldr	r1, [r4, #32]
 800d166:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d168:	4643      	mov	r3, r8
 800d16a:	463a      	mov	r2, r7
 800d16c:	4628      	mov	r0, r5
 800d16e:	47b0      	blx	r6
 800d170:	2800      	cmp	r0, #0
 800d172:	dc06      	bgt.n	800d182 <__sflush_r+0xfe>
 800d174:	89a3      	ldrh	r3, [r4, #12]
 800d176:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d17a:	81a3      	strh	r3, [r4, #12]
 800d17c:	f04f 30ff 	mov.w	r0, #4294967295
 800d180:	e78e      	b.n	800d0a0 <__sflush_r+0x1c>
 800d182:	4407      	add	r7, r0
 800d184:	eba8 0800 	sub.w	r8, r8, r0
 800d188:	e7e9      	b.n	800d15e <__sflush_r+0xda>
 800d18a:	bf00      	nop
 800d18c:	dfbffffe 	.word	0xdfbffffe

0800d190 <_fflush_r>:
 800d190:	b538      	push	{r3, r4, r5, lr}
 800d192:	690b      	ldr	r3, [r1, #16]
 800d194:	4605      	mov	r5, r0
 800d196:	460c      	mov	r4, r1
 800d198:	b913      	cbnz	r3, 800d1a0 <_fflush_r+0x10>
 800d19a:	2500      	movs	r5, #0
 800d19c:	4628      	mov	r0, r5
 800d19e:	bd38      	pop	{r3, r4, r5, pc}
 800d1a0:	b118      	cbz	r0, 800d1aa <_fflush_r+0x1a>
 800d1a2:	6a03      	ldr	r3, [r0, #32]
 800d1a4:	b90b      	cbnz	r3, 800d1aa <_fflush_r+0x1a>
 800d1a6:	f7fe f8d3 	bl	800b350 <__sinit>
 800d1aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d0f3      	beq.n	800d19a <_fflush_r+0xa>
 800d1b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d1b4:	07d0      	lsls	r0, r2, #31
 800d1b6:	d404      	bmi.n	800d1c2 <_fflush_r+0x32>
 800d1b8:	0599      	lsls	r1, r3, #22
 800d1ba:	d402      	bmi.n	800d1c2 <_fflush_r+0x32>
 800d1bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d1be:	f7fe fb16 	bl	800b7ee <__retarget_lock_acquire_recursive>
 800d1c2:	4628      	mov	r0, r5
 800d1c4:	4621      	mov	r1, r4
 800d1c6:	f7ff ff5d 	bl	800d084 <__sflush_r>
 800d1ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d1cc:	07da      	lsls	r2, r3, #31
 800d1ce:	4605      	mov	r5, r0
 800d1d0:	d4e4      	bmi.n	800d19c <_fflush_r+0xc>
 800d1d2:	89a3      	ldrh	r3, [r4, #12]
 800d1d4:	059b      	lsls	r3, r3, #22
 800d1d6:	d4e1      	bmi.n	800d19c <_fflush_r+0xc>
 800d1d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d1da:	f7fe fb09 	bl	800b7f0 <__retarget_lock_release_recursive>
 800d1de:	e7dd      	b.n	800d19c <_fflush_r+0xc>

0800d1e0 <__swhatbuf_r>:
 800d1e0:	b570      	push	{r4, r5, r6, lr}
 800d1e2:	460c      	mov	r4, r1
 800d1e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1e8:	2900      	cmp	r1, #0
 800d1ea:	b096      	sub	sp, #88	; 0x58
 800d1ec:	4615      	mov	r5, r2
 800d1ee:	461e      	mov	r6, r3
 800d1f0:	da0d      	bge.n	800d20e <__swhatbuf_r+0x2e>
 800d1f2:	89a3      	ldrh	r3, [r4, #12]
 800d1f4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d1f8:	f04f 0100 	mov.w	r1, #0
 800d1fc:	bf0c      	ite	eq
 800d1fe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d202:	2340      	movne	r3, #64	; 0x40
 800d204:	2000      	movs	r0, #0
 800d206:	6031      	str	r1, [r6, #0]
 800d208:	602b      	str	r3, [r5, #0]
 800d20a:	b016      	add	sp, #88	; 0x58
 800d20c:	bd70      	pop	{r4, r5, r6, pc}
 800d20e:	466a      	mov	r2, sp
 800d210:	f000 f848 	bl	800d2a4 <_fstat_r>
 800d214:	2800      	cmp	r0, #0
 800d216:	dbec      	blt.n	800d1f2 <__swhatbuf_r+0x12>
 800d218:	9901      	ldr	r1, [sp, #4]
 800d21a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d21e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d222:	4259      	negs	r1, r3
 800d224:	4159      	adcs	r1, r3
 800d226:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d22a:	e7eb      	b.n	800d204 <__swhatbuf_r+0x24>

0800d22c <__smakebuf_r>:
 800d22c:	898b      	ldrh	r3, [r1, #12]
 800d22e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d230:	079d      	lsls	r5, r3, #30
 800d232:	4606      	mov	r6, r0
 800d234:	460c      	mov	r4, r1
 800d236:	d507      	bpl.n	800d248 <__smakebuf_r+0x1c>
 800d238:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d23c:	6023      	str	r3, [r4, #0]
 800d23e:	6123      	str	r3, [r4, #16]
 800d240:	2301      	movs	r3, #1
 800d242:	6163      	str	r3, [r4, #20]
 800d244:	b002      	add	sp, #8
 800d246:	bd70      	pop	{r4, r5, r6, pc}
 800d248:	ab01      	add	r3, sp, #4
 800d24a:	466a      	mov	r2, sp
 800d24c:	f7ff ffc8 	bl	800d1e0 <__swhatbuf_r>
 800d250:	9900      	ldr	r1, [sp, #0]
 800d252:	4605      	mov	r5, r0
 800d254:	4630      	mov	r0, r6
 800d256:	f7ff f9c9 	bl	800c5ec <_malloc_r>
 800d25a:	b948      	cbnz	r0, 800d270 <__smakebuf_r+0x44>
 800d25c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d260:	059a      	lsls	r2, r3, #22
 800d262:	d4ef      	bmi.n	800d244 <__smakebuf_r+0x18>
 800d264:	f023 0303 	bic.w	r3, r3, #3
 800d268:	f043 0302 	orr.w	r3, r3, #2
 800d26c:	81a3      	strh	r3, [r4, #12]
 800d26e:	e7e3      	b.n	800d238 <__smakebuf_r+0xc>
 800d270:	89a3      	ldrh	r3, [r4, #12]
 800d272:	6020      	str	r0, [r4, #0]
 800d274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d278:	81a3      	strh	r3, [r4, #12]
 800d27a:	9b00      	ldr	r3, [sp, #0]
 800d27c:	6163      	str	r3, [r4, #20]
 800d27e:	9b01      	ldr	r3, [sp, #4]
 800d280:	6120      	str	r0, [r4, #16]
 800d282:	b15b      	cbz	r3, 800d29c <__smakebuf_r+0x70>
 800d284:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d288:	4630      	mov	r0, r6
 800d28a:	f000 f81d 	bl	800d2c8 <_isatty_r>
 800d28e:	b128      	cbz	r0, 800d29c <__smakebuf_r+0x70>
 800d290:	89a3      	ldrh	r3, [r4, #12]
 800d292:	f023 0303 	bic.w	r3, r3, #3
 800d296:	f043 0301 	orr.w	r3, r3, #1
 800d29a:	81a3      	strh	r3, [r4, #12]
 800d29c:	89a3      	ldrh	r3, [r4, #12]
 800d29e:	431d      	orrs	r5, r3
 800d2a0:	81a5      	strh	r5, [r4, #12]
 800d2a2:	e7cf      	b.n	800d244 <__smakebuf_r+0x18>

0800d2a4 <_fstat_r>:
 800d2a4:	b538      	push	{r3, r4, r5, lr}
 800d2a6:	4d07      	ldr	r5, [pc, #28]	; (800d2c4 <_fstat_r+0x20>)
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	4604      	mov	r4, r0
 800d2ac:	4608      	mov	r0, r1
 800d2ae:	4611      	mov	r1, r2
 800d2b0:	602b      	str	r3, [r5, #0]
 800d2b2:	f7f5 fa1a 	bl	80026ea <_fstat>
 800d2b6:	1c43      	adds	r3, r0, #1
 800d2b8:	d102      	bne.n	800d2c0 <_fstat_r+0x1c>
 800d2ba:	682b      	ldr	r3, [r5, #0]
 800d2bc:	b103      	cbz	r3, 800d2c0 <_fstat_r+0x1c>
 800d2be:	6023      	str	r3, [r4, #0]
 800d2c0:	bd38      	pop	{r3, r4, r5, pc}
 800d2c2:	bf00      	nop
 800d2c4:	200051dc 	.word	0x200051dc

0800d2c8 <_isatty_r>:
 800d2c8:	b538      	push	{r3, r4, r5, lr}
 800d2ca:	4d06      	ldr	r5, [pc, #24]	; (800d2e4 <_isatty_r+0x1c>)
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	4604      	mov	r4, r0
 800d2d0:	4608      	mov	r0, r1
 800d2d2:	602b      	str	r3, [r5, #0]
 800d2d4:	f7f5 fa19 	bl	800270a <_isatty>
 800d2d8:	1c43      	adds	r3, r0, #1
 800d2da:	d102      	bne.n	800d2e2 <_isatty_r+0x1a>
 800d2dc:	682b      	ldr	r3, [r5, #0]
 800d2de:	b103      	cbz	r3, 800d2e2 <_isatty_r+0x1a>
 800d2e0:	6023      	str	r3, [r4, #0]
 800d2e2:	bd38      	pop	{r3, r4, r5, pc}
 800d2e4:	200051dc 	.word	0x200051dc

0800d2e8 <_sbrk_r>:
 800d2e8:	b538      	push	{r3, r4, r5, lr}
 800d2ea:	4d06      	ldr	r5, [pc, #24]	; (800d304 <_sbrk_r+0x1c>)
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	4604      	mov	r4, r0
 800d2f0:	4608      	mov	r0, r1
 800d2f2:	602b      	str	r3, [r5, #0]
 800d2f4:	f7f5 fa22 	bl	800273c <_sbrk>
 800d2f8:	1c43      	adds	r3, r0, #1
 800d2fa:	d102      	bne.n	800d302 <_sbrk_r+0x1a>
 800d2fc:	682b      	ldr	r3, [r5, #0]
 800d2fe:	b103      	cbz	r3, 800d302 <_sbrk_r+0x1a>
 800d300:	6023      	str	r3, [r4, #0]
 800d302:	bd38      	pop	{r3, r4, r5, pc}
 800d304:	200051dc 	.word	0x200051dc

0800d308 <__assert_func>:
 800d308:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d30a:	4614      	mov	r4, r2
 800d30c:	461a      	mov	r2, r3
 800d30e:	4b09      	ldr	r3, [pc, #36]	; (800d334 <__assert_func+0x2c>)
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	4605      	mov	r5, r0
 800d314:	68d8      	ldr	r0, [r3, #12]
 800d316:	b14c      	cbz	r4, 800d32c <__assert_func+0x24>
 800d318:	4b07      	ldr	r3, [pc, #28]	; (800d338 <__assert_func+0x30>)
 800d31a:	9100      	str	r1, [sp, #0]
 800d31c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d320:	4906      	ldr	r1, [pc, #24]	; (800d33c <__assert_func+0x34>)
 800d322:	462b      	mov	r3, r5
 800d324:	f000 f844 	bl	800d3b0 <fiprintf>
 800d328:	f000 f854 	bl	800d3d4 <abort>
 800d32c:	4b04      	ldr	r3, [pc, #16]	; (800d340 <__assert_func+0x38>)
 800d32e:	461c      	mov	r4, r3
 800d330:	e7f3      	b.n	800d31a <__assert_func+0x12>
 800d332:	bf00      	nop
 800d334:	20000068 	.word	0x20000068
 800d338:	0800d827 	.word	0x0800d827
 800d33c:	0800d834 	.word	0x0800d834
 800d340:	0800d862 	.word	0x0800d862

0800d344 <_calloc_r>:
 800d344:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d346:	fba1 2402 	umull	r2, r4, r1, r2
 800d34a:	b94c      	cbnz	r4, 800d360 <_calloc_r+0x1c>
 800d34c:	4611      	mov	r1, r2
 800d34e:	9201      	str	r2, [sp, #4]
 800d350:	f7ff f94c 	bl	800c5ec <_malloc_r>
 800d354:	9a01      	ldr	r2, [sp, #4]
 800d356:	4605      	mov	r5, r0
 800d358:	b930      	cbnz	r0, 800d368 <_calloc_r+0x24>
 800d35a:	4628      	mov	r0, r5
 800d35c:	b003      	add	sp, #12
 800d35e:	bd30      	pop	{r4, r5, pc}
 800d360:	220c      	movs	r2, #12
 800d362:	6002      	str	r2, [r0, #0]
 800d364:	2500      	movs	r5, #0
 800d366:	e7f8      	b.n	800d35a <_calloc_r+0x16>
 800d368:	4621      	mov	r1, r4
 800d36a:	f7fe f96d 	bl	800b648 <memset>
 800d36e:	e7f4      	b.n	800d35a <_calloc_r+0x16>

0800d370 <__ascii_mbtowc>:
 800d370:	b082      	sub	sp, #8
 800d372:	b901      	cbnz	r1, 800d376 <__ascii_mbtowc+0x6>
 800d374:	a901      	add	r1, sp, #4
 800d376:	b142      	cbz	r2, 800d38a <__ascii_mbtowc+0x1a>
 800d378:	b14b      	cbz	r3, 800d38e <__ascii_mbtowc+0x1e>
 800d37a:	7813      	ldrb	r3, [r2, #0]
 800d37c:	600b      	str	r3, [r1, #0]
 800d37e:	7812      	ldrb	r2, [r2, #0]
 800d380:	1e10      	subs	r0, r2, #0
 800d382:	bf18      	it	ne
 800d384:	2001      	movne	r0, #1
 800d386:	b002      	add	sp, #8
 800d388:	4770      	bx	lr
 800d38a:	4610      	mov	r0, r2
 800d38c:	e7fb      	b.n	800d386 <__ascii_mbtowc+0x16>
 800d38e:	f06f 0001 	mvn.w	r0, #1
 800d392:	e7f8      	b.n	800d386 <__ascii_mbtowc+0x16>

0800d394 <__ascii_wctomb>:
 800d394:	b149      	cbz	r1, 800d3aa <__ascii_wctomb+0x16>
 800d396:	2aff      	cmp	r2, #255	; 0xff
 800d398:	bf85      	ittet	hi
 800d39a:	238a      	movhi	r3, #138	; 0x8a
 800d39c:	6003      	strhi	r3, [r0, #0]
 800d39e:	700a      	strbls	r2, [r1, #0]
 800d3a0:	f04f 30ff 	movhi.w	r0, #4294967295
 800d3a4:	bf98      	it	ls
 800d3a6:	2001      	movls	r0, #1
 800d3a8:	4770      	bx	lr
 800d3aa:	4608      	mov	r0, r1
 800d3ac:	4770      	bx	lr
	...

0800d3b0 <fiprintf>:
 800d3b0:	b40e      	push	{r1, r2, r3}
 800d3b2:	b503      	push	{r0, r1, lr}
 800d3b4:	4601      	mov	r1, r0
 800d3b6:	ab03      	add	r3, sp, #12
 800d3b8:	4805      	ldr	r0, [pc, #20]	; (800d3d0 <fiprintf+0x20>)
 800d3ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3be:	6800      	ldr	r0, [r0, #0]
 800d3c0:	9301      	str	r3, [sp, #4]
 800d3c2:	f7ff fd45 	bl	800ce50 <_vfiprintf_r>
 800d3c6:	b002      	add	sp, #8
 800d3c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d3cc:	b003      	add	sp, #12
 800d3ce:	4770      	bx	lr
 800d3d0:	20000068 	.word	0x20000068

0800d3d4 <abort>:
 800d3d4:	b508      	push	{r3, lr}
 800d3d6:	2006      	movs	r0, #6
 800d3d8:	f000 f82c 	bl	800d434 <raise>
 800d3dc:	2001      	movs	r0, #1
 800d3de:	f7f5 f935 	bl	800264c <_exit>

0800d3e2 <_raise_r>:
 800d3e2:	291f      	cmp	r1, #31
 800d3e4:	b538      	push	{r3, r4, r5, lr}
 800d3e6:	4604      	mov	r4, r0
 800d3e8:	460d      	mov	r5, r1
 800d3ea:	d904      	bls.n	800d3f6 <_raise_r+0x14>
 800d3ec:	2316      	movs	r3, #22
 800d3ee:	6003      	str	r3, [r0, #0]
 800d3f0:	f04f 30ff 	mov.w	r0, #4294967295
 800d3f4:	bd38      	pop	{r3, r4, r5, pc}
 800d3f6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d3f8:	b112      	cbz	r2, 800d400 <_raise_r+0x1e>
 800d3fa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d3fe:	b94b      	cbnz	r3, 800d414 <_raise_r+0x32>
 800d400:	4620      	mov	r0, r4
 800d402:	f000 f831 	bl	800d468 <_getpid_r>
 800d406:	462a      	mov	r2, r5
 800d408:	4601      	mov	r1, r0
 800d40a:	4620      	mov	r0, r4
 800d40c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d410:	f000 b818 	b.w	800d444 <_kill_r>
 800d414:	2b01      	cmp	r3, #1
 800d416:	d00a      	beq.n	800d42e <_raise_r+0x4c>
 800d418:	1c59      	adds	r1, r3, #1
 800d41a:	d103      	bne.n	800d424 <_raise_r+0x42>
 800d41c:	2316      	movs	r3, #22
 800d41e:	6003      	str	r3, [r0, #0]
 800d420:	2001      	movs	r0, #1
 800d422:	e7e7      	b.n	800d3f4 <_raise_r+0x12>
 800d424:	2400      	movs	r4, #0
 800d426:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d42a:	4628      	mov	r0, r5
 800d42c:	4798      	blx	r3
 800d42e:	2000      	movs	r0, #0
 800d430:	e7e0      	b.n	800d3f4 <_raise_r+0x12>
	...

0800d434 <raise>:
 800d434:	4b02      	ldr	r3, [pc, #8]	; (800d440 <raise+0xc>)
 800d436:	4601      	mov	r1, r0
 800d438:	6818      	ldr	r0, [r3, #0]
 800d43a:	f7ff bfd2 	b.w	800d3e2 <_raise_r>
 800d43e:	bf00      	nop
 800d440:	20000068 	.word	0x20000068

0800d444 <_kill_r>:
 800d444:	b538      	push	{r3, r4, r5, lr}
 800d446:	4d07      	ldr	r5, [pc, #28]	; (800d464 <_kill_r+0x20>)
 800d448:	2300      	movs	r3, #0
 800d44a:	4604      	mov	r4, r0
 800d44c:	4608      	mov	r0, r1
 800d44e:	4611      	mov	r1, r2
 800d450:	602b      	str	r3, [r5, #0]
 800d452:	f7f5 f8eb 	bl	800262c <_kill>
 800d456:	1c43      	adds	r3, r0, #1
 800d458:	d102      	bne.n	800d460 <_kill_r+0x1c>
 800d45a:	682b      	ldr	r3, [r5, #0]
 800d45c:	b103      	cbz	r3, 800d460 <_kill_r+0x1c>
 800d45e:	6023      	str	r3, [r4, #0]
 800d460:	bd38      	pop	{r3, r4, r5, pc}
 800d462:	bf00      	nop
 800d464:	200051dc 	.word	0x200051dc

0800d468 <_getpid_r>:
 800d468:	f7f5 b8d8 	b.w	800261c <_getpid>

0800d46c <_init>:
 800d46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d46e:	bf00      	nop
 800d470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d472:	bc08      	pop	{r3}
 800d474:	469e      	mov	lr, r3
 800d476:	4770      	bx	lr

0800d478 <_fini>:
 800d478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d47a:	bf00      	nop
 800d47c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d47e:	bc08      	pop	{r3}
 800d480:	469e      	mov	lr, r3
 800d482:	4770      	bx	lr
